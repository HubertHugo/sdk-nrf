
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	f8 a1 05 20 6d 40 00 00 f1 b7 00 00 41 40 00 00     ... m@......A@..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	41 40 00 00 41 40 00 00 41 40 00 00 41 40 00 00     A@..A@..A@..A@..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	11 3d 00 00 41 40 00 00 00 00 00 00 b9 3c 00 00     .=..A@.......<..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	41 40 00 00                                         A@..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
			switch (*fmt) {
  c0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
  d0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
  e0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
  f0:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
 100:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
 110:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
				align = VA_STACK_ALIGN(void *);
 120:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
			switch (*fmt) {
 130:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
 140:	91 3d 00 00 91 3d 00 00 91 3d 00 00 91 3d 00 00     .=...=...=...=..
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	91 3d 00 00                                         .=..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x66>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5e>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x62>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x56>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5a>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x78>
     326:	b916      	cbnz	r6, 32e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x72>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x6c>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xa2>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x86>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x98>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x9c>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x92>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x136>
     3ec:	d106      	bne.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>

00000424 <main>:
    __ASSERT(0, "Bootloader serial process was terminated unexpectedly.\n");
}
#endif

int main(void)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     426:	4b42      	ldr	r3, [pc, #264]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     428:	4a42      	ldr	r2, [pc, #264]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     42a:	b085      	sub	sp, #20
     42c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     430:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     434:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     438:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     43c:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     440:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     444:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     448:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     44c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     450:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     454:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     458:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     45c:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     460:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     464:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     468:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     46c:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     470:	f000 f874 	bl	55c <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     474:	4c30      	ldr	r4, [pc, #192]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     476:	4620      	mov	r0, r4
     478:	f00d feb1 	bl	e1de <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     47c:	b300      	cbz	r0, 4c0 <FIH_LABEL_FIH_CALL_START_605>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     47e:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     480:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     482:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     484:	210d      	movs	r1, #13
		data->invert |= (gpio_port_pins_t)BIT(pin);
     486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     48a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     48c:	4620      	mov	r0, r4
     48e:	6833      	ldr	r3, [r6, #0]
     490:	4a2a      	ldr	r2, [pc, #168]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     492:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     494:	4620      	mov	r0, r4
     496:	6873      	ldr	r3, [r6, #4]
     498:	a901      	add	r1, sp, #4
     49a:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     49c:	b920      	cbnz	r0, 4a8 <main+0x84>
		*value ^= data->invert;
     49e:	682a      	ldr	r2, [r5, #0]
     4a0:	9b01      	ldr	r3, [sp, #4]
     4a2:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_BOOT_SERIAL_ENTRANCE_GPIO
    if (detect_pin() &&
     4a4:	049a      	lsls	r2, r3, #18
     4a6:	d50b      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_605>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE uint32_t nrf_reset_resetreas_get(NRF_RESET_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4b0:	b10b      	cbz	r3, 4b6 <main+0x92>
     4b2:	07db      	lsls	r3, r3, #31
     4b4:	d504      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_605>
    rc = boot_console_init();
     4b6:	f002 feeb 	bl	3290 <boot_console_init>
    boot_serial_start(&boot_funcs);
     4ba:	4821      	ldr	r0, [pc, #132]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4bc:	f003 fade 	bl	3a7c <boot_serial_start>

000004c0 <FIH_LABEL_FIH_CALL_START_605>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4c0:	a801      	add	r0, sp, #4
     4c2:	f000 fea1 	bl	1208 <boot_go>

000004c6 <FIH_LABEL_FIH_CALL_END_617>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     4c6:	4b1f      	ldr	r3, [pc, #124]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	4283      	cmp	r3, r0
     4cc:	d000      	beq.n	4d0 <FIH_LABEL_FIH_CALL_END_617+0xa>
         * recovery mode
         */
        boot_serial_enter();
#endif

        FIH_PANIC;
     4ce:	e7fe      	b.n	4ce <FIH_LABEL_FIH_CALL_END_617+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4d4:	2000      	movs	r0, #0
     4d6:	f005 ff9d 	bl	6414 <fprotect_area>

    if (rc != 0) {
     4da:	4604      	mov	r4, r0
     4dc:	b100      	cbz	r0, 4e0 <FIH_LABEL_FIH_CALL_END_617+0x1a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     4de:	e7fe      	b.n	4de <FIH_LABEL_FIH_CALL_END_617+0x18>
            ;
    }

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     4e0:	f006 f840 	bl	6564 <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4e4:	4669      	mov	r1, sp
     4e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4ea:	f00a f87d 	bl	a5e8 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4ee:	9b00      	ldr	r3, [sp, #0]
     4f0:	9d03      	ldr	r5, [sp, #12]
     4f2:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4f4:	9b01      	ldr	r3, [sp, #4]
     4f6:	891e      	ldrh	r6, [r3, #8]
        sys_clock_disable();
     4f8:	f005 ff74 	bl	63e4 <sys_clock_disable>
                                     rsp->br_image_off +
     4fc:	19af      	adds	r7, r5, r6
    usb_disable();
     4fe:	f001 fee5 	bl	22cc <usb_disable>
    nrf_cleanup_peripheral();
     502:	f000 fead 	bl	1260 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     506:	f000 fe8f 	bl	1228 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     50a:	f003 fdf1 	bl	40f0 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     50e:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     512:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     516:	59ab      	ldr	r3, [r5, r6]
     518:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     51c:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     520:	f3bf 8f6f 	isb	sy
     524:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     528:	687b      	ldr	r3, [r7, #4]
     52a:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     52c:	e7fe      	b.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     52e:	bf00      	nop
     530:	6e524635 	.word	0x6e524635
     534:	50018000 	.word	0x50018000
     538:	0000e9b8 	.word	0x0000e9b8
     53c:	00010011 	.word	0x00010011
     540:	0000ed98 	.word	0x0000ed98
     544:	20002770 	.word	0x20002770

00000548 <flash_area_id_from_direct_image>:
}

#if defined(CONFIG_MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD)
int flash_area_id_from_direct_image(int image_id)
{
    switch (image_id) {
     548:	2804      	cmp	r0, #4
     54a:	bf9a      	itte	ls
     54c:	4b02      	ldrls	r3, [pc, #8]	; (558 <flash_area_id_from_direct_image+0x10>)
     54e:	5618      	ldrsbls	r0, [r3, r0]
{
     550:	f06f 0015 	mvnhi.w	r0, #21
    case 4:
        return FIXED_PARTITION_ID(slot3_partition);
#endif
    }
    return -EINVAL;
}
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	0000f342 	.word	0x0000f342

0000055c <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     55c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     560:	4801      	ldr	r0, [pc, #4]	; (568 <os_heap_init+0xc>)
     562:	f006 ba9b 	b.w	6a9c <mbedtls_memory_buffer_alloc_init>
     566:	bf00      	nop
     568:	2001464e 	.word	0x2001464e

0000056c <bs_peruser_system_specific>:
#endif
#endif /*MCUBOOT_MGMT_CUSTOM_IMG_LIST*/

int bs_peruser_system_specific(const struct nmgr_hdr *hdr, const char *buffer,
                               int len, zcbor_state_t *cs)
{
     56c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     56e:	461c      	mov	r4, r3
    int mgmt_rc = MGMT_ERR_ENOTSUP;

    if (hdr->nh_group == ZEPHYR_MGMT_GRP_BASIC) {
     570:	8883      	ldrh	r3, [r0, #4]
     572:	4e1f      	ldr	r6, [pc, #124]	; (5f0 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x14>)
     574:	2b3f      	cmp	r3, #63	; 0x3f
     576:	d12e      	bne.n	5d6 <bs_peruser_system_specific+0x6a>
        if (hdr->nh_op == NMGR_OP_WRITE) {
     578:	7803      	ldrb	r3, [r0, #0]
     57a:	2b02      	cmp	r3, #2
     57c:	d12b      	bne.n	5d6 <bs_peruser_system_specific+0x6a>
#ifdef CONFIG_BOOT_MGMT_CUSTOM_STORAGE_ERASE
            if (hdr->nh_id == ZEPHYR_MGMT_GRP_BASIC_CMD_ERASE_STORAGE) {
     57e:	79c5      	ldrb	r5, [r0, #7]
     580:	bb4d      	cbnz	r5, 5d6 <bs_peruser_system_specific+0x6a>
    rc = flash_area_open(FIXED_PARTITION_ID(storage_partition), &fa);
     582:	2009      	movs	r0, #9
     584:	a901      	add	r1, sp, #4
     586:	f001 fb7d 	bl	1c84 <flash_area_open>
    if (rc < 0) {
     58a:	2800      	cmp	r0, #0
     58c:	db21      	blt.n	5d2 <bs_peruser_system_specific+0x66>
        rc = flash_area_erase(fa, 0, flash_area_get_size(fa));
     58e:	9801      	ldr	r0, [sp, #4]
     590:	4629      	mov	r1, r5
     592:	6882      	ldr	r2, [r0, #8]
     594:	f00a fee9 	bl	b36a <flash_area_erase>
     598:	4605      	mov	r5, r0
        flash_area_close(fa);
     59a:	9801      	ldr	r0, [sp, #4]
     59c:	f00a feba 	bl	b314 <flash_area_close>
    if (rc == 0) {
     5a0:	3d00      	subs	r5, #0
     5a2:	bf18      	it	ne
     5a4:	2501      	movne	r5, #1
    zcbor_map_start_encode(cs, 10);
     5a6:	210a      	movs	r1, #10
     5a8:	4620      	mov	r0, r4
     5aa:	f00d fe0b 	bl	e1c4 <zcbor_map_start_encode>

	return zcbor_bstr_encode(state, &zs);
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, const char *ptr, size_t len)
{
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
     5ae:	2302      	movs	r3, #2

	return zcbor_tstr_encode(state, &zs);
     5b0:	a902      	add	r1, sp, #8
     5b2:	4620      	mov	r0, r4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
     5b4:	9602      	str	r6, [sp, #8]
     5b6:	9303      	str	r3, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
     5b8:	f00d fdfd 	bl	e1b6 <zcbor_tstr_encode>
    zcbor_uint32_put(cs, rc);
     5bc:	4629      	mov	r1, r5
    }

    if (mgmt_rc == MGMT_ERR_ENOTSUP) {
        zcbor_map_start_encode(cs, 10);
        zcbor_tstr_put_lit(cs, "rc");
        zcbor_uint32_put(cs, mgmt_rc);
     5be:	4620      	mov	r0, r4
     5c0:	f00d fdec 	bl	e19c <zcbor_uint32_put>
        zcbor_map_end_encode(cs, 10);
     5c4:	210a      	movs	r1, #10
     5c6:	4620      	mov	r0, r4
     5c8:	f00d fe04 	bl	e1d4 <zcbor_map_end_encode>
    }

    return MGMT_ERR_OK;
}
     5cc:	2000      	movs	r0, #0
     5ce:	b004      	add	sp, #16
     5d0:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EUNKNOWN;
     5d2:	2501      	movs	r5, #1
     5d4:	e7e7      	b.n	5a6 <bs_peruser_system_specific+0x3a>
        zcbor_map_start_encode(cs, 10);
     5d6:	210a      	movs	r1, #10
     5d8:	4620      	mov	r0, r4
     5da:	f00d fdf3 	bl	e1c4 <zcbor_map_start_encode>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
     5de:	2302      	movs	r3, #2
	return zcbor_tstr_encode(state, &zs);
     5e0:	a902      	add	r1, sp, #8
     5e2:	4620      	mov	r0, r4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
     5e4:	9602      	str	r6, [sp, #8]
     5e6:	9303      	str	r3, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
     5e8:	f00d fde5 	bl	e1b6 <zcbor_tstr_encode>
        zcbor_uint32_put(cs, mgmt_rc);
     5ec:	2108      	movs	r1, #8
     5ee:	e7e6      	b.n	5be <bs_peruser_system_specific+0x52>
     5f0:	0000f347 	.word	0x0000f347

000005f4 <bootutil_img_validate>:
fih_ret
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     5f8:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 7bc <FIH_LABEL_FIH_CALL_END_795+0x12>
{
     5fc:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5fe:	a838      	add	r0, sp, #224	; 0xe0
     600:	e9dd 7884 	ldrd	r7, r8, [sp, #528]	; 0x210
     604:	4616      	mov	r6, r2
     606:	461c      	mov	r4, r3
     608:	f8dd b218 	ldr.w	fp, [sp, #536]	; 0x218
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     60c:	f8da 5000 	ldr.w	r5, [sl]
     610:	f00c ffe2 	bl	d5d8 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     614:	2100      	movs	r1, #0
     616:	a838      	add	r0, sp, #224	; 0xe0
     618:	f006 fb3e 	bl	6c98 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     61c:	b13f      	cbz	r7, 62e <bootutil_img_validate+0x3a>
     61e:	f1b8 0f00 	cmp.w	r8, #0
     622:	dd04      	ble.n	62e <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     624:	4642      	mov	r2, r8
     626:	4639      	mov	r1, r7
     628:	a838      	add	r0, sp, #224	; 0xe0
     62a:	f00c ffd9 	bl	d5e0 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     62e:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
     632:	8973      	ldrh	r3, [r6, #10]
    size = hdr_size = hdr->ih_hdr_size;
     634:	8937      	ldrh	r7, [r6, #8]
     636:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     638:	68f3      	ldr	r3, [r6, #12]
     63a:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     63c:	4547      	cmp	r7, r8
     63e:	d846      	bhi.n	6ce <FIH_LABEL_FIH_CALL_END_449+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     640:	a90d      	add	r1, sp, #52	; 0x34
     642:	a838      	add	r0, sp, #224	; 0xe0
     644:	f00d f810 	bl	d668 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     648:	f1bb 0f00 	cmp.w	fp, #0
     64c:	d004      	beq.n	658 <bootutil_img_validate+0x64>
        memcpy(out_hash, hash, 32);
     64e:	2220      	movs	r2, #32
     650:	4658      	mov	r0, fp
     652:	a90d      	add	r1, sp, #52	; 0x34
     654:	f00b f92b 	bl	b8ae <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     658:	2300      	movs	r3, #0
     65a:	4622      	mov	r2, r4
     65c:	9300      	str	r3, [sp, #0]
     65e:	4631      	mov	r1, r6
     660:	f64f 73ff 	movw	r3, #65535	; 0xffff
     664:	a807      	add	r0, sp, #28
     666:	f009 fff5 	bl	a654 <bootutil_tlv_iter_begin>
    if (rc) {
     66a:	4680      	mov	r8, r0
     66c:	bb60      	cbnz	r0, 6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     66e:	4620      	mov	r0, r4
     670:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     672:	f00a f89b 	bl	a7ac <bootutil_max_image_size>
     676:	4286      	cmp	r6, r0
     678:	d826      	bhi.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
    int key_id = -1;
     67a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     67e:	f8df 9140 	ldr.w	r9, [pc, #320]	; 7c0 <FIH_LABEL_FIH_CALL_END_795+0x16>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     682:	f10d 0316 	add.w	r3, sp, #22
     686:	aa05      	add	r2, sp, #20
     688:	a906      	add	r1, sp, #24
     68a:	a807      	add	r0, sp, #28
     68c:	f00a f830 	bl	a6f0 <bootutil_tlv_iter_next>
        if (rc < 0) {
     690:	2800      	cmp	r0, #0
     692:	db19      	blt.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
        } else if (rc > 0) {
     694:	f040 808a 	bne.w	7ac <FIH_LABEL_FIH_CALL_END_795+0x2>
        if (type == IMAGE_TLV_SHA256) {
     698:	f8bd 6016 	ldrh.w	r6, [sp, #22]
     69c:	2e10      	cmp	r6, #16
     69e:	d12e      	bne.n	6fe <FIH_LABEL_FIH_CALL_END_449+0x3e>
            if (len != sizeof(hash)) {
     6a0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
     6a4:	2e20      	cmp	r6, #32
     6a6:	d10f      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6a8:	4633      	mov	r3, r6
     6aa:	4620      	mov	r0, r4
     6ac:	9906      	ldr	r1, [sp, #24]
     6ae:	aa38      	add	r2, sp, #224	; 0xe0
     6b0:	f00a fe31 	bl	b316 <flash_area_read>
            if (rc) {
     6b4:	b940      	cbnz	r0, 6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>

000006b6 <FIH_LABEL_FIH_CALL_START_433>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6b6:	4632      	mov	r2, r6
     6b8:	a938      	add	r1, sp, #224	; 0xe0
     6ba:	a80d      	add	r0, sp, #52	; 0x34
     6bc:	f00a f864 	bl	a788 <boot_fih_memequal>

000006c0 <FIH_LABEL_FIH_CALL_END_449>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     6c0:	4b40      	ldr	r3, [pc, #256]	; (7c4 <FIH_LABEL_FIH_CALL_END_795+0x1a>)
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	4283      	cmp	r3, r0
     6c6:	d017      	beq.n	6f8 <FIH_LABEL_FIH_CALL_END_449+0x38>
    }
#endif

out:
    if (rc) {
        FIH_SET(fih_rc, FIH_FAILURE);
     6c8:	f8da 5000 	ldr.w	r5, [sl]
    }

    FIH_RET(fih_rc);
     6cc:	e071      	b.n	7b2 <FIH_LABEL_FIH_CALL_END_795+0x8>
        if (blk_sz > tmp_buf_sz) {
     6ce:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     6d0:	eba7 0908 	sub.w	r9, r7, r8
     6d4:	4599      	cmp	r9, r3
     6d6:	bf28      	it	cs
     6d8:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6da:	4641      	mov	r1, r8
     6dc:	464b      	mov	r3, r9
     6de:	4620      	mov	r0, r4
     6e0:	9a82      	ldr	r2, [sp, #520]	; 0x208
     6e2:	f00a fe18 	bl	b316 <flash_area_read>
        if (rc) {
     6e6:	2800      	cmp	r0, #0
     6e8:	d1ee      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6ea:	464a      	mov	r2, r9
     6ec:	9982      	ldr	r1, [sp, #520]	; 0x208
     6ee:	a838      	add	r0, sp, #224	; 0xe0
     6f0:	f00c ff76 	bl	d5e0 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6f4:	44c8      	add	r8, r9
     6f6:	e7a1      	b.n	63c <bootutil_img_validate+0x48>
            sha256_valid = 1;
     6f8:	f04f 0801 	mov.w	r8, #1
     6fc:	e7c1      	b.n	682 <bootutil_img_validate+0x8e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6fe:	2e01      	cmp	r6, #1
     700:	d135      	bne.n	76e <FIH_LABEL_FIH_CALL_END_449+0xae>
            if (len > 32) {
     702:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     706:	2b20      	cmp	r3, #32
     708:	d8de      	bhi.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     70a:	4620      	mov	r0, r4
     70c:	9906      	ldr	r1, [sp, #24]
     70e:	aa38      	add	r2, sp, #224	; 0xe0
     710:	f00a fe01 	bl	b316 <flash_area_read>
            if (rc) {
     714:	4607      	mov	r7, r0
     716:	2800      	cmp	r0, #0
     718:	d1d6      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
            key_id = bootutil_find_key(buf, len);
     71a:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     71e:	f1bb 0f20 	cmp.w	fp, #32
     722:	d902      	bls.n	72a <FIH_LABEL_FIH_CALL_END_449+0x6a>
                key_id = -1;
     724:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     728:	e7ab      	b.n	682 <bootutil_img_validate+0x8e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     72a:	f8d9 3000 	ldr.w	r3, [r9]
     72e:	4e26      	ldr	r6, [pc, #152]	; (7c8 <FIH_LABEL_FIH_CALL_END_795+0x1e>)
     730:	9303      	str	r3, [sp, #12]
     732:	9b03      	ldr	r3, [sp, #12]
     734:	429f      	cmp	r7, r3
     736:	daf5      	bge.n	724 <FIH_LABEL_FIH_CALL_END_449+0x64>
    mbedtls_sha256_init(ctx);
     738:	a81d      	add	r0, sp, #116	; 0x74
     73a:	f00c ff4d 	bl	d5d8 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     73e:	2100      	movs	r1, #0
     740:	a81d      	add	r0, sp, #116	; 0x74
     742:	f006 faa9 	bl	6c98 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     746:	6872      	ldr	r2, [r6, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     748:	a81d      	add	r0, sp, #116	; 0x74
     74a:	6812      	ldr	r2, [r2, #0]
     74c:	f856 1b08 	ldr.w	r1, [r6], #8
     750:	f00c ff46 	bl	d5e0 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     754:	a915      	add	r1, sp, #84	; 0x54
     756:	a81d      	add	r0, sp, #116	; 0x74
     758:	f00c ff86 	bl	d668 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     75c:	465a      	mov	r2, fp
     75e:	a938      	add	r1, sp, #224	; 0xe0
     760:	a815      	add	r0, sp, #84	; 0x54
     762:	f00b f87d 	bl	b860 <memcmp>
     766:	2800      	cmp	r0, #0
     768:	d08b      	beq.n	682 <bootutil_img_validate+0x8e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     76a:	3701      	adds	r7, #1
     76c:	e7e1      	b.n	732 <FIH_LABEL_FIH_CALL_END_449+0x72>
        } else if (type == EXPECTED_SIG_TLV) {
     76e:	2e20      	cmp	r6, #32
     770:	d187      	bne.n	682 <bootutil_img_validate+0x8e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     772:	1c7b      	adds	r3, r7, #1
     774:	d085      	beq.n	682 <bootutil_img_validate+0x8e>
     776:	f8d9 3000 	ldr.w	r3, [r9]
     77a:	42bb      	cmp	r3, r7
     77c:	ddd2      	ble.n	724 <FIH_LABEL_FIH_CALL_END_449+0x64>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     77e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     786:	d19f      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     788:	4620      	mov	r0, r4
     78a:	9906      	ldr	r1, [sp, #24]
     78c:	aa38      	add	r2, sp, #224	; 0xe0
     78e:	f00a fdc2 	bl	b316 <flash_area_read>
            if (rc) {
     792:	2800      	cmp	r0, #0
     794:	d198      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>

00000796 <FIH_LABEL_FIH_CALL_START_774>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     796:	b2ff      	uxtb	r7, r7
     798:	4631      	mov	r1, r6
     79a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     79e:	9700      	str	r7, [sp, #0]
     7a0:	aa38      	add	r2, sp, #224	; 0xe0
     7a2:	a80d      	add	r0, sp, #52	; 0x34
     7a4:	f000 f812 	bl	7cc <bootutil_verify_sig>
     7a8:	4605      	mov	r5, r0

000007aa <FIH_LABEL_FIH_CALL_END_795>:
            key_id = -1;
     7aa:	e7bb      	b.n	724 <FIH_LABEL_FIH_CALL_END_449+0x64>
    if (rc) {
     7ac:	f1b8 0f00 	cmp.w	r8, #0
     7b0:	d08a      	beq.n	6c8 <FIH_LABEL_FIH_CALL_END_449+0x8>
}
     7b2:	4628      	mov	r0, r5
     7b4:	b079      	add	sp, #484	; 0x1e4
     7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ba:	bf00      	nop
     7bc:	200020b8 	.word	0x200020b8
     7c0:	0000eda0 	.word	0x0000eda0
     7c4:	20002770 	.word	0x20002770
     7c8:	0000eda4 	.word	0x0000eda4

000007cc <bootutil_verify_sig>:
}

fih_ret
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_rsa_context ctx;
    int rc;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     7d0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 988 <FIH_LABEL_FIH_CALL_END_607+0x4>
{
     7d4:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
     7d8:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     7da:	a829      	add	r0, sp, #164	; 0xa4
{
     7dc:	f89d b358 	ldrb.w	fp, [sp, #856]	; 0x358
     7e0:	4689      	mov	r9, r1
     7e2:	4690      	mov	r8, r2
     7e4:	461e      	mov	r6, r3
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     7e6:	f8da 5000 	ldr.w	r5, [sl]
    mbedtls_rsa_init(&ctx);
     7ea:	f00c feb2 	bl	d552 <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     7ee:	4b67      	ldr	r3, [pc, #412]	; (98c <FIH_LABEL_FIH_CALL_END_607+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7f0:	aa8c      	add	r2, sp, #560	; 0x230
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7f2:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     7f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
     7fa:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7fc:	9404      	str	r4, [sp, #16]
    end = cp + *bootutil_keys[key_id].len;
     7fe:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     800:	a804      	add	r0, sp, #16
    end = cp + *bootutil_keys[key_id].len;
     802:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     804:	4621      	mov	r1, r4
     806:	2330      	movs	r3, #48	; 0x30
     808:	f00b fcca 	bl	c1a0 <mbedtls_asn1_get_tag>
     80c:	bb70      	cbnz	r0, 86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    if (*p + len != end) {
     80e:	9b04      	ldr	r3, [sp, #16]
     810:	9a8c      	ldr	r2, [sp, #560]	; 0x230
     812:	4413      	add	r3, r2
     814:	429c      	cmp	r4, r3
     816:	d129      	bne.n	86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     818:	4621      	mov	r1, r4
     81a:	aa2b      	add	r2, sp, #172	; 0xac
     81c:	a804      	add	r0, sp, #16
     81e:	f00b fcd3 	bl	c1c8 <mbedtls_asn1_get_mpi>
     822:	bb18      	cbnz	r0, 86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     824:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
     828:	465a      	mov	r2, fp
     82a:	4621      	mov	r1, r4
     82c:	a804      	add	r0, sp, #16
     82e:	f00b fccb 	bl	c1c8 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     832:	9003      	str	r0, [sp, #12]
     834:	b9d0      	cbnz	r0, 86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     836:	a82b      	add	r0, sp, #172	; 0xac
     838:	f00b fdbd 	bl	c3b6 <mbedtls_mpi_size>
    if (*p != end) {
     83c:	9a04      	ldr	r2, [sp, #16]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     83e:	902a      	str	r0, [sp, #168]	; 0xa8
    if (*p != end) {
     840:	4294      	cmp	r4, r2
     842:	d113      	bne.n	86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     844:	9b03      	ldr	r3, [sp, #12]
     846:	f8cd b004 	str.w	fp, [sp, #4]
     84a:	461a      	mov	r2, r3
     84c:	9300      	str	r3, [sp, #0]
     84e:	a92b      	add	r1, sp, #172	; 0xac
     850:	a829      	add	r0, sp, #164	; 0xa4
     852:	f00c fe3b 	bl	d4cc <mbedtls_rsa_import>
    if (rc != 0) {
     856:	b948      	cbnz	r0, 86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    rc = mbedtls_rsa_check_pubkey(ctx);
     858:	a829      	add	r0, sp, #164	; 0xa4
     85a:	f006 f9af 	bl	6bbc <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     85e:	b928      	cbnz	r0, 86c <CONFIG_BOOT_MAX_IMG_SECTORS+0x6c>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     860:	a82b      	add	r0, sp, #172	; 0xac
     862:	f00b fda8 	bl	c3b6 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     866:	4286      	cmp	r6, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     868:	902a      	str	r0, [sp, #168]	; 0xa8
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     86a:	d00a      	beq.n	882 <FIH_LABEL_FIH_CALL_START_231>
        mbedtls_rsa_free(&ctx);
     86c:	a829      	add	r0, sp, #164	; 0xa4
     86e:	f00c fe7a 	bl	d566 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     872:	a829      	add	r0, sp, #164	; 0xa4
     874:	f00c fe77 	bl	d566 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     878:	4628      	mov	r0, r5
     87a:	f50d 7d4d 	add.w	sp, sp, #820	; 0x334
     87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000882 <FIH_LABEL_FIH_CALL_START_231>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     882:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     886:	f8da 5000 	ldr.w	r5, [sl]
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     88a:	d17b      	bne.n	984 <FIH_LABEL_FIH_CALL_END_607>
    if (hlen != PSS_HLEN) {
     88c:	f1b9 0f20 	cmp.w	r9, #32
     890:	d178      	bne.n	984 <FIH_LABEL_FIH_CALL_END_607>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     892:	4641      	mov	r1, r8
     894:	aa8c      	add	r2, sp, #560	; 0x230
     896:	a829      	add	r0, sp, #164	; 0xa4
     898:	f006 f9b6 	bl	6c08 <mbedtls_rsa_public>
     89c:	4604      	mov	r4, r0
     89e:	2800      	cmp	r0, #0
     8a0:	d170      	bne.n	984 <FIH_LABEL_FIH_CALL_END_607>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8a2:	f89d 332f 	ldrb.w	r3, [sp, #815]	; 0x32f
     8a6:	2bbc      	cmp	r3, #188	; 0xbc
     8a8:	d16c      	bne.n	984 <FIH_LABEL_FIH_CALL_END_607>
    int count = PSS_MASK_LEN;
     8aa:	26df      	movs	r6, #223	; 0xdf
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8ac:	9005      	str	r0, [sp, #20]
     8ae:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    mbedtls_sha256_init(ctx);
     8b2:	a80e      	add	r0, sp, #56	; 0x38
     8b4:	f00c fe90 	bl	d5d8 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8b8:	2100      	movs	r1, #0
     8ba:	a80e      	add	r0, sp, #56	; 0x38
     8bc:	f006 f9ec 	bl	6c98 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8c0:	2220      	movs	r2, #32
     8c2:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     8c6:	a80e      	add	r0, sp, #56	; 0x38
     8c8:	f00c fe8a 	bl	d5e0 <mbedtls_sha256_update>
     8cc:	2204      	movs	r2, #4
     8ce:	a905      	add	r1, sp, #20
     8d0:	a80e      	add	r0, sp, #56	; 0x38
     8d2:	f00c fe85 	bl	d5e0 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8d6:	a906      	add	r1, sp, #24
     8d8:	a80e      	add	r0, sp, #56	; 0x38
     8da:	f00c fec5 	bl	d668 <mbedtls_sha256_finish>
        if (bytes > count)
     8de:	2e20      	cmp	r6, #32
     8e0:	46b0      	mov	r8, r6
     8e2:	bfa8      	it	ge
     8e4:	f04f 0820 	movge.w	r8, #32
        counter[3]++;
     8e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     8ec:	4648      	mov	r0, r9
        counter[3]++;
     8ee:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     8f0:	4642      	mov	r2, r8
     8f2:	a906      	add	r1, sp, #24
        count -= bytes;
     8f4:	eba6 0608 	sub.w	r6, r6, r8
        counter[3]++;
     8f8:	f88d 3017 	strb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     8fc:	f00a ffd7 	bl	b8ae <memcpy>
    while (count > 0) {
     900:	2e00      	cmp	r6, #0
        mask += bytes;
     902:	44c1      	add	r9, r8
    while (count > 0) {
     904:	dcd5      	bgt.n	8b2 <FIH_LABEL_FIH_CALL_START_231+0x30>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     906:	ab54      	add	r3, sp, #336	; 0x150
     908:	4618      	mov	r0, r3
     90a:	2100      	movs	r1, #0
     90c:	469c      	mov	ip, r3
     90e:	aa8c      	add	r2, sp, #560	; 0x230
        db_mask[i] ^= em[i];
     910:	7806      	ldrb	r6, [r0, #0]
     912:	f812 eb01 	ldrb.w	lr, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     916:	3101      	adds	r1, #1
        db_mask[i] ^= em[i];
     918:	ea86 060e 	eor.w	r6, r6, lr
    for (i = 0; i < PSS_MASK_LEN; i++) {
     91c:	29df      	cmp	r1, #223	; 0xdf
        db_mask[i] ^= em[i];
     91e:	f800 6b01 	strb.w	r6, [r0], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     922:	d1f5      	bne.n	910 <FIH_LABEL_FIH_CALL_START_231+0x8e>
    db_mask[0] &= 0x7F;
     924:	781a      	ldrb	r2, [r3, #0]
     926:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     92a:	701a      	strb	r2, [r3, #0]
        if (db_mask[i] != 0) {
     92c:	f813 6b01 	ldrb.w	r6, [r3], #1
     930:	bb46      	cbnz	r6, 984 <FIH_LABEL_FIH_CALL_END_607>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     932:	3401      	adds	r4, #1
     934:	2cbe      	cmp	r4, #190	; 0xbe
     936:	d1f9      	bne.n	92c <FIH_LABEL_FIH_CALL_START_231+0xaa>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     938:	f89c 30be 	ldrb.w	r3, [ip, #190]	; 0xbe
     93c:	2b01      	cmp	r3, #1
     93e:	d121      	bne.n	984 <FIH_LABEL_FIH_CALL_END_607>
    mbedtls_sha256_init(ctx);
     940:	a80e      	add	r0, sp, #56	; 0x38
     942:	f00c fe49 	bl	d5d8 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     946:	4631      	mov	r1, r6
     948:	a80e      	add	r0, sp, #56	; 0x38
     94a:	f006 f9a5 	bl	6c98 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     94e:	2208      	movs	r2, #8
     950:	490f      	ldr	r1, [pc, #60]	; (990 <FIH_LABEL_FIH_CALL_END_607+0xc>)
     952:	a80e      	add	r0, sp, #56	; 0x38
     954:	f00c fe44 	bl	d5e0 <mbedtls_sha256_update>
     958:	4639      	mov	r1, r7
     95a:	2220      	movs	r2, #32
     95c:	a80e      	add	r0, sp, #56	; 0x38
     95e:	f00c fe3f 	bl	d5e0 <mbedtls_sha256_update>
     962:	2220      	movs	r2, #32
     964:	f20d 210f 	addw	r1, sp, #527	; 0x20f
     968:	a80e      	add	r0, sp, #56	; 0x38
     96a:	f00c fe39 	bl	d5e0 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     96e:	a906      	add	r1, sp, #24
     970:	a80e      	add	r0, sp, #56	; 0x38
     972:	f00c fe79 	bl	d668 <mbedtls_sha256_finish>

00000976 <FIH_LABEL_FIH_CALL_START_591>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     976:	2220      	movs	r2, #32
     978:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     97c:	a806      	add	r0, sp, #24
     97e:	f009 ff03 	bl	a788 <boot_fih_memequal>
     982:	4605      	mov	r5, r0

00000984 <FIH_LABEL_FIH_CALL_END_607>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     984:	e775      	b.n	872 <CONFIG_BOOT_MAX_IMG_SECTORS+0x72>
     986:	bf00      	nop
     988:	200020b8 	.word	0x200020b8
     98c:	0000eda4 	.word	0x0000eda4
     990:	0000f34a 	.word	0x0000f34a

00000994 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         FIH_NO_BOOTABLE_IMAGE            if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_ret
boot_validate_slot(struct boot_loader_state *state, int slot,
     994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     998:	4b58      	ldr	r3, [pc, #352]	; (afc <FIH_LABEL_FIH_CALL_END_613+0xd2>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     99a:	b089      	sub	sp, #36	; 0x24
     99c:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     99e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     9a2:	460e      	mov	r6, r1
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     9a4:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9a6:	f009 fe25 	bl	a5f4 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9aa:	a906      	add	r1, sp, #24
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ac:	4680      	mov	r8, r0
    rc = flash_area_open(area_id, &fap);
     9ae:	b2c0      	uxtb	r0, r0
     9b0:	f001 f968 	bl	1c84 <flash_area_open>
    if (rc != 0) {
     9b4:	2800      	cmp	r0, #0
     9b6:	d16f      	bne.n	a98 <FIH_LABEL_FIH_CALL_END_613+0x6e>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9b8:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9bc:	4631      	mov	r1, r6
     9be:	4638      	mov	r0, r7
     9c0:	f009 fe18 	bl	a5f4 <flash_area_id_from_multi_image_slot>
     9c4:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     9c8:	a907      	add	r1, sp, #28
     9ca:	b2c0      	uxtb	r0, r0
     9cc:	fb09 f906 	mul.w	r9, r9, r6
     9d0:	f001 f958 	bl	1c84 <flash_area_open>
    if (rc != 0) {
     9d4:	2800      	cmp	r0, #0
     9d6:	d045      	beq.n	a64 <FIH_LABEL_FIH_CALL_END_613+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9d8:	f04f 0b58 	mov.w	fp, #88	; 0x58
     9dc:	222c      	movs	r2, #44	; 0x2c
     9de:	fb0b f307 	mul.w	r3, fp, r7
     9e2:	fb02 3306 	mla	r3, r2, r6, r3
     9e6:	4423      	add	r3, r4
     9e8:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9ea:	f013 0a10 	ands.w	sl, r3, #16
     9ee:	d14e      	bne.n	a8e <FIH_LABEL_FIH_CALL_END_613+0x64>

000009f0 <FIH_LABEL_FIH_CALL_START_522>:
            fih_rc = FIH_NO_BOOTABLE_IMAGE;
            goto out;
        }
    }
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, FIH_BOOT_HOOK_REGULAR,
     9f0:	4631      	mov	r1, r6
     9f2:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     9f6:	f005 fdd3 	bl	65a0 <boot_image_check_hook>
     9fa:	4605      	mov	r5, r0

000009fc <FIH_LABEL_FIH_CALL_END_537>:
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (FIH_EQ(fih_rc, FIH_BOOT_HOOK_REGULAR))
     9fc:	4b40      	ldr	r3, [pc, #256]	; (b00 <FIH_LABEL_FIH_CALL_END_613+0xd6>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	4298      	cmp	r0, r3
     a02:	d112      	bne.n	a2a <FIH_LABEL_FIH_CALL_END_613>

00000a04 <FIH_LABEL_FIH_CALL_START_553>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a04:	f44f 7380 	mov.w	r3, #256	; 0x100
     a08:	fb07 920b 	mla	r2, r7, fp, r9
     a0c:	9301      	str	r3, [sp, #4]
     a0e:	e9cd aa03 	strd	sl, sl, [sp, #12]
     a12:	4b3c      	ldr	r3, [pc, #240]	; (b04 <FIH_LABEL_FIH_CALL_END_613+0xda>)
     a14:	f8cd a008 	str.w	sl, [sp, #8]
     a18:	9300      	str	r3, [sp, #0]
     a1a:	4650      	mov	r0, sl
     a1c:	9b06      	ldr	r3, [sp, #24]
     a1e:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     a22:	4422      	add	r2, r4
     a24:	f7ff fde6 	bl	5f4 <bootutil_img_validate>
     a28:	4605      	mov	r5, r0

00000a2a <FIH_LABEL_FIH_CALL_END_613>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a2a:	2358      	movs	r3, #88	; 0x58
     a2c:	435f      	muls	r7, r3
     a2e:	232c      	movs	r3, #44	; 0x2c
     a30:	fb03 7706 	mla	r7, r3, r6, r7
     a34:	4a34      	ldr	r2, [pc, #208]	; (b08 <FIH_LABEL_FIH_CALL_END_613+0xde>)
     a36:	59e1      	ldr	r1, [r4, r7]
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     a38:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a3a:	4291      	cmp	r1, r2
     a3c:	eb04 0307 	add.w	r3, r4, r7
     a40:	d10a      	bne.n	a58 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a42:	68da      	ldr	r2, [r3, #12]
     a44:	891b      	ldrh	r3, [r3, #8]
    if (a > UINT32_MAX - b) {
     a46:	189b      	adds	r3, r3, r2
     a48:	d206      	bcs.n	a58 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (size >= flash_area_get_size(fap)) {
     a4a:	6882      	ldr	r2, [r0, #8]
     a4c:	4293      	cmp	r3, r2
     a4e:	d203      	bcs.n	a58 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     a50:	4b2e      	ldr	r3, [pc, #184]	; (b0c <FIH_LABEL_FIH_CALL_END_613+0xe2>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	42ab      	cmp	r3, r5
     a56:	d023      	beq.n	aa0 <FIH_LABEL_FIH_CALL_END_613+0x76>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a58:	b1ce      	cbz	r6, a8e <FIH_LABEL_FIH_CALL_END_613+0x64>
             * slot does not target the primary slot. This might
             * indicate that the image was loaded to the wrong slot.
             *
             * Erase the image and continue booting from the primary slot.
             */
            flash_area_erase(fap, 0, fap->fa_size);
     a5a:	2100      	movs	r1, #0
     a5c:	6882      	ldr	r2, [r0, #8]
     a5e:	f00a fc84 	bl	b36a <flash_area_erase>
     a62:	e014      	b.n	a8e <FIH_LABEL_FIH_CALL_END_613+0x64>
    erased_val = flash_area_erased_val(fap);
     a64:	9807      	ldr	r0, [sp, #28]
     a66:	f00a fc9b 	bl	b3a0 <flash_area_erased_val>
     a6a:	4605      	mov	r5, r0
    flash_area_close(fap);
     a6c:	9807      	ldr	r0, [sp, #28]
     a6e:	f00a fc51 	bl	b314 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     a72:	2358      	movs	r3, #88	; 0x58
     a74:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     a78:	fb02 9303 	mla	r3, r2, r3, r9
     a7c:	4423      	add	r3, r4
    for (i = 0; i < len; i++) {
     a7e:	1e5a      	subs	r2, r3, #1
     a80:	3303      	adds	r3, #3
        if (val != p[i]) {
     a82:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a86:	42a9      	cmp	r1, r5
     a88:	d1a6      	bne.n	9d8 <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     a8a:	429a      	cmp	r2, r3
     a8c:	d1f9      	bne.n	a82 <FIH_LABEL_FIH_CALL_END_613+0x58>
            fih_rc = FIH_NO_BOOTABLE_IMAGE;
     a8e:	4b20      	ldr	r3, [pc, #128]	; (b10 <FIH_LABEL_FIH_CALL_END_613+0xe6>)
     a90:	681d      	ldr	r5, [r3, #0]
        }
    }
#endif

out:
    flash_area_close(fap);
     a92:	9806      	ldr	r0, [sp, #24]
     a94:	f00a fc3e 	bl	b314 <flash_area_close>

    FIH_RET(fih_rc);
}
     a98:	4628      	mov	r0, r5
     a9a:	b009      	add	sp, #36	; 0x24
     a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     aa0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     aa4:	b343      	cbz	r3, af8 <FIH_LABEL_FIH_CALL_END_613+0xce>
     aa6:	2b01      	cmp	r3, #1
     aa8:	bf0c      	ite	eq
     aaa:	2208      	moveq	r2, #8
     aac:	22ff      	movne	r2, #255	; 0xff
     aae:	4590      	cmp	r8, r2
     ab0:	d1ef      	bne.n	a92 <FIH_LABEL_FIH_CALL_END_613+0x68>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     ab2:	2258      	movs	r2, #88	; 0x58
     ab4:	4353      	muls	r3, r2
     ab6:	18e2      	adds	r2, r4, r3
     ab8:	6a17      	ldr	r7, [r2, #32]
        uint32_t reset_value = 0;
     aba:	2200      	movs	r2, #0
     abc:	9207      	str	r2, [sp, #28]
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     abe:	222c      	movs	r2, #44	; 0x2c
     ac0:	fb02 3306 	mla	r3, r2, r6, r3
     ac4:	4423      	add	r3, r4
     ac6:	8919      	ldrh	r1, [r3, #8]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     ac8:	2304      	movs	r3, #4
     aca:	aa07      	add	r2, sp, #28
     acc:	4419      	add	r1, r3
     ace:	f00a fc22 	bl	b316 <flash_area_read>
        if (rc != 0) {
     ad2:	2800      	cmp	r0, #0
     ad4:	d1db      	bne.n	a8e <FIH_LABEL_FIH_CALL_END_613+0x64>
        if (BOOT_CURR_IMG(state) == 1) {
     ad6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     ada:	9907      	ldr	r1, [sp, #28]
        if (BOOT_CURR_IMG(state) == 1) {
     adc:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     ade:	bf0b      	itete	eq
     ae0:	4a0c      	ldreq	r2, [pc, #48]	; (b14 <FIH_LABEL_FIH_CALL_END_613+0xea>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     ae2:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     ae6:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     aea:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     aec:	4291      	cmp	r1, r2
     aee:	d301      	bcc.n	af4 <FIH_LABEL_FIH_CALL_END_613+0xca>
     af0:	4299      	cmp	r1, r3
     af2:	d9ce      	bls.n	a92 <FIH_LABEL_FIH_CALL_END_613+0x68>
            flash_area_erase(fap, 0, fap->fa_size);
     af4:	9806      	ldr	r0, [sp, #24]
     af6:	e7b0      	b.n	a5a <FIH_LABEL_FIH_CALL_END_613+0x30>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     af8:	2202      	movs	r2, #2
     afa:	e7d8      	b.n	aae <FIH_LABEL_FIH_CALL_END_613+0x84>
     afc:	200020b8 	.word	0x200020b8
     b00:	200020b0 	.word	0x200020b0
     b04:	20015e4e 	.word	0x20015e4e
     b08:	96f3b83d 	.word	0x96f3b83d
     b0c:	20002770 	.word	0x20002770
     b10:	200020b4 	.word	0x200020b4
     b14:	01008800 	.word	0x01008800

00000b18 <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b1c:	4688      	mov	r8, r1
     b1e:	4691      	mov	r9, r2
     b20:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     b22:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b24:	f8df b08c 	ldr.w	fp, [pc, #140]	; bb4 <boot_copy_region+0x9c>
     b28:	4d23      	ldr	r5, [pc, #140]	; (bb8 <boot_copy_region+0xa0>)
     b2a:	4c24      	ldr	r4, [pc, #144]	; (bbc <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b2e:	429e      	cmp	r6, r3
     b30:	d301      	bcc.n	b36 <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     b32:	2000      	movs	r0, #0
     b34:	e00f      	b.n	b56 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b38:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b3a:	1b9f      	subs	r7, r3, r6
     b3c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b40:	bf28      	it	cs
     b42:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b46:	4a1b      	ldr	r2, [pc, #108]	; (bb4 <boot_copy_region+0x9c>)
     b48:	463b      	mov	r3, r7
     b4a:	eb06 010a 	add.w	r1, r6, sl
     b4e:	f00a fbe2 	bl	b316 <flash_area_read>
        if (rc != 0) {
     b52:	b110      	cbz	r0, b5a <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b54:	2001      	movs	r0, #1
}
     b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b5a:	990a      	ldr	r1, [sp, #40]	; 0x28
     b5c:	463b      	mov	r3, r7
     b5e:	465a      	mov	r2, fp
     b60:	4648      	mov	r0, r9
     b62:	1871      	adds	r1, r6, r1
     b64:	f00a fbec 	bl	b340 <flash_area_write>
        if (rc != 0) {
     b68:	2800      	cmp	r0, #0
     b6a:	d1f3      	bne.n	b54 <boot_copy_region+0x3c>
     b6c:	4b14      	ldr	r3, [pc, #80]	; (bc0 <boot_copy_region+0xa8>)
     b6e:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b72:	443e      	add	r6, r7
     b74:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     b78:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     b7c:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     b80:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     b84:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     b88:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     b8c:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     b90:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     b94:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     b98:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     b9c:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     ba0:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     ba4:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     ba8:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     bac:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bb0:	e7bc      	b.n	b2c <boot_copy_region+0x14>
     bb2:	bf00      	nop
     bb4:	20012774 	.word	0x20012774
     bb8:	50018000 	.word	0x50018000
     bbc:	6e524635 	.word	0x6e524635
     bc0:	50019000 	.word	0x50019000

00000bc4 <context_boot_go>:
#endif
}

fih_ret
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     bc8:	2600      	movs	r6, #0
{
     bca:	4604      	mov	r4, r0
     bcc:	460d      	mov	r5, r1
    has_upgrade = false;
     bce:	46b0      	mov	r8, r6
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bd0:	2758      	movs	r7, #88	; 0x58
            primary_slot_sectors[image_index];
     bd2:	f8df 92cc 	ldr.w	r9, [pc, #716]	; ea0 <FIH_LABEL_FIH_CALL_END_2172+0x138>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
            secondary_slot_sectors[image_index];
     bd6:	f8df a2cc 	ldr.w	sl, [pc, #716]	; ea4 <FIH_LABEL_FIH_CALL_END_2172+0x13c>
{
     bda:	b095      	sub	sp, #84	; 0x54
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     bdc:	2e01      	cmp	r6, #1
     bde:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     be2:	d907      	bls.n	bf4 <context_boot_go+0x30>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     be4:	f1b8 0f00 	cmp.w	r8, #0
     be8:	f000 8140 	beq.w	e6c <FIH_LABEL_FIH_CALL_END_2172+0x104>
     bec:	2000      	movs	r0, #0
    return &BOOT_IMG(state, slot).hdr;
     bee:	262c      	movs	r6, #44	; 0x2c
     bf0:	2758      	movs	r7, #88	; 0x58
     bf2:	e0cd      	b.n	d90 <FIH_LABEL_FIH_CALL_END_2172+0x28>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     bf4:	19a3      	adds	r3, r4, r6
     bf6:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     bfa:	2900      	cmp	r1, #0
     bfc:	d14b      	bne.n	c96 <context_boot_go+0xd2>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bfe:	fb07 4306 	mla	r3, r7, r6, r4
            primary_slot_sectors[image_index];
     c02:	eb09 3286 	add.w	r2, r9, r6, lsl #14
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c06:	625a      	str	r2, [r3, #36]	; 0x24
            secondary_slot_sectors[image_index];
     c08:	eb0a 3286 	add.w	r2, sl, r6, lsl #14
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c0c:	651a      	str	r2, [r3, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c0e:	4630      	mov	r0, r6
     c10:	f009 fcf0 	bl	a5f4 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c14:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     c18:	b2c0      	uxtb	r0, r0
     c1a:	fb07 4101 	mla	r1, r7, r1, r4
     c1e:	3120      	adds	r1, #32
     c20:	f001 f830 	bl	1c84 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c24:	2101      	movs	r1, #1
     c26:	4630      	mov	r0, r6
     c28:	f009 fce4 	bl	a5f4 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c2c:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     c30:	b2c0      	uxtb	r0, r0
     c32:	fb07 4101 	mla	r1, r7, r1, r4
     c36:	314c      	adds	r1, #76	; 0x4c
     c38:	f001 f824 	bl	1c84 <flash_area_open>
    rc = boot_read_sectors(state);
     c3c:	4620      	mov	r0, r4
     c3e:	f009 fde8 	bl	a812 <boot_read_sectors>
    if (rc != 0) {
     c42:	bb00      	cbnz	r0, c86 <context_boot_go+0xc2>
    rc = boot_read_image_headers(state, false, NULL);
     c44:	2200      	movs	r2, #0
     c46:	4620      	mov	r0, r4
     c48:	4611      	mov	r1, r2
     c4a:	f009 fe10 	bl	a86e <boot_read_image_headers>
    if (rc != 0) {
     c4e:	4683      	mov	fp, r0
     c50:	b990      	cbnz	r0, c78 <context_boot_go+0xb4>
    if (boot_slots_compatible(state)) {
     c52:	4620      	mov	r0, r4
     c54:	f009 fe6c 	bl	a930 <boot_slots_compatible>
     c58:	b170      	cbz	r0, c78 <context_boot_go+0xb4>
        boot_status_reset(bs);
     c5a:	a80a      	add	r0, sp, #40	; 0x28
     c5c:	f009 fe36 	bl	a8cc <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     c60:	f009 fe3d 	bl	a8de <boot_status_is_reset>
     c64:	4606      	mov	r6, r0
     c66:	bb60      	cbnz	r0, cc2 <context_boot_go+0xfe>
    if (BOOT_CURR_IMG(state) == 0) {
     c68:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c6c:	b9c3      	cbnz	r3, ca0 <context_boot_go+0xdc>
            rc = boot_read_image_headers(state, false, bs);
     c6e:	2100      	movs	r1, #0
     c70:	4620      	mov	r0, r4
     c72:	aa0a      	add	r2, sp, #40	; 0x28
     c74:	f009 fdfb 	bl	a86e <boot_read_image_headers>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c78:	2201      	movs	r2, #1
     c7a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c7e:	4423      	add	r3, r4
     c80:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     c84:	e007      	b.n	c96 <context_boot_go+0xd2>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c86:	2201      	movs	r2, #1
     c88:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     c8c:	4290      	cmp	r0, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c8e:	4423      	add	r3, r4
     c90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     c94:	d1d6      	bne.n	c44 <context_boot_go+0x80>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     c96:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
     c9a:	3601      	adds	r6, #1
     c9c:	b2f6      	uxtb	r6, r6
     c9e:	e79d      	b.n	bdc <context_boot_go+0x18>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     ca0:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     ca4:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     ca6:	bf04      	itt	eq
     ca8:	2201      	moveq	r2, #1
     caa:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     cae:	2b01      	cmp	r3, #1
     cb0:	d0dd      	beq.n	c6e <context_boot_go+0xaa>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     cb2:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     cb6:	2b04      	cmp	r3, #4
     cb8:	d1d9      	bne.n	c6e <context_boot_go+0xaa>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     cba:	2301      	movs	r3, #1
     cbc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     cc0:	e7d5      	b.n	c6e <context_boot_go+0xaa>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     cc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     cc6:	2b01      	cmp	r3, #1
     cc8:	d14a      	bne.n	d60 <FIH_LABEL_FIH_CALL_START_2158>
    const struct flash_area *secondary_fa =
     cca:	2258      	movs	r2, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     ccc:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    uint32_t reset_addr = 0;
     cd0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    const struct flash_area *secondary_fa =
     cd4:	fb02 4303 	mla	r3, r2, r3, r4
    if (hdr->ih_magic == IMAGE_MAGIC) {
     cd8:	4a73      	ldr	r2, [pc, #460]	; (ea8 <FIH_LABEL_FIH_CALL_END_2172+0x140>)
     cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    const struct flash_area *secondary_fa =
     cdc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdr->ih_magic == IMAGE_MAGIC) {
     cde:	4291      	cmp	r1, r2
     ce0:	d016      	beq.n	d10 <FIH_LABEL_FIH_CALL_END_2015+0x16>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     ce2:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     ce6:	f005 fd03 	bl	66f0 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cea:	1e83      	subs	r3, r0, #2
     cec:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cee:	4683      	mov	fp, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     cf0:	d818      	bhi.n	d24 <FIH_LABEL_FIH_CALL_END_2015+0x2a>

00000cf2 <FIH_LABEL_FIH_CALL_START_2000>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     cf2:	2101      	movs	r1, #1
     cf4:	4620      	mov	r0, r4
     cf6:	f7ff fe4d 	bl	994 <boot_validate_slot.isra.0>

00000cfa <FIH_LABEL_FIH_CALL_END_2015>:
        if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     cfa:	4b6c      	ldr	r3, [pc, #432]	; (eac <FIH_LABEL_FIH_CALL_END_2172+0x144>)
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	4298      	cmp	r0, r3
     d00:	d010      	beq.n	d24 <FIH_LABEL_FIH_CALL_END_2015+0x2a>
            if (FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     d02:	4b6b      	ldr	r3, [pc, #428]	; (eb0 <FIH_LABEL_FIH_CALL_END_2172+0x148>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	4298      	cmp	r0, r3
     d08:	d10a      	bne.n	d20 <FIH_LABEL_FIH_CALL_END_2015+0x26>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d0a:	f04f 0b01 	mov.w	fp, #1
     d0e:	e009      	b.n	d24 <FIH_LABEL_FIH_CALL_END_2015+0x2a>
        rc = flash_area_read(secondary_fa, hdr->ih_hdr_size +
     d10:	8e99      	ldrh	r1, [r3, #52]	; 0x34
     d12:	2304      	movs	r3, #4
     d14:	aa0e      	add	r2, sp, #56	; 0x38
     d16:	4419      	add	r1, r3
     d18:	f00a fafd 	bl	b316 <flash_area_read>
        if (rc != 0) {
     d1c:	2800      	cmp	r0, #0
     d1e:	d0e0      	beq.n	ce2 <context_boot_go+0x11e>
            return BOOT_SWAP_TYPE_FAIL;
     d20:	f04f 0b05 	mov.w	fp, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d24:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d28:	4423      	add	r3, r4
     d2a:	f883 b0b0 	strb.w	fp, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     d2e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d32:	b16b      	cbz	r3, d50 <FIH_LABEL_FIH_CALL_END_2015+0x56>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     d34:	18e2      	adds	r2, r4, r3
     d36:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     d3a:	2a01      	cmp	r2, #1
     d3c:	d0ab      	beq.n	c96 <context_boot_go+0xd2>
     d3e:	2a04      	cmp	r2, #4
     d40:	d00c      	beq.n	d5c <FIH_LABEL_FIH_CALL_END_2015+0x62>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d42:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     d46:	2a04      	cmp	r2, #4
     d48:	d102      	bne.n	d50 <FIH_LABEL_FIH_CALL_END_2015+0x56>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     d4a:	2201      	movs	r2, #1
     d4c:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     d50:	4423      	add	r3, r4
     d52:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     d56:	3b02      	subs	r3, #2
     d58:	2b02      	cmp	r3, #2
     d5a:	d89c      	bhi.n	c96 <context_boot_go+0xd2>
            has_upgrade = true;
     d5c:	46b0      	mov	r8, r6
     d5e:	e79a      	b.n	c96 <context_boot_go+0xd2>

00000d60 <FIH_LABEL_FIH_CALL_START_2158>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d60:	2101      	movs	r1, #1
     d62:	4620      	mov	r0, r4
     d64:	f7ff fe16 	bl	994 <boot_validate_slot.isra.0>

00000d68 <FIH_LABEL_FIH_CALL_END_2172>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     d68:	4b50      	ldr	r3, [pc, #320]	; (eac <FIH_LABEL_FIH_CALL_END_2172+0x144>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d6e:	bf18      	it	ne
     d70:	2205      	movne	r2, #5
     d72:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d76:	bf08      	it	eq
     d78:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d7c:	4423      	add	r3, r4
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d7e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     d82:	e7d4      	b.n	d2e <FIH_LABEL_FIH_CALL_END_2015+0x34>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     d84:	1823      	adds	r3, r4, r0
     d86:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     d8a:	b132      	cbz	r2, d9a <FIH_LABEL_FIH_CALL_END_2172+0x32>
            BOOT_CURR_IMG(state)++;
     d8c:	3001      	adds	r0, #1
     d8e:	b2c0      	uxtb	r0, r0
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     d90:	2801      	cmp	r0, #1
            BOOT_CURR_IMG(state)++;
     d92:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     d96:	d9f5      	bls.n	d84 <FIH_LABEL_FIH_CALL_END_2172+0x1c>
     d98:	e068      	b.n	e6c <FIH_LABEL_FIH_CALL_END_2172+0x104>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     d9a:	f893 80b0 	ldrb.w	r8, [r3, #176]	; 0xb0
     d9e:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
     da2:	f1b8 0801 	subs.w	r8, r8, #1
     da6:	bf18      	it	ne
     da8:	f04f 0801 	movne.w	r8, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     dac:	4641      	mov	r1, r8
     dae:	f009 fc21 	bl	a5f4 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     db2:	a905      	add	r1, sp, #20
     db4:	b2c0      	uxtb	r0, r0
     db6:	f000 ff65 	bl	1c84 <flash_area_open>
    if (rc != 0) {
     dba:	2800      	cmp	r0, #0
     dbc:	d17c      	bne.n	eb8 <FIH_LABEL_FIH_CALL_END_2172+0x150>
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     dbe:	2301      	movs	r3, #1
     dc0:	fb06 f808 	mul.w	r8, r6, r8
     dc4:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     dc8:	9a05      	ldr	r2, [sp, #20]
     dca:	fb17 8101 	smlabb	r1, r7, r1, r8
     dce:	9300      	str	r3, [sp, #0]
     dd0:	4421      	add	r1, r4
     dd2:	2340      	movs	r3, #64	; 0x40
     dd4:	a80e      	add	r0, sp, #56	; 0x38
     dd6:	f009 fc3d 	bl	a654 <bootutil_tlv_iter_begin>
    if (rc != 0) {
     dda:	4680      	mov	r8, r0
     ddc:	2800      	cmp	r0, #0
     dde:	d16d      	bne.n	ebc <FIH_LABEL_FIH_CALL_END_2172+0x154>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     de0:	2300      	movs	r3, #0
     de2:	f10d 0212 	add.w	r2, sp, #18
     de6:	a906      	add	r1, sp, #24
     de8:	a80e      	add	r0, sp, #56	; 0x38
     dea:	f009 fc81 	bl	a6f0 <bootutil_tlv_iter_next>
        if (rc < 0) {
     dee:	2800      	cmp	r0, #0
     df0:	db3c      	blt.n	e6c <FIH_LABEL_FIH_CALL_END_2172+0x104>
        rc = flash_area_read(fap, off, &dep, len);
     df2:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     df4:	d16f      	bne.n	ed6 <FIH_LABEL_FIH_CALL_END_2172+0x16e>
        if (len != sizeof(dep)) {
     df6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     dfa:	2b0c      	cmp	r3, #12
     dfc:	d169      	bne.n	ed2 <FIH_LABEL_FIH_CALL_END_2172+0x16a>
        rc = flash_area_read(fap, off, &dep, len);
     dfe:	9906      	ldr	r1, [sp, #24]
     e00:	aa07      	add	r2, sp, #28
     e02:	f00a fa88 	bl	b316 <flash_area_read>
        if (rc != 0) {
     e06:	2800      	cmp	r0, #0
     e08:	d16e      	bne.n	ee8 <FIH_LABEL_FIH_CALL_END_2172+0x180>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     e0a:	f89d 301c 	ldrb.w	r3, [sp, #28]
     e0e:	2b01      	cmp	r3, #1
     e10:	d86d      	bhi.n	eee <FIH_LABEL_FIH_CALL_END_2172+0x186>
    swap_type = state->swap_type[dep->image_id];
     e12:	18e2      	adds	r2, r4, r3
                                          : BOOT_PRIMARY_SLOT;
     e14:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
    if (ver1->iv_major > ver2->iv_major) {
     e18:	437b      	muls	r3, r7
                                          : BOOT_PRIMARY_SLOT;
     e1a:	3a02      	subs	r2, #2
     e1c:	2a02      	cmp	r2, #2
     e1e:	bf8c      	ite	hi
     e20:	2200      	movhi	r2, #0
     e22:	2201      	movls	r2, #1
    if (ver1->iv_major > ver2->iv_major) {
     e24:	fb06 3302 	mla	r3, r6, r2, r3
     e28:	4423      	add	r3, r4
     e2a:	7d19      	ldrb	r1, [r3, #20]
     e2c:	f89d 2020 	ldrb.w	r2, [sp, #32]
     e30:	4291      	cmp	r1, r2
     e32:	d8d5      	bhi.n	de0 <FIH_LABEL_FIH_CALL_END_2172+0x78>
    if (ver1->iv_major < ver2->iv_major) {
     e34:	d30a      	bcc.n	e4c <FIH_LABEL_FIH_CALL_END_2172+0xe4>
    if (ver1->iv_minor > ver2->iv_minor) {
     e36:	7d59      	ldrb	r1, [r3, #21]
     e38:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     e3c:	4291      	cmp	r1, r2
     e3e:	d8cf      	bhi.n	de0 <FIH_LABEL_FIH_CALL_END_2172+0x78>
    if (ver1->iv_minor < ver2->iv_minor) {
     e40:	d304      	bcc.n	e4c <FIH_LABEL_FIH_CALL_END_2172+0xe4>
    if (ver1->iv_revision < ver2->iv_revision) {
     e42:	8ada      	ldrh	r2, [r3, #22]
     e44:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     e48:	429a      	cmp	r2, r3
     e4a:	d2c9      	bcs.n	de0 <FIH_LABEL_FIH_CALL_END_2172+0x78>
        switch (BOOT_SWAP_TYPE(state)) {
     e4c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    flash_area_close(fap);
     e50:	9805      	ldr	r0, [sp, #20]
        switch (BOOT_SWAP_TYPE(state)) {
     e52:	4423      	add	r3, r4
     e54:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     e58:	2a01      	cmp	r2, #1
     e5a:	d01f      	beq.n	e9c <FIH_LABEL_FIH_CALL_END_2172+0x134>
     e5c:	3a02      	subs	r2, #2
     e5e:	2a01      	cmp	r2, #1
     e60:	d802      	bhi.n	e68 <FIH_LABEL_FIH_CALL_END_2172+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e62:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     e64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    flash_area_close(fap);
     e68:	f00a fa54 	bl	b314 <flash_area_close>

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     e6c:	2600      	movs	r6, #0
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     e6e:	f04f 08ff 	mov.w	r8, #255	; 0xff
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     e72:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     e74:	2e01      	cmp	r6, #1
     e76:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     e7a:	d93b      	bls.n	ef4 <FIH_LABEL_FIH_CALL_END_2172+0x18c>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    FIH_SET(fih_cnt, 0);
     e7c:	2300      	movs	r3, #0
     e7e:	f8df 8034 	ldr.w	r8, [pc, #52]	; eb4 <FIH_LABEL_FIH_CALL_END_2172+0x14c>
        {
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            /* Check for all possible values is redundant in normal operation it
             * is meant to prevent FI attack.
             */
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
     e82:	4e0a      	ldr	r6, [pc, #40]	; (eac <FIH_LABEL_FIH_CALL_END_2172+0x144>)
                FIH_EQ(fih_rc, FIH_FAILURE) ||
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     e84:	4f0a      	ldr	r7, [pc, #40]	; (eb0 <FIH_LABEL_FIH_CALL_END_2172+0x148>)
    FIH_SET(fih_cnt, 0);
     e86:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     e88:	2b01      	cmp	r3, #1
     e8a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     e8e:	f240 8145 	bls.w	111c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11c>
    /*
     * fih_cnt should be equal to BOOT_IMAGE_NUMBER now.
     * If this is not the case, at least one iteration of the loop
     * has been skipped.
     */
    if(FIH_NOT_EQ(fih_cnt, BOOT_IMAGE_NUMBER)) {
     e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     e94:	2a02      	cmp	r2, #2
     e96:	f000 8194 	beq.w	11c2 <FIH_LABEL_FIH_CALL_END_3756+0x46>
        FIH_PANIC;
     e9a:	e7fe      	b.n	e9a <FIH_LABEL_FIH_CALL_END_2172+0x132>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     e9c:	2204      	movs	r2, #4
     e9e:	e7e1      	b.n	e64 <FIH_LABEL_FIH_CALL_END_2172+0xfc>
     ea0:	2000a774 	.word	0x2000a774
     ea4:	20002774 	.word	0x20002774
     ea8:	96f3b83d 	.word	0x96f3b83d
     eac:	20002770 	.word	0x20002770
     eb0:	200020b4 	.word	0x200020b4
     eb4:	200020b8 	.word	0x200020b8
    flash_area_close(fap);
     eb8:	9805      	ldr	r0, [sp, #20]
     eba:	e7d5      	b.n	e68 <FIH_LABEL_FIH_CALL_END_2172+0x100>
     ebc:	9805      	ldr	r0, [sp, #20]
     ebe:	f00a fa29 	bl	b314 <flash_area_close>
	} else if (rc == BOOT_EBADIMAGE) {
     ec2:	f1b8 0f03 	cmp.w	r8, #3
     ec6:	d1d1      	bne.n	e6c <FIH_LABEL_FIH_CALL_END_2172+0x104>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ec8:	f240 1301 	movw	r3, #257	; 0x101
     ecc:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
            for (int idx = 0; idx < BOOT_IMAGE_NUMBER; idx++) {
     ed0:	e7cc      	b.n	e6c <FIH_LABEL_FIH_CALL_END_2172+0x104>
            rc = BOOT_EBADIMAGE;
     ed2:	f04f 0803 	mov.w	r8, #3
    flash_area_close(fap);
     ed6:	9805      	ldr	r0, [sp, #20]
     ed8:	f00a fa1c 	bl	b314 <flash_area_close>
        if (rc == 0) {
     edc:	f1b8 0f00 	cmp.w	r8, #0
     ee0:	d1ef      	bne.n	ec2 <FIH_LABEL_FIH_CALL_END_2172+0x15a>
            BOOT_CURR_IMG(state)++;
     ee2:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     ee6:	e751      	b.n	d8c <FIH_LABEL_FIH_CALL_END_2172+0x24>
        rc = BOOT_EFLASH;
     ee8:	f04f 0801 	mov.w	r8, #1
     eec:	e7f3      	b.n	ed6 <FIH_LABEL_FIH_CALL_END_2172+0x16e>
            rc = BOOT_EBADARGS;
     eee:	f04f 0807 	mov.w	r8, #7
     ef2:	e7f0      	b.n	ed6 <FIH_LABEL_FIH_CALL_END_2172+0x16e>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     ef4:	19a2      	adds	r2, r4, r6
     ef6:	f892 30b9 	ldrb.w	r3, [r2, #185]	; 0xb9
     efa:	2b00      	cmp	r3, #0
     efc:	f040 8109 	bne.w	1112 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x112>
        boot_status_reset(&bs);
     f00:	a80a      	add	r0, sp, #40	; 0x28
     f02:	f009 fce3 	bl	a8cc <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
     f06:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     f0a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     f0c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
     f10:	d806      	bhi.n	f20 <FIH_LABEL_FIH_CALL_END_2172+0x1b8>
     f12:	2b01      	cmp	r3, #1
     f14:	d806      	bhi.n	f24 <FIH_LABEL_FIH_CALL_END_2172+0x1bc>
     f16:	f000 80ad 	beq.w	1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     f1a:	f882 80b0 	strb.w	r8, [r2, #176]	; 0xb0
     f1e:	e0a9      	b.n	1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
        switch (BOOT_SWAP_TYPE(state)) {
     f20:	2b05      	cmp	r3, #5
     f22:	e7f8      	b.n	f16 <FIH_LABEL_FIH_CALL_END_2172+0x1ae>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     f24:	fb07 4306 	mla	r3, r7, r6, r4
     f28:	4619      	mov	r1, r3
     f2a:	4630      	mov	r0, r6
     f2c:	312c      	adds	r1, #44	; 0x2c
     f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     f30:	f00b f860 	bl	bff4 <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
     f34:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     f36:	4601      	mov	r1, r0
            if (rc == BOOT_HOOK_REGULAR)
     f38:	f040 809c 	bne.w	1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     f3c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     f40:	f009 fb58 	bl	a5f4 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     f44:	a907      	add	r1, sp, #28
     f46:	b2c0      	uxtb	r0, r0
     f48:	f000 fe9c 	bl	1c84 <flash_area_open>
    if (rc != 0) {
     f4c:	2800      	cmp	r0, #0
     f4e:	f000 8099 	beq.w	1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>
    uint32_t src_size = 0;
     f52:	f04f 0900 	mov.w	r9, #0
    flash_area_close(fap);
     f56:	9807      	ldr	r0, [sp, #28]
     f58:	f00a f9dc 	bl	b314 <flash_area_close>
    image_index = BOOT_CURR_IMG(state);
     f5c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f60:	a907      	add	r1, sp, #28
     f62:	2800      	cmp	r0, #0
     f64:	f000 80cd 	beq.w	1102 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x102>
     f68:	2801      	cmp	r0, #1
     f6a:	f000 80c6 	beq.w	10fa <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xfa>
     f6e:	20ff      	movs	r0, #255	; 0xff
     f70:	f000 fe88 	bl	1c84 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f74:	20ff      	movs	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     f76:	2600      	movs	r6, #0
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     f78:	f04f 0b58 	mov.w	fp, #88	; 0x58
     f7c:	46b2      	mov	sl, r6
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f7e:	a90e      	add	r1, sp, #56	; 0x38
     f80:	f000 fe80 	bl	1c84 <flash_area_open>
     f84:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f88:	fb0b 4303 	mla	r3, fp, r3, r4
     f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     f8e:	4553      	cmp	r3, sl
     f90:	d019      	beq.n	fc6 <FIH_LABEL_FIH_CALL_END_2172+0x25e>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     f92:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
     f96:	4631      	mov	r1, r6
     f98:	fb0b 4202 	mla	r2, fp, r2, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
     f9e:	9807      	ldr	r0, [sp, #28]
     fa0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
     fa4:	6852      	ldr	r2, [r2, #4]
     fa6:	9303      	str	r3, [sp, #12]
     fa8:	9202      	str	r2, [sp, #8]
     faa:	f00a f9de 	bl	b36a <flash_area_erase>
        if ((size + this_size) >= src_size) {
     fae:	9a02      	ldr	r2, [sp, #8]
     fb0:	9b03      	ldr	r3, [sp, #12]
     fb2:	4416      	add	r6, r2
     fb4:	454e      	cmp	r6, r9
     fb6:	f0c0 80a9 	bcc.w	110c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10c>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
     fba:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
     fbe:	fbb9 f9f6 	udiv	r9, r9, r6
     fc2:	fb06 6609 	mla	r6, r6, r9, r6
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     fc6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
     fca:	f009 fbdf 	bl	a78c <boot_trailer_sz>
     fce:	2358      	movs	r3, #88	; 0x58
    return BOOT_IMG(state, slot).num_sectors;
     fd0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     fd4:	fb03 4202 	mla	r2, r3, r2, r4
     fd8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     fda:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
     fdc:	6819      	ldr	r1, [r3, #0]
     fde:	3a01      	subs	r2, #1
     fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
     fe4:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
     fe6:	f8d3 e004 	ldr.w	lr, [r3, #4]
     fea:	469c      	mov	ip, r3
     fec:	4472      	add	r2, lr
    } while (sz < trailer_sz);
     fee:	4290      	cmp	r0, r2
     ff0:	f1a3 0308 	sub.w	r3, r3, #8
     ff4:	d8f7      	bhi.n	fe6 <FIH_LABEL_FIH_CALL_END_2172+0x27e>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     ff6:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
     ffa:	9807      	ldr	r0, [sp, #28]
     ffc:	1a59      	subs	r1, r3, r1
     ffe:	f00a f9b4 	bl	b36a <flash_area_erase>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
    1002:	2300      	movs	r3, #0
    1004:	4620      	mov	r0, r4
    1006:	9a07      	ldr	r2, [sp, #28]
    1008:	990e      	ldr	r1, [sp, #56]	; 0x38
    100a:	9601      	str	r6, [sp, #4]
    100c:	9300      	str	r3, [sp, #0]
    100e:	f7ff fd83 	bl	b18 <boot_copy_region>
    if (rc != 0) {
    1012:	bb78      	cbnz	r0, 1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
    rc = boot_write_magic(fap_primary_slot);
    1014:	9807      	ldr	r0, [sp, #28]
    1016:	f005 faf5 	bl	6604 <boot_write_magic>
    if (rc != 0) {
    101a:	bb58      	cbnz	r0, 1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
    101c:	f04f 0958 	mov.w	r9, #88	; 0x58
    1020:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1024:	4632      	mov	r2, r6
    1026:	fb09 4300 	mla	r3, r9, r0, r4
    102a:	6a19      	ldr	r1, [r3, #32]
    102c:	f00a fff0 	bl	c010 <boot_copy_region_post_hook>
    if (rc != 0) {
    1030:	4601      	mov	r1, r0
    1032:	b9f8      	cbnz	r0, 1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>
    1034:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    1038:	980e      	ldr	r0, [sp, #56]	; 0x38
    103a:	fb09 4303 	mla	r3, r9, r3, r4
	return fs->fs_size;
    103e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1040:	685a      	ldr	r2, [r3, #4]
    1042:	f00a f992 	bl	b36a <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
    1046:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    104a:	fb09 4303 	mla	r3, r9, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
    104e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    1052:	3b01      	subs	r3, #1
    1054:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1058:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    105c:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
    105e:	6842      	ldr	r2, [r0, #4]
    1060:	1ac9      	subs	r1, r1, r3
    1062:	980e      	ldr	r0, [sp, #56]	; 0x38
    1064:	f00a f981 	bl	b36a <flash_area_erase>
    flash_area_close(fap_primary_slot);
    1068:	9807      	ldr	r0, [sp, #28]
    106a:	f00a f953 	bl	b314 <flash_area_close>
    flash_area_close(fap_secondary_slot);
    106e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1070:	f00a f950 	bl	b314 <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1074:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1078:	4423      	add	r3, r4
    107a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    107e:	2bff      	cmp	r3, #255	; 0xff
    1080:	d147      	bne.n	1112 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x112>
            FIH_PANIC;
    1082:	e7fe      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
    return &BOOT_IMG(state, slot).hdr;
    1084:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1088:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    108a:	fb07 4303 	mla	r3, r7, r3, r4
    108e:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
    1090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1092:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1094:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1096:	4631      	mov	r1, r6
    1098:	2304      	movs	r3, #4
    109a:	f00a f93c 	bl	b316 <flash_area_read>
    109e:	2800      	cmp	r0, #0
    10a0:	f47f af57 	bne.w	f52 <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    10a4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    10a8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    10ac:	fb07 4303 	mla	r3, r7, r3, r4
    10b0:	f8b3 a036 	ldrh.w	sl, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    10b4:	f646 1308 	movw	r3, #26888	; 0x6908
    10b8:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    10ba:	9807      	ldr	r0, [sp, #28]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    10bc:	d119      	bne.n	10f2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xf2>
        if (protect_tlv_size != info.it_tlv_tot) {
    10be:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    10c2:	459a      	cmp	sl, r3
    10c4:	f47f af45 	bne.w	f52 <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    10c8:	2304      	movs	r3, #4
    10ca:	aa0e      	add	r2, sp, #56	; 0x38
    10cc:	eb0a 0106 	add.w	r1, sl, r6
    10d0:	f00a f921 	bl	b316 <flash_area_read>
    10d4:	2800      	cmp	r0, #0
    10d6:	f47f af3c 	bne.w	f52 <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    10da:	f646 1307 	movw	r3, #26887	; 0x6907
    10de:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    10e2:	429a      	cmp	r2, r3
    10e4:	f47f af35 	bne.w	f52 <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    10e8:	f8bd 903a 	ldrh.w	r9, [sp, #58]	; 0x3a
    10ec:	44d1      	add	r9, sl
    10ee:	44b1      	add	r9, r6
    rc = 0;
    10f0:	e731      	b.n	f56 <FIH_LABEL_FIH_CALL_END_2172+0x1ee>
    } else if (protect_tlv_size != 0) {
    10f2:	f1ba 0f00 	cmp.w	sl, #0
    10f6:	d0f0      	beq.n	10da <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xda>
    10f8:	e72b      	b.n	f52 <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    10fa:	f000 fdc3 	bl	1c84 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10fe:	2008      	movs	r0, #8
    1100:	e739      	b.n	f76 <FIH_LABEL_FIH_CALL_END_2172+0x20e>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1102:	2004      	movs	r0, #4
    1104:	f000 fdbe 	bl	1c84 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1108:	2002      	movs	r0, #2
    110a:	e734      	b.n	f76 <FIH_LABEL_FIH_CALL_END_2172+0x20e>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    110c:	f10a 0a01 	add.w	sl, sl, #1
    1110:	e73d      	b.n	f8e <FIH_LABEL_FIH_CALL_END_2172+0x226>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1112:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
    1116:	3601      	adds	r6, #1
    1118:	b2f6      	uxtb	r6, r6
    111a:	e6ab      	b.n	e74 <FIH_LABEL_FIH_CALL_END_2172+0x10c>
        FIH_SET(tmp_img_mask, state->img_mask[BOOT_CURR_IMG(state)]);
    111c:	4423      	add	r3, r4
    111e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    1122:	f88d 201c 	strb.w	r2, [sp, #28]
        if (FIH_EQ(tmp_img_mask, true)) {
    1126:	f89d 201c 	ldrb.w	r2, [sp, #28]
    112a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    112e:	b13a      	cbz	r2, 1140 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x140>
        ++fih_cnt;
    1130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1132:	3301      	adds	r3, #1
    1134:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1136:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    113a:	3301      	adds	r3, #1
    113c:	b2db      	uxtb	r3, r3
    113e:	e6a3      	b.n	e88 <FIH_LABEL_FIH_CALL_END_2172+0x120>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1140:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    1144:	2b01      	cmp	r3, #1
    1146:	d015      	beq.n	1174 <FIH_LABEL_FIH_CALL_START_3742>
            rc = boot_read_image_headers(state, false, &bs);
    1148:	4620      	mov	r0, r4
    114a:	aa0a      	add	r2, sp, #40	; 0x28
    114c:	f009 fb8f 	bl	a86e <boot_read_image_headers>
            if (rc != 0) {
    1150:	b180      	cbz	r0, 1174 <FIH_LABEL_FIH_CALL_START_3742>
                FIH_SET(fih_rc, FIH_FAILURE);
    1152:	f8d8 5000 	ldr.w	r5, [r8]
     * easily recover them.
     */
#if defined(MCUBOOT_ENC_IMAGES) || defined(MCUBOOT_SWAP_SAVE_ENCTLV)
    like_mbedtls_zeroize(&bs, sizeof(bs));
#else
    memset(&bs, 0, sizeof(struct boot_status));
    1156:	2210      	movs	r2, #16
    1158:	2100      	movs	r1, #0
    115a:	a80a      	add	r0, sp, #40	; 0x28
    115c:	f00a fbb2 	bl	b8c4 <memset>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1160:	2658      	movs	r6, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1162:	2300      	movs	r3, #0
    1164:	2b01      	cmp	r3, #1
    1166:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    116a:	d915      	bls.n	1198 <FIH_LABEL_FIH_CALL_END_3756+0x1c>
#endif

    close_all_flash_areas(state);
    FIH_RET(fih_rc);
}
    116c:	4628      	mov	r0, r5
    116e:	b015      	add	sp, #84	; 0x54
    1170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001174 <FIH_LABEL_FIH_CALL_START_3742>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    1174:	2100      	movs	r1, #0
    1176:	4620      	mov	r0, r4
    1178:	f7ff fc0c 	bl	994 <boot_validate_slot.isra.0>

0000117c <FIH_LABEL_FIH_CALL_END_3756>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
    117c:	6833      	ldr	r3, [r6, #0]
    117e:	4283      	cmp	r3, r0
    1180:	d1e7      	bne.n	1152 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x152>
    1182:	f8d8 2000 	ldr.w	r2, [r8]
    1186:	429a      	cmp	r2, r3
    1188:	d0e3      	beq.n	1152 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x152>
                FIH_EQ(fih_rc, FIH_FAILURE) ||
    118a:	683a      	ldr	r2, [r7, #0]
    118c:	429a      	cmp	r2, r3
    118e:	d1cf      	bne.n	1130 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x130>
    1190:	e7df      	b.n	1152 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x152>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1192:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
    if (BOOT_CURR_IMG(state) >= BOOT_IMAGE_NUMBER) {
    1196:	e031      	b.n	11fc <FIH_LABEL_FIH_CALL_END_3756+0x80>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    1198:	18e2      	adds	r2, r4, r3
    119a:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    119e:	b95a      	cbnz	r2, 11b8 <FIH_LABEL_FIH_CALL_END_3756+0x3c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    11a0:	fb06 4303 	mla	r3, r6, r3, r4
    11a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    11a6:	f00a f8b5 	bl	b314 <flash_area_close>
    11aa:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11ae:	fb06 4303 	mla	r3, r6, r3, r4
    11b2:	6a18      	ldr	r0, [r3, #32]
    11b4:	f00a f8ae 	bl	b314 <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11b8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11bc:	3301      	adds	r3, #1
    11be:	b2db      	uxtb	r3, r3
    11c0:	e7d0      	b.n	1164 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x164>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    11c2:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
    11c6:	b123      	cbz	r3, 11d2 <FIH_LABEL_FIH_CALL_END_3756+0x56>
    11c8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    11cc:	2b00      	cmp	r3, #0
    11ce:	d1e0      	bne.n	1192 <FIH_LABEL_FIH_CALL_END_3756+0x16>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11d0:	2301      	movs	r3, #1
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
    11d2:	2658      	movs	r6, #88	; 0x58
    11d4:	fb06 4203 	mla	r2, r6, r3, r4
    11d8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    11dc:	6a10      	ldr	r0, [r2, #32]
    11de:	f009 fa1e 	bl	a61e <flash_area_get_device_id>
    11e2:	7128      	strb	r0, [r5, #4]
    return flash_area_get_off(BOOT_IMG(state, slot).area);
    11e4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11e8:	fb06 4303 	mla	r3, r6, r3, r4
	return (uint32_t)fa->fa_off;
    11ec:	6a1b      	ldr	r3, [r3, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	60ab      	str	r3, [r5, #8]
    return &BOOT_IMG(state, slot).hdr;
    11f2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11f6:	fb03 4606 	mla	r6, r3, r6, r4
    rsp->br_hdr = boot_img_hdr(state, active_slot);
    11fa:	602e      	str	r6, [r5, #0]
    fih_rc = FIH_SUCCESS;
    11fc:	4b01      	ldr	r3, [pc, #4]	; (1204 <FIH_LABEL_FIH_CALL_END_3756+0x88>)
    11fe:	681d      	ldr	r5, [r3, #0]
    1200:	e7a9      	b.n	1156 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x156>
    1202:	bf00      	nop
    1204:	20002770 	.word	0x20002770

00001208 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_ret
boot_go(struct boot_rsp *rsp)
{
    1208:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    120a:	4d06      	ldr	r5, [pc, #24]	; (1224 <FIH_LABEL_FIH_CALL_END_4491+0x4>)
{
    120c:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    120e:	22bc      	movs	r2, #188	; 0xbc
    1210:	2100      	movs	r1, #0
    1212:	4628      	mov	r0, r5
    1214:	f00a fb56 	bl	b8c4 <memset>

00001218 <FIH_LABEL_FIH_CALL_START_4477>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1218:	4621      	mov	r1, r4
    121a:	4628      	mov	r0, r5
    121c:	f7ff fcd2 	bl	bc4 <context_boot_go>

00001220 <FIH_LABEL_FIH_CALL_END_4491>:
}
    1220:	bd38      	pop	{r3, r4, r5, pc}
    1222:	bf00      	nop
    1224:	20012b74 	.word	0x20012b74

00001228 <cleanup_arm_nvic>:
    1228:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    122c:	b672      	cpsid	i
    122e:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1234:	4a09      	ldr	r2, [pc, #36]	; (125c <cleanup_arm_nvic+0x34>)
    1236:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    123a:	3301      	adds	r3, #1
    123c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    123e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1242:	d1f8      	bne.n	1236 <cleanup_arm_nvic+0xe>
    1244:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    124a:	4a04      	ldr	r2, [pc, #16]	; (125c <cleanup_arm_nvic+0x34>)
    124c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1250:	3301      	adds	r3, #1
    1252:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1254:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1258:	d1f8      	bne.n	124c <cleanup_arm_nvic+0x24>
	}
}
    125a:	4770      	bx	lr
    125c:	e000e100 	.word	0xe000e100

00001260 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1260:	b538      	push	{r3, r4, r5, lr}
}
#endif

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1262:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1268:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    126a:	4b1a      	ldr	r3, [pc, #104]	; (12d4 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    126c:	4629      	mov	r1, r5
    126e:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1270:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1274:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    127c:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    127e:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1282:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1286:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    128a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    128e:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1290:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1294:	4810      	ldr	r0, [pc, #64]	; (12d8 <nrf_cleanup_peripheral+0x78>)
    1296:	f00a fb15 	bl	b8c4 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	4629      	mov	r1, r5
    129e:	480f      	ldr	r0, [pc, #60]	; (12dc <nrf_cleanup_peripheral+0x7c>)
    12a0:	f00a fb10 	bl	b8c4 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    12a4:	4b0e      	ldr	r3, [pc, #56]	; (12e0 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    12a6:	2280      	movs	r2, #128	; 0x80
    12a8:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    12ac:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    12ae:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12b2:	480c      	ldr	r0, [pc, #48]	; (12e4 <nrf_cleanup_peripheral+0x84>)
    12b4:	f00a fb06 	bl	b8c4 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    12b8:	2280      	movs	r2, #128	; 0x80
    12ba:	4629      	mov	r1, r5
    12bc:	480a      	ldr	r0, [pc, #40]	; (12e8 <nrf_cleanup_peripheral+0x88>)
    12be:	f00a fb01 	bl	b8c4 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    12c2:	4b0a      	ldr	r3, [pc, #40]	; (12ec <nrf_cleanup_peripheral+0x8c>)
    12c4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    12c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    12cc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    12d0:	bd38      	pop	{r3, r4, r5, pc}
    12d2:	bf00      	nop
    12d4:	50014000 	.word	0x50014000
    12d8:	50008080 	.word	0x50008080
    12dc:	50008180 	.word	0x50008180
    12e0:	50009000 	.word	0x50009000
    12e4:	50009080 	.word	0x50009080
    12e8:	50009180 	.word	0x50009180
    12ec:	50017000 	.word	0x50017000

000012f0 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    12f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12f4:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    12f6:	b915      	cbnz	r5, 12fe <base64_encode+0xe>
		*olen = 0;
    12f8:	6015      	str	r5, [r2, #0]
		return 0;
    12fa:	2000      	movs	r0, #0
    12fc:	e012      	b.n	1324 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    12fe:	2403      	movs	r4, #3
    1300:	fbb5 f4f4 	udiv	r4, r5, r4
    1304:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1308:	42bd      	cmp	r5, r7
    130a:	bf18      	it	ne
    130c:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    130e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1312:	d209      	bcs.n	1328 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1314:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    1316:	3401      	adds	r4, #1
    1318:	428c      	cmp	r4, r1
    131a:	d800      	bhi.n	131e <base64_encode+0x2e>
    131c:	b938      	cbnz	r0, 132e <base64_encode+0x3e>
		return -ENOMEM;
    131e:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    1322:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1328:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    132c:	e7f7      	b.n	131e <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    132e:	4604      	mov	r4, r0
    1330:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1332:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 13e8 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    1336:	42b9      	cmp	r1, r7
    1338:	f103 0c03 	add.w	ip, r3, #3
    133c:	f104 0604 	add.w	r6, r4, #4
    1340:	d32b      	bcc.n	139a <base64_encode+0xaa>
	if (i < slen) {
    1342:	42a9      	cmp	r1, r5
    1344:	4627      	mov	r7, r4
    1346:	d223      	bcs.n	1390 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1348:	f101 0c01 	add.w	ip, r1, #1
    134c:	45ac      	cmp	ip, r5
		C1 = *src++;
    134e:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1350:	bf28      	it	cs
    1352:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1354:	4924      	ldr	r1, [pc, #144]	; (13e8 <base64_encode+0xf8>)
    1356:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    135a:	bf38      	it	cc
    135c:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    135e:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    1362:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1364:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1368:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    136c:	bf2e      	itee	cs
    136e:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1370:	009b      	lslcc	r3, r3, #2
    1372:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1376:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    137a:	bf38      	it	cc
    137c:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    137e:	f007 0730 	and.w	r7, r7, #48	; 0x30
    1382:	f81e 7007 	ldrb.w	r7, [lr, r7]
    1386:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    1388:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    138a:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    138c:	4637      	mov	r7, r6
    138e:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    1390:	2300      	movs	r3, #0
	*olen = p - dst;
    1392:	1a38      	subs	r0, r7, r0
    1394:	6010      	str	r0, [r2, #0]
	*p = 0U;
    1396:	703b      	strb	r3, [r7, #0]
	return 0;
    1398:	e7af      	b.n	12fa <base64_encode+0xa>
		C1 = *src++;
    139a:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    139e:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13a2:	ea4f 09a4 	mov.w	r9, r4, asr #2
    13a6:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13aa:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    13ac:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13b0:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13b4:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13b8:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    13bc:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    13c0:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13c2:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    13c6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    13ca:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    13ce:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    13d0:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    13d4:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    13d8:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    13dc:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    13de:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    13e2:	3103      	adds	r1, #3
    13e4:	4663      	mov	r3, ip
    13e6:	e7a6      	b.n	1336 <base64_encode+0x46>
    13e8:	0000f4e0 	.word	0x0000f4e0

000013ec <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    13ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    13f0:	2700      	movs	r7, #0
    13f2:	463c      	mov	r4, r7
    13f4:	463d      	mov	r5, r7
{
    13f6:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    13fa:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1524 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    13fe:	4575      	cmp	r5, lr
    1400:	d31f      	bcc.n	1442 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    1402:	bbe4      	cbnz	r4, 147e <base64_decode+0x92>
		*olen = 0;
		return 0;
    1404:	2000      	movs	r0, #0
		*olen = 0;
    1406:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    140c:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    140e:	4576      	cmp	r6, lr
    1410:	d033      	beq.n	147a <base64_decode+0x8e>
    1412:	f813 c006 	ldrb.w	ip, [r3, r6]
    1416:	f1bc 0f20 	cmp.w	ip, #32
    141a:	d0f7      	beq.n	140c <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    141c:	ebae 0906 	sub.w	r9, lr, r6
    1420:	f1b9 0f01 	cmp.w	r9, #1
    1424:	eba6 0505 	sub.w	r5, r6, r5
    1428:	d00d      	beq.n	1446 <base64_decode+0x5a>
    142a:	f1bc 0f0d 	cmp.w	ip, #13
    142e:	d10a      	bne.n	1446 <base64_decode+0x5a>
    1430:	eb03 0906 	add.w	r9, r3, r6
    1434:	f899 9001 	ldrb.w	r9, [r9, #1]
    1438:	f1b9 0f0a 	cmp.w	r9, #10
    143c:	d16e      	bne.n	151c <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    143e:	1c75      	adds	r5, r6, #1
    1440:	e7dd      	b.n	13fe <base64_decode+0x12>
    1442:	462e      	mov	r6, r5
    1444:	e7e3      	b.n	140e <base64_decode+0x22>
		if (src[i] == '\n') {
    1446:	f1bc 0f0a 	cmp.w	ip, #10
    144a:	d0f8      	beq.n	143e <base64_decode+0x52>
		if (x != 0U) {
    144c:	b92d      	cbnz	r5, 145a <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    144e:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    1452:	d105      	bne.n	1460 <base64_decode+0x74>
    1454:	3701      	adds	r7, #1
    1456:	2f02      	cmp	r7, #2
    1458:	d90d      	bls.n	1476 <base64_decode+0x8a>
			return -EINVAL;
    145a:	f06f 0015 	mvn.w	r0, #21
    145e:	e7d3      	b.n	1408 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1460:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1464:	d1f9      	bne.n	145a <base64_decode+0x6e>
    1466:	f818 500c 	ldrb.w	r5, [r8, ip]
    146a:	2d7f      	cmp	r5, #127	; 0x7f
    146c:	d0f5      	beq.n	145a <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    146e:	2d3f      	cmp	r5, #63	; 0x3f
    1470:	d801      	bhi.n	1476 <base64_decode+0x8a>
    1472:	2f00      	cmp	r7, #0
    1474:	d1f1      	bne.n	145a <base64_decode+0x6e>
		n++;
    1476:	3401      	adds	r4, #1
    1478:	e7e1      	b.n	143e <base64_decode+0x52>
    147a:	4635      	mov	r5, r6
    147c:	e7c1      	b.n	1402 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    147e:	f04f 0c06 	mov.w	ip, #6
    1482:	f004 0607 	and.w	r6, r4, #7
    1486:	08e4      	lsrs	r4, r4, #3
    1488:	fb0c f606 	mul.w	r6, ip, r6
    148c:	fb0c f404 	mul.w	r4, ip, r4
    1490:	3607      	adds	r6, #7
	n -= j;
    1492:	1be4      	subs	r4, r4, r7
    1494:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    1498:	b170      	cbz	r0, 14b8 <base64_decode+0xcc>
    149a:	428c      	cmp	r4, r1
    149c:	d80c      	bhi.n	14b8 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    149e:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    14a0:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14a2:	2603      	movs	r6, #3
    14a4:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    14a6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1524 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    14aa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1528 <base64_decode+0x13c>
    14ae:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14b0:	429d      	cmp	r5, r3
    14b2:	d105      	bne.n	14c0 <base64_decode+0xd4>
	*olen = p - dst;
    14b4:	1a0c      	subs	r4, r1, r0
	return 0;
    14b6:	e7a5      	b.n	1404 <base64_decode+0x18>
		return -ENOMEM;
    14b8:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    14bc:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    14be:	e7a3      	b.n	1408 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    14c0:	f813 9b01 	ldrb.w	r9, [r3], #1
    14c4:	f1a9 0c0a 	sub.w	ip, r9, #10
    14c8:	fa5f fc8c 	uxtb.w	ip, ip
    14cc:	f1bc 0f16 	cmp.w	ip, #22
    14d0:	d804      	bhi.n	14dc <base64_decode+0xf0>
    14d2:	fa48 fc0c 	asr.w	ip, r8, ip
    14d6:	f01c 0f01 	tst.w	ip, #1
    14da:	d0e9      	beq.n	14b0 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    14dc:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    14e0:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    14e2:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    14e6:	bf08      	it	eq
    14e8:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    14ea:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    14ee:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    14f0:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    14f4:	d1dc      	bne.n	14b0 <base64_decode+0xc4>
			if (j > 0) {
    14f6:	b17e      	cbz	r6, 1518 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    14f8:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    14fa:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    14fc:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    14fe:	d102      	bne.n	1506 <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    1500:	3101      	adds	r1, #1
			n = 0;
    1502:	2400      	movs	r4, #0
    1504:	e7d4      	b.n	14b0 <base64_decode+0xc4>
			if (j > 2) {
    1506:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    1508:	ea4f 2417 	mov.w	r4, r7, lsr #8
    150c:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    150e:	bf16      	itet	ne
    1510:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1512:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1514:	3103      	addne	r1, #3
    1516:	e7f4      	b.n	1502 <base64_decode+0x116>
			n = 0;
    1518:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    151a:	e7c9      	b.n	14b0 <base64_decode+0xc4>
		if (x != 0U) {
    151c:	2d00      	cmp	r5, #0
    151e:	d0a2      	beq.n	1466 <base64_decode+0x7a>
    1520:	e79b      	b.n	145a <base64_decode+0x6e>
    1522:	bf00      	nop
    1524:	0000f460 	.word	0x0000f460
    1528:	ffbffff6 	.word	0xffbffff6

0000152c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1530:	8b05      	ldrh	r5, [r0, #24]
{
    1532:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1534:	0728      	lsls	r0, r5, #28
{
    1536:	4690      	mov	r8, r2
	if (processing) {
    1538:	d411      	bmi.n	155e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    153a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    153c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1540:	f040 80cd 	bne.w	16de <process_event+0x1b2>
			evt = process_recheck(mgr);
    1544:	4620      	mov	r0, r4
    1546:	f009 fd02 	bl	af4e <process_recheck>
		}

		if (evt == EVT_NOP) {
    154a:	b178      	cbz	r0, 156c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    154c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    154e:	8b21      	ldrh	r1, [r4, #24]
    1550:	2804      	cmp	r0, #4
    1552:	d811      	bhi.n	1578 <process_event+0x4c>
    1554:	e8df f000 	tbb	[pc, r0]
    1558:	856d10c3 	.word	0x856d10c3
    155c:	95          	.byte	0x95
    155d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    155e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1560:	bf0c      	ite	eq
    1562:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1566:	f045 0520 	orrne.w	r5, r5, #32
    156a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    156c:	f388 8811 	msr	BASEPRI, r8
    1570:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1578:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    157c:	45aa      	cmp	sl, r5
    157e:	f000 80a6 	beq.w	16ce <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1582:	2700      	movs	r7, #0
    1584:	46b9      	mov	r9, r7
    1586:	463e      	mov	r6, r7
    1588:	68a3      	ldr	r3, [r4, #8]
    158a:	2b00      	cmp	r3, #0
    158c:	f000 80bd 	beq.w	170a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1590:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1594:	8321      	strh	r1, [r4, #24]
    1596:	f388 8811 	msr	BASEPRI, r8
    159a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    159e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15a0:	2900      	cmp	r1, #0
    15a2:	f000 80bb 	beq.w	171c <process_event+0x1f0>
	return node->next;
    15a6:	680d      	ldr	r5, [r1, #0]
    15a8:	2900      	cmp	r1, #0
    15aa:	f000 80b7 	beq.w	171c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    15ae:	4633      	mov	r3, r6
    15b0:	4652      	mov	r2, sl
    15b2:	4620      	mov	r0, r4
    15b4:	f8d1 8004 	ldr.w	r8, [r1, #4]
    15b8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15ba:	2d00      	cmp	r5, #0
    15bc:	d076      	beq.n	16ac <process_event+0x180>
    15be:	682b      	ldr	r3, [r5, #0]
    15c0:	4629      	mov	r1, r5
    15c2:	461d      	mov	r5, r3
    15c4:	e7f0      	b.n	15a8 <process_event+0x7c>
    15c6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    15ca:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    15cc:	2a01      	cmp	r2, #1
    15ce:	d81b      	bhi.n	1608 <process_event+0xdc>
	list->head = NULL;
    15d0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15d2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    15d6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    15d8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15da:	b289      	uxth	r1, r1
	list->tail = NULL;
    15dc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    15e0:	d109      	bne.n	15f6 <process_event+0xca>
    15e2:	463b      	mov	r3, r7
    15e4:	e003      	b.n	15ee <process_event+0xc2>
				mgr->refs += 1U;
    15e6:	8b62      	ldrh	r2, [r4, #26]
    15e8:	3201      	adds	r2, #1
    15ea:	8362      	strh	r2, [r4, #26]
	return node->next;
    15ec:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    15ee:	2b00      	cmp	r3, #0
    15f0:	d1f9      	bne.n	15e6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15f2:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    15f6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    15f8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    15fa:	f009 fca8 	bl	af4e <process_recheck>
    15fe:	2800      	cmp	r0, #0
    1600:	d07b      	beq.n	16fa <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1602:	f041 0120 	orr.w	r1, r1, #32
    1606:	e077      	b.n	16f8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1608:	2b04      	cmp	r3, #4
    160a:	d10a      	bne.n	1622 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    160c:	f021 0107 	bic.w	r1, r1, #7
    1610:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1612:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1614:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1616:	f009 fc9a 	bl	af4e <process_recheck>
    161a:	b110      	cbz	r0, 1622 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    161c:	f041 0120 	orr.w	r1, r1, #32
    1620:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1622:	8b21      	ldrh	r1, [r4, #24]
    1624:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1628:	45aa      	cmp	sl, r5
    162a:	d050      	beq.n	16ce <process_event+0x1a2>
    162c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    162e:	46b9      	mov	r9, r7
    1630:	e7aa      	b.n	1588 <process_event+0x5c>
			transit = mgr->transitions->start;
    1632:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1634:	f021 0107 	bic.w	r1, r1, #7
    1638:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    163c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    163e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1642:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1644:	d12d      	bne.n	16a2 <process_event+0x176>
		    || (transit != NULL)) {
    1646:	f1b9 0f00 	cmp.w	r9, #0
    164a:	d040      	beq.n	16ce <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    164c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1650:	8321      	strh	r1, [r4, #24]
    1652:	f388 8811 	msr	BASEPRI, r8
    1656:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    165a:	4620      	mov	r0, r4
    165c:	4939      	ldr	r1, [pc, #228]	; (1744 <process_event+0x218>)
    165e:	47c8      	blx	r9
    1660:	e029      	b.n	16b6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1662:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1666:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1668:	f041 0104 	orr.w	r1, r1, #4
    166c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    166e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1670:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1674:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1676:	d0e6      	beq.n	1646 <process_event+0x11a>
    1678:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    167a:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    167e:	463e      	mov	r6, r7
    1680:	e782      	b.n	1588 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1682:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1686:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1688:	f041 0105 	orr.w	r1, r1, #5
    168c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    168e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1690:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1694:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1696:	d0d6      	beq.n	1646 <process_event+0x11a>
    1698:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    169a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    169e:	463e      	mov	r6, r7
    16a0:	e772      	b.n	1588 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    16a2:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16a4:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    16a8:	463e      	mov	r6, r7
    16aa:	e76d      	b.n	1588 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16ac:	462b      	mov	r3, r5
    16ae:	e787      	b.n	15c0 <process_event+0x94>
			if (transit != NULL) {
    16b0:	f1b9 0f00 	cmp.w	r9, #0
    16b4:	d1d1      	bne.n	165a <process_event+0x12e>
	__asm__ volatile(
    16b6:	f04f 0320 	mov.w	r3, #32
    16ba:	f3ef 8811 	mrs	r8, BASEPRI
    16be:	f383 8812 	msr	BASEPRI_MAX, r3
    16c2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    16c6:	8b23      	ldrh	r3, [r4, #24]
    16c8:	f023 0308 	bic.w	r3, r3, #8
    16cc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    16ce:	8b25      	ldrh	r5, [r4, #24]
    16d0:	06ea      	lsls	r2, r5, #27
    16d2:	d52e      	bpl.n	1732 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    16d4:	f025 0310 	bic.w	r3, r5, #16
    16d8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    16da:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    16de:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16e0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    16e2:	2e00      	cmp	r6, #0
    16e4:	f6bf af6f 	bge.w	15c6 <process_event+0x9a>
	list->head = NULL;
    16e8:	2300      	movs	r3, #0
		*clients = mgr->clients;
    16ea:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    16ec:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16f0:	f021 0107 	bic.w	r1, r1, #7
    16f4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16f8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16fa:	8b21      	ldrh	r1, [r4, #24]
    16fc:	f04f 0900 	mov.w	r9, #0
    1700:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1704:	45aa      	cmp	sl, r5
    1706:	f47f af3f 	bne.w	1588 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    170a:	2f00      	cmp	r7, #0
    170c:	d09b      	beq.n	1646 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    170e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1712:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1714:	f388 8811 	msr	BASEPRI, r8
    1718:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    171c:	2f00      	cmp	r7, #0
    171e:	d0c7      	beq.n	16b0 <process_event+0x184>
	return node->next;
    1720:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1722:	4639      	mov	r1, r7
    1724:	4633      	mov	r3, r6
    1726:	4652      	mov	r2, sl
    1728:	4620      	mov	r0, r4
    172a:	f009 fc3c 	bl	afa6 <notify_one>
	list->head = node;
    172e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1730:	e7f4      	b.n	171c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1732:	06ab      	lsls	r3, r5, #26
    1734:	f57f af1a 	bpl.w	156c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1738:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    173c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    173e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1742:	e6ff      	b.n	1544 <process_event+0x18>
    1744:	0000afd3 	.word	0x0000afd3

00001748 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    174c:	4682      	mov	sl, r0
	size_t count = 0;
    174e:	f04f 0900 	mov.w	r9, #0
{
    1752:	b08d      	sub	sp, #52	; 0x34
    1754:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1756:	1e53      	subs	r3, r2, #1
{
    1758:	9101      	str	r1, [sp, #4]
	fmt--;
    175a:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    175c:	9b03      	ldr	r3, [sp, #12]
    175e:	7858      	ldrb	r0, [r3, #1]
    1760:	1c5c      	adds	r4, r3, #1
    1762:	2825      	cmp	r0, #37	; 0x25
    1764:	d119      	bne.n	179a <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1766:	2000      	movs	r0, #0
	precision = -1;
    1768:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    176c:	461e      	mov	r6, r3
	min_width = -1;
    176e:	4644      	mov	r4, r8
	length_mod = 0;
    1770:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    1772:	3602      	adds	r6, #2
	padding_mode = 0;
    1774:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    1776:	7831      	ldrb	r1, [r6, #0]
    1778:	9603      	str	r6, [sp, #12]
    177a:	2939      	cmp	r1, #57	; 0x39
    177c:	d855      	bhi.n	182a <z_cbvprintf_impl+0xe2>
    177e:	291f      	cmp	r1, #31
    1780:	d814      	bhi.n	17ac <z_cbvprintf_impl+0x64>
    1782:	2900      	cmp	r1, #0
    1784:	f000 81ef 	beq.w	1b66 <CONFIG_USB_DEVICE_VID+0x251>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1788:	9901      	ldr	r1, [sp, #4]
    178a:	2025      	movs	r0, #37	; 0x25
    178c:	47d0      	blx	sl
			OUTC(*fmt);
    178e:	9901      	ldr	r1, [sp, #4]
    1790:	7830      	ldrb	r0, [r6, #0]
    1792:	47d0      	blx	sl
    1794:	f109 0902 	add.w	r9, r9, #2
			goto start;
    1798:	e7e0      	b.n	175c <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    179a:	2800      	cmp	r0, #0
    179c:	f000 81e3 	beq.w	1b66 <CONFIG_USB_DEVICE_VID+0x251>
		OUTC(*fmt);
    17a0:	9901      	ldr	r1, [sp, #4]
    17a2:	47d0      	blx	sl
    17a4:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    17a8:	9403      	str	r4, [sp, #12]
    17aa:	e7d7      	b.n	175c <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    17ac:	f1a1 0220 	sub.w	r2, r1, #32
    17b0:	2a19      	cmp	r2, #25
    17b2:	d8e9      	bhi.n	1788 <z_cbvprintf_impl+0x40>
    17b4:	a701      	add	r7, pc, #4	; (adr r7, 17bc <z_cbvprintf_impl+0x74>)
    17b6:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    17ba:	bf00      	nop
    17bc:	00001825 	.word	0x00001825
    17c0:	00001789 	.word	0x00001789
    17c4:	00001789 	.word	0x00001789
    17c8:	00001825 	.word	0x00001825
    17cc:	00001789 	.word	0x00001789
    17d0:	000018a5 	.word	0x000018a5
    17d4:	00001789 	.word	0x00001789
    17d8:	00001789 	.word	0x00001789
    17dc:	00001789 	.word	0x00001789
    17e0:	00001789 	.word	0x00001789
    17e4:	000018f1 	.word	0x000018f1
    17e8:	00001825 	.word	0x00001825
    17ec:	00001789 	.word	0x00001789
    17f0:	00001905 	.word	0x00001905
    17f4:	000018b1 	.word	0x000018b1
    17f8:	00001789 	.word	0x00001789
    17fc:	000018bf 	.word	0x000018bf
    1800:	000018df 	.word	0x000018df
    1804:	000018df 	.word	0x000018df
    1808:	000018df 	.word	0x000018df
    180c:	000018df 	.word	0x000018df
    1810:	000018df 	.word	0x000018df
    1814:	000018df 	.word	0x000018df
    1818:	000018df 	.word	0x000018df
    181c:	000018df 	.word	0x000018df
    1820:	000018df 	.word	0x000018df
    1824:	4608      	mov	r0, r1
    1826:	3601      	adds	r6, #1
    1828:	e7a5      	b.n	1776 <z_cbvprintf_impl+0x2e>
    182a:	2958      	cmp	r1, #88	; 0x58
    182c:	f000 80eb 	beq.w	1a06 <CONFIG_USB_DEVICE_VID+0xf1>
    1830:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1834:	b2d7      	uxtb	r7, r2
    1836:	2f17      	cmp	r7, #23
    1838:	d8a6      	bhi.n	1788 <z_cbvprintf_impl+0x40>
    183a:	2a17      	cmp	r2, #23
    183c:	d8a4      	bhi.n	1788 <z_cbvprintf_impl+0x40>
    183e:	a701      	add	r7, pc, #4	; (adr r7, 1844 <z_cbvprintf_impl+0xfc>)
    1840:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1844:	00001aad 	.word	0x00001aad
    1848:	0000192b 	.word	0x0000192b
    184c:	00001789 	.word	0x00001789
    1850:	00001789 	.word	0x00001789
    1854:	00001789 	.word	0x00001789
    1858:	0000190b 	.word	0x0000190b
    185c:	0000192b 	.word	0x0000192b
    1860:	00001789 	.word	0x00001789
    1864:	00001789 	.word	0x00001789
    1868:	0000190b 	.word	0x0000190b
    186c:	00001789 	.word	0x00001789
    1870:	00001789 	.word	0x00001789
    1874:	00001789 	.word	0x00001789
    1878:	000019e1 	.word	0x000019e1
    187c:	00001789 	.word	0x00001789
    1880:	00001789 	.word	0x00001789
    1884:	00001a81 	.word	0x00001a81
    1888:	00001789 	.word	0x00001789
    188c:	0000192b 	.word	0x0000192b
    1890:	00001789 	.word	0x00001789
    1894:	00001789 	.word	0x00001789
    1898:	000019e1 	.word	0x000019e1
    189c:	00001789 	.word	0x00001789
    18a0:	0000190b 	.word	0x0000190b
			OUTC('%');
    18a4:	2025      	movs	r0, #37	; 0x25
    18a6:	9901      	ldr	r1, [sp, #4]
    18a8:	47d0      	blx	sl
    18aa:	f109 0901 	add.w	r9, r9, #1
			goto start;
    18ae:	e755      	b.n	175c <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    18b0:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    18b2:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    18b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    18ba:	9202      	str	r2, [sp, #8]
			continue;
    18bc:	e7b3      	b.n	1826 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    18be:	2c00      	cmp	r4, #0
    18c0:	da0d      	bge.n	18de <z_cbvprintf_impl+0x196>
    18c2:	f1b8 0f00 	cmp.w	r8, #0
    18c6:	da0d      	bge.n	18e4 <z_cbvprintf_impl+0x19c>
    18c8:	9a02      	ldr	r2, [sp, #8]
    18ca:	2a00      	cmp	r2, #0
    18cc:	f000 8143 	beq.w	1b56 <CONFIG_USB_DEVICE_VID+0x241>
				min_width = 10 * min_width + *fmt - '0';
    18d0:	220a      	movs	r2, #10
				if (min_width < 0) {
    18d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    18d6:	fb02 1404 	mla	r4, r2, r4, r1
    18da:	3c30      	subs	r4, #48	; 0x30
    18dc:	e7a3      	b.n	1826 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    18de:	f1b8 0f00 	cmp.w	r8, #0
    18e2:	dbf5      	blt.n	18d0 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    18e4:	220a      	movs	r2, #10
    18e6:	fb02 1208 	mla	r2, r2, r8, r1
    18ea:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    18ee:	e79a      	b.n	1826 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    18f0:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    18f4:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    18f8:	f280 812f 	bge.w	1b5a <CONFIG_USB_DEVICE_VID+0x245>
				if (min_width < 0) {
    18fc:	2a00      	cmp	r2, #0
    18fe:	f280 812e 	bge.w	1b5e <CONFIG_USB_DEVICE_VID+0x249>
					min_width = -min_width;
    1902:	4254      	negs	r4, r2
		switch (*fmt) {
    1904:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1906:	9202      	str	r2, [sp, #8]
    1908:	e78d      	b.n	1826 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    190a:	2968      	cmp	r1, #104	; 0x68
    190c:	d103      	bne.n	1916 <CONFIG_USB_DEVICE_VID+0x1>
    190e:	2b68      	cmp	r3, #104	; 0x68
    1910:	d106      	bne.n	1920 <CONFIG_USB_DEVICE_VID+0xb>
				length_mod = 'H';
    1912:	2348      	movs	r3, #72	; 0x48
    1914:	e787      	b.n	1826 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1916:	296c      	cmp	r1, #108	; 0x6c
    1918:	d102      	bne.n	1920 <CONFIG_USB_DEVICE_VID+0xb>
    191a:	2b6c      	cmp	r3, #108	; 0x6c
    191c:	f000 8121 	beq.w	1b62 <CONFIG_USB_DEVICE_VID+0x24d>
			} else if (length_mod == '\0') {
    1920:	2b00      	cmp	r3, #0
    1922:	f47f af31 	bne.w	1788 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1926:	460b      	mov	r3, r1
    1928:	e77d      	b.n	1826 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    192a:	2b7a      	cmp	r3, #122	; 0x7a
    192c:	d106      	bne.n	193c <CONFIG_USB_DEVICE_VID+0x27>
			} else if (*fmt == 'u') {
    192e:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1930:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1934:	d114      	bne.n	1960 <CONFIG_USB_DEVICE_VID+0x4b>
				d = va_arg(ap, unsigned int);
    1936:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    193a:	e00c      	b.n	1956 <CONFIG_USB_DEVICE_VID+0x41>
			} else if (length_mod == 'l') {
    193c:	2b6c      	cmp	r3, #108	; 0x6c
    193e:	d0f6      	beq.n	192e <CONFIG_USB_DEVICE_VID+0x19>
			} else if (length_mod == 'L') {
    1940:	2b4c      	cmp	r3, #76	; 0x4c
    1942:	d1f4      	bne.n	192e <CONFIG_USB_DEVICE_VID+0x19>
					unsigned long long llu =
    1944:	3507      	adds	r5, #7
    1946:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    194a:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    194c:	f103 0508 	add.w	r5, r3, #8
    1950:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1954:	d106      	bne.n	1964 <CONFIG_USB_DEVICE_VID+0x4f>
			} else if (special == ' ') {
    1956:	2820      	cmp	r0, #32
    1958:	d13b      	bne.n	19d2 <CONFIG_USB_DEVICE_VID+0xbd>
				prefix = " ";
    195a:	4f85      	ldr	r7, [pc, #532]	; (1b70 <CONFIG_USB_DEVICE_VID+0x25b>)
				min_width--;
    195c:	3c01      	subs	r4, #1
    195e:	e009      	b.n	1974 <CONFIG_USB_DEVICE_VID+0x5f>
				d = va_arg(ap, int);
    1960:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1964:	f1bb 0f00 	cmp.w	fp, #0
    1968:	daf5      	bge.n	1956 <CONFIG_USB_DEVICE_VID+0x41>
				d = -d;
    196a:	4276      	negs	r6, r6
				prefix = "-";
    196c:	4f81      	ldr	r7, [pc, #516]	; (1b74 <CONFIG_USB_DEVICE_VID+0x25f>)
				d = -d;
    196e:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1972:	3c01      	subs	r4, #1
	int i = 0;
    1974:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1978:	9305      	str	r3, [sp, #20]
				prefix = "+";
    197a:	2300      	movs	r3, #0
    197c:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    197e:	4630      	mov	r0, r6
    1980:	4659      	mov	r1, fp
    1982:	220a      	movs	r2, #10
    1984:	2300      	movs	r3, #0
    1986:	f7fe fbe5 	bl	154 <__aeabi_uldivmod>
		buftop[i--] = c + '0';
    198a:	9b05      	ldr	r3, [sp, #20]
    198c:	46b4      	mov	ip, r6
    198e:	3230      	adds	r2, #48	; 0x30
    1990:	f803 2d01 	strb.w	r2, [r3, #-1]!
    1994:	465a      	mov	r2, fp
    1996:	9305      	str	r3, [sp, #20]
		num /= base;
    1998:	9b04      	ldr	r3, [sp, #16]
	} while (num);
    199a:	f1bc 0f0a 	cmp.w	ip, #10
		num /= base;
    199e:	468b      	mov	fp, r1
	} while (num);
    19a0:	f172 0200 	sbcs.w	r2, r2, #0
    19a4:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
		num /= base;
    19a8:	4606      	mov	r6, r0
	} while (num);
    19aa:	9104      	str	r1, [sp, #16]
    19ac:	d2e7      	bcs.n	197e <CONFIG_USB_DEVICE_VID+0x69>
	return -i;
    19ae:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    19b2:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    19b4:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    19b8:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    19bc:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    19c0:	da6d      	bge.n	1a9e <CONFIG_USB_DEVICE_VID+0x189>
    19c2:	9b02      	ldr	r3, [sp, #8]
    19c4:	07d9      	lsls	r1, r3, #31
    19c6:	d47d      	bmi.n	1ac4 <CONFIG_USB_DEVICE_VID+0x1af>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    19c8:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    19cc:	eba4 040b 	sub.w	r4, r4, fp
    19d0:	e013      	b.n	19fa <CONFIG_USB_DEVICE_VID+0xe5>
			} else if (special == '+') {
    19d2:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    19d4:	bf0a      	itet	eq
    19d6:	4f68      	ldreq	r7, [pc, #416]	; (1b78 <CONFIG_USB_DEVICE_VID+0x263>)
	prefix = "";
    19d8:	4f68      	ldrne	r7, [pc, #416]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
				min_width--;
    19da:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    19de:	e7c9      	b.n	1974 <CONFIG_USB_DEVICE_VID+0x5f>
			if (*fmt == 'p') {
    19e0:	2970      	cmp	r1, #112	; 0x70
    19e2:	d10f      	bne.n	1a04 <CONFIG_USB_DEVICE_VID+0xef>
				x = (uintptr_t)va_arg(ap, void *);
    19e4:	f855 2b04 	ldr.w	r2, [r5], #4
    19e8:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    19ea:	b9fa      	cbnz	r2, 1a2c <CONFIG_USB_DEVICE_VID+0x117>
		precision -= data_len;
    19ec:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    19f0:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
    19f4:	4f61      	ldr	r7, [pc, #388]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
					data = "(nil)";
    19f6:	4e62      	ldr	r6, [pc, #392]	; (1b80 <CONFIG_USB_DEVICE_VID+0x26b>)
		min_width -= data_len;
    19f8:	3c05      	subs	r4, #5
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    19fa:	9a02      	ldr	r2, [sp, #8]
    19fc:	0792      	lsls	r2, r2, #30
    19fe:	d470      	bmi.n	1ae2 <CONFIG_USB_DEVICE_VID+0x1cd>
    1a00:	46a0      	mov	r8, r4
    1a02:	e066      	b.n	1ad2 <CONFIG_USB_DEVICE_VID+0x1bd>
		switch (*fmt) {
    1a04:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1a06:	2b6c      	cmp	r3, #108	; 0x6c
    1a08:	d103      	bne.n	1a12 <CONFIG_USB_DEVICE_VID+0xfd>
				x = va_arg(ap, unsigned int);
    1a0a:	2300      	movs	r3, #0
    1a0c:	f855 2b04 	ldr.w	r2, [r5], #4
    1a10:	e008      	b.n	1a24 <CONFIG_USB_DEVICE_VID+0x10f>
			} else if (length_mod == 'L') {
    1a12:	2b4c      	cmp	r3, #76	; 0x4c
    1a14:	d1f9      	bne.n	1a0a <CONFIG_USB_DEVICE_VID+0xf5>
				unsigned long long llx =
    1a16:	3507      	adds	r5, #7
    1a18:	f025 0307 	bic.w	r3, r5, #7
    1a1c:	461d      	mov	r5, r3
    1a1e:	685b      	ldr	r3, [r3, #4]
    1a20:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1a24:	2823      	cmp	r0, #35	; 0x23
    1a26:	d125      	bne.n	1a74 <CONFIG_USB_DEVICE_VID+0x15f>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1a28:	0688      	lsls	r0, r1, #26
    1a2a:	d521      	bpl.n	1a70 <CONFIG_USB_DEVICE_VID+0x15b>
    1a2c:	4f55      	ldr	r7, [pc, #340]	; (1b84 <CONFIG_USB_DEVICE_VID+0x26f>)
				min_width -= 2;
    1a2e:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1a30:	2600      	movs	r6, #0
    1a32:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1a36:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1a3a:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1a3e:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1a42:	2909      	cmp	r1, #9
			c += alpha;
    1a44:	bf88      	it	hi
    1a46:	4459      	addhi	r1, fp
		buftop[i--] = c + '0';
    1a48:	3130      	adds	r1, #48	; 0x30
    1a4a:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1a4e:	2a10      	cmp	r2, #16
		num /= base;
    1a50:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1a54:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1a58:	ea4f 1c13 	mov.w	ip, r3, lsr #4
	} while (num);
    1a5c:	f173 0300 	sbcs.w	r3, r3, #0
    1a60:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    1a64:	d208      	bcs.n	1a78 <CONFIG_USB_DEVICE_VID+0x163>
	return -i;
    1a66:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1a6a:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1a6e:	e7a1      	b.n	19b4 <CONFIG_USB_DEVICE_VID+0x9f>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1a70:	4f45      	ldr	r7, [pc, #276]	; (1b88 <CONFIG_USB_DEVICE_VID+0x273>)
    1a72:	e7dc      	b.n	1a2e <CONFIG_USB_DEVICE_VID+0x119>
	prefix = "";
    1a74:	4f41      	ldr	r7, [pc, #260]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
    1a76:	e7db      	b.n	1a30 <CONFIG_USB_DEVICE_VID+0x11b>
    1a78:	4606      	mov	r6, r0
		num /= base;
    1a7a:	460a      	mov	r2, r1
    1a7c:	4663      	mov	r3, ip
    1a7e:	e7de      	b.n	1a3e <CONFIG_USB_DEVICE_VID+0x129>
			data = va_arg(ap, char *);
    1a80:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1a84:	4630      	mov	r0, r6
    1a86:	f009 fee4 	bl	b852 <strlen>
			if (precision >= 0 && data_len > precision) {
    1a8a:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1a8e:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1a90:	db02      	blt.n	1a98 <CONFIG_USB_DEVICE_VID+0x183>
    1a92:	4540      	cmp	r0, r8
    1a94:	bfa8      	it	ge
    1a96:	46c3      	movge	fp, r8
			precision = 0;
    1a98:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1a9c:	4f37      	ldr	r7, [pc, #220]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
		precision -= data_len;
    1a9e:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	dd92      	ble.n	19cc <CONFIG_USB_DEVICE_VID+0xb7>
			min_width -= precision;
    1aa6:	eba4 0408 	sub.w	r4, r4, r8
    1aaa:	e7a6      	b.n	19fa <CONFIG_USB_DEVICE_VID+0xe5>
			buf[0] = c;
    1aac:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1ab0:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1ab4:	f88d 3018 	strb.w	r3, [sp, #24]
	prefix = "";
    1ab8:	4f30      	ldr	r7, [pc, #192]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
		precision -= data_len;
    1aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		min_width -= data_len;
    1abe:	3c01      	subs	r4, #1
			data = buf;
    1ac0:	ae06      	add	r6, sp, #24
    1ac2:	e79a      	b.n	19fa <CONFIG_USB_DEVICE_VID+0xe5>
    1ac4:	46a0      	mov	r8, r4
    1ac6:	e7ea      	b.n	1a9e <CONFIG_USB_DEVICE_VID+0x189>
    1ac8:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1aca:	2020      	movs	r0, #32
    1acc:	9901      	ldr	r1, [sp, #4]
    1ace:	47d0      	blx	sl
    1ad0:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1ad2:	f1b8 0801 	subs.w	r8, r8, #1
    1ad6:	d5f7      	bpl.n	1ac8 <CONFIG_USB_DEVICE_VID+0x1b3>
    1ad8:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1adc:	3c01      	subs	r4, #1
    1ade:	4491      	add	r9, r2
    1ae0:	1aa4      	subs	r4, r4, r2
    1ae2:	46b8      	mov	r8, r7
    1ae4:	e006      	b.n	1af4 <CONFIG_USB_DEVICE_VID+0x1df>
    1ae6:	9304      	str	r3, [sp, #16]
    1ae8:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1aea:	9901      	ldr	r1, [sp, #4]
    1aec:	47d0      	blx	sl
    1aee:	9a02      	ldr	r2, [sp, #8]
    1af0:	9b04      	ldr	r3, [sp, #16]
    1af2:	4690      	mov	r8, r2
		while (*prefix) {
    1af4:	4642      	mov	r2, r8
    1af6:	f812 0b01 	ldrb.w	r0, [r2], #1
    1afa:	2800      	cmp	r0, #0
    1afc:	d1f3      	bne.n	1ae6 <CONFIG_USB_DEVICE_VID+0x1d1>
    1afe:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1b00:	3a01      	subs	r2, #1
    1b02:	d515      	bpl.n	1b30 <CONFIG_USB_DEVICE_VID+0x21b>
    1b04:	2b00      	cmp	r3, #0
    1b06:	bfac      	ite	ge
    1b08:	ebc7 0703 	rsbge	r7, r7, r3
    1b0c:	427f      	neglt	r7, r7
    1b0e:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1b10:	3b01      	subs	r3, #1
    1b12:	d515      	bpl.n	1b40 <CONFIG_USB_DEVICE_VID+0x22b>
    1b14:	f1bb 0f00 	cmp.w	fp, #0
    1b18:	bfa8      	it	ge
    1b1a:	445f      	addge	r7, fp
    1b1c:	4626      	mov	r6, r4
    1b1e:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1b20:	3e01      	subs	r6, #1
    1b22:	d514      	bpl.n	1b4e <CONFIG_USB_DEVICE_VID+0x239>
    1b24:	2c00      	cmp	r4, #0
    1b26:	bfa8      	it	ge
    1b28:	193f      	addge	r7, r7, r4
    1b2a:	eb07 0908 	add.w	r9, r7, r8
    1b2e:	e615      	b.n	175c <z_cbvprintf_impl+0x14>
    1b30:	9304      	str	r3, [sp, #16]
    1b32:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1b34:	2030      	movs	r0, #48	; 0x30
    1b36:	9901      	ldr	r1, [sp, #4]
    1b38:	47d0      	blx	sl
    1b3a:	9b04      	ldr	r3, [sp, #16]
    1b3c:	9a02      	ldr	r2, [sp, #8]
    1b3e:	e7df      	b.n	1b00 <CONFIG_USB_DEVICE_VID+0x1eb>
    1b40:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1b42:	9901      	ldr	r1, [sp, #4]
    1b44:	f816 0b01 	ldrb.w	r0, [r6], #1
    1b48:	47d0      	blx	sl
    1b4a:	9b02      	ldr	r3, [sp, #8]
    1b4c:	e7e0      	b.n	1b10 <CONFIG_USB_DEVICE_VID+0x1fb>
			OUTC(' ');
    1b4e:	9901      	ldr	r1, [sp, #4]
    1b50:	2020      	movs	r0, #32
    1b52:	47d0      	blx	sl
    1b54:	e7e4      	b.n	1b20 <CONFIG_USB_DEVICE_VID+0x20b>
				padding_mode = PAD_ZERO;
    1b56:	2201      	movs	r2, #1
    1b58:	e6d5      	b.n	1906 <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    1b5a:	4690      	mov	r8, r2
    1b5c:	e663      	b.n	1826 <z_cbvprintf_impl+0xde>
    1b5e:	4614      	mov	r4, r2
    1b60:	e661      	b.n	1826 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1b62:	234c      	movs	r3, #76	; 0x4c
    1b64:	e65f      	b.n	1826 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1b66:	4648      	mov	r0, r9
    1b68:	b00d      	add	sp, #52	; 0x34
    1b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b6e:	bf00      	nop
    1b70:	0000f533 	.word	0x0000f533
    1b74:	0000f531 	.word	0x0000f531
    1b78:	0000f535 	.word	0x0000f535
    1b7c:	0000f5f5 	.word	0x0000f5f5
    1b80:	0000f53d 	.word	0x0000f53d
    1b84:	0000f537 	.word	0x0000f537
    1b88:	0000f53a 	.word	0x0000f53a

00001b8c <nrf_gpio_pin_control_select.constprop.0>:
#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1b8c:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b92:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1b96:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1b9a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1b9e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#else
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_CTRLSEL_Msk;
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_CTRLSEL_Pos);
#endif
}
    1ba2:	4770      	bx	lr
    1ba4:	50842500 	.word	0x50842500

00001ba8 <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
    1ba8:	b510      	push	{r4, lr}
	__asm__ volatile(
    1baa:	f04f 0320 	mov.w	r3, #32
    1bae:	f3ef 8411 	mrs	r4, BASEPRI
    1bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    1bb6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1bba:	2201      	movs	r2, #1
    1bbc:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1bbe:	490d      	ldr	r1, [pc, #52]	; (1bf4 <nordicsemi_nrf53_init+0x4c>)
    1bc0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1bc4:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1bc6:	2000      	movs	r0, #0
    1bc8:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    1bcc:	f7ff ffde 	bl	1b8c <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1bd0:	4610      	mov	r0, r2
    1bd2:	f7ff ffdb 	bl	1b8c <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1bd6:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1bda:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1bde:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    1be2:	f384 8811 	msr	BASEPRI, r4
    1be6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1bea:	2000      	movs	r0, #0
    1bec:	bd10      	pop	{r4, pc}
    1bee:	bf00      	nop
    1bf0:	50001000 	.word	0x50001000
    1bf4:	50004000 	.word	0x50004000

00001bf8 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1bf8:	2305      	movs	r3, #5
{
    1bfa:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1bfc:	4d14      	ldr	r5, [pc, #80]	; (1c50 <z_arm_on_enter_cpu_idle+0x58>)
    1bfe:	4e15      	ldr	r6, [pc, #84]	; (1c54 <z_arm_on_enter_cpu_idle+0x5c>)
    1c00:	782c      	ldrb	r4, [r5, #0]
    1c02:	3401      	adds	r4, #1
    1c04:	fbb4 f3f3 	udiv	r3, r4, r3
    1c08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c0c:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1c0e:	f00a f9ed 	bl	bfec <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    1c12:	4a11      	ldr	r2, [pc, #68]	; (1c58 <z_arm_on_enter_cpu_idle+0x60>)
    1c14:	7813      	ldrb	r3, [r2, #0]
    1c16:	b123      	cbz	r3, 1c22 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    1c18:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    1c1c:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    1c1e:	2807      	cmp	r0, #7
    1c20:	d914      	bls.n	1c4c <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1c22:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1c26:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    1c2a:	b141      	cbz	r1, 1c3e <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c2c:	2100      	movs	r1, #0
    1c2e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1c32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1c36:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    1c38:	b90c      	cbnz	r4, 1c3e <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
    1c3a:	2301      	movs	r3, #1
    1c3c:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    1c3e:	782c      	ldrb	r4, [r5, #0]
    1c40:	f00a f9d4 	bl	bfec <sys_clock_cycle_get_32>
    1c44:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    1c48:	2001      	movs	r0, #1
}
    1c4a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    1c4c:	2000      	movs	r0, #0
    1c4e:	e7fc      	b.n	1c4a <z_arm_on_enter_cpu_idle+0x52>
    1c50:	20015f4f 	.word	0x20015f4f
    1c54:	20012c30 	.word	0x20012c30
    1c58:	20015f4e 	.word	0x20015f4e

00001c5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1c5c:	b148      	cbz	r0, 1c72 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1c5e:	4b05      	ldr	r3, [pc, #20]	; (1c74 <arch_busy_wait+0x18>)
    1c60:	4a05      	ldr	r2, [pc, #20]	; (1c78 <arch_busy_wait+0x1c>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    1c68:	4358      	muls	r0, r3
    1c6a:	4b04      	ldr	r3, [pc, #16]	; (1c7c <arch_busy_wait+0x20>)
    1c6c:	f043 0301 	orr.w	r3, r3, #1
    1c70:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c72:	4770      	bx	lr
    1c74:	20002188 	.word	0x20002188
    1c78:	000f4240 	.word	0x000f4240
    1c7c:	0000ed90 	.word	0x0000ed90

00001c80 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1c80:	f005 b926 	b.w	6ed0 <SystemInit>

00001c84 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1c86:	4b11      	ldr	r3, [pc, #68]	; (1ccc <flash_area_open+0x48>)
{
    1c88:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1c8a:	681c      	ldr	r4, [r3, #0]
    1c8c:	b1dc      	cbz	r4, 1cc6 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1c8e:	4b10      	ldr	r3, [pc, #64]	; (1cd0 <flash_area_open+0x4c>)
    1c90:	6819      	ldr	r1, [r3, #0]
    1c92:	2300      	movs	r3, #0
    1c94:	428b      	cmp	r3, r1
    1c96:	db02      	blt.n	1c9e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1c98:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1c9c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1c9e:	4622      	mov	r2, r4
    1ca0:	f812 6b10 	ldrb.w	r6, [r2], #16
    1ca4:	4286      	cmp	r6, r0
    1ca6:	d002      	beq.n	1cae <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1ca8:	4614      	mov	r4, r2
    1caa:	3301      	adds	r3, #1
    1cac:	e7f2      	b.n	1c94 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1cae:	68e0      	ldr	r0, [r4, #12]
    1cb0:	b910      	cbnz	r0, 1cb8 <flash_area_open+0x34>
		return -ENODEV;
    1cb2:	f06f 0012 	mvn.w	r0, #18
    1cb6:	e7f1      	b.n	1c9c <flash_area_open+0x18>
    1cb8:	f00c fa91 	bl	e1de <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0f8      	beq.n	1cb2 <flash_area_open+0x2e>
	return 0;
    1cc0:	2000      	movs	r0, #0
	*fap = area;
    1cc2:	602c      	str	r4, [r5, #0]
	return 0;
    1cc4:	e7ea      	b.n	1c9c <flash_area_open+0x18>
		return -EACCES;
    1cc6:	f06f 000c 	mvn.w	r0, #12
    1cca:	e7e7      	b.n	1c9c <flash_area_open+0x18>
    1ccc:	20002114 	.word	0x20002114
    1cd0:	0000ee04 	.word	0x0000ee04

00001cd4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1cd4:	b570      	push	{r4, r5, r6, lr}
    1cd6:	b088      	sub	sp, #32
    1cd8:	4605      	mov	r5, r0
    1cda:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1cdc:	b2c0      	uxtb	r0, r0
    1cde:	4669      	mov	r1, sp
{
    1ce0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1ce2:	f7ff ffcf 	bl	1c84 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1ce6:	2800      	cmp	r0, #0
    1ce8:	db1b      	blt.n	1d22 <flash_area_get_sectors+0x4e>
    1cea:	9800      	ldr	r0, [sp, #0]
    1cec:	b1c8      	cbz	r0, 1d22 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1cee:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1cf0:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1cf2:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1cf4:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1cf6:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1cf8:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1cfc:	2300      	movs	r3, #0
	cb_data->status = 0;
    1cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1d02:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1d04:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1d06:	f009 fb05 	bl	b314 <flash_area_close>
	if (flash_dev == NULL) {
    1d0a:	b16d      	cbz	r5, 1d28 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1d0c:	4628      	mov	r0, r5
    1d0e:	4908      	ldr	r1, [pc, #32]	; (1d30 <flash_area_get_sectors+0x5c>)
    1d10:	aa01      	add	r2, sp, #4
    1d12:	f009 ffd4 	bl	bcbe <flash_page_foreach>
	if (cb_data->status == 0) {
    1d16:	9807      	ldr	r0, [sp, #28]
    1d18:	b908      	cbnz	r0, 1d1e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1d1a:	9b05      	ldr	r3, [sp, #20]
    1d1c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1d1e:	b008      	add	sp, #32
    1d20:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1d22:	f06f 0015 	mvn.w	r0, #21
    1d26:	e7fa      	b.n	1d1e <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1d28:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1d2c:	e7f7      	b.n	1d1e <flash_area_get_sectors+0x4a>
    1d2e:	bf00      	nop
    1d30:	0000b3af 	.word	0x0000b3af

00001d34 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    1d34:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d36:	4b0c      	ldr	r3, [pc, #48]	; (1d68 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d38:	4e0c      	ldr	r6, [pc, #48]	; (1d6c <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d3a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d3c:	4b0c      	ldr	r3, [pc, #48]	; (1d70 <class_handler+0x3c>)
    1d3e:	42b3      	cmp	r3, r6
    1d40:	d303      	bcc.n	1d4a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1d42:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1d46:	bcf0      	pop	{r4, r5, r6, r7}
    1d48:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1d4a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d4c:	42bd      	cmp	r5, r7
    1d4e:	d309      	bcc.n	1d64 <class_handler+0x30>
		if (iface->class_handler &&
    1d50:	691c      	ldr	r4, [r3, #16]
    1d52:	b13c      	cbz	r4, 1d64 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1d54:	f895 c002 	ldrb.w	ip, [r5, #2]
    1d58:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1d5a:	45ac      	cmp	ip, r5
    1d5c:	d102      	bne.n	1d64 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1d5e:	4623      	mov	r3, r4
}
    1d60:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1d62:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d64:	3324      	adds	r3, #36	; 0x24
    1d66:	e7ea      	b.n	1d3e <class_handler+0xa>
    1d68:	20012c44 	.word	0x20012c44
    1d6c:	20002490 	.word	0x20002490
    1d70:	2000246c 	.word	0x2000246c

00001d74 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d78:	4605      	mov	r5, r0
    1d7a:	460e      	mov	r6, r1
    1d7c:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d7e:	4c12      	ldr	r4, [pc, #72]	; (1dc8 <custom_handler+0x54>)
    1d80:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1dcc <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d84:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1dd0 <custom_handler+0x5c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d88:	4544      	cmp	r4, r8
    1d8a:	d303      	bcc.n	1d94 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    1d8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    1d94:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d96:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    1d9a:	429a      	cmp	r2, r3
    1d9c:	d312      	bcc.n	1dc4 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    1d9e:	69a3      	ldr	r3, [r4, #24]
    1da0:	b183      	cbz	r3, 1dc4 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1da2:	7890      	ldrb	r0, [r2, #2]
    1da4:	7929      	ldrb	r1, [r5, #4]
    1da6:	4288      	cmp	r0, r1
    1da8:	d105      	bne.n	1db6 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1daa:	463a      	mov	r2, r7
    1dac:	4631      	mov	r1, r6
    1dae:	4628      	mov	r0, r5
}
    1db0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1db4:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1db6:	7952      	ldrb	r2, [r2, #5]
    1db8:	2a01      	cmp	r2, #1
    1dba:	d103      	bne.n	1dc4 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1dbc:	463a      	mov	r2, r7
    1dbe:	4631      	mov	r1, r6
    1dc0:	4628      	mov	r0, r5
    1dc2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dc4:	3424      	adds	r4, #36	; 0x24
    1dc6:	e7df      	b.n	1d88 <custom_handler+0x14>
    1dc8:	2000246c 	.word	0x2000246c
    1dcc:	20002490 	.word	0x20002490
    1dd0:	20012c44 	.word	0x20012c44

00001dd4 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dd8:	4605      	mov	r5, r0
    1dda:	460e      	mov	r6, r1
    1ddc:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dde:	4c0a      	ldr	r4, [pc, #40]	; (1e08 <vendor_handler+0x34>)
    1de0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1e0c <vendor_handler+0x38>
    1de4:	4544      	cmp	r4, r8
    1de6:	d302      	bcc.n	1dee <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1de8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1dec:	e009      	b.n	1e02 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1dee:	6963      	ldr	r3, [r4, #20]
    1df0:	b90b      	cbnz	r3, 1df6 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1df2:	3424      	adds	r4, #36	; 0x24
    1df4:	e7f6      	b.n	1de4 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1df6:	463a      	mov	r2, r7
    1df8:	4631      	mov	r1, r6
    1dfa:	4628      	mov	r0, r5
    1dfc:	4798      	blx	r3
    1dfe:	2800      	cmp	r0, #0
    1e00:	d1f7      	bne.n	1df2 <vendor_handler+0x1e>
}
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	bf00      	nop
    1e08:	2000246c 	.word	0x2000246c
    1e0c:	20002490 	.word	0x20002490

00001e10 <disable_endpoint>:
{
    1e10:	b510      	push	{r4, lr}
    1e12:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    1e14:	f009 fda0 	bl	b958 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1e18:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1e1c:	d000      	beq.n	1e20 <disable_endpoint+0x10>
	} else if (ret) {
    1e1e:	b950      	cbnz	r0, 1e36 <disable_endpoint+0x26>
	ep_bm = get_ep_bm_from_addr(ep_addr);
    1e20:	4620      	mov	r0, r4
    1e22:	f009 fae6 	bl	b3f2 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    1e26:	4a04      	ldr	r2, [pc, #16]	; (1e38 <disable_endpoint+0x28>)
    1e28:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    1e2c:	ea23 0300 	bic.w	r3, r3, r0
	return 0;
    1e30:	2000      	movs	r0, #0
	usb_dev.ep_bm &= ~ep_bm;
    1e32:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	20012c44 	.word	0x20012c44

00001e3c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1e3c:	2208      	movs	r2, #8
    1e3e:	2100      	movs	r1, #0
    1e40:	4801      	ldr	r0, [pc, #4]	; (1e48 <usb_reset_alt_setting+0xc>)
    1e42:	f009 bd3f 	b.w	b8c4 <memset>
    1e46:	bf00      	nop
    1e48:	20012cff 	.word	0x20012cff

00001e4c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1e4c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e4e:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <is_ep_valid.part.0+0x30>)
    1e50:	4c0b      	ldr	r4, [pc, #44]	; (1e80 <is_ep_valid.part.0+0x34>)
    1e52:	42a3      	cmp	r3, r4
    1e54:	d301      	bcc.n	1e5a <is_ep_valid.part.0+0xe>
	return false;
    1e56:	2000      	movs	r0, #0
}
    1e58:	bd70      	pop	{r4, r5, r6, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e5a:	2200      	movs	r2, #0
		ep_data = cfg_data->endpoint;
    1e5c:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e5e:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
    1e60:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e62:	b2d5      	uxtb	r5, r2
    1e64:	42ae      	cmp	r6, r5
    1e66:	d801      	bhi.n	1e6c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e68:	3324      	adds	r3, #36	; 0x24
    1e6a:	e7f2      	b.n	1e52 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1e6c:	3201      	adds	r2, #1
    1e6e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1e72:	4285      	cmp	r5, r0
    1e74:	d1f5      	bne.n	1e62 <is_ep_valid.part.0+0x16>
		return true;
    1e76:	2001      	movs	r0, #1
    1e78:	e7ee      	b.n	1e58 <is_ep_valid.part.0+0xc>
    1e7a:	bf00      	nop
    1e7c:	2000246c 	.word	0x2000246c
    1e80:	20002490 	.word	0x20002490

00001e84 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    1e84:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    1e86:	4809      	ldr	r0, [pc, #36]	; (1eac <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    1e88:	7803      	ldrb	r3, [r0, #0]
    1e8a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1e8e:	330a      	adds	r3, #10
    1e90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1e94:	b13b      	cbz	r3, 1ea6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1e96:	f100 0208 	add.w	r2, r0, #8
    1e9a:	f100 0110 	add.w	r1, r0, #16
    1e9e:	4798      	blx	r3
    1ea0:	43c0      	mvns	r0, r0
    1ea2:	0fc0      	lsrs	r0, r0, #31
}
    1ea4:	bd08      	pop	{r3, pc}
		return false;
    1ea6:	4618      	mov	r0, r3
    1ea8:	e7fc      	b.n	1ea4 <usb_handle_request.constprop.0+0x20>
    1eaa:	bf00      	nop
    1eac:	20012c44 	.word	0x20012c44

00001eb0 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1eb0:	2804      	cmp	r0, #4
{
    1eb2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eb6:	4604      	mov	r4, r0
    1eb8:	460f      	mov	r7, r1
    1eba:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1f50 <forward_status_cb+0xa0>
	if (status == USB_DC_DISCONNECTED) {
    1ebe:	d016      	beq.n	1eee <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    1ec0:	2801      	cmp	r0, #1
    1ec2:	d12d      	bne.n	1f20 <forward_status_cb+0x70>
		if (usb_dev.configured) {
    1ec4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1f54 <forward_status_cb+0xa4>
    1ec8:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    1ecc:	b343      	cbz	r3, 1f20 <forward_status_cb+0x70>
			usb_cancel_transfers();
    1ece:	f000 fe0f 	bl	2af0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ed2:	4d21      	ldr	r5, [pc, #132]	; (1f58 <forward_status_cb+0xa8>)
    1ed4:	454d      	cmp	r5, r9
    1ed6:	d220      	bcs.n	1f1a <forward_status_cb+0x6a>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ed8:	f04f 0a00 	mov.w	sl, #0
		ep_data = cfg_data->endpoint;
    1edc:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ee0:	7f2b      	ldrb	r3, [r5, #28]
    1ee2:	fa5f f68a 	uxtb.w	r6, sl
    1ee6:	42b3      	cmp	r3, r6
    1ee8:	d804      	bhi.n	1ef4 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1eea:	3524      	adds	r5, #36	; 0x24
    1eec:	e7f2      	b.n	1ed4 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    1eee:	f7ff ffa5 	bl	1e3c <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    1ef2:	e7e7      	b.n	1ec4 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    1ef4:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    1ef8:	7930      	ldrb	r0, [r6, #4]
    1efa:	f009 fd2d 	bl	b958 <usb_dc_ep_disable>
    1efe:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    1f00:	7930      	ldrb	r0, [r6, #4]
    1f02:	f009 fa76 	bl	b3f2 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    1f06:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    1f0a:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    1f0c:	ea23 0300 	bic.w	r3, r3, r0
    1f10:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    1f14:	f10a 0a01 	add.w	sl, sl, #1
    1f18:	dae2      	bge.n	1ee0 <forward_status_cb+0x30>
			usb_dev.configured = false;
    1f1a:	2300      	movs	r3, #0
    1f1c:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f20:	4d0d      	ldr	r5, [pc, #52]	; (1f58 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f22:	454d      	cmp	r5, r9
    1f24:	d308      	bcc.n	1f38 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
    1f26:	4b0b      	ldr	r3, [pc, #44]	; (1f54 <forward_status_cb+0xa4>)
    1f28:	6a1b      	ldr	r3, [r3, #32]
    1f2a:	b16b      	cbz	r3, 1f48 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
    1f2c:	4639      	mov	r1, r7
    1f2e:	4620      	mov	r0, r4
}
    1f30:	b001      	add	sp, #4
    1f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    1f36:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    1f38:	68eb      	ldr	r3, [r5, #12]
    1f3a:	b11b      	cbz	r3, 1f44 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
    1f3c:	463a      	mov	r2, r7
    1f3e:	4621      	mov	r1, r4
    1f40:	4628      	mov	r0, r5
    1f42:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f44:	3524      	adds	r5, #36	; 0x24
    1f46:	e7ec      	b.n	1f22 <forward_status_cb+0x72>
}
    1f48:	b001      	add	sp, #4
    1f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f4e:	bf00      	nop
    1f50:	20002490 	.word	0x20002490
    1f54:	20012c44 	.word	0x20012c44
    1f58:	2000246c 	.word	0x2000246c

00001f5c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1f5e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1f60:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f62:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1f64:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1f68:	d007      	beq.n	1f7a <usb_halt_endpoint_req.isra.0+0x1e>
    1f6a:	4620      	mov	r0, r4
    1f6c:	f7ff ff6e 	bl	1e4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1f70:	b178      	cbz	r0, 1f92 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    1f72:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1f74:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1f78:	b158      	cbz	r0, 1f92 <usb_halt_endpoint_req.isra.0+0x36>
			usb_dc_ep_set_stall(ep);
    1f7a:	4620      	mov	r0, r4
    1f7c:	4e0a      	ldr	r6, [pc, #40]	; (1fa8 <usb_halt_endpoint_req.isra.0+0x4c>)
		if (halt) {
    1f7e:	b155      	cbz	r5, 1f96 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    1f80:	f002 feac 	bl	4cdc <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1f84:	69f3      	ldr	r3, [r6, #28]
    1f86:	b11b      	cbz	r3, 1f90 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1f88:	2008      	movs	r0, #8
    1f8a:	f10d 0107 	add.w	r1, sp, #7
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1f8e:	4798      	blx	r3
		return true;
    1f90:	2001      	movs	r0, #1
}
    1f92:	b002      	add	sp, #8
    1f94:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1f96:	f002 fec9 	bl	4d2c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1f9a:	69f3      	ldr	r3, [r6, #28]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d0f7      	beq.n	1f90 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1fa0:	2009      	movs	r0, #9
    1fa2:	f10d 0107 	add.w	r1, sp, #7
    1fa6:	e7f2      	b.n	1f8e <usb_halt_endpoint_req.isra.0+0x32>
    1fa8:	20012c44 	.word	0x20012c44

00001fac <set_endpoint>:
{
    1fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1fae:	7886      	ldrb	r6, [r0, #2]
	if (ep_bm & usb_dev.ep_bm) {
    1fb0:	4c1e      	ldr	r4, [pc, #120]	; (202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>)
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1fb2:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1fb6:	7903      	ldrb	r3, [r0, #4]
    1fb8:	7942      	ldrb	r2, [r0, #5]
    1fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1fbe:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1fc2:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fc4:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1fc6:	f003 0303 	and.w	r3, r3, #3
    1fca:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fce:	f009 fa10 	bl	b3f2 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    1fd2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fd6:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    1fd8:	4218      	tst	r0, r3
    1fda:	d00b      	beq.n	1ff4 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    1fdc:	4630      	mov	r0, r6
    1fde:	f000 fd69 	bl	2ab4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    1fe2:	4630      	mov	r0, r6
    1fe4:	f7ff ff14 	bl	1e10 <disable_endpoint>
		if (!k_is_in_isr()) {
    1fe8:	f00c f97c 	bl	e2e4 <k_is_in_isr>
    1fec:	b910      	cbnz	r0, 1ff4 <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    1fee:	2096      	movs	r0, #150	; 0x96
    1ff0:	f007 fe86 	bl	9d00 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    1ff4:	4668      	mov	r0, sp
    1ff6:	f002 fe4d 	bl	4c94 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1ffa:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1ffe:	d003      	beq.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
	} else if (ret) {
    2000:	b110      	cbz	r0, 2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
		return false;
    2002:	2000      	movs	r0, #0
}
    2004:	b002      	add	sp, #8
    2006:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2008:	f89d 0000 	ldrb.w	r0, [sp]
    200c:	f002 feca 	bl	4da4 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2010:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2014:	d001      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
	} else if (ret) {
    2016:	2800      	cmp	r0, #0
    2018:	d1f3      	bne.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
	usb_dev.configured = true;
    201a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    201c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    2020:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2024:	432b      	orrs	r3, r5
    2026:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    202a:	e7eb      	b.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    202c:	20012c44 	.word	0x20012c44

00002030 <usb_handle_standard_request>:
{
    2030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2034:	4d92      	ldr	r5, [pc, #584]	; (2280 <usb_handle_standard_request+0x250>)
{
    2036:	4604      	mov	r4, r0
	if (usb_dev.custom_req_handler &&
    2038:	69ab      	ldr	r3, [r5, #24]
{
    203a:	460e      	mov	r6, r1
    203c:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    203e:	b9c3      	cbnz	r3, 2072 <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
    2040:	7820      	ldrb	r0, [r4, #0]
    2042:	f000 001f 	and.w	r0, r0, #31
    2046:	2801      	cmp	r0, #1
    2048:	d076      	beq.n	2138 <usb_handle_standard_request+0x108>
    204a:	2802      	cmp	r0, #2
    204c:	f000 80dc 	beq.w	2208 <usb_handle_standard_request+0x1d8>
    2050:	bb00      	cbnz	r0, 2094 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
    2052:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
    2056:	683a      	ldr	r2, [r7, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2058:	2900      	cmp	r1, #0
		switch (setup->bRequest) {
    205a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    205c:	da2e      	bge.n	20bc <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
    205e:	2b06      	cmp	r3, #6
    2060:	d00c      	beq.n	207c <usb_handle_standard_request+0x4c>
    2062:	2b08      	cmp	r3, #8
    2064:	d025      	beq.n	20b2 <usb_handle_standard_request+0x82>
    2066:	b9ab      	cbnz	r3, 2094 <usb_handle_standard_request+0x64>
	data[1] = 0U;
    2068:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    206a:	2301      	movs	r3, #1
    206c:	7013      	strb	r3, [r2, #0]
		*len = 2;
    206e:	2302      	movs	r3, #2
    2070:	e103      	b.n	227a <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2072:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2074:	2800      	cmp	r0, #0
    2076:	d1e3      	bne.n	2040 <usb_handle_standard_request+0x10>
		return 0;
    2078:	2000      	movs	r0, #0
    207a:	e00d      	b.n	2098 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
    207c:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    207e:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2080:	1f0a      	subs	r2, r1, #4
    2082:	2a01      	cmp	r2, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2084:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2086:	d905      	bls.n	2094 <usb_handle_standard_request+0x64>
    2088:	2907      	cmp	r1, #7
    208a:	d803      	bhi.n	2094 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    208c:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
    208e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    2090:	781c      	ldrb	r4, [r3, #0]
    2092:	b91c      	cbnz	r4, 209c <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
    2094:	f06f 0015 	mvn.w	r0, #21
}
    2098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    209c:	785d      	ldrb	r5, [r3, #1]
    209e:	4565      	cmp	r5, ip
    20a0:	d103      	bne.n	20aa <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
    20a2:	4282      	cmp	r2, r0
    20a4:	f000 80e4 	beq.w	2270 <usb_handle_standard_request+0x240>
			cur_index++;
    20a8:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    20aa:	4423      	add	r3, r4
    20ac:	e7f0      	b.n	2090 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	e0e3      	b.n	227a <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
    20b2:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    20b6:	7013      	strb	r3, [r2, #0]
				*len = 1;
    20b8:	2301      	movs	r3, #1
    20ba:	e0de      	b.n	227a <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
    20bc:	2b05      	cmp	r3, #5
    20be:	d011      	beq.n	20e4 <usb_handle_standard_request+0xb4>
    20c0:	2b09      	cmp	r3, #9
    20c2:	d1e7      	bne.n	2094 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
    20c4:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    20c6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
    20c8:	2b00      	cmp	r3, #0
    20ca:	d132      	bne.n	2132 <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
    20cc:	f7ff feb6 	bl	1e3c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    20d0:	8863      	ldrh	r3, [r4, #2]
    20d2:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
    20d6:	69eb      	ldr	r3, [r5, #28]
    20d8:	2b00      	cmp	r3, #0
    20da:	d0cd      	beq.n	2078 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    20dc:	2003      	movs	r0, #3
    20de:	4969      	ldr	r1, [pc, #420]	; (2284 <usb_handle_standard_request+0x254>)
    20e0:	4798      	blx	r3
    20e2:	e7c9      	b.n	2078 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
    20e4:	78a0      	ldrb	r0, [r4, #2]
    20e6:	f002 fdc3 	bl	4c70 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    20ea:	2800      	cmp	r0, #0
    20ec:	d0c4      	beq.n	2078 <usb_handle_standard_request+0x48>
    20ee:	e7d1      	b.n	2094 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
    20f0:	7873      	ldrb	r3, [r6, #1]
    20f2:	2b04      	cmp	r3, #4
    20f4:	d010      	beq.n	2118 <usb_handle_standard_request+0xe8>
    20f6:	2b05      	cmp	r3, #5
    20f8:	d011      	beq.n	211e <usb_handle_standard_request+0xee>
    20fa:	2b02      	cmp	r3, #2
    20fc:	d104      	bne.n	2108 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
    20fe:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
    2100:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2102:	42bb      	cmp	r3, r7
    2104:	bf08      	it	eq
    2106:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2108:	7833      	ldrb	r3, [r6, #0]
    210a:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
    210c:	7833      	ldrb	r3, [r6, #0]
    210e:	2b00      	cmp	r3, #0
    2110:	d1ee      	bne.n	20f0 <usb_handle_standard_request+0xc0>
	if (found) {
    2112:	2800      	cmp	r0, #0
    2114:	d0be      	beq.n	2094 <usb_handle_standard_request+0x64>
    2116:	e7d9      	b.n	20cc <usb_handle_standard_request+0x9c>
			cur_alt_setting =
    2118:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
    211c:	e7f4      	b.n	2108 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
    211e:	8863      	ldrh	r3, [r4, #2]
    2120:	42bb      	cmp	r3, r7
    2122:	d1f1      	bne.n	2108 <usb_handle_standard_request+0xd8>
    2124:	f1b8 0f00 	cmp.w	r8, #0
    2128:	d1ee      	bne.n	2108 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    212a:	4630      	mov	r0, r6
    212c:	f7ff ff3e 	bl	1fac <set_endpoint>
			break;
    2130:	e7ea      	b.n	2108 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
    2132:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2134:	46b8      	mov	r8, r7
    2136:	e7e9      	b.n	210c <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
    2138:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    213c:	f8d7 c000 	ldr.w	ip, [r7]
    2140:	2b00      	cmp	r3, #0
    2142:	d0a7      	beq.n	2094 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2144:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2146:	88a2      	ldrh	r2, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2148:	463b      	mov	r3, r7
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    214a:	f894 e004 	ldrb.w	lr, [r4, #4]
	while (p[DESC_bLength] != 0U) {
    214e:	7818      	ldrb	r0, [r3, #0]
    2150:	2800      	cmp	r0, #0
    2152:	d09f      	beq.n	2094 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2154:	7859      	ldrb	r1, [r3, #1]
    2156:	2902      	cmp	r1, #2
    2158:	d104      	bne.n	2164 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
    215a:	f893 8004 	ldrb.w	r8, [r3, #4]
    215e:	45f0      	cmp	r8, lr
    2160:	f200 8092 	bhi.w	2288 <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
    2164:	4403      	add	r3, r0
    2166:	e7f2      	b.n	214e <usb_handle_standard_request+0x11e>
			data[0] = 0U;
    2168:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
    216c:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
    2170:	6031      	str	r1, [r6, #0]
			return true;
    2172:	e781      	b.n	2078 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
    2174:	441f      	add	r7, r3
    2176:	e093      	b.n	22a0 <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2178:	2b0b      	cmp	r3, #11
    217a:	d18b      	bne.n	2094 <usb_handle_standard_request+0x64>
	bool ret = false;
    217c:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
    217e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	const uint8_t *if_desc = NULL;
    2182:	46b2      	mov	sl, r6
	uint8_t cur_alt_setting = 0xFF;
    2184:	46c1      	mov	r9, r8
    2186:	e006      	b.n	2196 <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
    2188:	787b      	ldrb	r3, [r7, #1]
    218a:	2b04      	cmp	r3, #4
    218c:	d00f      	beq.n	21ae <usb_handle_standard_request+0x17e>
    218e:	2b05      	cmp	r3, #5
    2190:	d021      	beq.n	21d6 <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
    2192:	783b      	ldrb	r3, [r7, #0]
    2194:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
    2196:	783b      	ldrb	r3, [r7, #0]
    2198:	2b00      	cmp	r3, #0
    219a:	d1f5      	bne.n	2188 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
    219c:	69eb      	ldr	r3, [r5, #28]
    219e:	b113      	cbz	r3, 21a6 <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    21a0:	4651      	mov	r1, sl
    21a2:	2007      	movs	r0, #7
    21a4:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    21a6:	2e00      	cmp	r6, #0
    21a8:	f47f af66 	bne.w	2078 <usb_handle_standard_request+0x48>
    21ac:	e772      	b.n	2094 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    21ae:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
    21b2:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    21b4:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
    21b8:	4598      	cmp	r8, r3
    21ba:	d1ea      	bne.n	2192 <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
    21bc:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    21be:	4599      	cmp	r9, r3
    21c0:	d1e7      	bne.n	2192 <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    21c2:	f1b8 0f07 	cmp.w	r8, #7
    21c6:	d81c      	bhi.n	2202 <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
    21c8:	eb05 0308 	add.w	r3, r5, r8
		return true;
    21cc:	46ba      	mov	sl, r7
    21ce:	2601      	movs	r6, #1
				ret = usb_set_alt_setting(setup->wIndex,
    21d0:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    21d4:	e7dd      	b.n	2192 <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
    21d6:	88a3      	ldrh	r3, [r4, #4]
    21d8:	4543      	cmp	r3, r8
    21da:	d1da      	bne.n	2192 <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
    21dc:	78a3      	ldrb	r3, [r4, #2]
    21de:	454b      	cmp	r3, r9
    21e0:	d00a      	beq.n	21f8 <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
    21e2:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    21e4:	4630      	mov	r0, r6
    21e6:	f000 fc65 	bl	2ab4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    21ea:	4630      	mov	r0, r6
    21ec:	f7ff fe10 	bl	1e10 <disable_endpoint>
    21f0:	fab0 f680 	clz	r6, r0
    21f4:	0976      	lsrs	r6, r6, #5
    21f6:	e7cc      	b.n	2192 <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
    21f8:	4638      	mov	r0, r7
    21fa:	f7ff fed7 	bl	1fac <set_endpoint>
    21fe:	4606      	mov	r6, r0
    2200:	e7c7      	b.n	2192 <usb_handle_standard_request+0x162>
    2202:	46ba      	mov	sl, r7
	return false;
    2204:	2600      	movs	r6, #0
    2206:	e7c4      	b.n	2192 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    2208:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    220c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    220e:	2a00      	cmp	r2, #0
    2210:	da18      	bge.n	2244 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2212:	2b00      	cmp	r3, #0
    2214:	f47f af3e 	bne.w	2094 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
    2218:	7924      	ldrb	r4, [r4, #4]
    221a:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    221c:	0663      	lsls	r3, r4, #25
    221e:	d00a      	beq.n	2236 <usb_handle_standard_request+0x206>
    2220:	4620      	mov	r0, r4
    2222:	f7ff fe13 	bl	1e4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2226:	2800      	cmp	r0, #0
    2228:	f43f af34 	beq.w	2094 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    222c:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    2230:	2b00      	cmp	r3, #0
    2232:	f43f af2f 	beq.w	2094 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2236:	4639      	mov	r1, r7
    2238:	4620      	mov	r0, r4
    223a:	f002 fd97 	bl	4d6c <usb_dc_ep_is_stalled>
		data[1] = 0U;
    223e:	2300      	movs	r3, #0
    2240:	707b      	strb	r3, [r7, #1]
    2242:	e714      	b.n	206e <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
    2244:	2b01      	cmp	r3, #1
    2246:	d008      	beq.n	225a <usb_handle_standard_request+0x22a>
    2248:	2b03      	cmp	r3, #3
    224a:	f47f af23 	bne.w	2094 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    224e:	8863      	ldrh	r3, [r4, #2]
    2250:	2b00      	cmp	r3, #0
    2252:	f47f af1f 	bne.w	2094 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    2256:	2101      	movs	r1, #1
    2258:	e003      	b.n	2262 <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    225a:	8861      	ldrh	r1, [r4, #2]
    225c:	2900      	cmp	r1, #0
    225e:	f47f af19 	bne.w	2094 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    2262:	88a0      	ldrh	r0, [r4, #4]
    2264:	f7ff fe7a 	bl	1f5c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2268:	2800      	cmp	r0, #0
    226a:	f47f af05 	bne.w	2078 <usb_handle_standard_request+0x48>
    226e:	e711      	b.n	2094 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
    2270:	2902      	cmp	r1, #2
		*data = p;
    2272:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2274:	f47f af1b 	bne.w	20ae <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
    2278:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
    227a:	6033      	str	r3, [r6, #0]
		return true;
    227c:	e6fc      	b.n	2078 <usb_handle_standard_request+0x48>
    227e:	bf00      	nop
    2280:	20012c44 	.word	0x20012c44
    2284:	20012cfe 	.word	0x20012cfe
	if (usb_reqtype_is_to_host(setup)) {
    2288:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    228c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    228e:	2800      	cmp	r0, #0
    2290:	f6bf af72 	bge.w	2178 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
    2294:	2b00      	cmp	r3, #0
    2296:	f43f af67 	beq.w	2168 <usb_handle_standard_request+0x138>
    229a:	2b0a      	cmp	r3, #10
    229c:	f47f aefa 	bne.w	2094 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
    22a0:	783b      	ldrb	r3, [r7, #0]
    22a2:	2b00      	cmp	r3, #0
    22a4:	f43f aef6 	beq.w	2094 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    22a8:	7879      	ldrb	r1, [r7, #1]
    22aa:	2904      	cmp	r1, #4
    22ac:	f47f af62 	bne.w	2174 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    22b0:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
    22b2:	428a      	cmp	r2, r1
    22b4:	f47f af5e 	bne.w	2174 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    22b8:	2a07      	cmp	r2, #7
	return 0;
    22ba:	bf8e      	itee	hi
    22bc:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    22be:	1952      	addls	r2, r2, r5
    22c0:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    22c4:	f88c 3000 	strb.w	r3, [ip]
    22c8:	e6f6      	b.n	20b8 <usb_handle_standard_request+0x88>
    22ca:	bf00      	nop

000022cc <usb_disable>:
{
    22cc:	b570      	push	{r4, r5, r6, lr}
	if (usb_dev.enabled != true) {
    22ce:	4d16      	ldr	r5, [pc, #88]	; (2328 <usb_disable+0x5c>)
    22d0:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    22d4:	b1fb      	cbz	r3, 2316 <usb_disable+0x4a>
	ret = usb_dc_detach();
    22d6:	f002 fcab 	bl	4c30 <usb_dc_detach>
	if (ret < 0) {
    22da:	2800      	cmp	r0, #0
    22dc:	db22      	blt.n	2324 <usb_disable+0x58>
	usb_cancel_transfers();
    22de:	f000 fc07 	bl	2af0 <usb_cancel_transfers>
    22e2:	2400      	movs	r4, #0
		if (usb_dev.ep_bm & BIT(i)) {
    22e4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    22e8:	b2e6      	uxtb	r6, r4
    22ea:	40e3      	lsrs	r3, r4
    22ec:	07da      	lsls	r2, r3, #31
    22ee:	d414      	bmi.n	231a <usb_disable+0x4e>
		if (usb_dev.ep_bm & BIT(i + 16)) {
    22f0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    22f4:	f104 0210 	add.w	r2, r4, #16
    22f8:	40d3      	lsrs	r3, r2
    22fa:	07db      	lsls	r3, r3, #31
    22fc:	d505      	bpl.n	230a <usb_disable+0x3e>
			ret = disable_endpoint(USB_EP_DIR_IN | i);
    22fe:	f046 0080 	orr.w	r0, r6, #128	; 0x80
    2302:	f7ff fd85 	bl	1e10 <disable_endpoint>
			if (ret < 0) {
    2306:	2800      	cmp	r0, #0
    2308:	db0c      	blt.n	2324 <usb_disable+0x58>
	for (uint8_t i = 0; i <= 15; i++) {
    230a:	3401      	adds	r4, #1
    230c:	2c10      	cmp	r4, #16
    230e:	d1e9      	bne.n	22e4 <usb_disable+0x18>
	usb_dev.enabled = false;
    2310:	2300      	movs	r3, #0
    2312:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		return 0;
    2316:	2000      	movs	r0, #0
    2318:	e004      	b.n	2324 <usb_disable+0x58>
			ret = disable_endpoint(i);
    231a:	4630      	mov	r0, r6
    231c:	f7ff fd78 	bl	1e10 <disable_endpoint>
			if (ret < 0) {
    2320:	2800      	cmp	r0, #0
    2322:	dae5      	bge.n	22f0 <usb_disable+0x24>
}
    2324:	bd70      	pop	{r4, r5, r6, pc}
    2326:	bf00      	nop
    2328:	20012c44 	.word	0x20012c44

0000232c <usb_data_to_host>:
{
    232c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    232e:	4c16      	ldr	r4, [pc, #88]	; (2388 <usb_data_to_host+0x5c>)
    2330:	7d23      	ldrb	r3, [r4, #20]
    2332:	b9f3      	cbnz	r3, 2372 <usb_data_to_host+0x46>
		uint32_t chunk = usb_dev.data_buf_residue;
    2334:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2336:	ab01      	add	r3, sp, #4
    2338:	2080      	movs	r0, #128	; 0x80
    233a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    233c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    233e:	f009 f867 	bl	b410 <usb_write>
		usb_dev.data_buf += chunk;
    2342:	9a01      	ldr	r2, [sp, #4]
    2344:	68a3      	ldr	r3, [r4, #8]
    2346:	4413      	add	r3, r2
    2348:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    234a:	68e3      	ldr	r3, [r4, #12]
    234c:	1a9b      	subs	r3, r3, r2
    234e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2350:	b96b      	cbnz	r3, 236e <usb_data_to_host+0x42>
    2352:	b162      	cbz	r2, 236e <usb_data_to_host+0x42>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2354:	6923      	ldr	r3, [r4, #16]
    2356:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2358:	429a      	cmp	r2, r3
    235a:	dd08      	ble.n	236e <usb_data_to_host+0x42>
			if (!(usb_dev.data_buf_len % usb_dev.mps0)) {
    235c:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    2360:	fb93 f1f2 	sdiv	r1, r3, r2
    2364:	fb02 3311 	mls	r3, r2, r1, r3
    2368:	b90b      	cbnz	r3, 236e <usb_data_to_host+0x42>
				usb_dev.zlp_flag = true;
    236a:	2301      	movs	r3, #1
    236c:	7523      	strb	r3, [r4, #20]
}
    236e:	b002      	add	sp, #8
    2370:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2372:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2374:	2080      	movs	r0, #128	; 0x80
    2376:	461a      	mov	r2, r3
    2378:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
    237a:	7523      	strb	r3, [r4, #20]
}
    237c:	b002      	add	sp, #8
    237e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2382:	f002 bd39 	b.w	4df8 <usb_dc_ep_write>
    2386:	bf00      	nop
    2388:	20012c44 	.word	0x20012c44

0000238c <usb_handle_control_transfer>:
	uint32_t chunk = 0U;
    238c:	2300      	movs	r3, #0
{
    238e:	b530      	push	{r4, r5, lr}
    2390:	b085      	sub	sp, #20
    2392:	4602      	mov	r2, r0
    2394:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    2396:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2398:	2800      	cmp	r0, #0
    239a:	d158      	bne.n	244e <usb_handle_control_transfer+0xc2>
    239c:	2900      	cmp	r1, #0
    239e:	d135      	bne.n	240c <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    23a0:	2208      	movs	r2, #8
    23a2:	460b      	mov	r3, r1
    23a4:	eb0d 0102 	add.w	r1, sp, r2
    23a8:	f009 faef 	bl	b98a <usb_dc_ep_read>
    23ac:	2800      	cmp	r0, #0
    23ae:	da04      	bge.n	23ba <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    23b0:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    23b2:	f002 fc93 	bl	4cdc <usb_dc_ep_set_stall>
}
    23b6:	b005      	add	sp, #20
    23b8:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    23ba:	4c2a      	ldr	r4, [pc, #168]	; (2464 <usb_handle_control_transfer+0xd8>)
    23bc:	9a02      	ldr	r2, [sp, #8]
		usb_dev.data_buf_residue = 0;
    23be:	e9c4 5503 	strd	r5, r5, [r4, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    23c2:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    23c4:	9a03      	ldr	r2, [sp, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    23c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    23ca:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    23cc:	f104 0238 	add.w	r2, r4, #56	; 0x38
    23d0:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    23d2:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		usb_dev.zlp_flag = false;
    23d6:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    23d8:	2a00      	cmp	r2, #0
    23da:	db0a      	blt.n	23f2 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    23dc:	2b80      	cmp	r3, #128	; 0x80
    23de:	d904      	bls.n	23ea <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    23e0:	2080      	movs	r0, #128	; 0x80
    23e2:	f002 fc7b 	bl	4cdc <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    23e6:	2000      	movs	r0, #0
    23e8:	e7e3      	b.n	23b2 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    23ea:	b113      	cbz	r3, 23f2 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    23ec:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    23f0:	e7e1      	b.n	23b6 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    23f2:	f7ff fd47 	bl	1e84 <usb_handle_request.constprop.0>
    23f6:	2800      	cmp	r0, #0
    23f8:	d0da      	beq.n	23b0 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    23fa:	88e2      	ldrh	r2, [r4, #6]
    23fc:	6923      	ldr	r3, [r4, #16]
    23fe:	429a      	cmp	r2, r3
    2400:	bfd4      	ite	le
    2402:	60e2      	strle	r2, [r4, #12]
    2404:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    2406:	f7ff ff91 	bl	232c <usb_data_to_host>
    240a:	e7d4      	b.n	23b6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    240c:	4c15      	ldr	r4, [pc, #84]	; (2464 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    240e:	ab01      	add	r3, sp, #4
    2410:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    2414:	2d00      	cmp	r5, #0
    2416:	dc04      	bgt.n	2422 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2418:	f009 fab7 	bl	b98a <usb_dc_ep_read>
    241c:	2800      	cmp	r0, #0
    241e:	daca      	bge.n	23b6 <usb_handle_control_transfer+0x2a>
    2420:	e7c6      	b.n	23b0 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2422:	462a      	mov	r2, r5
    2424:	f009 fab1 	bl	b98a <usb_dc_ep_read>
    2428:	2800      	cmp	r0, #0
    242a:	dbd9      	blt.n	23e0 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    242c:	9a01      	ldr	r2, [sp, #4]
    242e:	68a3      	ldr	r3, [r4, #8]
    2430:	4413      	add	r3, r2
    2432:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2434:	68e3      	ldr	r3, [r4, #12]
    2436:	1a9b      	subs	r3, r3, r2
    2438:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    243a:	2b00      	cmp	r3, #0
    243c:	d1bb      	bne.n	23b6 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    243e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2442:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2444:	f7ff fd1e 	bl	1e84 <usb_handle_request.constprop.0>
    2448:	2800      	cmp	r0, #0
    244a:	d1dc      	bne.n	2406 <usb_handle_control_transfer+0x7a>
    244c:	e7b0      	b.n	23b0 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    244e:	2880      	cmp	r0, #128	; 0x80
    2450:	d1b1      	bne.n	23b6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2452:	4b04      	ldr	r3, [pc, #16]	; (2464 <usb_handle_control_transfer+0xd8>)
    2454:	68da      	ldr	r2, [r3, #12]
    2456:	2a00      	cmp	r2, #0
    2458:	d1d5      	bne.n	2406 <usb_handle_control_transfer+0x7a>
    245a:	7d1b      	ldrb	r3, [r3, #20]
    245c:	2b00      	cmp	r3, #0
    245e:	d1d2      	bne.n	2406 <usb_handle_control_transfer+0x7a>
    2460:	e7a9      	b.n	23b6 <usb_handle_control_transfer+0x2a>
    2462:	bf00      	nop
    2464:	20012c44 	.word	0x20012c44

00002468 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2468:	4b05      	ldr	r3, [pc, #20]	; (2480 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    246a:	4a06      	ldr	r2, [pc, #24]	; (2484 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
    246c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.req_handlers[type] = handler;
    246e:	629a      	str	r2, [r3, #40]	; 0x28
    2470:	4a05      	ldr	r2, [pc, #20]	; (2488 <usb_set_config+0x20>)

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    2472:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
    2474:	62da      	str	r2, [r3, #44]	; 0x2c
    2476:	4a05      	ldr	r2, [pc, #20]	; (248c <usb_set_config+0x24>)
    2478:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    247a:	4a05      	ldr	r2, [pc, #20]	; (2490 <usb_set_config+0x28>)
    247c:	619a      	str	r2, [r3, #24]
}
    247e:	4770      	bx	lr
    2480:	20012c44 	.word	0x20012c44
    2484:	00002031 	.word	0x00002031
    2488:	00001d35 	.word	0x00001d35
    248c:	00001dd5 	.word	0x00001dd5
    2490:	00001d75 	.word	0x00001d75

00002494 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    2494:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    2496:	4b08      	ldr	r3, [pc, #32]	; (24b8 <usb_device_init+0x24>)
    2498:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    249c:	b934      	cbnz	r4, 24ac <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    249e:	f000 f8e3 	bl	2668 <usb_get_device_descriptor>
	if (!device_descriptor) {
    24a2:	b130      	cbz	r0, 24b2 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    24a4:	f7ff ffe0 	bl	2468 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    24a8:	4620      	mov	r0, r4
}
    24aa:	bd10      	pop	{r4, pc}
		return -EALREADY;
    24ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
    24b0:	e7fb      	b.n	24aa <usb_device_init+0x16>
		return -1;
    24b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    24b6:	e7f8      	b.n	24aa <usb_device_init+0x16>
    24b8:	20012c44 	.word	0x20012c44

000024bc <usb_enable>:
{
    24bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    24c0:	4d41      	ldr	r5, [pc, #260]	; (25c8 <usb_enable+0x10c>)
{
    24c2:	4604      	mov	r4, r0
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    24c4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    24c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    24ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24ce:	483f      	ldr	r0, [pc, #252]	; (25cc <usb_enable+0x110>)
    24d0:	f006 ff82 	bl	93d8 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    24d4:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    24d8:	2e00      	cmp	r6, #0
    24da:	d16e      	bne.n	25ba <usb_enable+0xfe>
	usb_dev.status_callback = cb;
    24dc:	483c      	ldr	r0, [pc, #240]	; (25d0 <usb_enable+0x114>)
	usb_dev.user_status_callback = status_cb;
    24de:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    24e0:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    24e2:	f002 fda3 	bl	502c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    24e6:	f002 fb71 	bl	4bcc <usb_dc_attach>
	if (ret < 0) {
    24ea:	1e04      	subs	r4, r0, #0
    24ec:	db49      	blt.n	2582 <usb_enable+0xc6>
	ret = usb_transfer_init();
    24ee:	f000 fb23 	bl	2b38 <usb_transfer_init>
	if (ret < 0) {
    24f2:	1e04      	subs	r4, r0, #0
    24f4:	db45      	blt.n	2582 <usb_enable+0xc6>
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    24f6:	787b      	ldrb	r3, [r7, #1]
    24f8:	2b01      	cmp	r3, #1
    24fa:	d161      	bne.n	25c0 <usb_enable+0x104>
	    dev_desc->bMaxPacketSize0 == 0) {
    24fc:	79fb      	ldrb	r3, [r7, #7]
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    24fe:	2b00      	cmp	r3, #0
    2500:	d05e      	beq.n	25c0 <usb_enable+0x104>
	ret = usb_dc_ep_configure(&ep0_cfg);
    2502:	4668      	mov	r0, sp
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
    2504:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
	ep0_cfg.ep_mps = usb_dev.mps0;
    2508:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    250c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2510:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2514:	f002 fbbe 	bl	4c94 <usb_dc_ep_configure>
	if (ret < 0) {
    2518:	1e04      	subs	r4, r0, #0
    251a:	db32      	blt.n	2582 <usb_enable+0xc6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    251c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    251e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2520:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2524:	f002 fbb6 	bl	4c94 <usb_dc_ep_configure>
	if (ret < 0) {
    2528:	1e04      	subs	r4, r0, #0
    252a:	db2a      	blt.n	2582 <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    252c:	4630      	mov	r0, r6
    252e:	4929      	ldr	r1, [pc, #164]	; (25d4 <usb_enable+0x118>)
    2530:	f002 fd68 	bl	5004 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2534:	1e04      	subs	r4, r0, #0
    2536:	db24      	blt.n	2582 <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2538:	4638      	mov	r0, r7
    253a:	4926      	ldr	r1, [pc, #152]	; (25d4 <usb_enable+0x118>)
    253c:	f002 fd62 	bl	5004 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2540:	1e04      	subs	r4, r0, #0
    2542:	db1e      	blt.n	2582 <usb_enable+0xc6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2544:	4c24      	ldr	r4, [pc, #144]	; (25d8 <usb_enable+0x11c>)
    2546:	f8df 8094 	ldr.w	r8, [pc, #148]	; 25dc <usb_enable+0x120>
    254a:	4544      	cmp	r4, r8
    254c:	d320      	bcc.n	2590 <usb_enable+0xd4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    254e:	2000      	movs	r0, #0
    2550:	f002 fc28 	bl	4da4 <usb_dc_ep_enable>
	if (ret < 0) {
    2554:	1e04      	subs	r4, r0, #0
    2556:	db14      	blt.n	2582 <usb_enable+0xc6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2558:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    255c:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    255e:	f043 0301 	orr.w	r3, r3, #1
    2562:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2566:	f002 fc1d 	bl	4da4 <usb_dc_ep_enable>
	if (ret < 0) {
    256a:	1e04      	subs	r4, r0, #0
    256c:	db09      	blt.n	2582 <usb_enable+0xc6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    256e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = 0;
    2572:	2400      	movs	r4, #0
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2578:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    257c:	2301      	movs	r3, #1
    257e:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2582:	4812      	ldr	r0, [pc, #72]	; (25cc <usb_enable+0x110>)
    2584:	f006 ffa2 	bl	94cc <z_impl_k_mutex_unlock>
}
    2588:	4620      	mov	r0, r4
    258a:	b002      	add	sp, #8
    258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2590:	2600      	movs	r6, #0
		ep_data = cfg_data->endpoint;
    2592:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2594:	7f22      	ldrb	r2, [r4, #28]
    2596:	b2f3      	uxtb	r3, r6
    2598:	429a      	cmp	r2, r3
    259a:	d801      	bhi.n	25a0 <usb_enable+0xe4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    259c:	3424      	adds	r4, #36	; 0x24
    259e:	e7d4      	b.n	254a <usb_enable+0x8e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    25a0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    25a4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    25a8:	7910      	ldrb	r0, [r2, #4]
    25aa:	f002 fd2b 	bl	5004 <usb_dc_ep_set_callback>
    25ae:	3601      	adds	r6, #1
    25b0:	2800      	cmp	r0, #0
    25b2:	d0ef      	beq.n	2594 <usb_enable+0xd8>
    25b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    25b8:	e7e3      	b.n	2582 <usb_enable+0xc6>
		ret = -EALREADY;
    25ba:	f06f 0477 	mvn.w	r4, #119	; 0x77
    25be:	e7e0      	b.n	2582 <usb_enable+0xc6>
		ret = -EINVAL;
    25c0:	f06f 0415 	mvn.w	r4, #21
    25c4:	e7dd      	b.n	2582 <usb_enable+0xc6>
    25c6:	bf00      	nop
    25c8:	20012c44 	.word	0x20012c44
    25cc:	20002364 	.word	0x20002364
    25d0:	00001eb1 	.word	0x00001eb1
    25d4:	0000238d 	.word	0x0000238d
    25d8:	2000246c 	.word	0x2000246c
    25dc:	20002490 	.word	0x20002490

000025e0 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    25e0:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    25e2:	4b1f      	ldr	r3, [pc, #124]	; (2660 <usb_update_sn_string_descriptor+0x80>)
{
    25e4:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    25e6:	aa05      	add	r2, sp, #20
    25e8:	f103 0510 	add.w	r5, r3, #16
    25ec:	4614      	mov	r4, r2
    25ee:	6818      	ldr	r0, [r3, #0]
    25f0:	6859      	ldr	r1, [r3, #4]
    25f2:	3308      	adds	r3, #8
    25f4:	c403      	stmia	r4!, {r0, r1}
    25f6:	42ab      	cmp	r3, r5
    25f8:	4622      	mov	r2, r4
    25fa:	d1f7      	bne.n	25ec <usb_update_sn_string_descriptor+0xc>
    25fc:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    25fe:	2210      	movs	r2, #16
	const char hex[] = "0123456789ABCDEF";
    2600:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
    2602:	2100      	movs	r1, #0
    2604:	a801      	add	r0, sp, #4
    2606:	f009 f95d 	bl	b8c4 <memset>
	memset(sn, 0, sizeof(sn));
    260a:	2212      	movs	r2, #18
    260c:	2100      	movs	r1, #0
    260e:	4815      	ldr	r0, [pc, #84]	; (2664 <usb_update_sn_string_descriptor+0x84>)
    2610:	f009 f958 	bl	b8c4 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2614:	2110      	movs	r1, #16
    2616:	a801      	add	r0, sp, #4
    2618:	f009 fbca 	bl	bdb0 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    261c:	2800      	cmp	r0, #0
    261e:	dd1b      	ble.n	2658 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2620:	2808      	cmp	r0, #8
    2622:	bfb8      	it	lt
    2624:	2008      	movlt	r0, #8
    2626:	ab01      	add	r3, sp, #4
    2628:	3809      	subs	r0, #9
    262a:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    262c:	2000      	movs	r0, #0
    262e:	490d      	ldr	r1, [pc, #52]	; (2664 <usb_update_sn_string_descriptor+0x84>)
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2630:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2634:	ac0a      	add	r4, sp, #40	; 0x28
    2636:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    263a:	f003 030f 	and.w	r3, r3, #15
    263e:	3328      	adds	r3, #40	; 0x28
    2640:	446b      	add	r3, sp
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2642:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2646:	f813 3c14 	ldrb.w	r3, [r3, #-20]
		for (int i = 0; i < usblen; i++) {
    264a:	3001      	adds	r0, #1
    264c:	2808      	cmp	r0, #8
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    264e:	700c      	strb	r4, [r1, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2650:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2652:	f101 0102 	add.w	r1, r1, #2
    2656:	d1eb      	bne.n	2630 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2658:	4802      	ldr	r0, [pc, #8]	; (2664 <usb_update_sn_string_descriptor+0x84>)
    265a:	b00b      	add	sp, #44	; 0x2c
    265c:	bd30      	pop	{r4, r5, pc}
    265e:	bf00      	nop
    2660:	0000f552 	.word	0x0000f552
    2664:	20015f50 	.word	0x20015f50

00002668 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t str_descr_idx = 0U;
    266c:	f04f 0b00 	mov.w	fp, #0
{
    2670:	4c6e      	ldr	r4, [pc, #440]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    2672:	b087      	sub	sp, #28
	uint8_t str_descr_idx = 0U;
    2674:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2676:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    267a:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
    267c:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    267e:	46b1      	mov	r9, r6
	while (head->bLength != 0U) {
    2680:	7823      	ldrb	r3, [r4, #0]
    2682:	b92b      	cbnz	r3, 2690 <usb_get_device_descriptor+0x28>
	if ((head + 1) != __usb_descriptor_end) {
    2684:	4b6a      	ldr	r3, [pc, #424]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    2686:	3402      	adds	r4, #2
    2688:	429c      	cmp	r4, r3
    268a:	d1f3      	bne.n	2674 <usb_get_device_descriptor+0xc>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    268c:	4867      	ldr	r0, [pc, #412]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    268e:	e032      	b.n	26f6 <usb_get_device_descriptor+0x8e>
		switch (head->bDescriptorType) {
    2690:	7863      	ldrb	r3, [r4, #1]
    2692:	2b05      	cmp	r3, #5
    2694:	d81b      	bhi.n	26ce <usb_get_device_descriptor+0x66>
    2696:	e8df f003 	tbb	[pc, r3]
    269a:	038e      	.short	0x038e
    269c:	3b1d8ec6 	.word	0x3b1d8ec6
	struct usb_dc_ep_cfg_data ep_cfg = {
    26a0:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_check_cap(&ep_cfg);
    26a2:	a804      	add	r0, sp, #16
	struct usb_dc_ep_cfg_data ep_cfg = {
    26a4:	f88d b010 	strb.w	fp, [sp, #16]
    26a8:	f8ad 3012 	strh.w	r3, [sp, #18]
    26ac:	f88d b014 	strb.w	fp, [sp, #20]
	ret = usb_dc_ep_check_cap(&ep_cfg);
    26b0:	f009 f93a 	bl	b928 <usb_dc_ep_check_cap>
	if (ret) {
    26b4:	b140      	cbz	r0, 26c8 <usb_get_device_descriptor+0x60>
		ep_cfg.ep_mps = 8;
    26b6:	2308      	movs	r3, #8
		ret = usb_dc_ep_check_cap(&ep_cfg);
    26b8:	a804      	add	r0, sp, #16
		ep_cfg.ep_mps = 8;
    26ba:	f8ad 3012 	strh.w	r3, [sp, #18]
		ret = usb_dc_ep_check_cap(&ep_cfg);
    26be:	f009 f933 	bl	b928 <usb_dc_ep_check_cap>
		if (ret) {
    26c2:	b108      	cbz	r0, 26c8 <usb_get_device_descriptor+0x60>
			ep_cfg.ep_mps = 0;
    26c4:	f8ad b012 	strh.w	fp, [sp, #18]
	desc->bMaxPacketSize0 = ep_cfg.ep_mps;
    26c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    26cc:	71e3      	strb	r3, [r4, #7]
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    26ce:	7823      	ldrb	r3, [r4, #0]
    26d0:	441c      	add	r4, r3
    26d2:	e7d5      	b.n	2680 <usb_get_device_descriptor+0x18>
			if (if_descr->bAlternateSetting) {
    26d4:	78e3      	ldrb	r3, [r4, #3]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d1f9      	bne.n	26ce <usb_get_device_descriptor+0x66>
			if (if_descr->bInterfaceNumber == 0U) {
    26da:	78a3      	ldrb	r3, [r4, #2]
    26dc:	b173      	cbz	r3, 26fc <usb_get_device_descriptor+0x94>
			numof_ifaces++;
    26de:	f108 0801 	add.w	r8, r8, #1
    26e2:	fa5f f888 	uxtb.w	r8, r8
			break;
    26e6:	e7f2      	b.n	26ce <usb_get_device_descriptor+0x66>
		if (cfg_data->interface_descriptor == iface) {
    26e8:	686a      	ldr	r2, [r5, #4]
    26ea:	4294      	cmp	r4, r2
    26ec:	d009      	beq.n	2702 <usb_get_device_descriptor+0x9a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26ee:	3524      	adds	r5, #36	; 0x24
    26f0:	429d      	cmp	r5, r3
    26f2:	d3f9      	bcc.n	26e8 <usb_get_device_descriptor+0x80>
		return NULL;
    26f4:	2000      	movs	r0, #0
}
    26f6:	b007      	add	sp, #28
    26f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26fc:	4d4d      	ldr	r5, [pc, #308]	; (2834 <CONFIG_MAIN_STACK_SIZE+0x34>)
    26fe:	4b4e      	ldr	r3, [pc, #312]	; (2838 <CONFIG_MAIN_STACK_SIZE+0x38>)
    2700:	e7f6      	b.n	26f0 <usb_get_device_descriptor+0x88>
				if (cfg_data->interface_config) {
    2702:	68ab      	ldr	r3, [r5, #8]
    2704:	2b00      	cmp	r3, #0
    2706:	d0ea      	beq.n	26de <usb_get_device_descriptor+0x76>
					cfg_data->interface_config(head,
    2708:	4641      	mov	r1, r8
    270a:	4620      	mov	r0, r4
    270c:	4798      	blx	r3
    270e:	e7e6      	b.n	26de <usb_get_device_descriptor+0x76>
			if (!cfg_data) {
    2710:	2d00      	cmp	r5, #0
    2712:	d0ef      	beq.n	26f4 <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2714:	2200      	movs	r2, #0
    2716:	7f2b      	ldrb	r3, [r5, #28]
    2718:	429a      	cmp	r2, r3
    271a:	d2eb      	bcs.n	26f4 <usb_get_device_descriptor+0x8c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    271c:	6a29      	ldr	r1, [r5, #32]
    271e:	78a0      	ldrb	r0, [r4, #2]
    2720:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    2724:	790b      	ldrb	r3, [r1, #4]
    2726:	4298      	cmp	r0, r3
    2728:	d001      	beq.n	272e <usb_get_device_descriptor+0xc6>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    272a:	3201      	adds	r2, #1
    272c:	e7f3      	b.n	2716 <usb_get_device_descriptor+0xae>
    272e:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2730:	78e0      	ldrb	r0, [r4, #3]
    2732:	b2fb      	uxtb	r3, r7
    2734:	f000 0003 	and.w	r0, r0, #3
    2738:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    273c:	7920      	ldrb	r0, [r4, #4]
    273e:	f894 c005 	ldrb.w	ip, [r4, #5]
    2742:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2746:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    274a:	f994 0002 	ldrsb.w	r0, [r4, #2]
    274e:	2800      	cmp	r0, #0
    2750:	da26      	bge.n	27a0 <usb_get_device_descriptor+0x138>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2752:	f04f 0c01 	mov.w	ip, #1
    2756:	f107 0010 	add.w	r0, r7, #16
    275a:	fa0c f000 	lsl.w	r0, ip, r0
    275e:	ea10 0f0a 	tst.w	r0, sl
    2762:	d124      	bne.n	27ae <usb_get_device_descriptor+0x146>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2764:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    2768:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    276c:	a804      	add	r0, sp, #16
    276e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    2772:	9201      	str	r2, [sp, #4]
    2774:	f009 f8d8 	bl	b928 <usb_dc_ep_check_cap>
    2778:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    277c:	9b03      	ldr	r3, [sp, #12]
    277e:	b9b0      	cbnz	r0, 27ae <usb_get_device_descriptor+0x146>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2780:	f89d 2010 	ldrb.w	r2, [sp, #16]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2784:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2788:	70a2      	strb	r2, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    278a:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    278c:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    2790:	bf1d      	ittte	ne
    2792:	3310      	addne	r3, #16
    2794:	b2db      	uxtbne	r3, r3
    2796:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    2798:	40ba      	lsleq	r2, r7
    279a:	ea4a 0a02 	orr.w	sl, sl, r2
				return 0;
    279e:	e796      	b.n	26ce <usb_get_device_descriptor+0x66>
				if ((*requested_ep & (1U << (idx)))) {
    27a0:	2001      	movs	r0, #1
    27a2:	40b8      	lsls	r0, r7
    27a4:	ea10 0f0a 	tst.w	r0, sl
    27a8:	d101      	bne.n	27ae <usb_get_device_descriptor+0x146>
    27aa:	4618      	mov	r0, r3
    27ac:	e7dc      	b.n	2768 <usb_get_device_descriptor+0x100>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    27ae:	3701      	adds	r7, #1
    27b0:	2f10      	cmp	r7, #16
    27b2:	d1bd      	bne.n	2730 <usb_get_device_descriptor+0xc8>
    27b4:	e7b9      	b.n	272a <usb_get_device_descriptor+0xc2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    27b6:	2e03      	cmp	r6, #3
    27b8:	d11d      	bne.n	27f6 <usb_get_device_descriptor+0x18e>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    27ba:	f7ff ff11 	bl	25e0 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    27be:	4607      	mov	r7, r0
    27c0:	b168      	cbz	r0, 27de <usb_get_device_descriptor+0x176>
	runtime_sn_len = strlen(runtime_sn);
    27c2:	f009 f846 	bl	b852 <strlen>
	if (!runtime_sn_len) {
    27c6:	9001      	str	r0, [sp, #4]
    27c8:	b148      	cbz	r0, 27de <usb_get_device_descriptor+0x176>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    27ca:	481c      	ldr	r0, [pc, #112]	; (283c <CONFIG_MAIN_STACK_SIZE+0x3c>)
    27cc:	f009 f841 	bl	b852 <strlen>
	if (runtime_sn_len != default_sn_len) {
    27d0:	9a01      	ldr	r2, [sp, #4]
    27d2:	4282      	cmp	r2, r0
    27d4:	d103      	bne.n	27de <usb_get_device_descriptor+0x176>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    27d6:	4639      	mov	r1, r7
    27d8:	1ca0      	adds	r0, r4, #2
    27da:	f009 f868 	bl	b8ae <memcpy>
	for (int i = idx_max; i >= 0; i -= 2) {
    27de:	f06f 0102 	mvn.w	r1, #2
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    27e2:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    27e4:	1b09      	subs	r1, r1, r4
    27e6:	18e2      	adds	r2, r4, r3
    27e8:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    27ec:	42d1      	cmn	r1, r2
    27ee:	d513      	bpl.n	2818 <CONFIG_MAIN_STACK_SIZE+0x18>
			str_descr_idx += 1U;
    27f0:	3601      	adds	r6, #1
    27f2:	b2f6      	uxtb	r6, r6
			break;
    27f4:	e76b      	b.n	26ce <usb_get_device_descriptor+0x66>
			if (str_descr_idx) {
    27f6:	2e00      	cmp	r6, #0
    27f8:	d1f1      	bne.n	27de <usb_get_device_descriptor+0x176>
				if (!cfg_descr) {
    27fa:	f1b9 0f00 	cmp.w	r9, #0
    27fe:	f43f af79 	beq.w	26f4 <usb_get_device_descriptor+0x8c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2802:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2806:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
    280a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    280e:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2812:	f889 8004 	strb.w	r8, [r9, #4]
    2816:	e7eb      	b.n	27f0 <usb_get_device_descriptor+0x188>
		buf[i] = 0U;
    2818:	f802 bc01 	strb.w	fp, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    281c:	f813 0901 	ldrb.w	r0, [r3], #-1
    2820:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2824:	e7e2      	b.n	27ec <usb_get_device_descriptor+0x184>
		switch (head->bDescriptorType) {
    2826:	46a1      	mov	r9, r4
    2828:	e751      	b.n	26ce <usb_get_device_descriptor+0x66>
    282a:	bf00      	nop
    282c:	20002388 	.word	0x20002388
    2830:	20002469 	.word	0x20002469
    2834:	2000246c 	.word	0x2000246c
    2838:	20002490 	.word	0x20002490
    283c:	0000f552 	.word	0x0000f552

00002840 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2840:	4b09      	ldr	r3, [pc, #36]	; (2868 <usb_ep_get_transfer+0x28>)
    2842:	2100      	movs	r1, #0
    2844:	461a      	mov	r2, r3
{
    2846:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2848:	781c      	ldrb	r4, [r3, #0]
    284a:	4284      	cmp	r4, r0
    284c:	d104      	bne.n	2858 <usb_ep_get_transfer+0x18>
    284e:	685c      	ldr	r4, [r3, #4]
    2850:	b114      	cbz	r4, 2858 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2852:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2856:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2858:	3101      	adds	r1, #1
    285a:	2904      	cmp	r1, #4
    285c:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2860:	d1f2      	bne.n	2848 <usb_ep_get_transfer+0x8>
	return NULL;
    2862:	2000      	movs	r0, #0
    2864:	e7f7      	b.n	2856 <usb_ep_get_transfer+0x16>
    2866:	bf00      	nop
    2868:	20012d10 	.word	0x20012d10

0000286c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    286c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2870:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
    2874:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2876:	3310      	adds	r3, #16
	ep = trans->ep;
    2878:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    287c:	d110      	bne.n	28a0 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    287e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2880:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2884:	0799      	lsls	r1, r3, #30
    2886:	d53c      	bpl.n	2902 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2888:	bb02      	cbnz	r2, 28cc <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    288a:	f013 0304 	ands.w	r3, r3, #4
    288e:	d104      	bne.n	289a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2890:	461a      	mov	r2, r3
    2892:	4619      	mov	r1, r3
    2894:	4630      	mov	r0, r6
    2896:	f008 fdbb 	bl	b410 <usb_write>
			}
			trans->status = 0;
    289a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    289c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    28a0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    28a4:	3310      	adds	r3, #16
    28a6:	d00e      	beq.n	28c6 <usb_transfer_work+0x5a>
    28a8:	f854 5c18 	ldr.w	r5, [r4, #-24]
    28ac:	b15d      	cbz	r5, 28c6 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    28ae:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    28b2:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    28b6:	f00b fd15 	bl	e2e4 <k_is_in_isr>
    28ba:	2800      	cmp	r0, #0
    28bc:	d04c      	beq.n	2958 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28be:	4621      	mov	r1, r4
    28c0:	482b      	ldr	r0, [pc, #172]	; (2970 <usb_transfer_work+0x104>)
    28c2:	f00b fe08 	bl	e4d6 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    28c6:	b002      	add	sp, #8
    28c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    28cc:	f850 1c24 	ldr.w	r1, [r0, #-36]
    28d0:	ab01      	add	r3, sp, #4
    28d2:	4630      	mov	r0, r6
    28d4:	f008 fd9c 	bl	b410 <usb_write>
		if (ret) {
    28d8:	b110      	cbz	r0, 28e0 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    28da:	f06f 0315 	mvn.w	r3, #21
    28de:	e7dd      	b.n	289c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    28e0:	9a01      	ldr	r2, [sp, #4]
    28e2:	f854 3c24 	ldr.w	r3, [r4, #-36]
    28e6:	4413      	add	r3, r2
    28e8:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    28ec:	f854 3c20 	ldr.w	r3, [r4, #-32]
    28f0:	1a9b      	subs	r3, r3, r2
    28f2:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    28f6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    28fa:	4413      	add	r3, r2
    28fc:	f844 3c1c 	str.w	r3, [r4, #-28]
    2900:	e7ce      	b.n	28a0 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2902:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2906:	ab01      	add	r3, sp, #4
    2908:	4630      	mov	r0, r6
    290a:	f002 faf1 	bl	4ef0 <usb_dc_ep_read_wait>
		if (ret) {
    290e:	2800      	cmp	r0, #0
    2910:	d1e3      	bne.n	28da <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2912:	9d01      	ldr	r5, [sp, #4]
    2914:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2918:	442b      	add	r3, r5
    291a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    291e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2922:	1b5b      	subs	r3, r3, r5
    2924:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2928:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    292c:	442b      	add	r3, r5
    292e:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2932:	2d00      	cmp	r5, #0
    2934:	d0b1      	beq.n	289a <usb_transfer_work+0x2e>
    2936:	4630      	mov	r0, r6
    2938:	f002 fb7e 	bl	5038 <usb_dc_ep_mps>
    293c:	fbb5 f3f0 	udiv	r3, r5, r0
    2940:	fb03 5510 	mls	r5, r3, r0, r5
    2944:	2d00      	cmp	r5, #0
    2946:	d1a8      	bne.n	289a <usb_transfer_work+0x2e>
    2948:	f854 3c20 	ldr.w	r3, [r4, #-32]
    294c:	2b00      	cmp	r3, #0
    294e:	d0a4      	beq.n	289a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2950:	4630      	mov	r0, r6
    2952:	f002 fb15 	bl	4f80 <usb_dc_ep_read_continue>
    2956:	e7a3      	b.n	28a0 <usb_transfer_work+0x34>
		trans->cb = NULL;
    2958:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    295c:	f1a4 0010 	sub.w	r0, r4, #16
    2960:	f006 fe24 	bl	95ac <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    2964:	4642      	mov	r2, r8
    2966:	4639      	mov	r1, r7
    2968:	4630      	mov	r0, r6
    296a:	47a8      	blx	r5
    296c:	e7ab      	b.n	28c6 <usb_transfer_work+0x5a>
    296e:	bf00      	nop
    2970:	20002490 	.word	0x20002490

00002974 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2974:	1e4b      	subs	r3, r1, #1
    2976:	2b01      	cmp	r3, #1
{
    2978:	b573      	push	{r0, r1, r4, r5, r6, lr}
    297a:	4606      	mov	r6, r0
    297c:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    297e:	d80f      	bhi.n	29a0 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2980:	f7ff ff5e 	bl	2840 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2984:	4604      	mov	r4, r0
    2986:	b968      	cbnz	r0, 29a4 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2988:	2d01      	cmp	r5, #1
    298a:	d109      	bne.n	29a0 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    298c:	ab01      	add	r3, sp, #4
    298e:	2201      	movs	r2, #1
    2990:	4630      	mov	r0, r6
    2992:	f10d 0103 	add.w	r1, sp, #3
    2996:	f002 faab 	bl	4ef0 <usb_dc_ep_read_wait>
			} while (bytes);
    299a:	9b01      	ldr	r3, [sp, #4]
    299c:	2b00      	cmp	r3, #0
    299e:	d1f5      	bne.n	298c <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    29a0:	b002      	add	sp, #8
    29a2:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    29a4:	f00b fc9e 	bl	e2e4 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    29a8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    29ac:	b108      	cbz	r0, 29b2 <usb_transfer_ep_callback+0x3e>
    29ae:	2d01      	cmp	r5, #1
    29b0:	d105      	bne.n	29be <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    29b2:	4608      	mov	r0, r1
}
    29b4:	b002      	add	sp, #8
    29b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    29ba:	f7ff bf57 	b.w	286c <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    29be:	4803      	ldr	r0, [pc, #12]	; (29cc <usb_transfer_ep_callback+0x58>)
}
    29c0:	b002      	add	sp, #8
    29c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    29c6:	f00b bd86 	b.w	e4d6 <k_work_submit_to_queue>
    29ca:	bf00      	nop
    29cc:	20002490 	.word	0x20002490

000029d0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    29d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d4:	4606      	mov	r6, r0
    29d6:	4615      	mov	r5, r2
    29d8:	4698      	mov	r8, r3
    29da:	9101      	str	r1, [sp, #4]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    29dc:	f008 fd5e 	bl	b49c <usb_transfer_is_busy>
    29e0:	4604      	mov	r4, r0
    29e2:	2800      	cmp	r0, #0
    29e4:	d15c      	bne.n	2aa0 <usb_transfer+0xd0>
	__asm__ volatile(
    29e6:	f04f 0320 	mov.w	r3, #32
    29ea:	f3ef 8a11 	mrs	sl, BASEPRI
    29ee:	f383 8812 	msr	BASEPRI_MAX, r3
    29f2:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    29f6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2aa8 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    29fa:	2200      	movs	r2, #0
    29fc:	2300      	movs	r3, #0
    29fe:	4658      	mov	r0, fp
    2a00:	f006 fdf8 	bl	95f4 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2a04:	b970      	cbnz	r0, 2a24 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2a06:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2aac <usb_transfer+0xdc>
    2a0a:	01a7      	lsls	r7, r4, #6
    2a0c:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2a10:	6863      	ldr	r3, [r4, #4]
    2a12:	f113 0f10 	cmn.w	r3, #16
    2a16:	d114      	bne.n	2a42 <usb_transfer+0x72>
    2a18:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2a1a:	4658      	mov	r0, fp
    2a1c:	f006 fdc6 	bl	95ac <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2a20:	9b01      	ldr	r3, [sp, #4]
    2a22:	e006      	b.n	2a32 <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2a24:	3401      	adds	r4, #1
    2a26:	2c04      	cmp	r4, #4
    2a28:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2a2c:	d1e5      	bne.n	29fa <usb_transfer+0x2a>
		ret = -ENOMEM;
    2a2e:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2a32:	f38a 8811 	msr	BASEPRI, sl
    2a36:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2a3a:	4618      	mov	r0, r3
    2a3c:	b003      	add	sp, #12
    2a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2a42:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2a44:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2a46:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2a4c:	4630      	mov	r0, r6
	trans->cb = cb;
    2a4e:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	trans->ep = ep;
    2a52:	f809 6007 	strb.w	r6, [r9, r7]
	trans->priv = cb_data;
    2a56:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2a58:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
    2a5c:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2a60:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2a62:	f002 fae9 	bl	5038 <usb_dc_ep_mps>
    2a66:	b158      	cbz	r0, 2a80 <usb_transfer+0xb0>
    2a68:	4630      	mov	r0, r6
    2a6a:	f002 fae5 	bl	5038 <usb_dc_ep_mps>
    2a6e:	fbb5 f3f0 	udiv	r3, r5, r0
    2a72:	fb03 5510 	mls	r5, r3, r0, r5
    2a76:	b11d      	cbz	r5, 2a80 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2a7a:	f043 0304 	orr.w	r3, r3, #4
    2a7e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2a80:	f018 0f02 	tst.w	r8, #2
    2a84:	d007      	beq.n	2a96 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2a86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2a8a:	4809      	ldr	r0, [pc, #36]	; (2ab0 <usb_transfer+0xe0>)
    2a8c:	4449      	add	r1, r9
    2a8e:	f00b fd22 	bl	e4d6 <k_work_submit_to_queue>
	int key, ret = 0;
    2a92:	2300      	movs	r3, #0
    2a94:	e7cd      	b.n	2a32 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2a96:	4630      	mov	r0, r6
    2a98:	f002 fa72 	bl	4f80 <usb_dc_ep_read_continue>
    2a9c:	4603      	mov	r3, r0
    2a9e:	e7c8      	b.n	2a32 <usb_transfer+0x62>
		return -EBUSY;
    2aa0:	f06f 030f 	mvn.w	r3, #15
    2aa4:	e7c9      	b.n	2a3a <usb_transfer+0x6a>
    2aa6:	bf00      	nop
    2aa8:	20012d2c 	.word	0x20012d2c
    2aac:	20012d10 	.word	0x20012d10
    2ab0:	20002490 	.word	0x20002490

00002ab4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2ab4:	b510      	push	{r4, lr}
	__asm__ volatile(
    2ab6:	f04f 0320 	mov.w	r3, #32
    2aba:	f3ef 8411 	mrs	r4, BASEPRI
    2abe:	f383 8812 	msr	BASEPRI_MAX, r3
    2ac2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2ac6:	f7ff febb 	bl	2840 <usb_ep_get_transfer>
	if (!trans) {
    2aca:	b150      	cbz	r0, 2ae2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2acc:	6843      	ldr	r3, [r0, #4]
    2ace:	3310      	adds	r3, #16
    2ad0:	d107      	bne.n	2ae2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2ad2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ad6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
    2ada:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2adc:	4803      	ldr	r0, [pc, #12]	; (2aec <usb_cancel_transfer+0x38>)
    2ade:	f00b fcfa 	bl	e4d6 <k_work_submit_to_queue>
	__asm__ volatile(
    2ae2:	f384 8811 	msr	BASEPRI, r4
    2ae6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2aea:	bd10      	pop	{r4, pc}
    2aec:	20002490 	.word	0x20002490

00002af0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2af0:	b570      	push	{r4, r5, r6, lr}
    2af2:	2504      	movs	r5, #4
    2af4:	4c0e      	ldr	r4, [pc, #56]	; (2b30 <usb_cancel_transfers+0x40>)
	__asm__ volatile(
    2af6:	f04f 0320 	mov.w	r3, #32
    2afa:	f3ef 8611 	mrs	r6, BASEPRI
    2afe:	f383 8812 	msr	BASEPRI_MAX, r3
    2b02:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2b06:	6863      	ldr	r3, [r4, #4]
    2b08:	3310      	adds	r3, #16
    2b0a:	d107      	bne.n	2b1c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2b0c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2b10:	4808      	ldr	r0, [pc, #32]	; (2b34 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2b12:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2b14:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2b18:	f00b fcdd 	bl	e4d6 <k_work_submit_to_queue>
	__asm__ volatile(
    2b1c:	f386 8811 	msr	BASEPRI, r6
    2b20:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b24:	3d01      	subs	r5, #1
    2b26:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2b2a:	d1e4      	bne.n	2af6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
    2b2e:	bf00      	nop
    2b30:	20012d10 	.word	0x20012d10
    2b34:	20002490 	.word	0x20002490

00002b38 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2b38:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b3a:	2500      	movs	r5, #0
    2b3c:	4c09      	ldr	r4, [pc, #36]	; (2b64 <usb_transfer_init+0x2c>)
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2b3e:	4e0a      	ldr	r6, [pc, #40]	; (2b68 <usb_transfer_init+0x30>)
    2b40:	4631      	mov	r1, r6
    2b42:	4620      	mov	r0, r4
    2b44:	f00b fcaa 	bl	e49c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2b48:	2201      	movs	r2, #1
    2b4a:	f1a4 0010 	sub.w	r0, r4, #16
    2b4e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b50:	3501      	adds	r5, #1
    2b52:	f00b fc66 	bl	e422 <z_impl_k_sem_init>
    2b56:	2d04      	cmp	r5, #4
    2b58:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2b5c:	d1f0      	bne.n	2b40 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2b5e:	2000      	movs	r0, #0
    2b60:	bd70      	pop	{r4, r5, r6, pc}
    2b62:	bf00      	nop
    2b64:	20012d3c 	.word	0x20012d3c
    2b68:	0000286d 	.word	0x0000286d

00002b6c <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    2b6c:	b570      	push	{r4, r5, r6, lr}
    2b6e:	4604      	mov	r4, r0
    2b70:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b72:	7901      	ldrb	r1, [r0, #4]
    2b74:	4812      	ldr	r0, [pc, #72]	; (2bc0 <cdc_acm_class_handle_req+0x54>)
{
    2b76:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b78:	f008 fc6d 	bl	b456 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    2b7c:	b1e8      	cbz	r0, 2bba <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    2b7e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2b82:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    2b84:	2a00      	cmp	r2, #0
    2b86:	db11      	blt.n	2bac <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    2b88:	2b20      	cmp	r3, #32
    2b8a:	d004      	beq.n	2b96 <cdc_acm_class_handle_req+0x2a>
    2b8c:	2b22      	cmp	r3, #34	; 0x22
    2b8e:	d009      	beq.n	2ba4 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    2b90:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b94:	e005      	b.n	2ba2 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    2b96:	2207      	movs	r2, #7
    2b98:	6829      	ldr	r1, [r5, #0]
    2b9a:	3810      	subs	r0, #16
    2b9c:	f008 fe87 	bl	b8ae <memcpy>
			return 0;
    2ba0:	2000      	movs	r0, #0
}
    2ba2:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    2ba4:	8863      	ldrh	r3, [r4, #2]
    2ba6:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    2baa:	e7f9      	b.n	2ba0 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    2bac:	2b21      	cmp	r3, #33	; 0x21
    2bae:	d1ef      	bne.n	2b90 <cdc_acm_class_handle_req+0x24>
			*len = sizeof(dev_data->line_coding);
    2bb0:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    2bb2:	3810      	subs	r0, #16
    2bb4:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    2bb6:	6033      	str	r3, [r6, #0]
			return 0;
    2bb8:	e7f2      	b.n	2ba0 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    2bba:	f06f 0012 	mvn.w	r0, #18
    2bbe:	e7f0      	b.n	2ba2 <cdc_acm_class_handle_req+0x36>
    2bc0:	20012e10 	.word	0x20012e10

00002bc4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2bc4:	4601      	mov	r1, r0
    2bc6:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2bc8:	4803      	ldr	r0, [pc, #12]	; (2bd8 <cdc_acm_int_in+0x14>)
    2bca:	f008 fc51 	bl	b470 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2bce:	b110      	cbz	r0, 2bd6 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2bd0:	2301      	movs	r3, #1
    2bd2:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    2bd6:	bd08      	pop	{r3, pc}
    2bd8:	20012e10 	.word	0x20012e10

00002bdc <cdc_acm_irq_rx_enable>:
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;

	dev_data->rx_irq_ena = true;
    2bdc:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2bde:	6901      	ldr	r1, [r0, #16]
	dev_data->rx_irq_ena = true;
    2be0:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    2be4:	680b      	ldr	r3, [r1, #0]
    2be6:	b133      	cbz	r3, 2bf6 <cdc_acm_irq_rx_enable+0x1a>
    2be8:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    2bec:	b11b      	cbz	r3, 2bf6 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2bee:	4802      	ldr	r0, [pc, #8]	; (2bf8 <cdc_acm_irq_rx_enable+0x1c>)
    2bf0:	3108      	adds	r1, #8
    2bf2:	f00b bc70 	b.w	e4d6 <k_work_submit_to_queue>
	}
}
    2bf6:	4770      	bx	lr
    2bf8:	20002490 	.word	0x20002490

00002bfc <cdc_acm_irq_tx_enable>:
	dev_data->tx_irq_ena = true;
    2bfc:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2bfe:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2c00:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    2c04:	680b      	ldr	r3, [r1, #0]
    2c06:	b133      	cbz	r3, 2c16 <cdc_acm_irq_tx_enable+0x1a>
    2c08:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    2c0c:	b11b      	cbz	r3, 2c16 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2c0e:	4802      	ldr	r0, [pc, #8]	; (2c18 <cdc_acm_irq_tx_enable+0x1c>)
    2c10:	3108      	adds	r1, #8
    2c12:	f00b bc60 	b.w	e4d6 <k_work_submit_to_queue>
}
    2c16:	4770      	bx	lr
    2c18:	20002490 	.word	0x20002490

00002c1c <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
    2c1c:	2100      	movs	r1, #0
{
    2c1e:	4603      	mov	r3, r0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2c20:	4a0c      	ldr	r2, [pc, #48]	; (2c54 <cdc_acm_reset_port+0x38>)
	dev_data->tx_ready = false;
    2c22:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2c26:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
    2c28:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2c2c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    2c30:	8890      	ldrh	r0, [r2, #4]
    2c32:	7992      	ldrb	r2, [r2, #6]
    2c34:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    2c38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->line_state = 0;
    2c3c:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2c40:	2240      	movs	r2, #64	; 0x40
	dev_data->configured = false;
    2c42:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    2c46:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2c4a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    2c4e:	f008 be39 	b.w	b8c4 <memset>
    2c52:	bf00      	nop
    2c54:	0000ed80 	.word	0x0000ed80

00002c58 <cdc_acm_fifo_fill>:
{
    2c58:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2c5a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2c5c:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    2c60:	b188      	cbz	r0, 2c86 <cdc_acm_fifo_fill+0x2e>
    2c62:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    2c66:	b97b      	cbnz	r3, 2c88 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    2c68:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2c6c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    2c70:	f008 facd 	bl	b20e <ring_buf_put>
    2c74:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2c76:	2200      	movs	r2, #0
    2c78:	2300      	movs	r3, #0
    2c7a:	4804      	ldr	r0, [pc, #16]	; (2c8c <cdc_acm_fifo_fill+0x34>)
    2c7c:	f105 0118 	add.w	r1, r5, #24
    2c80:	f006 fe08 	bl	9894 <k_work_schedule_for_queue>
	return wrote;
    2c84:	4620      	mov	r0, r4
}
    2c86:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2c88:	2000      	movs	r0, #0
    2c8a:	e7fc      	b.n	2c86 <cdc_acm_fifo_fill+0x2e>
    2c8c:	20002490 	.word	0x20002490

00002c90 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2c90:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2c92:	6904      	ldr	r4, [r0, #16]
{
    2c94:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2c98:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    2c9c:	b1a3      	cbz	r3, 2cc8 <cdc_acm_poll_out+0x38>
    2c9e:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    2ca2:	b98b      	cbnz	r3, 2cc8 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2ca4:	f10d 0107 	add.w	r1, sp, #7
    2ca8:	2201      	movs	r2, #1
    2caa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    2cae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2cb2:	f008 faac 	bl	b20e <ring_buf_put>
    2cb6:	4601      	mov	r1, r0
    2cb8:	b140      	cbz	r0, 2ccc <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    2cba:	2221      	movs	r2, #33	; 0x21
    2cbc:	2300      	movs	r3, #0
    2cbe:	480c      	ldr	r0, [pc, #48]	; (2cf0 <cdc_acm_poll_out+0x60>)
    2cc0:	f104 0118 	add.w	r1, r4, #24
    2cc4:	f006 fde6 	bl	9894 <k_work_schedule_for_queue>
}
    2cc8:	b002      	add	sp, #8
    2cca:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2ccc:	2201      	movs	r2, #1
    2cce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2cd2:	f008 faec 	bl	b2ae <ring_buf_get>
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d0f6      	beq.n	2cc8 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2cda:	2201      	movs	r2, #1
    2cdc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2ce0:	f10d 0107 	add.w	r1, sp, #7
    2ce4:	f008 fa93 	bl	b20e <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2ce8:	2800      	cmp	r0, #0
    2cea:	d1e6      	bne.n	2cba <cdc_acm_poll_out+0x2a>
    2cec:	e7ec      	b.n	2cc8 <cdc_acm_poll_out+0x38>
    2cee:	bf00      	nop
    2cf0:	20002490 	.word	0x20002490

00002cf4 <tx_work_handler>:
{
    2cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    2cf6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
    2cfa:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2cfc:	685b      	ldr	r3, [r3, #4]
{
    2cfe:	b085      	sub	sp, #20
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2d00:	6a1b      	ldr	r3, [r3, #32]
    2d02:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    2d04:	4638      	mov	r0, r7
    2d06:	f008 fbc9 	bl	b49c <usb_transfer_is_busy>
    2d0a:	4606      	mov	r6, r0
    2d0c:	b9e0      	cbnz	r0, 2d48 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2d12:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    2d14:	a903      	add	r1, sp, #12
    2d16:	f008 fa99 	bl	b24c <ring_buf_get_claim>
	if (!len) {
    2d1a:	4604      	mov	r4, r0
    2d1c:	b1a0      	cbz	r0, 2d48 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2d1e:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2d20:	f1a5 0318 	sub.w	r3, r5, #24
	dev_data->tx_ready = false;
    2d24:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2d28:	9301      	str	r3, [sp, #4]
    2d2a:	4b08      	ldr	r3, [pc, #32]	; (2d4c <tx_work_handler+0x58>)
		len -= 1;
    2d2c:	bf08      	it	eq
    2d2e:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2d32:	9903      	ldr	r1, [sp, #12]
    2d34:	9300      	str	r3, [sp, #0]
    2d36:	4622      	mov	r2, r4
    2d38:	2302      	movs	r3, #2
    2d3a:	4638      	mov	r0, r7
    2d3c:	f7ff fe48 	bl	29d0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    2d40:	4621      	mov	r1, r4
    2d42:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    2d44:	f008 fa9e 	bl	b284 <ring_buf_get_finish>
}
    2d48:	b005      	add	sp, #20
    2d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d4c:	00002d51 	.word	0x00002d51

00002d50 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2d50:	2301      	movs	r3, #1
{
    2d52:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    2d54:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2d58:	6813      	ldr	r3, [r2, #0]
{
    2d5a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2d5c:	b13b      	cbz	r3, 2d6e <cdc_acm_write_cb+0x1e>
    2d5e:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    2d62:	b123      	cbz	r3, 2d6e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2d64:	480a      	ldr	r0, [pc, #40]	; (2d90 <cdc_acm_write_cb+0x40>)
    2d66:	f102 0108 	add.w	r1, r2, #8
    2d6a:	f00b fbb4 	bl	e4d6 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2d6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2d72:	689a      	ldr	r2, [r3, #8]
    2d74:	691b      	ldr	r3, [r3, #16]
    2d76:	429a      	cmp	r2, r3
    2d78:	d008      	beq.n	2d8c <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2d7a:	f104 0118 	add.w	r1, r4, #24
    2d7e:	2200      	movs	r2, #0
}
    2d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2d84:	2300      	movs	r3, #0
    2d86:	4802      	ldr	r0, [pc, #8]	; (2d90 <cdc_acm_write_cb+0x40>)
    2d88:	f006 bd84 	b.w	9894 <k_work_schedule_for_queue>
}
    2d8c:	bd10      	pop	{r4, pc}
    2d8e:	bf00      	nop
    2d90:	20002490 	.word	0x20002490

00002d94 <cdc_acm_init>:
	parent->next = child;
    2d94:	2300      	movs	r3, #0
{
    2d96:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2d98:	6904      	ldr	r4, [r0, #16]
    2d9a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2d9e:	4b0c      	ldr	r3, [pc, #48]	; (2dd0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    2da0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    2da4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    2da6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2daa:	b969      	cbnz	r1, 2dc8 <cdc_acm_init+0x34>
	list->head = node;
    2dac:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2db0:	f104 0008 	add.w	r0, r4, #8
    2db4:	4907      	ldr	r1, [pc, #28]	; (2dd4 <cdc_acm_init+0x40>)
    2db6:	f00b fb71 	bl	e49c <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    2dba:	f104 0018 	add.w	r0, r4, #24
    2dbe:	4906      	ldr	r1, [pc, #24]	; (2dd8 <cdc_acm_init+0x44>)
    2dc0:	f00b fb9a 	bl	e4f8 <k_work_init_delayable>
}
    2dc4:	2000      	movs	r0, #0
    2dc6:	bd10      	pop	{r4, pc}
	parent->next = child;
    2dc8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2dca:	605a      	str	r2, [r3, #4]
}
    2dcc:	e7f0      	b.n	2db0 <cdc_acm_init+0x1c>
    2dce:	bf00      	nop
    2dd0:	20012e10 	.word	0x20012e10
    2dd4:	0000b4c7 	.word	0x0000b4c7
    2dd8:	00002cf5 	.word	0x00002cf5

00002ddc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    2ddc:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    2dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2de2:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2de4:	6905      	ldr	r5, [r0, #16]
	notification.wIndex = 0U;
    2de6:	f242 00a1 	movw	r0, #8353	; 0x20a1
static int cdc_acm_send_notification(const struct device *dev,
    2dea:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    2dec:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    2df0:	2300      	movs	r3, #0
    2df2:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2df6:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    2df8:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2dfc:	220a      	movs	r2, #10
    2dfe:	7900      	ldrb	r0, [r0, #4]
    2e00:	a901      	add	r1, sp, #4
    2e02:	f008 fb05 	bl	b410 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2e06:	4c05      	ldr	r4, [pc, #20]	; (2e1c <cdc_acm_send_notification.isra.0+0x40>)
    2e08:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    2e0c:	b923      	cbnz	r3, 2e18 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    2e0e:	2001      	movs	r0, #1
    2e10:	f00b fcb0 	bl	e774 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2e14:	3c01      	subs	r4, #1
    2e16:	d1f7      	bne.n	2e08 <cdc_acm_send_notification.isra.0+0x2c>
}
    2e18:	b005      	add	sp, #20
    2e1a:	bd30      	pop	{r4, r5, pc}
    2e1c:	000186a1 	.word	0x000186a1

00002e20 <cdc_acm_read_cb>:
{
    2e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e22:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2e24:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    2e28:	1e0a      	subs	r2, r1, #0
{
    2e2a:	4605      	mov	r5, r0
	if (size <= 0) {
    2e2c:	dd1f      	ble.n	2e6e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2e2e:	4631      	mov	r1, r6
    2e30:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    2e34:	f008 f9eb 	bl	b20e <ring_buf_put>
	dev_data->rx_ready = true;
    2e38:	2301      	movs	r3, #1
    2e3a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2e3e:	6823      	ldr	r3, [r4, #0]
    2e40:	b13b      	cbz	r3, 2e52 <cdc_acm_read_cb+0x32>
    2e42:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2e46:	b123      	cbz	r3, 2e52 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2e48:	480e      	ldr	r0, [pc, #56]	; (2e84 <cdc_acm_read_cb+0x64>)
    2e4a:	f104 0108 	add.w	r1, r4, #8
    2e4e:	f00b fb42 	bl	e4d6 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    2e52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    2e56:	684b      	ldr	r3, [r1, #4]
    2e58:	694a      	ldr	r2, [r1, #20]
    2e5a:	1a9a      	subs	r2, r3, r2
    2e5c:	69cb      	ldr	r3, [r1, #28]
    2e5e:	1a9b      	subs	r3, r3, r2
    2e60:	2b3f      	cmp	r3, #63	; 0x3f
    2e62:	d804      	bhi.n	2e6e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    2e64:	2301      	movs	r3, #1
    2e66:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    2e6a:	b002      	add	sp, #8
    2e6c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    2e6e:	4b06      	ldr	r3, [pc, #24]	; (2e88 <cdc_acm_read_cb+0x68>)
    2e70:	2240      	movs	r2, #64	; 0x40
    2e72:	9300      	str	r3, [sp, #0]
    2e74:	4631      	mov	r1, r6
    2e76:	2301      	movs	r3, #1
    2e78:	4628      	mov	r0, r5
    2e7a:	9401      	str	r4, [sp, #4]
    2e7c:	f7ff fda8 	bl	29d0 <usb_transfer>
    2e80:	e7f3      	b.n	2e6a <cdc_acm_read_cb+0x4a>
    2e82:	bf00      	nop
    2e84:	20002490 	.word	0x20002490
    2e88:	00002e21 	.word	0x00002e21

00002e8c <cdc_acm_dev_status_cb>:
{
    2e8c:	b538      	push	{r3, r4, r5, lr}
    2e8e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2e90:	4601      	mov	r1, r0
    2e92:	481e      	ldr	r0, [pc, #120]	; (2f0c <cdc_acm_dev_status_cb+0x80>)
    2e94:	f008 fad4 	bl	b440 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2e98:	4604      	mov	r4, r0
    2e9a:	b380      	cbz	r0, 2efe <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2e9c:	4602      	mov	r2, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2e9e:	f852 39a4 	ldr.w	r3, [r2], #-164
	switch (status) {
    2ea2:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    2ea4:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    2ea6:	2905      	cmp	r1, #5
    2ea8:	d829      	bhi.n	2efe <cdc_acm_dev_status_cb+0x72>
    2eaa:	e8df f001 	tbb	[pc, r1]
    2eae:	2820      	.short	0x2820
    2eb0:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    2eb4:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    2eb8:	b931      	cbnz	r1, 2ec8 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2eba:	6a1b      	ldr	r3, [r3, #32]
    2ebc:	7b18      	ldrb	r0, [r3, #12]
    2ebe:	f7ff ffaf 	bl	2e20 <cdc_acm_read_cb>
			dev_data->configured = true;
    2ec2:	2301      	movs	r3, #1
    2ec4:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    2ec8:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    2ecc:	b9bb      	cbnz	r3, 2efe <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    2ece:	2301      	movs	r3, #1
    2ed0:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    2ed4:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    2ed8:	b18b      	cbz	r3, 2efe <cdc_acm_dev_status_cb+0x72>
    2eda:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    2ede:	b173      	cbz	r3, 2efe <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2ee0:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    2ee4:	480a      	ldr	r0, [pc, #40]	; (2f10 <cdc_acm_dev_status_cb+0x84>)
}
    2ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2eea:	f00b baf4 	b.w	e4d6 <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
    2eee:	4610      	mov	r0, r2
}
    2ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    2ef4:	f7ff be92 	b.w	2c1c <cdc_acm_reset_port>
		dev_data->suspended = true;
    2ef8:	2301      	movs	r3, #1
			dev_data->suspended = false;
    2efa:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    2efe:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    2f00:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d0fa      	beq.n	2efe <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    2f08:	2300      	movs	r3, #0
    2f0a:	e7f6      	b.n	2efa <cdc_acm_dev_status_cb+0x6e>
    2f0c:	20012e10 	.word	0x20012e10
    2f10:	20002490 	.word	0x20002490

00002f14 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    2f14:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    2f16:	2400      	movs	r4, #0
    2f18:	4d08      	ldr	r5, [pc, #32]	; (2f3c <z_usb_work_q_init+0x28>)
    2f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f22:	4628      	mov	r0, r5
    2f24:	4906      	ldr	r1, [pc, #24]	; (2f40 <z_usb_work_q_init+0x2c>)
    2f26:	9400      	str	r4, [sp, #0]
    2f28:	f006 fc7c 	bl	9824 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    2f2c:	4905      	ldr	r1, [pc, #20]	; (2f44 <z_usb_work_q_init+0x30>)
    2f2e:	4628      	mov	r0, r5
    2f30:	f00b f9de 	bl	e2f0 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    2f34:	4620      	mov	r0, r4
    2f36:	b003      	add	sp, #12
    2f38:	bd30      	pop	{r4, r5, pc}
    2f3a:	bf00      	nop
    2f3c:	20002490 	.word	0x20002490
    2f40:	200568b8 	.word	0x200568b8
    2f44:	0000f598 	.word	0x0000f598

00002f48 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2f48:	4801      	ldr	r0, [pc, #4]	; (2f50 <nrf_cc3xx_platform_abort_init+0x8>)
    2f4a:	f007 ba01 	b.w	a350 <nrf_cc3xx_platform_set_abort>
    2f4e:	bf00      	nop
    2f50:	0000eeb8 	.word	0x0000eeb8

00002f54 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f54:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2f56:	4604      	mov	r4, r0
    2f58:	b918      	cbnz	r0, 2f62 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2f5a:	4b0f      	ldr	r3, [pc, #60]	; (2f98 <mutex_free_platform+0x44>)
    2f5c:	480f      	ldr	r0, [pc, #60]	; (2f9c <mutex_free_platform+0x48>)
    2f5e:	685b      	ldr	r3, [r3, #4]
    2f60:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2f62:	6861      	ldr	r1, [r4, #4]
    2f64:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    2f68:	d00f      	beq.n	2f8a <mutex_free_platform+0x36>
    2f6a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    2f6e:	d00c      	beq.n	2f8a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f70:	4d0b      	ldr	r5, [pc, #44]	; (2fa0 <mutex_free_platform+0x4c>)
    2f72:	42a9      	cmp	r1, r5
    2f74:	d009      	beq.n	2f8a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2f76:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    2f7a:	d007      	beq.n	2f8c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2f7c:	4621      	mov	r1, r4
    2f7e:	4809      	ldr	r0, [pc, #36]	; (2fa4 <mutex_free_platform+0x50>)
    2f80:	f00b f987 	bl	e292 <k_mem_slab_free>
        mutex->mutex = NULL;
    2f84:	2300      	movs	r3, #0
    2f86:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2f88:	6065      	str	r5, [r4, #4]
}
    2f8a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2f8c:	2214      	movs	r2, #20
    2f8e:	6820      	ldr	r0, [r4, #0]
    2f90:	f008 fc98 	bl	b8c4 <memset>
    2f94:	e7f8      	b.n	2f88 <mutex_free_platform+0x34>
    2f96:	bf00      	nop
    2f98:	20002210 	.word	0x20002210
    2f9c:	0000f5a1 	.word	0x0000f5a1
    2fa0:	a95c5f2c 	.word	0xa95c5f2c
    2fa4:	20013318 	.word	0x20013318

00002fa8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2fa8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2faa:	b360      	cbz	r0, 3006 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2fac:	6843      	ldr	r3, [r0, #4]
    2fae:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2fb2:	d00e      	beq.n	2fd2 <mutex_lock_platform+0x2a>
    2fb4:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2fb8:	d018      	beq.n	2fec <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2fba:	4a14      	ldr	r2, [pc, #80]	; (300c <mutex_lock_platform+0x64>)
    2fbc:	4293      	cmp	r3, r2
    2fbe:	d020      	beq.n	3002 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2fc0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fca:	f006 fa05 	bl	93d8 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    2fce:	b158      	cbz	r0, 2fe8 <mutex_lock_platform+0x40>
    2fd0:	e015      	b.n	2ffe <mutex_lock_platform+0x56>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2fd2:	2201      	movs	r2, #1
    2fd4:	6803      	ldr	r3, [r0, #0]
    2fd6:	e8d3 1fef 	ldaex	r1, [r3]
    2fda:	2900      	cmp	r1, #0
    2fdc:	d103      	bne.n	2fe6 <mutex_lock_platform+0x3e>
    2fde:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2fe2:	2800      	cmp	r0, #0
    2fe4:	d1f7      	bne.n	2fd6 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2fe6:	d10a      	bne.n	2ffe <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    2fe8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2fea:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2fec:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2fee:	4a08      	ldr	r2, [pc, #32]	; (3010 <mutex_lock_platform+0x68>)
    2ff0:	781b      	ldrb	r3, [r3, #0]
    2ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d0f4      	beq.n	2fe8 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ffe:	4805      	ldr	r0, [pc, #20]	; (3014 <mutex_lock_platform+0x6c>)
    3000:	e7f3      	b.n	2fea <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3002:	4805      	ldr	r0, [pc, #20]	; (3018 <mutex_lock_platform+0x70>)
    3004:	e7f1      	b.n	2fea <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3006:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    300a:	e7ee      	b.n	2fea <mutex_lock_platform+0x42>
    300c:	a95c5f2c 	.word	0xa95c5f2c
    3010:	50030000 	.word	0x50030000
    3014:	ffff8fe9 	.word	0xffff8fe9
    3018:	ffff8fea 	.word	0xffff8fea

0000301c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    301c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    301e:	b320      	cbz	r0, 306a <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3020:	6843      	ldr	r3, [r0, #4]
    3022:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3026:	d009      	beq.n	303c <mutex_unlock_platform+0x20>
    3028:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    302c:	d013      	beq.n	3056 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    302e:	4a11      	ldr	r2, [pc, #68]	; (3074 <mutex_unlock_platform+0x58>)
    3030:	4293      	cmp	r3, r2
    3032:	d01d      	beq.n	3070 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3034:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3036:	f006 fa49 	bl	94cc <z_impl_k_mutex_unlock>
    303a:	e014      	b.n	3066 <mutex_unlock_platform+0x4a>
    303c:	2200      	movs	r2, #0
    303e:	6803      	ldr	r3, [r0, #0]
    3040:	e8d3 1fef 	ldaex	r1, [r3]
    3044:	2901      	cmp	r1, #1
    3046:	d103      	bne.n	3050 <mutex_unlock_platform+0x34>
    3048:	e8c3 2fe0 	stlex	r0, r2, [r3]
    304c:	2800      	cmp	r0, #0
    304e:	d1f7      	bne.n	3040 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3050:	d009      	beq.n	3066 <mutex_unlock_platform+0x4a>
    3052:	4809      	ldr	r0, [pc, #36]	; (3078 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    3054:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3056:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3058:	6803      	ldr	r3, [r0, #0]
    305a:	4a08      	ldr	r2, [pc, #32]	; (307c <mutex_unlock_platform+0x60>)
    305c:	781b      	ldrb	r3, [r3, #0]
    305e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3066:	2000      	movs	r0, #0
    3068:	e7f4      	b.n	3054 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    306a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    306e:	e7f1      	b.n	3054 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3070:	4803      	ldr	r0, [pc, #12]	; (3080 <mutex_unlock_platform+0x64>)
    3072:	e7ef      	b.n	3054 <mutex_unlock_platform+0x38>
    3074:	a95c5f2c 	.word	0xa95c5f2c
    3078:	ffff8fe9 	.word	0xffff8fe9
    307c:	50030000 	.word	0x50030000
    3080:	ffff8fea 	.word	0xffff8fea

00003084 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3084:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3086:	4604      	mov	r4, r0
    3088:	b918      	cbnz	r0, 3092 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    308a:	4b1d      	ldr	r3, [pc, #116]	; (3100 <mutex_init_platform+0x7c>)
    308c:	481d      	ldr	r0, [pc, #116]	; (3104 <mutex_init_platform+0x80>)
    308e:	685b      	ldr	r3, [r3, #4]
    3090:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3092:	6863      	ldr	r3, [r4, #4]
    3094:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3098:	d02f      	beq.n	30fa <mutex_init_platform+0x76>
    309a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    309e:	d02c      	beq.n	30fa <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    30a0:	4a19      	ldr	r2, [pc, #100]	; (3108 <mutex_init_platform+0x84>)
    30a2:	4293      	cmp	r3, r2
    30a4:	d119      	bne.n	30da <mutex_init_platform+0x56>
    30a6:	6823      	ldr	r3, [r4, #0]
    30a8:	bb03      	cbnz	r3, 30ec <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    30aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30b2:	4621      	mov	r1, r4
    30b4:	4815      	ldr	r0, [pc, #84]	; (310c <mutex_init_platform+0x88>)
    30b6:	f006 f8a9 	bl	920c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    30ba:	b908      	cbnz	r0, 30c0 <mutex_init_platform+0x3c>
    30bc:	6823      	ldr	r3, [r4, #0]
    30be:	b91b      	cbnz	r3, 30c8 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    30c0:	4b0f      	ldr	r3, [pc, #60]	; (3100 <mutex_init_platform+0x7c>)
    30c2:	4813      	ldr	r0, [pc, #76]	; (3110 <mutex_init_platform+0x8c>)
    30c4:	685b      	ldr	r3, [r3, #4]
    30c6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    30c8:	2214      	movs	r2, #20
    30ca:	2100      	movs	r1, #0
    30cc:	6820      	ldr	r0, [r4, #0]
    30ce:	f008 fbf9 	bl	b8c4 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    30d2:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    30d6:	6063      	str	r3, [r4, #4]
    30d8:	e008      	b.n	30ec <mutex_init_platform+0x68>
    switch(flags){
    30da:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    30de:	d80d      	bhi.n	30fc <mutex_init_platform+0x78>
    30e0:	2b3a      	cmp	r3, #58	; 0x3a
    30e2:	d003      	beq.n	30ec <mutex_init_platform+0x68>
    30e4:	f640 62ba 	movw	r2, #3770	; 0xeba
    30e8:	4293      	cmp	r3, r2
    30ea:	d1de      	bne.n	30aa <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    30ec:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    30ee:	f00b f918 	bl	e322 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    30f2:	6863      	ldr	r3, [r4, #4]
    30f4:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    30f8:	6063      	str	r3, [r4, #4]
}
    30fa:	bd10      	pop	{r4, pc}
    switch(flags){
    30fc:	4a05      	ldr	r2, [pc, #20]	; (3114 <mutex_init_platform+0x90>)
    30fe:	e7f3      	b.n	30e8 <mutex_init_platform+0x64>
    3100:	20002210 	.word	0x20002210
    3104:	0000f5a1 	.word	0x0000f5a1
    3108:	a95c5f2c 	.word	0xa95c5f2c
    310c:	20013318 	.word	0x20013318
    3110:	0000f5c7 	.word	0x0000f5c7
    3114:	3a00003a 	.word	0x3a00003a

00003118 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3118:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    311a:	4906      	ldr	r1, [pc, #24]	; (3134 <nrf_cc3xx_platform_mutex_init+0x1c>)
    311c:	2340      	movs	r3, #64	; 0x40
    311e:	2214      	movs	r2, #20
    3120:	4805      	ldr	r0, [pc, #20]	; (3138 <nrf_cc3xx_platform_mutex_init+0x20>)
    3122:	f00b f8a8 	bl	e276 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    312a:	4904      	ldr	r1, [pc, #16]	; (313c <nrf_cc3xx_platform_mutex_init+0x24>)
    312c:	4804      	ldr	r0, [pc, #16]	; (3140 <nrf_cc3xx_platform_mutex_init+0x28>)
    312e:	f007 b981 	b.w	a434 <nrf_cc3xx_platform_set_mutexes>
    3132:	bf00      	nop
    3134:	20012e18 	.word	0x20012e18
    3138:	20013318 	.word	0x20013318
    313c:	0000eec0 	.word	0x0000eec0
    3140:	0000eed4 	.word	0x0000eed4

00003144 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    3144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    3146:	4e22      	ldr	r6, [pc, #136]	; (31d0 <boot_uart_fifo_callback+0x8c>)
    3148:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    314a:	6883      	ldr	r3, [r0, #8]
    314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    314e:	b103      	cbz	r3, 3152 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    3150:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    3152:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    3154:	6883      	ldr	r3, [r0, #8]
    3156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3158:	2b00      	cmp	r3, #0
    315a:	d131      	bne.n	31c0 <boot_uart_fifo_callback+0x7c>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    315c:	4c1d      	ldr	r4, [pc, #116]	; (31d4 <boot_uart_fifo_callback+0x90>)
	return list->head;
    315e:	4d1e      	ldr	r5, [pc, #120]	; (31d8 <boot_uart_fifo_callback+0x94>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    3160:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    3162:	6883      	ldr	r3, [r0, #8]
    3164:	699b      	ldr	r3, [r3, #24]
    3166:	2b00      	cmp	r3, #0
    3168:	d02d      	beq.n	31c6 <boot_uart_fifo_callback+0x82>
	return api->fifo_read(dev, rx_data, size);
    316a:	2201      	movs	r2, #1
    316c:	f10d 0107 	add.w	r1, sp, #7
    3170:	4798      	blx	r3
		if (rx != 1) {
    3172:	2801      	cmp	r0, #1
    3174:	d127      	bne.n	31c6 <boot_uart_fifo_callback+0x82>
		if (!cmd) {
    3176:	6823      	ldr	r3, [r4, #0]
    3178:	b943      	cbnz	r3, 318c <boot_uart_fifo_callback+0x48>
    317a:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    317c:	b31b      	cbz	r3, 31c6 <boot_uart_fifo_callback+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    317e:	6869      	ldr	r1, [r5, #4]
	return node->next;
    3180:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3182:	428b      	cmp	r3, r1
	list->head = node;
    3184:	602a      	str	r2, [r5, #0]
	list->tail = node;
    3186:	bf08      	it	eq
    3188:	606a      	streq	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    318a:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    318c:	4a13      	ldr	r2, [pc, #76]	; (31dc <boot_uart_fifo_callback+0x98>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    318e:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    3192:	8811      	ldrh	r1, [r2, #0]
    3194:	297f      	cmp	r1, #127	; 0x7f
    3196:	d804      	bhi.n	31a2 <boot_uart_fifo_callback+0x5e>
			cmd->line[cur++] = byte;
    3198:	6823      	ldr	r3, [r4, #0]
    319a:	1c4f      	adds	r7, r1, #1
    319c:	440b      	add	r3, r1
    319e:	8017      	strh	r7, [r2, #0]
    31a0:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    31a2:	280a      	cmp	r0, #10
    31a4:	d1dc      	bne.n	3160 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    31a6:	2000      	movs	r0, #0
			cmd->len = cur;
    31a8:	6823      	ldr	r3, [r4, #0]
    31aa:	8811      	ldrh	r1, [r2, #0]
    31ac:	6018      	str	r0, [r3, #0]
    31ae:	6059      	str	r1, [r3, #4]
	return list->tail;
    31b0:	490b      	ldr	r1, [pc, #44]	; (31e0 <boot_uart_fifo_callback+0x9c>)
    31b2:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    31b4:	b94d      	cbnz	r5, 31ca <boot_uart_fifo_callback+0x86>
	list->head = node;
    31b6:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    31ba:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    31bc:	6020      	str	r0, [r4, #0]
    31be:	e7ce      	b.n	315e <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    31c0:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    31c2:	2800      	cmp	r0, #0
    31c4:	d1ca      	bne.n	315c <boot_uart_fifo_callback+0x18>
		}
	}
}
    31c6:	b003      	add	sp, #12
    31c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    31ca:	602b      	str	r3, [r5, #0]
	list->tail = node;
    31cc:	604b      	str	r3, [r1, #4]
}
    31ce:	e7f4      	b.n	31ba <boot_uart_fifo_callback+0x76>
    31d0:	2001378c 	.word	0x2001378c
    31d4:	20013334 	.word	0x20013334
    31d8:	20013344 	.word	0x20013344
    31dc:	2001464c 	.word	0x2001464c
    31e0:	2001333c 	.word	0x2001333c

000031e4 <console_out>:
{
    31e4:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    31e6:	4b04      	ldr	r3, [pc, #16]	; (31f8 <console_out+0x14>)
{
    31e8:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    31ea:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    31ec:	6883      	ldr	r3, [r0, #8]
    31ee:	b2e1      	uxtb	r1, r4
    31f0:	685b      	ldr	r3, [r3, #4]
    31f2:	4798      	blx	r3
}
    31f4:	4620      	mov	r0, r4
    31f6:	bd10      	pop	{r4, pc}
    31f8:	2001378c 	.word	0x2001378c

000031fc <console_read>:
{
    31fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fe:	4605      	mov	r5, r0
    3200:	4616      	mov	r6, r2
    3202:	4608      	mov	r0, r1
	__asm__ volatile(
    3204:	f04f 0320 	mov.w	r3, #32
    3208:	f3ef 8711 	mrs	r7, BASEPRI
    320c:	f383 8812 	msr	BASEPRI_MAX, r3
    3210:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3214:	491b      	ldr	r1, [pc, #108]	; (3284 <console_read+0x88>)
    3216:	680b      	ldr	r3, [r1, #0]
    3218:	b14b      	cbz	r3, 322e <console_read+0x32>
	return list->tail;
    321a:	4c1b      	ldr	r4, [pc, #108]	; (3288 <console_read+0x8c>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    321c:	6862      	ldr	r2, [r4, #4]
    321e:	429a      	cmp	r2, r3
    3220:	d005      	beq.n	322e <console_read+0x32>
	parent->next = child;
    3222:	2200      	movs	r2, #0
    3224:	601a      	str	r2, [r3, #0]
	return list->tail;
    3226:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    3228:	b962      	cbnz	r2, 3244 <console_read+0x48>
	list->head = node;
    322a:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    322e:	4a17      	ldr	r2, [pc, #92]	; (328c <console_read+0x90>)
    3230:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    3232:	b953      	cbnz	r3, 324a <console_read+0x4e>
	__asm__ volatile(
    3234:	f387 8811 	msr	BASEPRI, r7
    3238:	f3bf 8f6f 	isb	sy
		return 0;
    323c:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    323e:	600b      	str	r3, [r1, #0]
		*newline = 0;
    3240:	6033      	str	r3, [r6, #0]
}
    3242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3244:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3246:	6063      	str	r3, [r4, #4]
}
    3248:	e7f1      	b.n	322e <console_read+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    324a:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return node->next;
    324e:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3250:	4563      	cmp	r3, ip
	list->head = node;
    3252:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3254:	bf08      	it	eq
    3256:	6054      	streq	r4, [r2, #4]
    3258:	f387 8811 	msr	BASEPRI, r7
    325c:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    3260:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    3262:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    3264:	42a0      	cmp	r0, r4
		len = str_size - 1;
    3266:	bfd8      	it	le
    3268:	f100 34ff 	addle.w	r4, r0, #4294967295	; 0xffffffff
	*line = cmd->line;
    326c:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    3270:	4622      	mov	r2, r4
    3272:	4628      	mov	r0, r5
    3274:	f008 fb1b 	bl	b8ae <memcpy>
	str[len] = '\0';
    3278:	2300      	movs	r3, #0
	return len + 1;
    327a:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    327c:	552b      	strb	r3, [r5, r4]
	return len + 1;
    327e:	2301      	movs	r3, #1
    3280:	e7de      	b.n	3240 <console_read+0x44>
    3282:	bf00      	nop
    3284:	20013338 	.word	0x20013338
    3288:	20013344 	.word	0x20013344
    328c:	2001333c 	.word	0x2001333c

00003290 <boot_console_init>:
	list->head = NULL;
    3290:	2300      	movs	r3, #0
{
    3292:	b537      	push	{r0, r1, r2, r4, r5, lr}
	parent->next = child;
    3294:	461c      	mov	r4, r3
	list->head = NULL;
    3296:	4923      	ldr	r1, [pc, #140]	; (3324 <boot_console_init+0x94>)
    3298:	4a23      	ldr	r2, [pc, #140]	; (3328 <boot_console_init+0x98>)
	list->tail = NULL;
    329a:	e9c1 3300 	strd	r3, r3, [r1]
    329e:	e9c2 3300 	strd	r3, r3, [r2]
	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    32a2:	4a22      	ldr	r2, [pc, #136]	; (332c <boot_console_init+0x9c>)
	return list->tail;
    32a4:	6848      	ldr	r0, [r1, #4]
	parent->next = child;
    32a6:	6014      	str	r4, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    32a8:	b988      	cbnz	r0, 32ce <boot_console_init+0x3e>
	list->head = node;
    32aa:	e9c1 2200 	strd	r2, r2, [r1]
    32ae:	3301      	adds	r3, #1
    32b0:	2b08      	cmp	r3, #8
    32b2:	f102 0288 	add.w	r2, r2, #136	; 0x88
    32b6:	d1f5      	bne.n	32a4 <boot_console_init+0x14>
#else
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
#endif

#elif defined(CONFIG_BOOT_SERIAL_CDC_ACM)
        uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
    32b8:	4d1d      	ldr	r5, [pc, #116]	; (3330 <boot_console_init+0xa0>)
    32ba:	481e      	ldr	r0, [pc, #120]	; (3334 <boot_console_init+0xa4>)
    32bc:	6028      	str	r0, [r5, #0]
    32be:	f00a ff8e 	bl	e1de <z_device_is_ready>
#else
#error No serial recovery device selected
#endif


	if (!device_is_ready(uart_dev)) {
    32c2:	b938      	cbnz	r0, 32d4 <boot_console_init+0x44>
		return (-1);
    32c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    32c8:	4620      	mov	r0, r4
    32ca:	b003      	add	sp, #12
    32cc:	bd30      	pop	{r4, r5, pc}
	parent->next = child;
    32ce:	6002      	str	r2, [r0, #0]
	list->tail = node;
    32d0:	604a      	str	r2, [r1, #4]
}
    32d2:	e7ec      	b.n	32ae <boot_console_init+0x1e>
	}

#if CONFIG_BOOT_SERIAL_CDC_ACM
	int rc = usb_enable(NULL);
    32d4:	2000      	movs	r0, #0
    32d6:	f7ff f8f1 	bl	24bc <usb_enable>
	if (rc) {
    32da:	4604      	mov	r4, r0
    32dc:	2800      	cmp	r0, #0
    32de:	d1f1      	bne.n	32c4 <boot_console_init+0x34>
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    32e0:	6828      	ldr	r0, [r5, #0]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    32e2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    32e4:	b123      	cbz	r3, 32f0 <boot_console_init+0x60>
    32e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    32e8:	b113      	cbz	r3, 32f0 <boot_console_init+0x60>
		api->irq_callback_set(dev, cb, user_data);
    32ea:	4622      	mov	r2, r4
    32ec:	4912      	ldr	r1, [pc, #72]	; (3338 <boot_console_init+0xa8>)
    32ee:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    32f0:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    32f2:	6883      	ldr	r3, [r0, #8]
    32f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    32f6:	b10b      	cbz	r3, 32fc <boot_console_init+0x6c>
	return api->irq_rx_ready(dev);
    32f8:	4798      	blx	r3
    32fa:	b148      	cbz	r0, 3310 <boot_console_init+0x80>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    32fc:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    32fe:	6883      	ldr	r3, [r0, #8]
    3300:	699b      	ldr	r3, [r3, #24]
    3302:	2b00      	cmp	r3, #0
    3304:	d0fa      	beq.n	32fc <boot_console_init+0x6c>
	return api->fifo_read(dev, rx_data, size);
    3306:	2201      	movs	r2, #1
    3308:	f10d 0107 	add.w	r1, sp, #7
    330c:	4798      	blx	r3
    330e:	e7f4      	b.n	32fa <boot_console_init+0x6a>
			;
		}
	}

	cur = 0;
    3310:	2200      	movs	r2, #0
    3312:	4b0a      	ldr	r3, [pc, #40]	; (333c <boot_console_init+0xac>)

	uart_irq_rx_enable(uart_dev);
    3314:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    3316:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    3318:	6883      	ldr	r3, [r0, #8]
    331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    331c:	2b00      	cmp	r3, #0
    331e:	d0d3      	beq.n	32c8 <boot_console_init+0x38>
		api->irq_rx_enable(dev);
    3320:	4798      	blx	r3
	return boot_uart_fifo_init();
    3322:	e7d1      	b.n	32c8 <boot_console_init+0x38>
    3324:	20013344 	.word	0x20013344
    3328:	2001333c 	.word	0x2001333c
    332c:	2001334c 	.word	0x2001334c
    3330:	2001378c 	.word	0x2001378c
    3334:	0000e9e8 	.word	0x0000e9e8
    3338:	00003145 	.word	0x00003145
    333c:	2001464c 	.word	0x2001464c

00003340 <boot_serial_output>:
{
    char *data;
    int len, out;
    uint16_t crc;
    uint16_t totlen;
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    3340:	f241 4304 	movw	r3, #5124	; 0x1404
{
    3344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3348:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    334c:	f8ad 3008 	strh.w	r3, [sp, #8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    3350:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    3354:	2500      	movs	r5, #0
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    3356:	f8ad 300c 	strh.w	r3, [sp, #12]
    bs_hdr->nh_op++;
    335a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 3468 <boot_serial_output+0x128>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    335e:	4b43      	ldr	r3, [pc, #268]	; (346c <boot_serial_output+0x12c>)
    bs_hdr->nh_op++;
    3360:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	4e42      	ldr	r6, [pc, #264]	; (3470 <boot_serial_output+0x130>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    3368:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    336a:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    336e:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    3370:	704d      	strb	r5, [r1, #1]
    bs_hdr->nh_op++;
    3372:	3301      	adds	r3, #1
    3374:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    3376:	fa98 f398 	rev16.w	r3, r8
    337a:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    337c:	888b      	ldrh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    337e:	4628      	mov	r0, r5
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    3380:	ba5b      	rev16	r3, r3
    3382:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    3384:	f007 fefd 	bl	b182 <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    3388:	4631      	mov	r1, r6
    338a:	4642      	mov	r2, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    338c:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16_itu_t(crc, data, len);
    3390:	f007 fef7 	bl	b182 <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    3394:	2702      	movs	r7, #2
    3396:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    339a:	ba40      	rev16	r0, r0
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    339c:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    33a0:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    33a2:	2202      	movs	r2, #2
    crc = htons(crc);
    33a4:	f8ad 0010 	strh.w	r0, [sp, #16]
    memcpy(buf, &totlen, sizeof(totlen));
    33a8:	f10d 0112 	add.w	r1, sp, #18
    33ac:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    33ae:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    33b2:	f008 fa7c 	bl	b8ae <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    33b6:	2208      	movs	r2, #8
    33b8:	f8d9 1000 	ldr.w	r1, [r9]
    33bc:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    33c0:	f8ad 7012 	strh.w	r7, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    33c4:	f008 fa73 	bl	b8ae <memcpy>
    totlen += sizeof(*bs_hdr);
    33c8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    33cc:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    33ce:	3008      	adds	r0, #8
    33d0:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    33d2:	4631      	mov	r1, r6
    33d4:	4642      	mov	r2, r8
    totlen += sizeof(*bs_hdr);
    33d6:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    33da:	4418      	add	r0, r3
    33dc:	f008 fa67 	bl	b8ae <memcpy>
    totlen += len;
    33e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    33e4:	463a      	mov	r2, r7
    totlen += len;
    33e6:	441c      	add	r4, r3
    33e8:	b2a0      	uxth	r0, r4
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif

    out = 0;
    33ea:	462c      	mov	r4, r5
    memcpy(&buf[totlen], &crc, sizeof(crc));
    33ec:	ab06      	add	r3, sp, #24
    totlen += len;
    33ee:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    33f2:	a904      	add	r1, sp, #16
    33f4:	4418      	add	r0, r3
    33f6:	f008 fa5a 	bl	b8ae <memcpy>
    totlen += sizeof(crc);
    33fa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    33fe:	f240 11c9 	movw	r1, #457	; 0x1c9
    totlen += sizeof(crc);
    3402:	443b      	add	r3, r7
    3404:	b29b      	uxth	r3, r3
    3406:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    340a:	9300      	str	r3, [sp, #0]
    340c:	aa05      	add	r2, sp, #20
    340e:	ab06      	add	r3, sp, #24
    3410:	a85b      	add	r0, sp, #364	; 0x16c
    3412:	f7fd ff6d 	bl	12f0 <base64_encode>
    totlen = enc_len;
    3416:	9b05      	ldr	r3, [sp, #20]
    while (out < totlen) {
        if (out == 0) {
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3418:	4e16      	ldr	r6, [pc, #88]	; (3474 <boot_serial_output+0x134>)
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
        boot_uf->write(&encoded_buf[out], len);

        out += len;

        boot_uf->write("\n", 1);
    341a:	4f17      	ldr	r7, [pc, #92]	; (3478 <boot_serial_output+0x138>)
    totlen = enc_len;
    341c:	f8ad 3012 	strh.w	r3, [sp, #18]
    while (out < totlen) {
    3420:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    3424:	42a3      	cmp	r3, r4
    3426:	dc03      	bgt.n	3430 <boot_serial_output+0xf0>
    }

    BOOT_LOG_INF("TX");
}
    3428:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    342c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3430:	6833      	ldr	r3, [r6, #0]
    3432:	2102      	movs	r1, #2
    3434:	685b      	ldr	r3, [r3, #4]
        if (out == 0) {
    3436:	b9a4      	cbnz	r4, 3462 <boot_serial_output+0x122>
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3438:	a803      	add	r0, sp, #12
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    343a:	4798      	blx	r3
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    343c:	f8bd 5012 	ldrh.w	r5, [sp, #18]
        boot_uf->write(&encoded_buf[out], len);
    3440:	6833      	ldr	r3, [r6, #0]
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    3442:	1b2d      	subs	r5, r5, r4
    3444:	2d7c      	cmp	r5, #124	; 0x7c
    3446:	bfa8      	it	ge
    3448:	257c      	movge	r5, #124	; 0x7c
        boot_uf->write(&encoded_buf[out], len);
    344a:	aa5b      	add	r2, sp, #364	; 0x16c
    344c:	1910      	adds	r0, r2, r4
    344e:	4629      	mov	r1, r5
    3450:	685b      	ldr	r3, [r3, #4]
    3452:	4798      	blx	r3
        boot_uf->write("\n", 1);
    3454:	6833      	ldr	r3, [r6, #0]
    3456:	2101      	movs	r1, #1
    3458:	4638      	mov	r0, r7
    345a:	685b      	ldr	r3, [r3, #4]
        out += len;
    345c:	442c      	add	r4, r5
        boot_uf->write("\n", 1);
    345e:	4798      	blx	r3
    3460:	e7de      	b.n	3420 <boot_serial_output+0xe0>
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    3462:	a802      	add	r0, sp, #8
    3464:	e7e9      	b.n	343a <boot_serial_output+0xfa>
    3466:	bf00      	nop
    3468:	200137d4 	.word	0x200137d4
    346c:	200137a4 	.word	0x200137a4
    3470:	20015f62 	.word	0x20015f62
    3474:	200137d8 	.word	0x200137d8
    3478:	0000f5f4 	.word	0x0000f5f4

0000347c <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    347c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    347e:	680c      	ldr	r4, [r1, #0]
    3480:	4f16      	ldr	r7, [pc, #88]	; (34dc <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3482:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3484:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3486:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3488:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    348c:	9000      	str	r0, [sp, #0]
    348e:	4b14      	ldr	r3, [pc, #80]	; (34e0 <boot_serial_in_dec.constprop.0+0x64>)
    3490:	1938      	adds	r0, r7, r4
    3492:	aa03      	add	r2, sp, #12
    3494:	3101      	adds	r1, #1
    3496:	f7fd ffa9 	bl	13ec <base64_decode>
    if (err) {
    349a:	4604      	mov	r4, r0
    349c:	b9d0      	cbnz	r0, 34d4 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    349e:	682b      	ldr	r3, [r5, #0]
    34a0:	9a03      	ldr	r2, [sp, #12]
    34a2:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    34a4:	2b02      	cmp	r3, #2
    *out_off += rc;
    34a6:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    34a8:	d911      	bls.n	34ce <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    34aa:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    34ac:	3b02      	subs	r3, #2
    34ae:	ba76      	rev16	r6, r6
    34b0:	b2b6      	uxth	r6, r6
    34b2:	429e      	cmp	r6, r3
    34b4:	d10b      	bne.n	34ce <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    34b6:	4632      	mov	r2, r6
    34b8:	1cb9      	adds	r1, r7, #2
    34ba:	f007 fe62 	bl	b182 <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~esp_crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    34be:	b930      	cbnz	r0, 34ce <boot_serial_in_dec.constprop.0+0x52>
    34c0:	2e02      	cmp	r6, #2
    34c2:	d904      	bls.n	34ce <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    34c4:	682b      	ldr	r3, [r5, #0]
    34c6:	1e9a      	subs	r2, r3, #2
    34c8:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    34ca:	54fc      	strb	r4, [r7, r3]

    return 1;
    34cc:	2401      	movs	r4, #1
}
    34ce:	4620      	mov	r0, r4
    34d0:	b005      	add	sp, #20
    34d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    34d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    34d8:	e7f9      	b.n	34ce <boot_serial_in_dec.constprop.0+0x52>
    34da:	bf00      	nop
    34dc:	200160ab 	.word	0x200160ab
    34e0:	200164ae 	.word	0x200164ae

000034e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, const char *ptr, size_t len)
    34e4:	b507      	push	{r0, r1, r2, lr}
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
    34e6:	e9cd 0100 	strd	r0, r1, [sp]
	return zcbor_tstr_encode(state, &zs);
    34ea:	4669      	mov	r1, sp
    34ec:	4802      	ldr	r0, [pc, #8]	; (34f8 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    34ee:	f00a fe62 	bl	e1b6 <zcbor_tstr_encode>
}
    34f2:	b003      	add	sp, #12
    34f4:	f85d fb04 	ldr.w	pc, [sp], #4
    34f8:	200137a4 	.word	0x200137a4

000034fc <bs_upload>:
{
    34fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    3500:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
{
    3504:	b0c7      	sub	sp, #284	; 0x11c
    3506:	460b      	mov	r3, r1
    zcbor_new_state(zsd, sizeof(zsd) / sizeof(zcbor_state_t), (uint8_t *)buf, len, 1);
    3508:	2101      	movs	r1, #1
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    350a:	9403      	str	r4, [sp, #12]
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    350c:	9405      	str	r4, [sp, #20]
    const struct flash_area *fap = NULL;
    350e:	2400      	movs	r4, #0
{
    3510:	4602      	mov	r2, r0
    zcbor_new_state(zsd, sizeof(zsd) / sizeof(zcbor_state_t), (uint8_t *)buf, len, 1);
    3512:	9100      	str	r1, [sp, #0]
    3514:	a82e      	add	r0, sp, #184	; 0xb8
    3516:	2104      	movs	r1, #4
    size_t decoded = 0;
    3518:	e9cd 4406 	strd	r4, r4, [sp, #24]
    zcbor_new_state(zsd, sizeof(zsd) / sizeof(zcbor_state_t), (uint8_t *)buf, len, 1);
    351c:	f00a fbaa 	bl	dc74 <zcbor_new_state>
    struct zcbor_map_decode_key_val image_upload_decode[] = {
    3520:	2240      	movs	r2, #64	; 0x40
    3522:	4621      	mov	r1, r4
    3524:	a81e      	add	r0, sp, #120	; 0x78
    3526:	f008 f9cd 	bl	b8c4 <memset>
    352a:	4b8c      	ldr	r3, [pc, #560]	; (375c <bs_upload+0x260>)
    352c:	2103      	movs	r1, #3
    352e:	931a      	str	r3, [sp, #104]	; 0x68
    3530:	2305      	movs	r3, #5
    3532:	2204      	movs	r2, #4
    3534:	931b      	str	r3, [sp, #108]	; 0x6c
    3536:	4b8a      	ldr	r3, [pc, #552]	; (3760 <bs_upload+0x264>)
    3538:	488a      	ldr	r0, [pc, #552]	; (3764 <bs_upload+0x268>)
    353a:	931c      	str	r3, [sp, #112]	; 0x70
    353c:	4b8a      	ldr	r3, [pc, #552]	; (3768 <bs_upload+0x26c>)
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    353e:	ad03      	add	r5, sp, #12
    struct zcbor_map_decode_key_val image_upload_decode[] = {
    3540:	931f      	str	r3, [sp, #124]	; 0x7c
    3542:	4b8a      	ldr	r3, [pc, #552]	; (376c <bs_upload+0x270>)
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    3544:	f10d 0a14 	add.w	sl, sp, #20
    struct zcbor_map_decode_key_val image_upload_decode[] = {
    3548:	9321      	str	r3, [sp, #132]	; 0x84
    354a:	ab08      	add	r3, sp, #32
    354c:	9322      	str	r3, [sp, #136]	; 0x88
    354e:	4b88      	ldr	r3, [pc, #544]	; (3770 <bs_upload+0x274>)
    3550:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
    3554:	9324      	str	r3, [sp, #144]	; 0x90
    3556:	4b87      	ldr	r3, [pc, #540]	; (3774 <bs_upload+0x278>)
    3558:	f10d 0910 	add.w	r9, sp, #16
    355c:	e9cd 3a26 	strd	r3, sl, [sp, #152]	; 0x98
    3560:	e9cd 352b 	strd	r3, r5, [sp, #172]	; 0xac
    3564:	9125      	str	r1, [sp, #148]	; 0x94
    ok = zcbor_map_decode_bulk(zsd, image_upload_decode, ARRAY_SIZE(image_upload_decode),
    3566:	ab07      	add	r3, sp, #28
    3568:	a91a      	add	r1, sp, #104	; 0x68
    356a:	a82e      	add	r0, sp, #184	; 0xb8
    struct zcbor_map_decode_key_val image_upload_decode[] = {
    356c:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
    3570:	9220      	str	r2, [sp, #128]	; 0x80
    ok = zcbor_map_decode_bulk(zsd, image_upload_decode, ARRAY_SIZE(image_upload_decode),
    3572:	f008 f8e1 	bl	b738 <zcbor_map_decode_bulk>
    if (!ok) {
    3576:	b310      	cbz	r0, 35be <bs_upload+0xc2>
        rc = MGMT_ERR_EINVAL;
    3578:	2403      	movs	r4, #3
    zcbor_map_start_encode(cbor_state, 10);
    357a:	210a      	movs	r1, #10
    357c:	487e      	ldr	r0, [pc, #504]	; (3778 <bs_upload+0x27c>)
    357e:	f00a fe21 	bl	e1c4 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    3582:	2102      	movs	r1, #2
    3584:	487d      	ldr	r0, [pc, #500]	; (377c <bs_upload+0x280>)
    3586:	f7ff ffad 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    358a:	4621      	mov	r1, r4
    358c:	487a      	ldr	r0, [pc, #488]	; (3778 <bs_upload+0x27c>)
    358e:	f00a fdfb 	bl	e188 <zcbor_int32_put>
    if (rc == 0) {
    3592:	b944      	cbnz	r4, 35a6 <bs_upload+0xaa>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    3594:	2103      	movs	r1, #3
    3596:	4873      	ldr	r0, [pc, #460]	; (3764 <bs_upload+0x268>)
    3598:	f7ff ffa4 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    359c:	4b78      	ldr	r3, [pc, #480]	; (3780 <bs_upload+0x284>)
    359e:	4876      	ldr	r0, [pc, #472]	; (3778 <bs_upload+0x27c>)
    35a0:	6819      	ldr	r1, [r3, #0]
    35a2:	f00a fdfb 	bl	e19c <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    35a6:	210a      	movs	r1, #10
    35a8:	4873      	ldr	r0, [pc, #460]	; (3778 <bs_upload+0x27c>)
    35aa:	f00a fe13 	bl	e1d4 <zcbor_map_end_encode>
    boot_serial_output();
    35ae:	f7ff fec7 	bl	3340 <boot_serial_output>
    flash_area_close(fap);
    35b2:	9806      	ldr	r0, [sp, #24]
    35b4:	f007 feae 	bl	b314 <flash_area_close>
}
    35b8:	b047      	add	sp, #284	; 0x11c
    35ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    35be:	682b      	ldr	r3, [r5, #0]
    img_chunk_len = img_chunk_data.len;
    35c0:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    35c4:	3301      	adds	r3, #1
    35c6:	d0d7      	beq.n	3578 <bs_upload+0x7c>
    35c8:	f1b8 0f00 	cmp.w	r8, #0
    35cc:	d0d4      	beq.n	3578 <bs_upload+0x7c>
    rc = flash_area_open(flash_area_id_from_direct_image(img_num), &fap);
    35ce:	f8d9 0000 	ldr.w	r0, [r9]
    35d2:	f7fc ffb9 	bl	548 <flash_area_id_from_direct_image>
    35d6:	a906      	add	r1, sp, #24
    35d8:	b2c0      	uxtb	r0, r0
    35da:	f7fe fb53 	bl	1c84 <flash_area_open>
    if (rc) {
    35de:	4604      	mov	r4, r0
    35e0:	2800      	cmp	r0, #0
    35e2:	d1c9      	bne.n	3578 <bs_upload+0x7c>
    if (img_chunk_off == 0) {
    35e4:	682b      	ldr	r3, [r5, #0]
    35e6:	4e66      	ldr	r6, [pc, #408]	; (3780 <bs_upload+0x284>)
    35e8:	2b00      	cmp	r3, #0
    35ea:	d14b      	bne.n	3684 <bs_upload+0x188>
        const size_t area_size = flash_area_get_size(fap);
    35ec:	9d06      	ldr	r5, [sp, #24]
        curr_off = 0;
    35ee:	6030      	str	r0, [r6, #0]
        if (flash_area_get_sector(fap, boot_status_off(fap), &status_sector)) {
    35f0:	4628      	mov	r0, r5
	return (uint32_t)fa->fa_size;
    35f2:	f8d5 b008 	ldr.w	fp, [r5, #8]
    35f6:	f007 f8ce 	bl	a796 <boot_status_off>
    35fa:	4a62      	ldr	r2, [pc, #392]	; (3784 <bs_upload+0x288>)
    35fc:	4601      	mov	r1, r0
    35fe:	4628      	mov	r0, r5
    3600:	f007 f80f 	bl	a622 <flash_area_get_sector>
    3604:	b108      	cbz	r0, 360a <bs_upload+0x10e>
            rc = MGMT_ERR_EUNKNOWN;
    3606:	2401      	movs	r4, #1
    3608:	e7b7      	b.n	357a <bs_upload+0x7e>
        if (img_size_tmp > area_size) {
    360a:	f8da 3000 	ldr.w	r3, [sl]
    360e:	455b      	cmp	r3, fp
    3610:	d8b2      	bhi.n	3578 <bs_upload+0x7c>
        not_yet_erased = 0;
    3612:	4a5d      	ldr	r2, [pc, #372]	; (3788 <bs_upload+0x28c>)
    3614:	6014      	str	r4, [r2, #0]
        img_size = img_size_tmp;
    3616:	4a5d      	ldr	r2, [pc, #372]	; (378c <bs_upload+0x290>)
    3618:	6013      	str	r3, [r2, #0]
                                 curr_off + img_chunk_len - 1);
    361a:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    361c:	4d5a      	ldr	r5, [pc, #360]	; (3788 <bs_upload+0x28c>)
                                 curr_off + img_chunk_len - 1);
    361e:	443a      	add	r2, r7
    not_yet_erased = erase_range(fap, not_yet_erased,
    3620:	6829      	ldr	r1, [r5, #0]
    3622:	9806      	ldr	r0, [sp, #24]
    3624:	3a01      	subs	r2, #1
    3626:	f008 f868 	bl	b6fa <erase_range>
    if (not_yet_erased < 0) {
    362a:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    362c:	6028      	str	r0, [r5, #0]
    if (not_yet_erased < 0) {
    362e:	dba3      	blt.n	3578 <bs_upload+0x7c>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    3630:	9806      	ldr	r0, [sp, #24]
    3632:	f007 feae 	bl	b392 <flash_area_align>
    3636:	fbb7 f3f0 	udiv	r3, r7, r0
    363a:	fb03 7010 	mls	r0, r3, r0, r7
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    363e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 378c <bs_upload+0x290>
    3642:	6833      	ldr	r3, [r6, #0]
    img_chunk_len -= rem_bytes;
    3644:	b2c5      	uxtb	r5, r0
    3646:	1b7d      	subs	r5, r7, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    3648:	441f      	add	r7, r3
    364a:	f8da 3000 	ldr.w	r3, [sl]
    364e:	429f      	cmp	r7, r3
    3650:	bf38      	it	cc
    3652:	2000      	movcc	r0, #0
    3654:	fa5f fb80 	uxtb.w	fp, r0
    if (flash_area_align(fap) > 1 &&
    3658:	9806      	ldr	r0, [sp, #24]
    365a:	f007 fe9a 	bl	b392 <flash_area_align>
    365e:	2801      	cmp	r0, #1
    3660:	d906      	bls.n	3670 <bs_upload+0x174>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    3662:	9806      	ldr	r0, [sp, #24]
    3664:	f007 fe95 	bl	b392 <flash_area_align>
    3668:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    366a:	ea18 0f00 	tst.w	r8, r0
    366e:	d153      	bne.n	3718 <bs_upload+0x21c>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    3670:	462b      	mov	r3, r5
    3672:	4642      	mov	r2, r8
    3674:	6831      	ldr	r1, [r6, #0]
    3676:	9806      	ldr	r0, [sp, #24]
    3678:	f007 fe62 	bl	b340 <flash_area_write>
    if (rc == 0 && rem_bytes) {
    367c:	2800      	cmp	r0, #0
    367e:	f47f af7b 	bne.w	3578 <bs_upload+0x7c>
    3682:	e02c      	b.n	36de <bs_upload+0x1e2>
    } else if (img_chunk_off != curr_off) {
    3684:	6832      	ldr	r2, [r6, #0]
    3686:	4293      	cmp	r3, r2
    3688:	f47f af77 	bne.w	357a <bs_upload+0x7e>
    } else if (curr_off + img_chunk_len > img_size) {
    368c:	4a3f      	ldr	r2, [pc, #252]	; (378c <bs_upload+0x290>)
    368e:	443b      	add	r3, r7
    3690:	6812      	ldr	r2, [r2, #0]
    3692:	4293      	cmp	r3, r2
    3694:	d9c1      	bls.n	361a <bs_upload+0x11e>
    3696:	e76f      	b.n	3578 <bs_upload+0x7c>
            if (write_size > img_chunk_len) {
    3698:	42af      	cmp	r7, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    369a:	9806      	ldr	r0, [sp, #24]
                write_size = img_chunk_len;
    369c:	bf88      	it	hi
    369e:	b2ef      	uxtbhi	r7, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    36a0:	f007 fe7e 	bl	b3a0 <flash_area_erased_val>
    36a4:	2240      	movs	r2, #64	; 0x40
    36a6:	4601      	mov	r1, r0
    36a8:	a80a      	add	r0, sp, #40	; 0x28
    36aa:	f008 f90b 	bl	b8c4 <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    36ae:	463a      	mov	r2, r7
    36b0:	4641      	mov	r1, r8
    36b2:	a80a      	add	r0, sp, #40	; 0x28
    36b4:	f008 f8fb 	bl	b8ae <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    36b8:	463b      	mov	r3, r7
    36ba:	6831      	ldr	r1, [r6, #0]
    36bc:	9806      	ldr	r0, [sp, #24]
    36be:	aa0a      	add	r2, sp, #40	; 0x28
    36c0:	f007 fe3e 	bl	b340 <flash_area_write>
            if (rc != 0) {
    36c4:	b108      	cbz	r0, 36ca <bs_upload+0x1ce>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    36c6:	4604      	mov	r4, r0
            if (rc) {
    36c8:	e757      	b.n	357a <bs_upload+0x7e>
            curr_off += write_size;
    36ca:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    36cc:	44b8      	add	r8, r7
            curr_off += write_size;
    36ce:	443b      	add	r3, r7
    36d0:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    36d2:	1bed      	subs	r5, r5, r7
        while (img_chunk_len >= flash_area_align(fap)) {
    36d4:	9806      	ldr	r0, [sp, #24]
    36d6:	f007 fe5c 	bl	b392 <flash_area_align>
    36da:	42a8      	cmp	r0, r5
    36dc:	d9dc      	bls.n	3698 <bs_upload+0x19c>
    if (rc == 0 && rem_bytes) {
    36de:	f1bb 0f00 	cmp.w	fp, #0
    36e2:	d11b      	bne.n	371c <bs_upload+0x220>
        curr_off += img_chunk_len + rem_bytes;
    36e4:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    36e6:	f8da 2000 	ldr.w	r2, [sl]
        curr_off += img_chunk_len + rem_bytes;
    36ea:	445b      	add	r3, fp
    36ec:	442b      	add	r3, r5
        if (curr_off == img_size) {
    36ee:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    36f0:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    36f2:	f47f af42 	bne.w	357a <bs_upload+0x7e>
	return fs->fs_off;
    36f6:	4b23      	ldr	r3, [pc, #140]	; (3784 <bs_upload+0x288>)
            if (erase_range(fap, start, start) < 0) {
    36f8:	9806      	ldr	r0, [sp, #24]
    36fa:	681a      	ldr	r2, [r3, #0]
    36fc:	4611      	mov	r1, r2
    36fe:	f007 fffc 	bl	b6fa <erase_range>
    3702:	2800      	cmp	r0, #0
    3704:	f6ff af7f 	blt.w	3606 <bs_upload+0x10a>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    3708:	f8da 2000 	ldr.w	r2, [sl]
    370c:	9906      	ldr	r1, [sp, #24]
    370e:	f8d9 0000 	ldr.w	r0, [r9]
    3712:	f008 fc83 	bl	c01c <boot_serial_uploaded_hook>
    3716:	e7d6      	b.n	36c6 <bs_upload+0x1ca>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    3718:	2740      	movs	r7, #64	; 0x40
    371a:	e7db      	b.n	36d4 <bs_upload+0x1d8>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    371c:	9806      	ldr	r0, [sp, #24]
    371e:	f007 fe3f 	bl	b3a0 <flash_area_erased_val>
    3722:	2208      	movs	r2, #8
    3724:	4601      	mov	r1, r0
    3726:	a80a      	add	r0, sp, #40	; 0x28
    3728:	f008 f8cc 	bl	b8c4 <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    372c:	465a      	mov	r2, fp
    372e:	eb08 0105 	add.w	r1, r8, r5
    3732:	a80a      	add	r0, sp, #40	; 0x28
    3734:	f008 f8bb 	bl	b8ae <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    3738:	9f06      	ldr	r7, [sp, #24]
    373a:	6831      	ldr	r1, [r6, #0]
    373c:	4638      	mov	r0, r7
    373e:	eb05 0801 	add.w	r8, r5, r1
    3742:	f007 fe26 	bl	b392 <flash_area_align>
    3746:	4641      	mov	r1, r8
    3748:	4603      	mov	r3, r0
    374a:	aa0a      	add	r2, sp, #40	; 0x28
    374c:	4638      	mov	r0, r7
    374e:	f007 fdf7 	bl	b340 <flash_area_write>
    if (rc == 0) {
    3752:	2800      	cmp	r0, #0
    3754:	f47f af10 	bne.w	3578 <bs_upload+0x7c>
    3758:	e7c4      	b.n	36e4 <bs_upload+0x1e8>
    375a:	bf00      	nop
    375c:	0000f5f6 	.word	0x0000f5f6
    3760:	0000dedb 	.word	0x0000dedb
    3764:	0000f605 	.word	0x0000f605
    3768:	0000f5fc 	.word	0x0000f5fc
    376c:	0000dee5 	.word	0x0000dee5
    3770:	0000f601 	.word	0x0000f601
    3774:	0000dee1 	.word	0x0000dee1
    3778:	200137a4 	.word	0x200137a4
    377c:	0000f347 	.word	0x0000f347
    3780:	200137a0 	.word	0x200137a0
    3784:	20013798 	.word	0x20013798
    3788:	20013794 	.word	0x20013794
    378c:	20013790 	.word	0x20013790

00003790 <bs_rc_rsp>:
{
    3790:	b538      	push	{r3, r4, r5, lr}
    3792:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    3794:	4c0a      	ldr	r4, [pc, #40]	; (37c0 <bs_rc_rsp+0x30>)
    3796:	210a      	movs	r1, #10
    3798:	4620      	mov	r0, r4
    379a:	f00a fd13 	bl	e1c4 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    379e:	2102      	movs	r1, #2
    37a0:	4808      	ldr	r0, [pc, #32]	; (37c4 <bs_rc_rsp+0x34>)
    37a2:	f7ff fe9f 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    37a6:	4629      	mov	r1, r5
    37a8:	4620      	mov	r0, r4
    37aa:	f00a fced 	bl	e188 <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    37ae:	4620      	mov	r0, r4
    37b0:	210a      	movs	r1, #10
    37b2:	f00a fd0f 	bl	e1d4 <zcbor_map_end_encode>
}
    37b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    37ba:	f7ff bdc1 	b.w	3340 <boot_serial_output>
    37be:	bf00      	nop
    37c0:	200137a4 	.word	0x200137a4
    37c4:	0000f347 	.word	0x0000f347

000037c8 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    37c8:	2300      	movs	r3, #0
{
    37ca:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    37cc:	2102      	movs	r1, #2
    37ce:	9300      	str	r3, [sp, #0]
    37d0:	4a04      	ldr	r2, [pc, #16]	; (37e4 <reset_cbor_state+0x1c>)
    37d2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    37d6:	4804      	ldr	r0, [pc, #16]	; (37e8 <reset_cbor_state+0x20>)
    37d8:	f00a fcfe 	bl	e1d8 <zcbor_new_encode_state>
}
    37dc:	b003      	add	sp, #12
    37de:	f85d fb04 	ldr.w	pc, [sp], #4
    37e2:	bf00      	nop
    37e4:	20015f62 	.word	0x20015f62
    37e8:	200137a4 	.word	0x200137a4

000037ec <boot_serial_input>:
{
    37ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (len < sizeof(*hdr) ||
    37f0:	2907      	cmp	r1, #7
{
    37f2:	4604      	mov	r4, r0
    37f4:	b0b0      	sub	sp, #192	; 0xc0
    if (len < sizeof(*hdr) ||
    37f6:	f240 80f4 	bls.w	39e2 <FIH_LABEL_FIH_CALL_END_1511+0xc6>
    37fa:	7803      	ldrb	r3, [r0, #0]
    37fc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    3800:	f040 80ef 	bne.w	39e2 <FIH_LABEL_FIH_CALL_END_1511+0xc6>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    3804:	8843      	ldrh	r3, [r0, #2]
    3806:	f1a1 0508 	sub.w	r5, r1, #8
    380a:	ba5b      	rev16	r3, r3
    380c:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    380e:	42ab      	cmp	r3, r5
    3810:	f0c0 80e7 	bcc.w	39e2 <FIH_LABEL_FIH_CALL_END_1511+0xc6>
    bs_hdr = hdr;
    3814:	4b8d      	ldr	r3, [pc, #564]	; (3a4c <FIH_LABEL_FIH_CALL_END_1511+0x130>)
    buf += sizeof(*hdr);
    3816:	f100 0708 	add.w	r7, r0, #8
    bs_hdr = hdr;
    381a:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    381c:	8883      	ldrh	r3, [r0, #4]
    381e:	ba5b      	rev16	r3, r3
    3820:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    3822:	f7ff ffd1 	bl	37c8 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    3826:	88a6      	ldrh	r6, [r4, #4]
    3828:	2e01      	cmp	r6, #1
    382a:	f040 80e4 	bne.w	39f6 <FIH_LABEL_FIH_CALL_END_1511+0xda>
        switch (hdr->nh_id) {
    382e:	79e3      	ldrb	r3, [r4, #7]
    3830:	b143      	cbz	r3, 3844 <boot_serial_input+0x58>
    3832:	2b01      	cmp	r3, #1
    3834:	f000 80d8 	beq.w	39e8 <FIH_LABEL_FIH_CALL_END_1511+0xcc>
            bs_rc_rsp(MGMT_ERR_ENOTSUP);
    3838:	2008      	movs	r0, #8
}
    383a:	b030      	add	sp, #192	; 0xc0
    383c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            bs_rc_rsp(0);
    3840:	f7ff bfa6 	b.w	3790 <bs_rc_rsp>
    if (op == NMGR_OP_READ) {
    3844:	7824      	ldrb	r4, [r4, #0]
    3846:	2c00      	cmp	r4, #0
    3848:	d1f6      	bne.n	3838 <boot_serial_input+0x4c>
    zcbor_map_start_encode(cbor_state, 1);
    384a:	4631      	mov	r1, r6
    384c:	4880      	ldr	r0, [pc, #512]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    384e:	f00a fcb9 	bl	e1c4 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    3852:	2106      	movs	r1, #6
    3854:	487f      	ldr	r0, [pc, #508]	; (3a54 <FIH_LABEL_FIH_CALL_END_1511+0x138>)
    3856:	f7ff fe45 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    385a:	2105      	movs	r1, #5
    385c:	487c      	ldr	r0, [pc, #496]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    385e:	f00a fcad 	bl	e1bc <zcbor_list_start_encode>
            if (hdr.ih_magic == IMAGE_MAGIC)
    3862:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 3a58 <FIH_LABEL_FIH_CALL_END_1511+0x13c>
            zcbor_map_start_encode(cbor_state, 20);
    3866:	4f7a      	ldr	r7, [pc, #488]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
        for (slot = 0; slot < 2; slot++) {
    3868:	2500      	movs	r5, #0
    386a:	e000      	b.n	386e <boot_serial_input+0x82>
    386c:	2501      	movs	r5, #1
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    386e:	4629      	mov	r1, r5
    3870:	4620      	mov	r0, r4
    3872:	f006 febf 	bl	a5f4 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    3876:	a908      	add	r1, sp, #32
    3878:	b2c0      	uxtb	r0, r0
    387a:	f7fe fa03 	bl	1c84 <flash_area_open>
    387e:	4606      	mov	r6, r0
    3880:	2800      	cmp	r0, #0
    3882:	d14f      	bne.n	3924 <FIH_LABEL_FIH_CALL_END_1511+0x8>
            int rc = BOOT_HOOK_CALL(boot_read_image_header_hook,
    3884:	4629      	mov	r1, r5
    3886:	4620      	mov	r0, r4
    3888:	aa10      	add	r2, sp, #64	; 0x40
    388a:	f002 fe73 	bl	6574 <boot_read_image_header_hook>
            if (rc == BOOT_HOOK_REGULAR)
    388e:	2801      	cmp	r0, #1
    3890:	d105      	bne.n	389e <boot_serial_input+0xb2>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    3892:	2320      	movs	r3, #32
    3894:	4631      	mov	r1, r6
    3896:	9808      	ldr	r0, [sp, #32]
    3898:	aa10      	add	r2, sp, #64	; 0x40
    389a:	f007 fd3c 	bl	b316 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    389e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38a0:	4543      	cmp	r3, r8
    38a2:	d026      	beq.n	38f2 <FIH_LABEL_FIH_CALL_START_1464>
    int rc;

    /* Manifest data is concatenated to the end of the image.
     * It is encoded in TLV format.
     */
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    38a4:	2300      	movs	r3, #0
            rc = boot_serial_get_hash(&hdr, fap, hash);
    38a6:	9e08      	ldr	r6, [sp, #32]
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    38a8:	9300      	str	r3, [sp, #0]
    38aa:	4632      	mov	r2, r6
    38ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    38b0:	a910      	add	r1, sp, #64	; 0x40
    38b2:	a80a      	add	r0, sp, #40	; 0x28
    38b4:	f006 fece 	bl	a654 <bootutil_tlv_iter_begin>
    if (rc) {
    38b8:	2800      	cmp	r0, #0
    38ba:	d139      	bne.n	3930 <FIH_LABEL_FIH_CALL_END_1511+0x14>
        return -1;
    }

    /* Traverse through the TLV area to find the image hash TLV. */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &offset, &len, &type);
    38bc:	f10d 031e 	add.w	r3, sp, #30
    38c0:	aa07      	add	r2, sp, #28
    38c2:	a909      	add	r1, sp, #36	; 0x24
    38c4:	a80a      	add	r0, sp, #40	; 0x28
    38c6:	f006 ff13 	bl	a6f0 <bootutil_tlv_iter_next>
        if (rc < 0) {
            return -1;
        } else if (rc > 0) {
    38ca:	2800      	cmp	r0, #0
    38cc:	d130      	bne.n	3930 <FIH_LABEL_FIH_CALL_END_1511+0x14>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    38ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    38d2:	2b10      	cmp	r3, #16
    38d4:	d1f2      	bne.n	38bc <boot_serial_input+0xd0>
            /* Get the image's hash value from the manifest section. */
            if (len != 32) {
    38d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    38da:	2b20      	cmp	r3, #32
    38dc:	d128      	bne.n	3930 <FIH_LABEL_FIH_CALL_END_1511+0x14>
                return -1;
            }

            rc = flash_area_read(fap, offset, hash, len);
    38de:	4630      	mov	r0, r6
    38e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    38e2:	aa18      	add	r2, sp, #96	; 0x60
    38e4:	f007 fd17 	bl	b316 <flash_area_read>
            if (rc) {
    38e8:	1e06      	subs	r6, r0, #0
    38ea:	bf18      	it	ne
    38ec:	2601      	movne	r6, #1
    38ee:	4276      	negs	r6, r6
    38f0:	e020      	b.n	3934 <FIH_LABEL_FIH_CALL_END_1511+0x18>

000038f2 <FIH_LABEL_FIH_CALL_START_1464>:
                BOOT_HOOK_CALL_FIH(boot_image_check_hook,
    38f2:	4629      	mov	r1, r5
    38f4:	4620      	mov	r0, r4
    38f6:	f002 fe53 	bl	65a0 <boot_image_check_hook>

000038fa <FIH_LABEL_FIH_CALL_END_1477>:
                if (FIH_EQ(fih_rc, FIH_BOOT_HOOK_REGULAR))
    38fa:	4b58      	ldr	r3, [pc, #352]	; (3a5c <FIH_LABEL_FIH_CALL_END_1511+0x140>)
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	4298      	cmp	r0, r3
    3900:	d10c      	bne.n	391c <FIH_LABEL_FIH_CALL_END_1511>

00003902 <FIH_LABEL_FIH_CALL_START_1490>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    3902:	2340      	movs	r3, #64	; 0x40
    3904:	2100      	movs	r1, #0
    3906:	9301      	str	r3, [sp, #4]
    3908:	ab20      	add	r3, sp, #128	; 0x80
    390a:	9300      	str	r3, [sp, #0]
    390c:	4608      	mov	r0, r1
    390e:	e9cd 1103 	strd	r1, r1, [sp, #12]
    3912:	9b08      	ldr	r3, [sp, #32]
    3914:	9102      	str	r1, [sp, #8]
    3916:	aa10      	add	r2, sp, #64	; 0x40
    3918:	f7fc fe6c 	bl	5f4 <bootutil_img_validate>

0000391c <FIH_LABEL_FIH_CALL_END_1511>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
    391c:	4b50      	ldr	r3, [pc, #320]	; (3a60 <FIH_LABEL_FIH_CALL_END_1511+0x144>)
    391e:	681b      	ldr	r3, [r3, #0]
    3920:	4283      	cmp	r3, r0
    3922:	d0bf      	beq.n	38a4 <boot_serial_input+0xb8>
        for (slot = 0; slot < 2; slot++) {
    3924:	2d00      	cmp	r5, #0
    3926:	d0a1      	beq.n	386c <boot_serial_input+0x80>
    IMAGES_ITER(image_index) {
    3928:	2c00      	cmp	r4, #0
    392a:	d150      	bne.n	39ce <FIH_LABEL_FIH_CALL_END_1511+0xb2>
    392c:	462c      	mov	r4, r5
    392e:	e79b      	b.n	3868 <boot_serial_input+0x7c>
        return -1;
    3930:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            flash_area_close(fap);
    3934:	9808      	ldr	r0, [sp, #32]
    3936:	f007 fced 	bl	b314 <flash_area_close>
            zcbor_map_start_encode(cbor_state, 20);
    393a:	2114      	movs	r1, #20
    393c:	4638      	mov	r0, r7
    393e:	f00a fc41 	bl	e1c4 <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "image");
    3942:	2105      	movs	r1, #5
    3944:	4847      	ldr	r0, [pc, #284]	; (3a64 <FIH_LABEL_FIH_CALL_END_1511+0x148>)
    3946:	f7ff fdcd 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, image_index);
    394a:	4621      	mov	r1, r4
    394c:	4638      	mov	r0, r7
    394e:	f00a fc25 	bl	e19c <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    3952:	2104      	movs	r1, #4
    3954:	4844      	ldr	r0, [pc, #272]	; (3a68 <FIH_LABEL_FIH_CALL_END_1511+0x14c>)
    3956:	f7ff fdc5 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    395a:	4629      	mov	r1, r5
    395c:	4638      	mov	r0, r7
    395e:	f00a fc1d 	bl	e19c <zcbor_uint32_put>
            if (rc == 0) {
    3962:	b95e      	cbnz	r6, 397c <FIH_LABEL_FIH_CALL_END_1511+0x60>
                zcbor_tstr_put_lit_cast(cbor_state, "hash");
    3964:	2104      	movs	r1, #4
    3966:	4841      	ldr	r0, [pc, #260]	; (3a6c <FIH_LABEL_FIH_CALL_END_1511+0x150>)
    3968:	f7ff fdbc 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
    396c:	ab18      	add	r3, sp, #96	; 0x60
    396e:	930a      	str	r3, [sp, #40]	; 0x28
    3970:	2320      	movs	r3, #32
	return zcbor_bstr_encode(state, &zs);
    3972:	4837      	ldr	r0, [pc, #220]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    3974:	a90a      	add	r1, sp, #40	; 0x28
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
    3976:	930b      	str	r3, [sp, #44]	; 0x2c
	return zcbor_bstr_encode(state, &zs);
    3978:	f00a fc1a 	bl	e1b0 <zcbor_bstr_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    397c:	2107      	movs	r1, #7
    397e:	483c      	ldr	r0, [pc, #240]	; (3a70 <FIH_LABEL_FIH_CALL_END_1511+0x154>)
    3980:	f7ff fdb0 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   len = snprintf(dst, maxlen, "%hu.%hu.%hu", (uint16_t)ver->iv_major,
    3984:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    3988:	2140      	movs	r1, #64	; 0x40
    398a:	9301      	str	r3, [sp, #4]
    398c:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
    3990:	4a38      	ldr	r2, [pc, #224]	; (3a74 <FIH_LABEL_FIH_CALL_END_1511+0x158>)
    3992:	9300      	str	r3, [sp, #0]
    3994:	a820      	add	r0, sp, #128	; 0x80
    3996:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    399a:	f000 fd75 	bl	4488 <snprintf>
   if (ver->iv_build_num != 0 && len > 0 && len < maxlen) {
    399e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    39a0:	b14b      	cbz	r3, 39b6 <FIH_LABEL_FIH_CALL_END_1511+0x9a>
    39a2:	1e42      	subs	r2, r0, #1
    39a4:	2a3e      	cmp	r2, #62	; 0x3e
    39a6:	d806      	bhi.n	39b6 <FIH_LABEL_FIH_CALL_END_1511+0x9a>
      snprintf(&dst[len], (maxlen - len), "%u", ver->iv_build_num);
    39a8:	ae20      	add	r6, sp, #128	; 0x80
    39aa:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    39ae:	4a32      	ldr	r2, [pc, #200]	; (3a78 <FIH_LABEL_FIH_CALL_END_1511+0x15c>)
    39b0:	4430      	add	r0, r6
    39b2:	f000 fd69 	bl	4488 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, (char *)tmpbuf, strlen((char *)tmpbuf));
    39b6:	a820      	add	r0, sp, #128	; 0x80
    39b8:	f007 ff4b 	bl	b852 <strlen>
    39bc:	4601      	mov	r1, r0
    39be:	a820      	add	r0, sp, #128	; 0x80
    39c0:	f7ff fd90 	bl	34e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    39c4:	2114      	movs	r1, #20
    39c6:	4638      	mov	r0, r7
    39c8:	f00a fc04 	bl	e1d4 <zcbor_map_end_encode>
    39cc:	e7aa      	b.n	3924 <FIH_LABEL_FIH_CALL_END_1511+0x8>
    zcbor_list_end_encode(cbor_state, 5);
    39ce:	2105      	movs	r1, #5
    39d0:	481f      	ldr	r0, [pc, #124]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    39d2:	f00a fbfb 	bl	e1cc <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    39d6:	2101      	movs	r1, #1
    39d8:	481d      	ldr	r0, [pc, #116]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    39da:	f00a fbfb 	bl	e1d4 <zcbor_map_end_encode>
    boot_serial_output();
    39de:	f7ff fcaf 	bl	3340 <boot_serial_output>
}
    39e2:	b030      	add	sp, #192	; 0xc0
    39e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            bs_upload(buf, len);
    39e8:	4629      	mov	r1, r5
    39ea:	4638      	mov	r0, r7
}
    39ec:	b030      	add	sp, #192	; 0xc0
    39ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            bs_upload(buf, len);
    39f2:	f7ff bd83 	b.w	34fc <bs_upload>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    39f6:	b9e6      	cbnz	r6, 3a32 <FIH_LABEL_FIH_CALL_END_1511+0x116>
        switch (hdr->nh_id) {
    39f8:	79e3      	ldrb	r3, [r4, #7]
    39fa:	2b01      	cmp	r3, #1
    39fc:	d005      	beq.n	3a0a <FIH_LABEL_FIH_CALL_END_1511+0xee>
    39fe:	2b05      	cmp	r3, #5
    3a00:	d005      	beq.n	3a0e <FIH_LABEL_FIH_CALL_END_1511+0xf2>
    3a02:	2b00      	cmp	r3, #0
    3a04:	f47f af18 	bne.w	3838 <boot_serial_input+0x4c>
    3a08:	e7eb      	b.n	39e2 <FIH_LABEL_FIH_CALL_END_1511+0xc6>
            bs_rc_rsp(0);
    3a0a:	4630      	mov	r0, r6
    3a0c:	e715      	b.n	383a <boot_serial_input+0x4e>
    int rc = BOOT_HOOK_CALL(boot_reset_request_hook, 0, false);
    3a0e:	4630      	mov	r0, r6
    3a10:	f008 fb0b 	bl	c02a <boot_reset_request_hook>
    if (rc == BOOT_RESET_REQUEST_HOOK_BUSY) {
    3a14:	2801      	cmp	r0, #1
    3a16:	d101      	bne.n	3a1c <FIH_LABEL_FIH_CALL_END_1511+0x100>
    bs_rc_rsp(rc);
    3a18:	200a      	movs	r0, #10
    3a1a:	e70e      	b.n	383a <boot_serial_input+0x4e>
    3a1c:	4630      	mov	r0, r6
    3a1e:	f7ff feb7 	bl	3790 <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    3a22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3a26:	2100      	movs	r1, #0
    3a28:	f006 f950 	bl	9ccc <z_impl_k_sleep>
        sys_reboot(SYS_REBOOT_COLD);
    3a2c:	2001      	movs	r0, #1
    3a2e:	f007 fc5e 	bl	b2ee <sys_reboot>
        if (bs_peruser_system_specific(hdr, buf, len, cbor_state) == 0) {
    3a32:	462a      	mov	r2, r5
    3a34:	4639      	mov	r1, r7
    3a36:	4620      	mov	r0, r4
    3a38:	4b05      	ldr	r3, [pc, #20]	; (3a50 <FIH_LABEL_FIH_CALL_END_1511+0x134>)
    3a3a:	f7fc fd97 	bl	56c <bs_peruser_system_specific>
    3a3e:	2800      	cmp	r0, #0
    3a40:	d1cf      	bne.n	39e2 <FIH_LABEL_FIH_CALL_END_1511+0xc6>
}
    3a42:	b030      	add	sp, #192	; 0xc0
    3a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            boot_serial_output();
    3a48:	f7ff bc7a 	b.w	3340 <boot_serial_output>
    3a4c:	200137d4 	.word	0x200137d4
    3a50:	200137a4 	.word	0x200137a4
    3a54:	0000f609 	.word	0x0000f609
    3a58:	96f3b83d 	.word	0x96f3b83d
    3a5c:	200020b0 	.word	0x200020b0
    3a60:	20002770 	.word	0x20002770
    3a64:	0000f5f6 	.word	0x0000f5f6
    3a68:	0000f610 	.word	0x0000f610
    3a6c:	0000f615 	.word	0x0000f615
    3a70:	0000f61a 	.word	0x0000f61a
    3a74:	0000f622 	.word	0x0000f622
    3a78:	0000f62e 	.word	0x0000f62e

00003a7c <boot_serial_start>:
    bs_entry = true;
    3a7c:	2301      	movs	r3, #1
{
    3a7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    3a82:	2500      	movs	r5, #0
{
    3a84:	4606      	mov	r6, r0
    bs_entry = true;
    3a86:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3b48 <boot_serial_start+0xcc>
    3a8a:	4c30      	ldr	r4, [pc, #192]	; (3b4c <boot_serial_start+0xd0>)
    3a8c:	f888 3000 	strb.w	r3, [r8]
    boot_uf = f;
    3a90:	4b2f      	ldr	r3, [pc, #188]	; (3b50 <boot_serial_start+0xd4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3a92:	4f30      	ldr	r7, [pc, #192]	; (3b54 <boot_serial_start+0xd8>)
    int dec_off = 0;
    3a94:	9500      	str	r5, [sp, #0]
    boot_uf = f;
    3a96:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    3a98:	f898 3000 	ldrb.w	r3, [r8]
    3a9c:	b913      	cbnz	r3, 3aa4 <boot_serial_start+0x28>
}
    3a9e:	b002      	add	sp, #8
    3aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3aa4:	4b2c      	ldr	r3, [pc, #176]	; (3b58 <boot_serial_start+0xdc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3aa6:	f5c5 6180 	rsb	r1, r5, #1024	; 0x400
    3aaa:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    3aae:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    3ab2:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    3ab6:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    3aba:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    3abe:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    3ac2:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    3ac6:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    3aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3ace:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    3ad2:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    3ad6:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    3ada:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    3ade:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    3ae2:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    3ae6:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    3aea:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    3aee:	6833      	ldr	r3, [r6, #0]
    3af0:	aa01      	add	r2, sp, #4
    3af2:	3101      	adds	r1, #1
    3af4:	1978      	adds	r0, r7, r5
    3af6:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    3af8:	2800      	cmp	r0, #0
    3afa:	9b01      	ldr	r3, [sp, #4]
    3afc:	dc01      	bgt.n	3b02 <boot_serial_start+0x86>
    3afe:	2b00      	cmp	r3, #0
    3b00:	d0ca      	beq.n	3a98 <boot_serial_start+0x1c>
        off += rc;
    3b02:	4405      	add	r5, r0
        if (!full_line) {
    3b04:	b92b      	cbnz	r3, 3b12 <boot_serial_start+0x96>
            if (off == max_input) {
    3b06:	f240 4301 	movw	r3, #1025	; 0x401
    3b0a:	429d      	cmp	r5, r3
    3b0c:	d1c4      	bne.n	3a98 <boot_serial_start+0x1c>
                off = 0;
    3b0e:	2500      	movs	r5, #0
    3b10:	e7c2      	b.n	3a98 <boot_serial_start+0x1c>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    3b12:	783b      	ldrb	r3, [r7, #0]
    3b14:	2b06      	cmp	r3, #6
    3b16:	d109      	bne.n	3b2c <boot_serial_start+0xb0>
    3b18:	787b      	ldrb	r3, [r7, #1]
    3b1a:	2b09      	cmp	r3, #9
    3b1c:	d10b      	bne.n	3b36 <boot_serial_start+0xba>
            dec_off = 0;
    3b1e:	2300      	movs	r3, #0
    3b20:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3b22:	4669      	mov	r1, sp
    3b24:	1ea8      	subs	r0, r5, #2
    3b26:	f7ff fca9 	bl	347c <boot_serial_in_dec.constprop.0>
    3b2a:	e004      	b.n	3b36 <boot_serial_start+0xba>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    3b2c:	2b04      	cmp	r3, #4
    3b2e:	d102      	bne.n	3b36 <boot_serial_start+0xba>
    3b30:	787b      	ldrb	r3, [r7, #1]
    3b32:	2b14      	cmp	r3, #20
    3b34:	d0f5      	beq.n	3b22 <boot_serial_start+0xa6>
        if (rc == 1) {
    3b36:	2801      	cmp	r0, #1
    3b38:	d1e9      	bne.n	3b0e <boot_serial_start+0x92>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3b3a:	9900      	ldr	r1, [sp, #0]
    3b3c:	4807      	ldr	r0, [pc, #28]	; (3b5c <boot_serial_start+0xe0>)
    3b3e:	3902      	subs	r1, #2
    3b40:	f7ff fe54 	bl	37ec <boot_serial_input>
    3b44:	e7e3      	b.n	3b0e <boot_serial_start+0x92>
    3b46:	bf00      	nop
    3b48:	200160aa 	.word	0x200160aa
    3b4c:	6e524635 	.word	0x6e524635
    3b50:	200137d8 	.word	0x200137d8
    3b54:	200164ac 	.word	0x200164ac
    3b58:	50018000 	.word	0x50018000
    3b5c:	200160ad 	.word	0x200160ad

00003b60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3b60:	4901      	ldr	r1, [pc, #4]	; (3b68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3b62:	2210      	movs	r2, #16
	str	r2, [r1]
    3b64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3b66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3b68:	e000ed10 	.word	0xe000ed10

00003b6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3b6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3b6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3b70:	f380 8811 	msr	BASEPRI, r0
	isb
    3b74:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3b78:	b501      	push	{r0, lr}
    3b7a:	f7fe f83d 	bl	1bf8 <z_arm_on_enter_cpu_idle>
    3b7e:	2800      	cmp	r0, #0
    3b80:	d002      	beq.n	3b88 <_skip_0>
    3b82:	f3bf 8f4f 	dsb	sy
    3b86:	bf30      	wfi

00003b88 <_skip_0>:
    3b88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3b8c:	b662      	cpsie	i
	isb
    3b8e:	f3bf 8f6f 	isb	sy

	bx	lr
    3b92:	4770      	bx	lr

00003b94 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3b94:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3b96:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3b98:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3b9c:	b501      	push	{r0, lr}
    3b9e:	f7fe f82b 	bl	1bf8 <z_arm_on_enter_cpu_idle>
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d002      	beq.n	3bac <_skip_1>
    3ba6:	f3bf 8f4f 	dsb	sy
    3baa:	bf20      	wfe

00003bac <_skip_1>:
    3bac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    3bb0:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3bb4:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3bb6:	4770      	bx	lr

00003bb8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3bb8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3bba:	2800      	cmp	r0, #0
    3bbc:	db07      	blt.n	3bce <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bbe:	2301      	movs	r3, #1
    3bc0:	0941      	lsrs	r1, r0, #5
    3bc2:	4a03      	ldr	r2, [pc, #12]	; (3bd0 <arch_irq_enable+0x18>)
    3bc4:	f000 001f 	and.w	r0, r0, #31
    3bc8:	4083      	lsls	r3, r0
    3bca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3bce:	4770      	bx	lr
    3bd0:	e000e100 	.word	0xe000e100

00003bd4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3bd4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3bd6:	2800      	cmp	r0, #0
    3bd8:	db0c      	blt.n	3bf4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bda:	2201      	movs	r2, #1
    3bdc:	4906      	ldr	r1, [pc, #24]	; (3bf8 <arch_irq_disable+0x24>)
    3bde:	0943      	lsrs	r3, r0, #5
    3be0:	f000 001f 	and.w	r0, r0, #31
    3be4:	4082      	lsls	r2, r0
    3be6:	3320      	adds	r3, #32
    3be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bf0:	f3bf 8f6f 	isb	sy
}
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	e000e100 	.word	0xe000e100

00003bfc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3bfc:	4b05      	ldr	r3, [pc, #20]	; (3c14 <arch_irq_is_enabled+0x18>)
    3bfe:	0942      	lsrs	r2, r0, #5
    3c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c04:	2301      	movs	r3, #1
    3c06:	f000 001f 	and.w	r0, r0, #31
    3c0a:	fa03 f000 	lsl.w	r0, r3, r0
}
    3c0e:	4010      	ands	r0, r2
    3c10:	4770      	bx	lr
    3c12:	bf00      	nop
    3c14:	e000e100 	.word	0xe000e100

00003c18 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c18:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c1a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    3c1c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c20:	bfac      	ite	ge
    3c22:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c26:	4b06      	ldrlt	r3, [pc, #24]	; (3c40 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c28:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3c2c:	b2c9      	uxtb	r1, r1
    3c2e:	bfab      	itete	ge
    3c30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c34:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c38:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c3c:	5419      	strblt	r1, [r3, r0]
}
    3c3e:	4770      	bx	lr
    3c40:	e000ed14 	.word	0xe000ed14

00003c44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c44:	bf30      	wfi
    b z_SysNmiOnReset
    3c46:	f7ff bffd 	b.w	3c44 <z_SysNmiOnReset>
    3c4a:	bf00      	nop

00003c4c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c4c:	4a0b      	ldr	r2, [pc, #44]	; (3c7c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3c4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c50:	4b0b      	ldr	r3, [pc, #44]	; (3c80 <z_arm_prep_c+0x34>)
    3c52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3c56:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3c64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3c6c:	f005 fa04 	bl	9078 <z_bss_zero>
	z_data_copy();
    3c70:	f006 f8d8 	bl	9e24 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3c74:	f000 f9ee 	bl	4054 <z_arm_interrupt_init>
	z_cstart();
    3c78:	f005 fa48 	bl	910c <z_cstart>
    3c7c:	00000000 	.word	0x00000000
    3c80:	e000ed00 	.word	0xe000ed00

00003c84 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3c84:	4a09      	ldr	r2, [pc, #36]	; (3cac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3c86:	490a      	ldr	r1, [pc, #40]	; (3cb0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3c88:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3c8a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3c8c:	6718      	str	r0, [r3, #112]	; 0x70
	_current->arch.swap_return_value = _k_neg_eagain;
    3c8e:	6759      	str	r1, [r3, #116]	; 0x74

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c90:	4908      	ldr	r1, [pc, #32]	; (3cb4 <arch_swap+0x30>)
    3c92:	684b      	ldr	r3, [r1, #4]
    3c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c98:	604b      	str	r3, [r1, #4]
    3c9a:	2300      	movs	r3, #0
    3c9c:	f383 8811 	msr	BASEPRI, r3
    3ca0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ca4:	6893      	ldr	r3, [r2, #8]
}
    3ca6:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3ca8:	4770      	bx	lr
    3caa:	bf00      	nop
    3cac:	20014448 	.word	0x20014448
    3cb0:	0000f250 	.word	0x0000f250
    3cb4:	e000ed00 	.word	0xe000ed00

00003cb8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3cb8:	4913      	ldr	r1, [pc, #76]	; (3d08 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3cba:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3cbc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3cc0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3cc2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3cc6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3cca:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3ccc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3cd0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3cd4:	4f0d      	ldr	r7, [pc, #52]	; (3d0c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3cd6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3cda:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    3cdc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3cde:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3ce0:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    3ce2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3ce6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3cea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3cee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3cf2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3cf6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3cfa:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3cfc:	f007 fd7f 	bl	b7fe <configure_builtin_stack_guard>
    pop {r2, lr}
    3d00:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3d04:	4770      	bx	lr
    3d06:	0000      	.short	0x0000
    ldr r1, =_kernel
    3d08:	20014448 	.word	0x20014448
    ldr v4, =_SCS_ICSR
    3d0c:	e000ed04 	.word	0xe000ed04

00003d10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3d10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d24:	2902      	cmp	r1, #2
    beq _oops
    3d26:	d0ff      	beq.n	3d28 <_oops>

00003d28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d28:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3d2a:	f007 fd59 	bl	b7e0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3d2e:	bd01      	pop	{r0, pc}

00003d30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3d30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d34:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3d36:	490b      	ldr	r1, [pc, #44]	; (3d64 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3d38:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3d3c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3d3e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3d42:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d46:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3d48:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3d4c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d54:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3d58:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3d5a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3d5c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3d5e:	6703      	str	r3, [r0, #112]	; 0x70
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	0000a9b9 	.word	0x0000a9b9

00003d68 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3d68:	4b08      	ldr	r3, [pc, #32]	; (3d8c <arch_switch_to_main_thread+0x24>)
    3d6a:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3d6c:	6e03      	ldr	r3, [r0, #96]	; 0x60
    3d6e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3d72:	4610      	mov	r0, r2
    3d74:	f381 8809 	msr	PSP, r1
    3d78:	2100      	movs	r1, #0
    3d7a:	b663      	cpsie	if
    3d7c:	f381 8811 	msr	BASEPRI, r1
    3d80:	f3bf 8f6f 	isb	sy
    3d84:	2200      	movs	r2, #0
    3d86:	2300      	movs	r3, #0
    3d88:	f006 fe16 	bl	a9b8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3d8c:	20014448 	.word	0x20014448

00003d90 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3d90:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3d92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3d96:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3d9a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3d9e:	4904      	ldr	r1, [pc, #16]	; (3db0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3da0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3da2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3da4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3da6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3daa:	4902      	ldr	r1, [pc, #8]	; (3db4 <_isr_wrapper+0x24>)
	bx r1
    3dac:	4708      	bx	r1
    3dae:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3db0:	0000ea78 	.word	0x0000ea78
	ldr r1, =z_arm_int_exit
    3db4:	00003db9 	.word	0x00003db9

00003db8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3db8:	4b04      	ldr	r3, [pc, #16]	; (3dcc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3dba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3dbc:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    3dbe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3dc0:	d003      	beq.n	3dca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3dc2:	4903      	ldr	r1, [pc, #12]	; (3dd0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3dc8:	600a      	str	r2, [r1, #0]

00003dca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3dca:	4770      	bx	lr
	ldr r3, =_kernel
    3dcc:	20014448 	.word	0x20014448
	ldr r1, =_SCS_ICSR
    3dd0:	e000ed04 	.word	0xe000ed04

00003dd4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3dd4:	4b15      	ldr	r3, [pc, #84]	; (3e2c <usage_fault.constprop.0+0x58>)
    3dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3dd8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3dde:	bf14      	ite	ne
    3de0:	201e      	movne	r0, #30
    3de2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3de4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3dea:	bf18      	it	ne
    3dec:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    3dee:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    3df4:	bf18      	it	ne
    3df6:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3df8:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3dfe:	bf18      	it	ne
    3e00:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3e02:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3e08:	bf18      	it	ne
    3e0a:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3e0c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3e12:	bf18      	it	ne
    3e14:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3e16:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    3e1c:	bf18      	it	ne
    3e1e:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3e20:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3e24:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3e28:	629a      	str	r2, [r3, #40]	; 0x28
}
    3e2a:	4770      	bx	lr
    3e2c:	e000ed00 	.word	0xe000ed00

00003e30 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3e30:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e32:	4b18      	ldr	r3, [pc, #96]	; (3e94 <bus_fault.constprop.0+0x64>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3e34:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e36:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3e38:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3e3a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    3e3e:	bf14      	ite	ne
    3e40:	2017      	movne	r0, #23
    3e42:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3e44:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3e4a:	bf18      	it	ne
    3e4c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e4e:	05a4      	lsls	r4, r4, #22
    3e50:	d508      	bpl.n	3e64 <bus_fault.constprop.0+0x34>
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3e52:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3e54:	0400      	lsls	r0, r0, #16
    3e56:	d504      	bpl.n	3e62 <bus_fault.constprop.0+0x32>
			if (from_hard_fault != 0) {
    3e58:	b11a      	cbz	r2, 3e62 <bus_fault.constprop.0+0x32>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3e60:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3e62:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3e64:	4b0b      	ldr	r3, [pc, #44]	; (3e94 <bus_fault.constprop.0+0x64>)
    3e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3e68:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3e6e:	bf18      	it	ne
    3e70:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3e72:	05d2      	lsls	r2, r2, #23
    3e74:	d40c      	bmi.n	3e90 <bus_fault.constprop.0+0x60>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3e78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3e7c:	bf18      	it	ne
    3e7e:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3e80:	4a04      	ldr	r2, [pc, #16]	; (3e94 <bus_fault.constprop.0+0x64>)
    3e82:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e84:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3e88:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3e8a:	2300      	movs	r3, #0
    3e8c:	700b      	strb	r3, [r1, #0]
}
    3e8e:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3e90:	201b      	movs	r0, #27
    3e92:	e7f5      	b.n	3e80 <bus_fault.constprop.0+0x50>
    3e94:	e000ed00 	.word	0xe000ed00

00003e98 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3e98:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3e9a:	4b1c      	ldr	r3, [pc, #112]	; (3f0c <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3e9c:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3e9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3ea0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3ea2:	f010 0f10 	tst.w	r0, #16
    3ea6:	bf14      	ite	ne
    3ea8:	2011      	movne	r0, #17
    3eaa:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3eac:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3eb0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3eb2:	bf18      	it	ne
    3eb4:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3eb6:	07a4      	lsls	r4, r4, #30
    3eb8:	d509      	bpl.n	3ece <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    3eba:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3ebc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3ebe:	0600      	lsls	r0, r0, #24
    3ec0:	d504      	bpl.n	3ecc <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    3ec2:	b11a      	cbz	r2, 3ecc <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3eca:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3ecc:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3ece:	4b0f      	ldr	r3, [pc, #60]	; (3f0c <mem_manage_fault.constprop.0+0x74>)
    3ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3ed2:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3ed8:	bf18      	it	ne
    3eda:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3edc:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3ee2:	bf18      	it	ne
    3ee4:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3ee6:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3ee8:	bf58      	it	pl
    3eea:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3eec:	4b07      	ldr	r3, [pc, #28]	; (3f0c <mem_manage_fault.constprop.0+0x74>)
    3eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ef0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3ef2:	bf42      	ittt	mi
    3ef4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3ef6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3efa:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3efe:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3f02:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f04:	2300      	movs	r3, #0
    3f06:	700b      	strb	r3, [r1, #0]
}
    3f08:	bd10      	pop	{r4, pc}
    3f0a:	bf00      	nop
    3f0c:	e000ed00 	.word	0xe000ed00

00003f10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3f10:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3f12:	4b44      	ldr	r3, [pc, #272]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
{
    3f14:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3f16:	685b      	ldr	r3, [r3, #4]
    3f18:	2500      	movs	r5, #0
{
    3f1a:	b08a      	sub	sp, #40	; 0x28
    3f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3f20:	f385 8811 	msr	BASEPRI, r5
    3f24:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3f28:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3f2c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3f30:	d111      	bne.n	3f56 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3f32:	f002 000c 	and.w	r0, r2, #12
    3f36:	2808      	cmp	r0, #8
    3f38:	d00d      	beq.n	3f56 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3f3a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3f3c:	bf4c      	ite	mi
    3f3e:	460e      	movmi	r6, r1
			*nested_exc = true;
    3f40:	2501      	movpl	r5, #1
	*recoverable = false;
    3f42:	2200      	movs	r2, #0
	switch (fault) {
    3f44:	3b03      	subs	r3, #3
	*recoverable = false;
    3f46:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3f4a:	2b03      	cmp	r3, #3
    3f4c:	d805      	bhi.n	3f5a <z_arm_fault+0x4a>
    3f4e:	e8df f003 	tbb	[pc, r3]
    3f52:	5c1e      	.short	0x5c1e
    3f54:	5960      	.short	0x5960
		return NULL;
    3f56:	462e      	mov	r6, r5
    3f58:	e7f3      	b.n	3f42 <z_arm_fault+0x32>
    3f5a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3f60:	b99b      	cbnz	r3, 3f8a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3f62:	2220      	movs	r2, #32
    3f64:	4631      	mov	r1, r6
    3f66:	a802      	add	r0, sp, #8
    3f68:	f007 fca1 	bl	b8ae <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f6e:	2d00      	cmp	r5, #0
    3f70:	d053      	beq.n	401a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3f76:	b922      	cbnz	r2, 3f82 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3f78:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3f7c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3f80:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3f82:	4620      	mov	r0, r4
    3f84:	a902      	add	r1, sp, #8
    3f86:	f007 fc29 	bl	b7dc <z_arm_fatal_error>
}
    3f8a:	b00a      	add	sp, #40	; 0x28
    3f8c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f8e:	4b25      	ldr	r3, [pc, #148]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f92:	0791      	lsls	r1, r2, #30
    3f94:	d4e1      	bmi.n	3f5a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f98:	2a00      	cmp	r2, #0
    3f9a:	dbde      	blt.n	3f5a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f9e:	0052      	lsls	r2, r2, #1
    3fa0:	d5db      	bpl.n	3f5a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3fa2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3fa4:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3faa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3fac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fb0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3fb4:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3fb6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3fbe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fc4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3fc8:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3fcc:	4291      	cmp	r1, r2
    3fce:	d009      	beq.n	3fe4 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd2:	b2d2      	uxtb	r2, r2
    3fd4:	b142      	cbz	r2, 3fe8 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    3fd6:	2001      	movs	r0, #1
    3fd8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3fdc:	f7ff ff5c 	bl	3e98 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    3fe0:	4604      	mov	r4, r0
		break;
    3fe2:	e7bb      	b.n	3f5c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    3fe4:	6834      	ldr	r4, [r6, #0]
    3fe6:	e7b9      	b.n	3f5c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fea:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3fee:	d005      	beq.n	3ffc <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    3ff0:	2001      	movs	r0, #1
    3ff2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3ff6:	f7ff ff1b 	bl	3e30 <bus_fault.constprop.0>
    3ffa:	e7f1      	b.n	3fe0 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4002:	d3aa      	bcc.n	3f5a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    4004:	f7ff fee6 	bl	3dd4 <usage_fault.constprop.0>
    4008:	e7ea      	b.n	3fe0 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    400a:	2000      	movs	r0, #0
    400c:	f10d 0107 	add.w	r1, sp, #7
    4010:	e7e4      	b.n	3fdc <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    4012:	2000      	movs	r0, #0
    4014:	f10d 0107 	add.w	r1, sp, #7
    4018:	e7ed      	b.n	3ff6 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    401a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    401e:	f023 0301 	bic.w	r3, r3, #1
    4022:	e7ad      	b.n	3f80 <z_arm_fault+0x70>
    4024:	e000ed00 	.word	0xe000ed00

00004028 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4028:	4b04      	ldr	r3, [pc, #16]	; (403c <z_arm_fault_init+0x14>)
    402a:	695a      	ldr	r2, [r3, #20]
    402c:	f042 0210 	orr.w	r2, r2, #16
    4030:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4032:	695a      	ldr	r2, [r3, #20]
    4034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4038:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    403a:	4770      	bx	lr
    403c:	e000ed00 	.word	0xe000ed00

00004040 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4040:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4044:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4048:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    404a:	4672      	mov	r2, lr
	bl z_arm_fault
    404c:	f7ff ff60 	bl	3f10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4050:	bd01      	pop	{r0, pc}
    4052:	bf00      	nop

00004054 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4054:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4056:	2120      	movs	r1, #32
    4058:	4803      	ldr	r0, [pc, #12]	; (4068 <z_arm_interrupt_init+0x14>)
    405a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    405c:	3301      	adds	r3, #1
    405e:	2b45      	cmp	r3, #69	; 0x45
    4060:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4064:	d1f9      	bne.n	405a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4066:	4770      	bx	lr
    4068:	e000e100 	.word	0xe000e100

0000406c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    406c:	2000      	movs	r0, #0
    msr CONTROL, r0
    406e:	f380 8814 	msr	CONTROL, r0
    isb
    4072:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    4076:	2000      	movs	r0, #0
    msr MSPLIM, r0
    4078:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    407c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4080:	f7fd fdfe 	bl	1c80 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4084:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4086:	490e      	ldr	r1, [pc, #56]	; (40c0 <__start+0x54>)
    str r0, [r1]
    4088:	6008      	str	r0, [r1, #0]
    dsb
    408a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    408e:	480d      	ldr	r0, [pc, #52]	; (40c4 <__start+0x58>)
    msr msp, r0
    4090:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4094:	f000 f83e 	bl	4114 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4098:	2020      	movs	r0, #32
    msr BASEPRI, r0
    409a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    409e:	480a      	ldr	r0, [pc, #40]	; (40c8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    40a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    40a4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    40a6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    40aa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    40ae:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    40b0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    40b2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    40b6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    40ba:	f7ff fdc7 	bl	3c4c <z_arm_prep_c>
    40be:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    40c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    40c4:	2005a1f8 	.word	0x2005a1f8
    ldr r0, =z_interrupt_stacks
    40c8:	200570b8 	.word	0x200570b8

000040cc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    40cc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    40d0:	4905      	ldr	r1, [pc, #20]	; (40e8 <sys_arch_reboot+0x1c>)
    40d2:	4b06      	ldr	r3, [pc, #24]	; (40ec <sys_arch_reboot+0x20>)
    40d4:	68ca      	ldr	r2, [r1, #12]
    40d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    40da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    40dc:	60cb      	str	r3, [r1, #12]
    40de:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    40e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    40e4:	e7fd      	b.n	40e2 <sys_arch_reboot+0x16>
    40e6:	bf00      	nop
    40e8:	e000ed00 	.word	0xe000ed00
    40ec:	05fa0004 	.word	0x05fa0004

000040f0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    40f0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    40f2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    40f4:	4906      	ldr	r1, [pc, #24]	; (4110 <z_arm_clear_arm_mpu_config+0x20>)
    40f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    40fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    40fe:	4293      	cmp	r3, r2
    4100:	db00      	blt.n	4104 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    4102:	4770      	bx	lr
  mpu->RNR = rnr;
    4104:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    4108:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    410c:	3301      	adds	r3, #1
    410e:	e7f6      	b.n	40fe <z_arm_clear_arm_mpu_config+0xe>
    4110:	e000ed00 	.word	0xe000ed00

00004114 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4114:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4116:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4118:	2400      	movs	r4, #0
    411a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    411e:	f7ff ffe7 	bl	40f0 <z_arm_clear_arm_mpu_config>
    4122:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4128:	4a0c      	ldr	r2, [pc, #48]	; (415c <z_arm_init_arch_hw_at_boot+0x48>)
    412a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    412e:	3301      	adds	r3, #1
    4130:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    4132:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4136:	d1f8      	bne.n	412a <z_arm_init_arch_hw_at_boot+0x16>
    4138:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    413a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    413e:	4a07      	ldr	r2, [pc, #28]	; (415c <z_arm_init_arch_hw_at_boot+0x48>)
    4140:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4144:	3301      	adds	r3, #1
    4146:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4148:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    414c:	d1f8      	bne.n	4140 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    414e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4150:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4154:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    4158:	bd10      	pop	{r4, pc}
    415a:	bf00      	nop
    415c:	e000e100 	.word	0xe000e100

00004160 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4160:	4b08      	ldr	r3, [pc, #32]	; (4184 <z_impl_k_thread_abort+0x24>)
    4162:	689b      	ldr	r3, [r3, #8]
    4164:	4283      	cmp	r3, r0
    4166:	d10b      	bne.n	4180 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4168:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    416c:	b143      	cbz	r3, 4180 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    416e:	4b06      	ldr	r3, [pc, #24]	; (4188 <z_impl_k_thread_abort+0x28>)
    4170:	685a      	ldr	r2, [r3, #4]
    4172:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4176:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    417a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    417e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4180:	f005 bdde 	b.w	9d40 <z_thread_abort>
    4184:	20014448 	.word	0x20014448
    4188:	e000ed00 	.word	0xe000ed00

0000418c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    418c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    418e:	4c09      	ldr	r4, [pc, #36]	; (41b4 <z_arm_configure_static_mpu_regions+0x28>)
    4190:	4a09      	ldr	r2, [pc, #36]	; (41b8 <z_arm_configure_static_mpu_regions+0x2c>)
    4192:	4623      	mov	r3, r4
    4194:	2101      	movs	r1, #1
    4196:	4809      	ldr	r0, [pc, #36]	; (41bc <z_arm_configure_static_mpu_regions+0x30>)
    4198:	f000 f8ea 	bl	4370 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    419c:	2300      	movs	r3, #0
    419e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    41a0:	4b07      	ldr	r3, [pc, #28]	; (41c0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    41a2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    41a4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    41a6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    41a8:	9301      	str	r3, [sp, #4]
    41aa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    41ac:	f000 f8ea 	bl	4384 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    41b0:	b004      	add	sp, #16
    41b2:	bd10      	pop	{r4, pc}
    41b4:	20070000 	.word	0x20070000
    41b8:	20002000 	.word	0x20002000
    41bc:	0000eee4 	.word	0x0000eee4
    41c0:	20002490 	.word	0x20002490

000041c4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    41c4:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    41c6:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    41c8:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    41ca:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    41ce:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    41d2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    41d4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    41d6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    41d8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    41dc:	4905      	ldr	r1, [pc, #20]	; (41f4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    41de:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    41e2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    41e6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    41ea:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    41ee:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    41f2:	bd10      	pop	{r4, pc}
    41f4:	e000ed00 	.word	0xe000ed00

000041f8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    41f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41fc:	460f      	mov	r7, r1
    41fe:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4200:	4606      	mov	r6, r0
    4202:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    4206:	4d4e      	ldr	r5, [pc, #312]	; (4340 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    4208:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    420a:	45b8      	cmp	r8, r7
    420c:	f280 8094 	bge.w	4338 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    4210:	f8d6 9004 	ldr.w	r9, [r6, #4]
    4214:	f1b9 0f00 	cmp.w	r9, #0
    4218:	d036      	beq.n	4288 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    421a:	f1b9 0f1f 	cmp.w	r9, #31
    421e:	f240 8089 	bls.w	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    4222:	f019 0f1f 	tst.w	r9, #31
    4226:	f040 8085 	bne.w	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    422a:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    422e:	f01a 0f1f 	tst.w	sl, #31
    4232:	d17f      	bne.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4234:	4650      	mov	r0, sl
    4236:	f007 fae6 	bl	b806 <arm_cmse_mpu_region_get>
    423a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    423c:	eb09 000a 	add.w	r0, r9, sl
    4240:	3801      	subs	r0, #1
    4242:	f007 fae0 	bl	b806 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4246:	4583      	cmp	fp, r0
    4248:	d174      	bne.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    424a:	f11b 0f16 	cmn.w	fp, #22
    424e:	d071      	beq.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    4250:	455c      	cmp	r4, fp
    4252:	dd6f      	ble.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    4254:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    4258:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    425c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    4260:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    4264:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4268:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    426c:	e9d6 3200 	ldrd	r3, r2, [r6]
    4270:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    4272:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4274:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    4278:	d11e      	bne.n	42b8 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    427a:	45ca      	cmp	sl, r9
    427c:	d108      	bne.n	4290 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    427e:	4631      	mov	r1, r6
    4280:	fa5f f08b 	uxtb.w	r0, fp
    4284:	f007 fac8 	bl	b818 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4288:	f108 0801 	add.w	r8, r8, #1
    428c:	360c      	adds	r6, #12
    428e:	e7bc      	b.n	420a <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    4290:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    4292:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    4296:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    429a:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    429e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    42a2:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    42a4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    42a8:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    42aa:	f007 fab5 	bl	b818 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    42ae:	f110 0f16 	cmn.w	r0, #22
    42b2:	d03f      	beq.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    42b4:	1c44      	adds	r4, r0, #1
    42b6:	e7e7      	b.n	4288 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    42b8:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    42bc:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    42c0:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    42c2:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    42c6:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    42ca:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    42cc:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    42ce:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    42d0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    42d2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    42d6:	d0e8      	beq.n	42aa <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    42d8:	f007 fa9e 	bl	b818 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    42dc:	f110 0f16 	cmn.w	r0, #22
    42e0:	d028      	beq.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    42e2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    42e6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    42ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    42ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    42f2:	f362 0304 	bfi	r3, r2, #0, #5
    42f6:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    42fa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    42fe:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4302:	085b      	lsrs	r3, r3, #1
    4304:	f363 1247 	bfi	r2, r3, #5, #3
    4308:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    430c:	e9d6 3200 	ldrd	r3, r2, [r6]
    4310:	4413      	add	r3, r2
    4312:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    4314:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    4318:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    431a:	4453      	add	r3, sl
    431c:	eba3 0309 	sub.w	r3, r3, r9
    4320:	b2c8      	uxtb	r0, r1
    4322:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4326:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    4328:	9303      	str	r3, [sp, #12]
    432a:	d803      	bhi.n	4334 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    432c:	4669      	mov	r1, sp
    432e:	f7ff ff49 	bl	41c4 <region_init>
    4332:	e7bf      	b.n	42b4 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    4334:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    4338:	4620      	mov	r0, r4
    433a:	b005      	add	sp, #20
    433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4340:	e000ed00 	.word	0xe000ed00

00004344 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4344:	2205      	movs	r2, #5
    4346:	4b04      	ldr	r3, [pc, #16]	; (4358 <arm_core_mpu_enable+0x14>)
    4348:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    434c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4350:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    4354:	4770      	bx	lr
    4356:	bf00      	nop
    4358:	e000ed00 	.word	0xe000ed00

0000435c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    435c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
    4360:	2200      	movs	r2, #0
    4362:	4b02      	ldr	r3, [pc, #8]	; (436c <arm_core_mpu_disable+0x10>)
    4364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4368:	4770      	bx	lr
    436a:	bf00      	nop
    436c:	e000ed00 	.word	0xe000ed00

00004370 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4370:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4372:	4c03      	ldr	r4, [pc, #12]	; (4380 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4374:	7822      	ldrb	r2, [r4, #0]
    4376:	f7ff ff3f 	bl	41f8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    437a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    437c:	bd10      	pop	{r4, pc}
    437e:	bf00      	nop
    4380:	200168ad 	.word	0x200168ad

00004384 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    4384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4388:	4d29      	ldr	r5, [pc, #164]	; (4430 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    438a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    438c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    438e:	f04f 0800 	mov.w	r8, #0
    4392:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    4394:	4f27      	ldr	r7, [pc, #156]	; (4434 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4396:	45d0      	cmp	r8, sl
    4398:	da1b      	bge.n	43d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    439a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    439e:	f1b9 0f00 	cmp.w	r9, #0
    43a2:	d03f      	beq.n	4424 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    43a4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    43a6:	4608      	mov	r0, r1
    43a8:	9101      	str	r1, [sp, #4]
    43aa:	f007 fa2c 	bl	b806 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    43ae:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    43b0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    43b2:	eb09 0001 	add.w	r0, r9, r1
    43b6:	3801      	subs	r0, #1
    43b8:	f007 fa25 	bl	b806 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    43bc:	4284      	cmp	r4, r0
    43be:	f04f 0214 	mov.w	r2, #20
    43c2:	4b1d      	ldr	r3, [pc, #116]	; (4438 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    43c4:	d008      	beq.n	43d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    43c6:	fb02 f308 	mul.w	r3, r2, r8
    43ca:	f06f 0215 	mvn.w	r2, #21
    43ce:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    43d2:	b003      	add	sp, #12
    43d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    43d8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    43dc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    43de:	d0f8      	beq.n	43d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    43e0:	7819      	ldrb	r1, [r3, #0]
    43e2:	42a1      	cmp	r1, r4
    43e4:	ddf5      	ble.n	43d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    43e6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    43ea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    43ee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    43f2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    43f6:	f100 0108 	add.w	r1, r0, #8
    43fa:	7b00      	ldrb	r0, [r0, #12]
    43fc:	f364 0004 	bfi	r0, r4, #0, #5
    4400:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    4402:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    4406:	790c      	ldrb	r4, [r1, #4]
    4408:	0840      	lsrs	r0, r0, #1
    440a:	f360 1447 	bfi	r4, r0, #5, #3
    440e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    4410:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    4414:	f021 011f 	bic.w	r1, r1, #31
    4418:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    441a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    441e:	f021 011f 	bic.w	r1, r1, #31
    4422:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4424:	f108 0801 	add.w	r8, r8, #1
    4428:	3514      	adds	r5, #20
    442a:	360c      	adds	r6, #12
    442c:	e7b3      	b.n	4396 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    442e:	bf00      	nop
    4430:	200137dc 	.word	0x200137dc
    4434:	e000ed00 	.word	0xe000ed00
    4438:	200168ad 	.word	0x200168ad

0000443c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    443c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    443e:	4d0e      	ldr	r5, [pc, #56]	; (4478 <z_arm_mpu_init+0x3c>)
    4440:	682c      	ldr	r4, [r5, #0]
    4442:	2c08      	cmp	r4, #8
    4444:	d815      	bhi.n	4472 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4446:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    4448:	f7ff ff88 	bl	435c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    444c:	4b0b      	ldr	r3, [pc, #44]	; (447c <z_arm_mpu_init+0x40>)
    444e:	4a0c      	ldr	r2, [pc, #48]	; (4480 <z_arm_mpu_init+0x44>)
    4450:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4454:	4284      	cmp	r4, r0
    4456:	d105      	bne.n	4464 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4458:	4b0a      	ldr	r3, [pc, #40]	; (4484 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    445a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    445c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    445e:	f7ff ff71 	bl	4344 <arm_core_mpu_enable>
}
    4462:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4464:	6869      	ldr	r1, [r5, #4]
    4466:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    446a:	f7ff feab 	bl	41c4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    446e:	3001      	adds	r0, #1
    4470:	e7f0      	b.n	4454 <z_arm_mpu_init+0x18>
		return -1;
    4472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4476:	e7f4      	b.n	4462 <z_arm_mpu_init+0x26>
    4478:	0000eef0 	.word	0x0000eef0
    447c:	e000ed00 	.word	0xe000ed00
    4480:	0044ffaa 	.word	0x0044ffaa
    4484:	200168ad 	.word	0x200168ad

00004488 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    4488:	b40c      	push	{r2, r3}
    448a:	b510      	push	{r4, lr}
    448c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    448e:	b909      	cbnz	r1, 4494 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    4490:	f10d 000b 	add.w	r0, sp, #11
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    4494:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    4496:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    449a:	ab09      	add	r3, sp, #36	; 0x24
    449c:	9a08      	ldr	r2, [sp, #32]
    449e:	9400      	str	r4, [sp, #0]
    44a0:	a904      	add	r1, sp, #16
    44a2:	4805      	ldr	r0, [pc, #20]	; (44b8 <snprintf+0x30>)
    44a4:	9303      	str	r3, [sp, #12]
    44a6:	f7fd f94f 	bl	1748 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    44aa:	9b04      	ldr	r3, [sp, #16]
    44ac:	701c      	strb	r4, [r3, #0]
	return r;
}
    44ae:	b006      	add	sp, #24
    44b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44b4:	b002      	add	sp, #8
    44b6:	4770      	bx	lr
    44b8:	0000b8d7 	.word	0x0000b8d7

000044bc <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    44bc:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    44be:	4801      	ldr	r0, [pc, #4]	; (44c4 <usbd_evt_put+0x8>)
    44c0:	f009 bfa4 	b.w	e40c <k_queue_append>
    44c4:	20002378 	.word	0x20002378

000044c8 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    44c8:	4901      	ldr	r1, [pc, #4]	; (44d0 <usbd_work_schedule+0x8>)
    44ca:	4802      	ldr	r0, [pc, #8]	; (44d4 <usbd_work_schedule+0xc>)
    44cc:	f00a b803 	b.w	e4d6 <k_work_submit_to_queue>
    44d0:	20013818 	.word	0x20013818
    44d4:	20002528 	.word	0x20002528

000044d8 <endpoint_ctx>:
	if (NRF_USBD_EPIN_CHECK(ep)) {
    44d8:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    44da:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    44de:	d512      	bpl.n	4506 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    44e0:	2b08      	cmp	r3, #8
    44e2:	d105      	bne.n	44f0 <endpoint_ctx+0x18>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    44e4:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    44e6:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    44ea:	d506      	bpl.n	44fa <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    44ec:	480e      	ldr	r0, [pc, #56]	; (4528 <endpoint_ctx+0x50>)
    44ee:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    44f0:	f010 0f78 	tst.w	r0, #120	; 0x78
    44f4:	d112      	bne.n	451c <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    44f6:	f000 030f 	and.w	r3, r0, #15
			return &ctx->ep_ctx[ep_num];
    44fa:	204c      	movs	r0, #76	; 0x4c
    44fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4500:	4b0a      	ldr	r3, [pc, #40]	; (452c <endpoint_ctx+0x54>)
    4502:	4418      	add	r0, r3
    4504:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4506:	2b08      	cmp	r3, #8
    4508:	d105      	bne.n	4516 <endpoint_ctx+0x3e>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    450a:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    450c:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4510:	d506      	bpl.n	4520 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4512:	4807      	ldr	r0, [pc, #28]	; (4530 <endpoint_ctx+0x58>)
    4514:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    4516:	f010 0f78 	tst.w	r0, #120	; 0x78
    451a:	d0f6      	beq.n	450a <endpoint_ctx+0x32>
		return NULL;
    451c:	2000      	movs	r0, #0
}
    451e:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4520:	4804      	ldr	r0, [pc, #16]	; (4534 <endpoint_ctx+0x5c>)
    4522:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4526:	4770      	bx	lr
    4528:	2001393c 	.word	0x2001393c
    452c:	200137f0 	.word	0x200137f0
    4530:	20013a5c 	.word	0x20013a5c
    4534:	2001395c 	.word	0x2001395c

00004538 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4538:	2200      	movs	r2, #0
    453a:	2300      	movs	r3, #0
    453c:	4801      	ldr	r0, [pc, #4]	; (4544 <usbd_evt_get+0xc>)
    453e:	f005 b801 	b.w	9544 <z_impl_k_queue_get>
    4542:	bf00      	nop
    4544:	20002378 	.word	0x20002378

00004548 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4548:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    454a:	4c05      	ldr	r4, [pc, #20]	; (4560 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    454c:	f7ff fff4 	bl	4538 <usbd_evt_get>
		if (ev) {
    4550:	b120      	cbz	r0, 455c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4552:	1d01      	adds	r1, r0, #4
    4554:	4620      	mov	r0, r4
    4556:	f009 fe9c 	bl	e292 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    455a:	e7f7      	b.n	454c <usbd_evt_flush+0x4>
}
    455c:	bd10      	pop	{r4, pc}
    455e:	bf00      	nop
    4560:	200022f8 	.word	0x200022f8

00004564 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4564:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4566:	2300      	movs	r3, #0
    4568:	2200      	movs	r2, #0
    456a:	480e      	ldr	r0, [pc, #56]	; (45a4 <usbd_evt_alloc+0x40>)
    456c:	a901      	add	r1, sp, #4
    456e:	f004 fe4d 	bl	920c <k_mem_slab_alloc>
    4572:	b190      	cbz	r0, 459a <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    4574:	f7ff ffe8 	bl	4548 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4578:	2200      	movs	r2, #0
    457a:	2300      	movs	r3, #0
    457c:	4809      	ldr	r0, [pc, #36]	; (45a4 <usbd_evt_alloc+0x40>)
    457e:	a901      	add	r1, sp, #4
    4580:	f004 fe44 	bl	920c <k_mem_slab_alloc>
    4584:	b938      	cbnz	r0, 4596 <usbd_evt_alloc+0x32>
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4586:	2304      	movs	r3, #4
		ev = (struct usbd_event *)block.data;
    4588:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
    458a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    458c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    458e:	f7ff ff95 	bl	44bc <usbd_evt_put>
		usbd_work_schedule();
    4592:	f7ff ff99 	bl	44c8 <usbd_work_schedule>

		return NULL;
    4596:	2000      	movs	r0, #0
    4598:	e001      	b.n	459e <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    459a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    459c:	6040      	str	r0, [r0, #4]

	return ev;
}
    459e:	b003      	add	sp, #12
    45a0:	f85d fb04 	ldr.w	pc, [sp], #4
    45a4:	200022f8 	.word	0x200022f8

000045a8 <submit_dc_power_event>:

static void submit_dc_power_event(enum usbd_periph_state state)
{
    45a8:	b510      	push	{r4, lr}
    45aa:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
    45ac:	f7ff ffda 	bl	4564 <usbd_evt_alloc>

	if (!ev) {
    45b0:	b160      	cbz	r0, 45cc <submit_dc_power_event+0x24>
		return;
	}

	ev->evt_type = USBD_EVT_POWER;
    45b2:	2200      	movs	r2, #0
	ev->evt.pwr_evt.state = state;
    45b4:	7204      	strb	r4, [r0, #8]
	ev->evt_type = USBD_EVT_POWER;
    45b6:	7402      	strb	r2, [r0, #16]

	usbd_evt_put(ev);
    45b8:	f7ff ff80 	bl	44bc <usbd_evt_put>

	if (usbd_ctx.attached) {
    45bc:	4b04      	ldr	r3, [pc, #16]	; (45d0 <submit_dc_power_event+0x28>)
    45be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    45c2:	b11b      	cbz	r3, 45cc <submit_dc_power_event+0x24>
		usbd_work_schedule();
	}
}
    45c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    45c8:	f7ff bf7e 	b.w	44c8 <usbd_work_schedule>
}
    45cc:	bd10      	pop	{r4, pc}
    45ce:	bf00      	nop
    45d0:	200137f0 	.word	0x200137f0

000045d4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    45d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    45d6:	7887      	ldrb	r7, [r0, #2]
{
    45d8:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    45da:	4638      	mov	r0, r7
    45dc:	f7ff ff7c 	bl	44d8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    45e0:	063b      	lsls	r3, r7, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    45e2:	4604      	mov	r4, r0
		switch (p_event->data.eptransfer.status) {
    45e4:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    45e6:	d512      	bpl.n	460e <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    45e8:	2d00      	cmp	r5, #0
    45ea:	d143      	bne.n	4674 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    45ec:	f7ff ffba 	bl	4564 <usbd_evt_alloc>

			if (!ev) {
    45f0:	4603      	mov	r3, r0
    45f2:	2800      	cmp	r0, #0
    45f4:	d03e      	beq.n	4674 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    45f6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    45f8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    45fa:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    45fc:	2203      	movs	r2, #3
    45fe:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    4600:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    4602:	f7ff ff5b 	bl	44bc <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    4606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    460a:	f7ff bf5d 	b.w	44c8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    460e:	b14d      	cbz	r5, 4624 <usbd_event_transfer_data+0x50>
    4610:	2d01      	cmp	r5, #1
    4612:	d12f      	bne.n	4674 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    4614:	f7ff ffa6 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    4618:	4603      	mov	r3, r0
    461a:	b358      	cbz	r0, 4674 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    461c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    461e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4620:	7305      	strb	r5, [r0, #12]
    4622:	e7ed      	b.n	4600 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    4624:	f7ff ff9e 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    4628:	b320      	cbz	r0, 4674 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    462a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    462c:	4b12      	ldr	r3, [pc, #72]	; (4678 <usbd_event_transfer_data+0xa4>)
    462e:	f012 0f80 	tst.w	r2, #128	; 0x80
    4632:	f002 0108 	and.w	r1, r2, #8
    4636:	d011      	beq.n	465c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4638:	b141      	cbz	r1, 464c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    463a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    463e:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    4640:	2301      	movs	r3, #1
    4642:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4644:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    4646:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4648:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    464a:	e7da      	b.n	4602 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    464c:	2114      	movs	r1, #20
    464e:	f002 020f 	and.w	r2, r2, #15
    4652:	fb01 3302 	mla	r3, r1, r2, r3
    4656:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    465a:	e7f0      	b.n	463e <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    465c:	b111      	cbz	r1, 4664 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    465e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4662:	e7ec      	b.n	463e <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4664:	2114      	movs	r1, #20
    4666:	f002 020f 	and.w	r2, r2, #15
    466a:	fb01 3302 	mla	r3, r1, r2, r3
    466e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4672:	e7e4      	b.n	463e <usbd_event_transfer_data+0x6a>
}
    4674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4676:	bf00      	nop
    4678:	50036000 	.word	0x50036000

0000467c <usb_dc_power_event_handler>:
	switch (event) {
    467c:	2801      	cmp	r0, #1
{
    467e:	b507      	push	{r0, r1, r2, lr}
	switch (event) {
    4680:	d00f      	beq.n	46a2 <usb_dc_power_event_handler+0x26>
    4682:	2802      	cmp	r0, #2
    4684:	d00e      	beq.n	46a4 <usb_dc_power_event_handler+0x28>
    4686:	b948      	cbnz	r0, 469c <usb_dc_power_event_handler+0x20>
	z_impl_k_timer_start(timer, duration, period);
    4688:	2200      	movs	r2, #0
    468a:	2300      	movs	r3, #0
    468c:	4808      	ldr	r0, [pc, #32]	; (46b0 <usb_dc_power_event_handler+0x34>)
    468e:	e9cd 2300 	strd	r2, r3, [sp]
    4692:	f645 129a 	movw	r2, #22938	; 0x599a
    4696:	2300      	movs	r3, #0
    4698:	f005 fd8e 	bl	a1b8 <z_impl_k_timer_start>
}
    469c:	b003      	add	sp, #12
    469e:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (event) {
    46a2:	2000      	movs	r0, #0
}
    46a4:	b003      	add	sp, #12
    46a6:	f85d eb04 	ldr.w	lr, [sp], #4
	submit_dc_power_event(new_state);
    46aa:	f7ff bf7d 	b.w	45a8 <submit_dc_power_event>
    46ae:	bf00      	nop
    46b0:	20002288 	.word	0x20002288

000046b4 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    46b4:	b513      	push	{r0, r1, r4, lr}

#ifdef CONFIG_HAS_HW_NRF_USBREG
	/* Use CLOCK/POWER priority for compatibility with other series where
	 * USB events are handled by CLOCK interrupt handler.
	 */
	IRQ_CONNECT(USBREGULATOR_IRQn,
    46b6:	2200      	movs	r2, #0
    46b8:	2101      	movs	r1, #1
    46ba:	2037      	movs	r0, #55	; 0x37
    46bc:	f7ff faac 	bl	3c18 <z_arm_irq_priority_set>
		    DT_IRQ(DT_INST(0, nordic_nrf_clock), priority),
		    nrfx_isr, nrfx_usbreg_irq_handler, 0);
	irq_enable(USBREGULATOR_IRQn);
    46c0:	2037      	movs	r0, #55	; 0x37
    46c2:	f7ff fa79 	bl	3bb8 <arch_irq_enable>

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    46c6:	4812      	ldr	r0, [pc, #72]	; (4710 <usb_init+0x5c>)
    46c8:	f003 ff68 	bl	859c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    46cc:	4b11      	ldr	r3, [pc, #68]	; (4714 <usb_init+0x60>)
    46ce:	4298      	cmp	r0, r3
    46d0:	d11a      	bne.n	4708 <usb_init+0x54>
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    46d2:	2400      	movs	r4, #0
	(void)nrfx_power_init(&power_config);
    46d4:	4810      	ldr	r0, [pc, #64]	; (4718 <usb_init+0x64>)
    46d6:	f003 f983 	bl	79e0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    46da:	4810      	ldr	r0, [pc, #64]	; (471c <usb_init+0x68>)
    46dc:	f004 fbfa 	bl	8ed4 <nrfx_usbreg_init>
	k_work_queue_start(&usbd_work_queue,
    46e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46e8:	490d      	ldr	r1, [pc, #52]	; (4720 <usb_init+0x6c>)
    46ea:	480e      	ldr	r0, [pc, #56]	; (4724 <usb_init+0x70>)
    46ec:	9400      	str	r4, [sp, #0]
    46ee:	f005 f899 	bl	9824 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    46f2:	490d      	ldr	r1, [pc, #52]	; (4728 <usb_init+0x74>)
    46f4:	480b      	ldr	r0, [pc, #44]	; (4724 <usb_init+0x70>)
    46f6:	f009 fdfb 	bl	e2f0 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    46fa:	480c      	ldr	r0, [pc, #48]	; (472c <usb_init+0x78>)
    46fc:	490c      	ldr	r1, [pc, #48]	; (4730 <usb_init+0x7c>)
    46fe:	f009 fecd 	bl	e49c <k_work_init>

	return 0;
    4702:	4620      	mov	r0, r4
}
    4704:	b002      	add	sp, #8
    4706:	bd10      	pop	{r4, pc}
		return -EIO;
    4708:	f06f 0004 	mvn.w	r0, #4
    470c:	e7fa      	b.n	4704 <usb_init+0x50>
    470e:	bf00      	nop
    4710:	0000476d 	.word	0x0000476d
    4714:	0bad0000 	.word	0x0bad0000
    4718:	0000f663 	.word	0x0000f663
    471c:	0000ef18 	.word	0x0000ef18
    4720:	20056cb8 	.word	0x20056cb8
    4724:	20002528 	.word	0x20002528
    4728:	0000f658 	.word	0x0000f658
    472c:	20013818 	.word	0x20013818
    4730:	000048f1 	.word	0x000048f1

00004734 <hfxo_stop.constprop.0.isra.0>:
    4734:	2300      	movs	r3, #0
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4736:	b510      	push	{r4, lr}
    4738:	490b      	ldr	r1, [pc, #44]	; (4768 <hfxo_stop.constprop.0.isra.0+0x34>)
    473a:	e8d1 2fef 	ldaex	r2, [r1]
    473e:	2a01      	cmp	r2, #1
    4740:	d103      	bne.n	474a <hfxo_stop.constprop.0.isra.0+0x16>
    4742:	e8c1 3fe0 	stlex	r0, r3, [r1]
    4746:	2800      	cmp	r0, #0
    4748:	d1f7      	bne.n	473a <hfxo_stop.constprop.0.isra.0+0x6>
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    474a:	d10c      	bne.n	4766 <hfxo_stop.constprop.0.isra.0+0x32>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    474c:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4750:	3914      	subs	r1, #20
    4752:	4620      	mov	r0, r4
    4754:	f006 fcdb 	bl	b10e <onoff_cancel>

	if (rv == -EALREADY) {
    4758:	3078      	adds	r0, #120	; 0x78
    475a:	d104      	bne.n	4766 <hfxo_stop.constprop.0.isra.0+0x32>
		rv = onoff_release(mgr);
    475c:	4620      	mov	r0, r4
}
    475e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4762:	f006 bcaf 	b.w	b0c4 <onoff_release>
    4766:	bd10      	pop	{r4, pc}
    4768:	20013810 	.word	0x20013810

0000476c <usbd_event_handler>:
{
    476c:	b5f0      	push	{r4, r5, r6, r7, lr}
    476e:	4606      	mov	r6, r0
    4770:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    4772:	2214      	movs	r2, #20
    4774:	2100      	movs	r1, #0
    4776:	a803      	add	r0, sp, #12
    4778:	f007 f8a4 	bl	b8c4 <memset>
	switch (p_event->type) {
    477c:	7833      	ldrb	r3, [r6, #0]
    477e:	3b01      	subs	r3, #1
    4780:	2b05      	cmp	r3, #5
    4782:	d821      	bhi.n	47c8 <usbd_event_handler+0x5c>
    4784:	e8df f003 	tbb	[pc, r3]
    4788:	1414037a 	.word	0x1414037a
    478c:	166a      	.short	0x166a
    478e:	2303      	movs	r3, #3
		evt.evt_type = USBD_EVT_POWER;
    4790:	2400      	movs	r4, #0
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4792:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
    4796:	f7ff fee5 	bl	4564 <usbd_evt_alloc>
		if (!ev) {
    479a:	4603      	mov	r3, r0
    479c:	b1a0      	cbz	r0, 47c8 <usbd_event_handler+0x5c>
		ev->evt = evt.evt;
    479e:	f100 0208 	add.w	r2, r0, #8
		ev->evt_type = evt.evt_type;
    47a2:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    47a4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    47a8:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    47ac:	4618      	mov	r0, r3
    47ae:	e01d      	b.n	47ec <usbd_event_handler+0x80>
	switch (p_event->type) {
    47b0:	2304      	movs	r3, #4
    47b2:	e7ed      	b.n	4790 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    47b4:	78b7      	ldrb	r7, [r6, #2]
    47b6:	4638      	mov	r0, r7
    47b8:	f7ff fe8e 	bl	44d8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    47bc:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    47be:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    47c0:	b123      	cbz	r3, 47cc <usbd_event_handler+0x60>
    47c2:	3b01      	subs	r3, #1
    47c4:	2b02      	cmp	r3, #2
    47c6:	d943      	bls.n	4850 <usbd_event_handler+0xe4>
}
    47c8:	b009      	add	sp, #36	; 0x24
    47ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    47cc:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    47ce:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    47d0:	d513      	bpl.n	47fa <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    47d2:	2d00      	cmp	r5, #0
    47d4:	d1f8      	bne.n	47c8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    47d6:	f7ff fec5 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    47da:	4603      	mov	r3, r0
    47dc:	2800      	cmp	r0, #0
    47de:	d0f3      	beq.n	47c8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    47e0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    47e2:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    47e4:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    47e6:	2203      	movs	r2, #3
    47e8:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    47ea:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    47ec:	f7ff fe66 	bl	44bc <usbd_evt_put>
}
    47f0:	b009      	add	sp, #36	; 0x24
    47f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    47f6:	f7ff be67 	b.w	44c8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    47fa:	b155      	cbz	r5, 4812 <usbd_event_handler+0xa6>
    47fc:	2d01      	cmp	r5, #1
    47fe:	d1e3      	bne.n	47c8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    4800:	f7ff feb0 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    4804:	4603      	mov	r3, r0
    4806:	2800      	cmp	r0, #0
    4808:	d0de      	beq.n	47c8 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    480a:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    480c:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    480e:	7305      	strb	r5, [r0, #12]
    4810:	e7eb      	b.n	47ea <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    4812:	f7ff fea7 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    4816:	4607      	mov	r7, r0
    4818:	2800      	cmp	r0, #0
    481a:	d0d5      	beq.n	47c8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    481c:	2301      	movs	r3, #1
    481e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4820:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    4822:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4824:	7303      	strb	r3, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    4826:	f104 010c 	add.w	r1, r4, #12
    482a:	78b0      	ldrb	r0, [r6, #2]
    482c:	f009 f9a1 	bl	db72 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4830:	4a13      	ldr	r2, [pc, #76]	; (4880 <usbd_event_handler+0x114>)
    4832:	68e1      	ldr	r1, [r4, #12]
    4834:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4838:	428b      	cmp	r3, r1
    483a:	d906      	bls.n	484a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    483c:	1a5b      	subs	r3, r3, r1
    483e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4842:	f004 f8e1 	bl	8a08 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4846:	4638      	mov	r0, r7
    4848:	e7d0      	b.n	47ec <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    484a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    484e:	e7fa      	b.n	4846 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    4850:	4630      	mov	r0, r6
}
    4852:	b009      	add	sp, #36	; 0x24
    4854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    4858:	f7ff bebc 	b.w	45d4 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    485c:	a801      	add	r0, sp, #4
    485e:	f004 f8ad 	bl	89bc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4862:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4866:	2b05      	cmp	r3, #5
    4868:	d104      	bne.n	4874 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    486a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    486e:	f013 0f60 	tst.w	r3, #96	; 0x60
    4872:	d0a9      	beq.n	47c8 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    4874:	4b03      	ldr	r3, [pc, #12]	; (4884 <usbd_event_handler+0x118>)
			evt.evt_type = USBD_EVT_EP;
    4876:	2401      	movs	r4, #1
			evt.evt.ep_evt.ep = ep_ctx;
    4878:	9305      	str	r3, [sp, #20]
	if (put_evt) {
    487a:	e78c      	b.n	4796 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    487c:	2402      	movs	r4, #2
    487e:	e78a      	b.n	4796 <usbd_event_handler+0x2a>
    4880:	200137f0 	.word	0x200137f0
    4884:	2001395c 	.word	0x2001395c

00004888 <eps_ctx_init>:
{
    4888:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    488a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    488c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4890:	b2c0      	uxtb	r0, r0
    4892:	f7ff fe21 	bl	44d8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4896:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4898:	f007 f82c 	bl	b8f4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    489c:	2c08      	cmp	r4, #8
    489e:	d1f5      	bne.n	488c <eps_ctx_init+0x4>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    48a0:	2400      	movs	r4, #0
    48a2:	4d0e      	ldr	r5, [pc, #56]	; (48dc <eps_ctx_init+0x54>)
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    48a4:	b2e0      	uxtb	r0, r4
    48a6:	f7ff fe17 	bl	44d8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    48aa:	6903      	ldr	r3, [r0, #16]
    48ac:	b903      	cbnz	r3, 48b0 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    48ae:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    48b0:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    48b2:	f007 f81f 	bl	b8f4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    48b6:	2c08      	cmp	r4, #8
    48b8:	f105 0540 	add.w	r5, r5, #64	; 0x40
    48bc:	d1f2      	bne.n	48a4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    48be:	4808      	ldr	r0, [pc, #32]	; (48e0 <eps_ctx_init+0x58>)
    48c0:	f007 f818 	bl	b8f4 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    48c4:	4b07      	ldr	r3, [pc, #28]	; (48e4 <eps_ctx_init+0x5c>)
    48c6:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    48ca:	b912      	cbnz	r2, 48d2 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    48cc:	4a06      	ldr	r2, [pc, #24]	; (48e8 <eps_ctx_init+0x60>)
    48ce:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    48d2:	4806      	ldr	r0, [pc, #24]	; (48ec <eps_ctx_init+0x64>)
    48d4:	f007 f80e 	bl	b8f4 <ep_ctx_reset>
}
    48d8:	2000      	movs	r0, #0
    48da:	bd38      	pop	{r3, r4, r5, pc}
    48dc:	20013e80 	.word	0x20013e80
    48e0:	2001393c 	.word	0x2001393c
    48e4:	200137f0 	.word	0x200137f0
    48e8:	20013a80 	.word	0x20013a80
    48ec:	20013a5c 	.word	0x20013a5c

000048f0 <usbd_work_handler>:
{
    48f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48f4:	4607      	mov	r7, r0
	return get_usbd_ctx()->ready;
    48f6:	4cad      	ldr	r4, [pc, #692]	; (4bac <usbd_work_handler+0x2bc>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    48f8:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4bb0 <usbd_work_handler+0x2c0>
{
    48fc:	b085      	sub	sp, #20
	while ((ev = usbd_evt_get()) != NULL) {
    48fe:	f7ff fe1b 	bl	4538 <usbd_evt_get>
    4902:	b910      	cbnz	r0, 490a <usbd_work_handler+0x1a>
}
    4904:	b005      	add	sp, #20
    4906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    490a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    490e:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4910:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4914:	b93b      	cbnz	r3, 4926 <usbd_work_handler+0x36>
    4916:	2a00      	cmp	r2, #0
    4918:	f000 8088 	beq.w	4a2c <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    491c:	4649      	mov	r1, r9
    491e:	48a4      	ldr	r0, [pc, #656]	; (4bb0 <usbd_work_handler+0x2c0>)
    4920:	f009 fcb7 	bl	e292 <k_mem_slab_free>
}
    4924:	e7eb      	b.n	48fe <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    4926:	2a04      	cmp	r2, #4
    4928:	d844      	bhi.n	49b4 <usbd_work_handler+0xc4>
    492a:	e8df f012 	tbh	[pc, r2, lsl #1]
    492e:	007f      	.short	0x007f
    4930:	00fe0005 	.word	0x00fe0005
    4934:	012f0114 	.word	0x012f0114
	switch (ep_evt->evt_type) {
    4938:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    493a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    493c:	2b03      	cmp	r3, #3
    493e:	d839      	bhi.n	49b4 <usbd_work_handler+0xc4>
    4940:	e8df f003 	tbb	[pc, r3]
    4944:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4948:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    494a:	2208      	movs	r2, #8
    494c:	2100      	movs	r1, #0
    494e:	4630      	mov	r0, r6
    4950:	f006 ffb8 	bl	b8c4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4954:	4b97      	ldr	r3, [pc, #604]	; (4bb4 <usbd_work_handler+0x2c4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4956:	4898      	ldr	r0, [pc, #608]	; (4bb8 <usbd_work_handler+0x2c8>)
    4958:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    495c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    495e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4962:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4964:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4968:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    496c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4970:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4972:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4976:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    497a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    497e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4980:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4984:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4988:	4631      	mov	r1, r6
    498a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    498e:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4990:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4992:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4994:	f006 ff8b 	bl	b8ae <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4998:	682b      	ldr	r3, [r5, #0]
    499a:	2100      	movs	r1, #0
    499c:	7a68      	ldrb	r0, [r5, #9]
    499e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    49a0:	f996 3000 	ldrsb.w	r3, [r6]
    49a4:	2b00      	cmp	r3, #0
    49a6:	db08      	blt.n	49ba <usbd_work_handler+0xca>
    49a8:	88f3      	ldrh	r3, [r6, #6]
    49aa:	b133      	cbz	r3, 49ba <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    49ac:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    49b0:	f004 f82a 	bl	8a08 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    49b4:	4649      	mov	r1, r9
    49b6:	4640      	mov	r0, r8
    49b8:	e7b2      	b.n	4920 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    49ba:	2300      	movs	r3, #0
    49bc:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    49c0:	e7f8      	b.n	49b4 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    49c2:	7f6b      	ldrb	r3, [r5, #29]
    49c4:	2b00      	cmp	r3, #0
    49c6:	d0f5      	beq.n	49b4 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    49c8:	7f2b      	ldrb	r3, [r5, #28]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d0f2      	beq.n	49b4 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    49ce:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	ep_ctx->read_pending = false;
    49d4:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49da:	4878      	ldr	r0, [pc, #480]	; (4bbc <usbd_work_handler+0x2cc>)
	ep_ctx->read_complete = false;
    49dc:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49de:	f006 ff9f 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    49e2:	696b      	ldr	r3, [r5, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    49e4:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    49e6:	9301      	str	r3, [sp, #4]
    49e8:	686b      	ldr	r3, [r5, #4]
    49ea:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    49ee:	7a68      	ldrb	r0, [r5, #9]
    49f0:	f003 fe16 	bl	8620 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    49f4:	4871      	ldr	r0, [pc, #452]	; (4bbc <usbd_work_handler+0x2cc>)
    49f6:	f006 ff95 	bl	b924 <k_mutex_unlock.isra.0>
    49fa:	e7db      	b.n	49b4 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    49fc:	2101      	movs	r1, #1
    49fe:	682b      	ldr	r3, [r5, #0]
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4a00:	7a68      	ldrb	r0, [r5, #9]
    4a02:	4798      	blx	r3
		break;
    4a04:	e7d6      	b.n	49b4 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4a06:	7aab      	ldrb	r3, [r5, #10]
    4a08:	b96b      	cbnz	r3, 4a26 <usbd_work_handler+0x136>
    4a0a:	7feb      	ldrb	r3, [r5, #31]
    4a0c:	b95b      	cbnz	r3, 4a26 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a0e:	486b      	ldr	r0, [pc, #428]	; (4bbc <usbd_work_handler+0x2cc>)
    4a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a18:	f006 ff82 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4a1c:	f004 f828 	bl	8a70 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4a20:	4866      	ldr	r0, [pc, #408]	; (4bbc <usbd_work_handler+0x2cc>)
    4a22:	f006 ff7f 	bl	b924 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4a26:	2102      	movs	r1, #2
    4a28:	682b      	ldr	r3, [r5, #0]
    4a2a:	e7e9      	b.n	4a00 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    4a2c:	7a02      	ldrb	r2, [r0, #8]
    4a2e:	2a04      	cmp	r2, #4
    4a30:	d8c0      	bhi.n	49b4 <usbd_work_handler+0xc4>
    4a32:	e8df f002 	tbb	[pc, r2]
    4a36:	0355      	.short	0x0355
    4a38:	631f      	.short	0x631f
    4a3a:	6f          	.byte	0x6f
    4a3b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4a3c:	f003 fd78 	bl	8530 <nrfx_usbd_is_enabled>
    4a40:	4605      	mov	r5, r0
    4a42:	2800      	cmp	r0, #0
    4a44:	d1b6      	bne.n	49b4 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    4a46:	f003 fd1f 	bl	8488 <nrfx_usbd_enable>
    4a4a:	2301      	movs	r3, #1
    4a4c:	495c      	ldr	r1, [pc, #368]	; (4bc0 <usbd_work_handler+0x2d0>)
    4a4e:	e8d1 2fef 	ldaex	r2, [r1]
    4a52:	2a00      	cmp	r2, #0
    4a54:	d103      	bne.n	4a5e <usbd_work_handler+0x16e>
    4a56:	e8c1 3fe0 	stlex	r0, r3, [r1]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d1f7      	bne.n	4a4e <usbd_work_handler+0x15e>
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4a5e:	d1a9      	bne.n	49b4 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4a60:	f841 5c08 	str.w	r5, [r1, #-8]
    4a64:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4a68:	69e0      	ldr	r0, [r4, #28]
    4a6a:	3914      	subs	r1, #20
    4a6c:	6163      	str	r3, [r4, #20]
    4a6e:	f006 fad1 	bl	b014 <onoff_request>
    4a72:	e79f      	b.n	49b4 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    4a74:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4a76:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4a7a:	b2c0      	uxtb	r0, r0
    4a7c:	f7ff fd2c 	bl	44d8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4a80:	7a03      	ldrb	r3, [r0, #8]
    4a82:	b113      	cbz	r3, 4a8a <usbd_work_handler+0x19a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a84:	7a40      	ldrb	r0, [r0, #9]
    4a86:	f004 f9a1 	bl	8dcc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4a8a:	3501      	adds	r5, #1
    4a8c:	2d08      	cmp	r5, #8
    4a8e:	d1f2      	bne.n	4a76 <usbd_work_handler+0x186>
		if (ep_ctx->cfg.en) {
    4a90:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4a94:	b11b      	cbz	r3, 4a9e <usbd_work_handler+0x1ae>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a96:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4a9a:	f004 f997 	bl	8dcc <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4a9e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4aa0:	b2e8      	uxtb	r0, r5
    4aa2:	f7ff fd19 	bl	44d8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4aa6:	7a03      	ldrb	r3, [r0, #8]
    4aa8:	b113      	cbz	r3, 4ab0 <usbd_work_handler+0x1c0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4aaa:	7a40      	ldrb	r0, [r0, #9]
    4aac:	f004 f98e 	bl	8dcc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4ab0:	3501      	adds	r5, #1
    4ab2:	2d08      	cmp	r5, #8
    4ab4:	d1f4      	bne.n	4aa0 <usbd_work_handler+0x1b0>
		if (ep_ctx->cfg.en) {
    4ab6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4aba:	b11b      	cbz	r3, 4ac4 <usbd_work_handler+0x1d4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4abc:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4ac0:	f004 f984 	bl	8dcc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(IS_ENABLED(CONFIG_USB_DEVICE_SOF));
    4ac4:	2000      	movs	r0, #0
    4ac6:	f003 fd15 	bl	84f4 <nrfx_usbd_start>
		ctx->ready = true;
    4aca:	2301      	movs	r3, #1
    4acc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4ad0:	6823      	ldr	r3, [r4, #0]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	f43f af6e 	beq.w	49b4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4ad8:	2100      	movs	r1, #0
    4ada:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4adc:	4798      	blx	r3
    4ade:	e769      	b.n	49b4 <usbd_work_handler+0xc4>
		ctx->ready = false;
    4ae0:	2500      	movs	r5, #0
    4ae2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4ae6:	f004 f92f 	bl	8d48 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4aea:	f7ff fe23 	bl	4734 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4aee:	6823      	ldr	r3, [r4, #0]
    4af0:	2b00      	cmp	r3, #0
    4af2:	f43f af5f 	beq.w	49b4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4af6:	4629      	mov	r1, r5
    4af8:	2004      	movs	r0, #4
    4afa:	e7ef      	b.n	4adc <usbd_work_handler+0x1ec>
		if (dev_ready()) {
    4afc:	2b00      	cmp	r3, #0
    4afe:	f43f af59 	beq.w	49b4 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    4b02:	f003 fd1f 	bl	8544 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4b06:	6823      	ldr	r3, [r4, #0]
    4b08:	2b00      	cmp	r3, #0
    4b0a:	f43f af53 	beq.w	49b4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4b0e:	2100      	movs	r1, #0
    4b10:	2005      	movs	r0, #5
    4b12:	e7e3      	b.n	4adc <usbd_work_handler+0x1ec>
		if (ctx->status_cb && dev_ready()) {
    4b14:	6822      	ldr	r2, [r4, #0]
    4b16:	2a00      	cmp	r2, #0
    4b18:	f43f af4c 	beq.w	49b4 <usbd_work_handler+0xc4>
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	f43f af49 	beq.w	49b4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4b22:	2100      	movs	r1, #0
    4b24:	2006      	movs	r0, #6
    4b26:	4790      	blx	r2
    4b28:	e744      	b.n	49b4 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4b2a:	f107 0510 	add.w	r5, r7, #16
    4b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b36:	4628      	mov	r0, r5
    4b38:	f006 fef2 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4b3c:	f7ff fea4 	bl	4888 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4b40:	4628      	mov	r0, r5
    4b42:	f006 feef 	bl	b924 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4b46:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	f43f af32 	beq.w	49b4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4b50:	2100      	movs	r1, #0
    4b52:	2001      	movs	r0, #1
    4b54:	e7c2      	b.n	4adc <usbd_work_handler+0x1ec>
	if (ep_ctx->cfg.en) {
    4b56:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4b5a:	b17b      	cbz	r3, 4b7c <usbd_work_handler+0x28c>
		ep_ctx->read_pending = true;
    4b5c:	2501      	movs	r5, #1
    4b5e:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4b62:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4b66:	f7ff fcfd 	bl	4564 <usbd_evt_alloc>
		if (!ev) {
    4b6a:	b138      	cbz	r0, 4b7c <usbd_work_handler+0x28c>
		ev->evt.ep_evt.ep = ep_ctx;
    4b6c:	4a15      	ldr	r2, [pc, #84]	; (4bc4 <usbd_work_handler+0x2d4>)
		ev->evt_type = USBD_EVT_EP;
    4b6e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4b70:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4b72:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4b74:	f7ff fca2 	bl	44bc <usbd_evt_put>
		usbd_work_schedule();
    4b78:	f7ff fca6 	bl	44c8 <usbd_work_schedule>
			if (ctx->status_cb) {
    4b7c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4b80:	2b00      	cmp	r3, #0
    4b82:	f43f af17 	beq.w	49b4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    4b86:	2100      	movs	r1, #0
    4b88:	200a      	movs	r0, #10
    4b8a:	e7a7      	b.n	4adc <usbd_work_handler+0x1ec>
	nrfx_power_usbevt_disable();
    4b8c:	f004 f98a 	bl	8ea4 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    4b90:	f004 f8da 	bl	8d48 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4b94:	f003 fc6e 	bl	8474 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4b98:	f7ff fcd6 	bl	4548 <usbd_evt_flush>
	ret = eps_ctx_init();
    4b9c:	f7ff fe74 	bl	4888 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4ba0:	f004 f978 	bl	8e94 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4ba4:	4808      	ldr	r0, [pc, #32]	; (4bc8 <usbd_work_handler+0x2d8>)
    4ba6:	f003 fcf9 	bl	859c <nrfx_usbd_init>
}
    4baa:	e703      	b.n	49b4 <usbd_work_handler+0xc4>
    4bac:	200137f0 	.word	0x200137f0
    4bb0:	200022f8 	.word	0x200022f8
    4bb4:	50036000 	.word	0x50036000
    4bb8:	200137f4 	.word	0x200137f4
    4bbc:	20013828 	.word	0x20013828
    4bc0:	20013810 	.word	0x20013810
    4bc4:	20013a5c 	.word	0x20013a5c
    4bc8:	0000476d 	.word	0x0000476d

00004bcc <usb_dc_attach>:
{
    4bcc:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4bce:	4d15      	ldr	r5, [pc, #84]	; (4c24 <usb_dc_attach+0x58>)
    4bd0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4bd4:	bb24      	cbnz	r4, 4c20 <usb_dc_attach+0x54>
	return z_impl_k_mutex_init(mutex);
    4bd6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4bda:	f009 fba2 	bl	e322 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4bde:	2002      	movs	r0, #2
    4be0:	f000 fb40 	bl	5264 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4be4:	4622      	mov	r2, r4
    4be6:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4be8:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4bea:	2036      	movs	r0, #54	; 0x36
    4bec:	f7ff f814 	bl	3c18 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4bf0:	f004 f950 	bl	8e94 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    4bf4:	f7ff fe48 	bl	4888 <eps_ctx_init>
	if (ret == 0) {
    4bf8:	4604      	mov	r4, r0
    4bfa:	b910      	cbnz	r0, 4c02 <usb_dc_attach+0x36>
		ctx->attached = true;
    4bfc:	2301      	movs	r3, #1
    4bfe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4c02:	4b09      	ldr	r3, [pc, #36]	; (4c28 <usb_dc_attach+0x5c>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	b10b      	cbz	r3, 4c0c <usb_dc_attach+0x40>
		usbd_work_schedule();
    4c08:	f7ff fc5e 	bl	44c8 <usbd_work_schedule>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4c0c:	4b07      	ldr	r3, [pc, #28]	; (4c2c <usb_dc_attach+0x60>)
    4c0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    4c12:	07db      	lsls	r3, r3, #31
    4c14:	d502      	bpl.n	4c1c <usb_dc_attach+0x50>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4c16:	2000      	movs	r0, #0
    4c18:	f7ff fd30 	bl	467c <usb_dc_power_event_handler>
}
    4c1c:	4620      	mov	r0, r4
    4c1e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4c20:	2400      	movs	r4, #0
    4c22:	e7fb      	b.n	4c1c <usb_dc_attach+0x50>
    4c24:	200137f0 	.word	0x200137f0
    4c28:	20002378 	.word	0x20002378
    4c2c:	50037000 	.word	0x50037000

00004c30 <usb_dc_detach>:
{
    4c30:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c3a:	480b      	ldr	r0, [pc, #44]	; (4c68 <usb_dc_detach+0x38>)
    4c3c:	f006 fe70 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
	usbd_evt_flush();
    4c40:	f7ff fc82 	bl	4548 <usbd_evt_flush>
	if (nrfx_usbd_is_enabled()) {
    4c44:	f003 fc74 	bl	8530 <nrfx_usbd_is_enabled>
    4c48:	b108      	cbz	r0, 4c4e <usb_dc_detach+0x1e>
		nrfx_usbd_disable();
    4c4a:	f004 f87d 	bl	8d48 <nrfx_usbd_disable>
	ctx->attached = false;
    4c4e:	2400      	movs	r4, #0
	(void)hfxo_stop(ctx);
    4c50:	f7ff fd70 	bl	4734 <hfxo_stop.constprop.0.isra.0>
	nrfx_power_usbevt_disable();
    4c54:	f004 f926 	bl	8ea4 <nrfx_usbreg_disable>
	ctx->attached = false;
    4c58:	4804      	ldr	r0, [pc, #16]	; (4c6c <usb_dc_detach+0x3c>)
    4c5a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    4c5e:	3038      	adds	r0, #56	; 0x38
    4c60:	f006 fe60 	bl	b924 <k_mutex_unlock.isra.0>
}
    4c64:	4620      	mov	r0, r4
    4c66:	bd10      	pop	{r4, pc}
    4c68:	20013828 	.word	0x20013828
    4c6c:	200137f0 	.word	0x200137f0

00004c70 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4c70:	4b07      	ldr	r3, [pc, #28]	; (4c90 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4c72:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4c76:	b13a      	cbz	r2, 4c88 <usb_dc_set_address+0x18>
    4c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	bf14      	ite	ne
    4c80:	2000      	movne	r0, #0
    4c82:	f06f 0012 	mvneq.w	r0, #18
    4c86:	4770      	bx	lr
    4c88:	f06f 0012 	mvn.w	r0, #18
}
    4c8c:	4770      	bx	lr
    4c8e:	bf00      	nop
    4c90:	200137f0 	.word	0x200137f0

00004c94 <usb_dc_ep_configure>:
{
    4c94:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4c96:	4b10      	ldr	r3, [pc, #64]	; (4cd8 <usb_dc_ep_configure+0x44>)
{
    4c98:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4c9e:	b1c3      	cbz	r3, 4cd2 <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4ca0:	7805      	ldrb	r5, [r0, #0]
    4ca2:	4628      	mov	r0, r5
    4ca4:	f7ff fc18 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4ca8:	b910      	cbnz	r0, 4cb0 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4caa:	f06f 0015 	mvn.w	r0, #21
}
    4cae:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4cb0:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4cb2:	7923      	ldrb	r3, [r4, #4]
    4cb4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4cb6:	8863      	ldrh	r3, [r4, #2]
    4cb8:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4cba:	7820      	ldrb	r0, [r4, #0]
    4cbc:	8861      	ldrh	r1, [r4, #2]
    4cbe:	f010 0f08 	tst.w	r0, #8
    4cc2:	d102      	bne.n	4cca <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4cc4:	1e4b      	subs	r3, r1, #1
    4cc6:	420b      	tst	r3, r1
    4cc8:	d1ef      	bne.n	4caa <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4cca:	f008 ff4d 	bl	db68 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4cce:	2000      	movs	r0, #0
    4cd0:	e7ed      	b.n	4cae <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    4cd2:	f06f 0012 	mvn.w	r0, #18
    4cd6:	e7ea      	b.n	4cae <usb_dc_ep_configure+0x1a>
    4cd8:	200137f0 	.word	0x200137f0

00004cdc <usb_dc_ep_set_stall>:
{
    4cdc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4cde:	4b12      	ldr	r3, [pc, #72]	; (4d28 <usb_dc_ep_set_stall+0x4c>)
{
    4ce0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4ce2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4ce6:	b1ca      	cbz	r2, 4d1c <usb_dc_ep_set_stall+0x40>
    4ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4cec:	b1b3      	cbz	r3, 4d1c <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4cee:	f7ff fbf3 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4cf2:	4604      	mov	r4, r0
    4cf4:	b1a8      	cbz	r0, 4d22 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    4cf6:	7a83      	ldrb	r3, [r0, #10]
    4cf8:	2b01      	cmp	r3, #1
    4cfa:	d012      	beq.n	4d22 <usb_dc_ep_set_stall+0x46>
    4cfc:	d907      	bls.n	4d0e <usb_dc_ep_set_stall+0x32>
    4cfe:	3b02      	subs	r3, #2
    4d00:	2b01      	cmp	r3, #1
    4d02:	d907      	bls.n	4d14 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.len = 0U;
    4d04:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4d06:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
    4d08:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4d0a:	61a3      	str	r3, [r4, #24]
}
    4d0c:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4d0e:	f003 feb7 	bl	8a80 <nrfx_usbd_setup_stall>
		break;
    4d12:	e7f7      	b.n	4d04 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4d14:	4628      	mov	r0, r5
    4d16:	f003 fe23 	bl	8960 <nrfx_usbd_ep_stall>
		break;
    4d1a:	e7f3      	b.n	4d04 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4d1c:	f06f 0012 	mvn.w	r0, #18
    4d20:	e7f4      	b.n	4d0c <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    4d22:	f06f 0015 	mvn.w	r0, #21
    4d26:	e7f1      	b.n	4d0c <usb_dc_ep_set_stall+0x30>
    4d28:	200137f0 	.word	0x200137f0

00004d2c <usb_dc_ep_clear_stall>:
{
    4d2c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d2e:	4b0e      	ldr	r3, [pc, #56]	; (4d68 <usb_dc_ep_clear_stall+0x3c>)
{
    4d30:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4d32:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4d36:	b182      	cbz	r2, 4d5a <usb_dc_ep_clear_stall+0x2e>
    4d38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4d3c:	b16b      	cbz	r3, 4d5a <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4d3e:	f7ff fbcb 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4d42:	b168      	cbz	r0, 4d60 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4d44:	f015 0408 	ands.w	r4, r5, #8
    4d48:	d10a      	bne.n	4d60 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4d4a:	4628      	mov	r0, r5
    4d4c:	f003 fe2a 	bl	89a4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4d50:	4628      	mov	r0, r5
    4d52:	f004 f88f 	bl	8e74 <nrfx_usbd_ep_stall_clear>
	return 0;
    4d56:	4620      	mov	r0, r4
}
    4d58:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4d5a:	f06f 0012 	mvn.w	r0, #18
    4d5e:	e7fb      	b.n	4d58 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4d60:	f06f 0015 	mvn.w	r0, #21
    4d64:	e7f8      	b.n	4d58 <usb_dc_ep_clear_stall+0x2c>
    4d66:	bf00      	nop
    4d68:	200137f0 	.word	0x200137f0

00004d6c <usb_dc_ep_is_stalled>:
{
    4d6c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d6e:	4b0c      	ldr	r3, [pc, #48]	; (4da0 <usb_dc_ep_is_stalled+0x34>)
{
    4d70:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4d72:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4d76:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4d78:	b162      	cbz	r2, 4d94 <usb_dc_ep_is_stalled+0x28>
    4d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4d7e:	b14b      	cbz	r3, 4d94 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4d80:	f7ff fbaa 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4d84:	b148      	cbz	r0, 4d9a <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4d86:	b144      	cbz	r4, 4d9a <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4d88:	4628      	mov	r0, r5
    4d8a:	f003 fdf1 	bl	8970 <nrfx_usbd_ep_stall_check>
    4d8e:	7020      	strb	r0, [r4, #0]
	return 0;
    4d90:	2000      	movs	r0, #0
}
    4d92:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4d94:	f06f 0012 	mvn.w	r0, #18
    4d98:	e7fb      	b.n	4d92 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4d9a:	f06f 0015 	mvn.w	r0, #21
    4d9e:	e7f8      	b.n	4d92 <usb_dc_ep_is_stalled+0x26>
    4da0:	200137f0 	.word	0x200137f0

00004da4 <usb_dc_ep_enable>:
{
    4da4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4da6:	4e13      	ldr	r6, [pc, #76]	; (4df4 <usb_dc_ep_enable+0x50>)
{
    4da8:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4daa:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    4dae:	b1c3      	cbz	r3, 4de2 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4db0:	f7ff fb92 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4db4:	4605      	mov	r5, r0
    4db6:	b1b8      	cbz	r0, 4de8 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4db8:	0723      	lsls	r3, r4, #28
    4dba:	d405      	bmi.n	4dc8 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4dbc:	4620      	mov	r0, r4
    4dbe:	f003 fdf1 	bl	89a4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4dc2:	4620      	mov	r0, r4
    4dc4:	f004 f856 	bl	8e74 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4dc8:	7a2b      	ldrb	r3, [r5, #8]
    4dca:	b983      	cbnz	r3, 4dee <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4dcc:	2301      	movs	r3, #1
    4dce:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4dd0:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4dd4:	b90b      	cbnz	r3, 4dda <usb_dc_ep_enable+0x36>
	return 0;
    4dd6:	2000      	movs	r0, #0
}
    4dd8:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4dda:	4620      	mov	r0, r4
    4ddc:	f003 fff6 	bl	8dcc <nrfx_usbd_ep_enable>
    4de0:	e7f9      	b.n	4dd6 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4de2:	f06f 0012 	mvn.w	r0, #18
    4de6:	e7f7      	b.n	4dd8 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4de8:	f06f 0015 	mvn.w	r0, #21
    4dec:	e7f4      	b.n	4dd8 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4dee:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4df2:	e7f1      	b.n	4dd8 <usb_dc_ep_enable+0x34>
    4df4:	200137f0 	.word	0x200137f0

00004df8 <usb_dc_ep_write>:
{
    4df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4dfc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4ee4 <usb_dc_ep_write+0xec>
{
    4e00:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    4e02:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4e06:	4607      	mov	r7, r0
    4e08:	4689      	mov	r9, r1
    4e0a:	4615      	mov	r5, r2
    4e0c:	b085      	sub	sp, #20
	if (!dev_attached() || !dev_ready()) {
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d061      	beq.n	4ed6 <usb_dc_ep_write+0xde>
    4e12:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4e16:	2b00      	cmp	r3, #0
    4e18:	d05d      	beq.n	4ed6 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4e1a:	0603      	lsls	r3, r0, #24
    4e1c:	d55e      	bpl.n	4edc <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    4e1e:	f7ff fb5b 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4e22:	4604      	mov	r4, r0
    4e24:	2800      	cmp	r0, #0
    4e26:	d059      	beq.n	4edc <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    4e28:	7a03      	ldrb	r3, [r0, #8]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d056      	beq.n	4edc <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e36:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4e3a:	f006 fd71 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4e3e:	7fa3      	ldrb	r3, [r4, #30]
    4e40:	b14b      	cbz	r3, 4e56 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    4e42:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4e46:	f006 fd6d 	bl	b924 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4e4a:	f06f 040a 	mvn.w	r4, #10
}
    4e4e:	4620      	mov	r0, r4
    4e50:	b005      	add	sp, #20
    4e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4e56:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    4e58:	b1c5      	cbz	r5, 4e8c <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4e5a:	b33b      	cbz	r3, 4eac <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    4e5c:	2301      	movs	r3, #1
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4e5e:	f04f 0800 	mov.w	r8, #0
	ep_ctx->write_in_progress = true;
    4e62:	77a3      	strb	r3, [r4, #30]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4e64:	4638      	mov	r0, r7
    4e66:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4e68:	e9cd 9501 	strd	r9, r5, [sp, #4]
    4e6c:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4e70:	f003 fbd6 	bl	8620 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4e74:	4b1c      	ldr	r3, [pc, #112]	; (4ee8 <usb_dc_ep_write+0xf0>)
    4e76:	4298      	cmp	r0, r3
    4e78:	d029      	beq.n	4ece <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    4e7a:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    4e7e:	bb1e      	cbnz	r6, 4ec8 <usb_dc_ep_write+0xd0>
		result = -EIO;
    4e80:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4e84:	4819      	ldr	r0, [pc, #100]	; (4eec <usb_dc_ep_write+0xf4>)
    4e86:	f006 fd4d 	bl	b924 <k_mutex_unlock.isra.0>
	return result;
    4e8a:	e7e0      	b.n	4e4e <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4e8c:	7fe2      	ldrb	r2, [r4, #31]
    4e8e:	b102      	cbz	r2, 4e92 <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    4e90:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4e92:	2b00      	cmp	r3, #0
    4e94:	d1e2      	bne.n	4e5c <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4e96:	f003 fdfb 	bl	8a90 <nrfx_usbd_last_setup_dir_get>
    4e9a:	42b8      	cmp	r0, r7
    4e9c:	d0de      	beq.n	4e5c <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    4e9e:	f003 fde7 	bl	8a70 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4ea2:	4812      	ldr	r0, [pc, #72]	; (4eec <usb_dc_ep_write+0xf4>)
    4ea4:	f006 fd3e 	bl	b924 <k_mutex_unlock.isra.0>
		return 0;
    4ea8:	2400      	movs	r4, #0
    4eaa:	e7d0      	b.n	4e4e <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4eac:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4eb0:	42ab      	cmp	r3, r5
    4eb2:	d9f0      	bls.n	4e96 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4eb4:	6862      	ldr	r2, [r4, #4]
    4eb6:	fbb5 f3f2 	udiv	r3, r5, r2
    4eba:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d1e9      	bne.n	4e96 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    4ec2:	2301      	movs	r3, #1
    4ec4:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    4ec6:	e7e6      	b.n	4e96 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    4ec8:	f8c6 8000 	str.w	r8, [r6]
    4ecc:	e7d8      	b.n	4e80 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4ece:	b106      	cbz	r6, 4ed2 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4ed0:	6035      	str	r5, [r6, #0]
	int result = 0;
    4ed2:	2400      	movs	r4, #0
    4ed4:	e7d6      	b.n	4e84 <usb_dc_ep_write+0x8c>
		return -ENODEV;
    4ed6:	f06f 0412 	mvn.w	r4, #18
    4eda:	e7b8      	b.n	4e4e <usb_dc_ep_write+0x56>
		return -EINVAL;
    4edc:	f06f 0415 	mvn.w	r4, #21
    4ee0:	e7b5      	b.n	4e4e <usb_dc_ep_write+0x56>
    4ee2:	bf00      	nop
    4ee4:	200137f0 	.word	0x200137f0
    4ee8:	0bad0000 	.word	0x0bad0000
    4eec:	20013828 	.word	0x20013828

00004ef0 <usb_dc_ep_read_wait>:
{
    4ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ef4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4ef6:	4b20      	ldr	r3, [pc, #128]	; (4f78 <usb_dc_ep_read_wait+0x88>)
{
    4ef8:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4efa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4efe:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4f00:	2a00      	cmp	r2, #0
    4f02:	d033      	beq.n	4f6c <usb_dc_ep_read_wait+0x7c>
    4f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4f08:	b383      	cbz	r3, 4f6c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f0a:	0603      	lsls	r3, r0, #24
    4f0c:	d431      	bmi.n	4f72 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4f0e:	b901      	cbnz	r1, 4f12 <usb_dc_ep_read_wait+0x22>
    4f10:	bb7f      	cbnz	r7, 4f72 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    4f12:	f7ff fae1 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4f16:	4604      	mov	r4, r0
    4f18:	b358      	cbz	r0, 4f72 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4f1a:	7a03      	ldrb	r3, [r0, #8]
    4f1c:	b34b      	cbz	r3, 4f72 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f26:	4815      	ldr	r0, [pc, #84]	; (4f7c <usb_dc_ep_read_wait+0x8c>)
    4f28:	f006 fcfa 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4f2c:	68e3      	ldr	r3, [r4, #12]
    4f2e:	46b8      	mov	r8, r7
    4f30:	429f      	cmp	r7, r3
    4f32:	bf28      	it	cs
    4f34:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    4f36:	b946      	cbnz	r6, 4f4a <usb_dc_ep_read_wait+0x5a>
    4f38:	b93f      	cbnz	r7, 4f4a <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    4f3a:	b105      	cbz	r5, 4f3e <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4f3c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4f3e:	480f      	ldr	r0, [pc, #60]	; (4f7c <usb_dc_ep_read_wait+0x8c>)
    4f40:	f006 fcf0 	bl	b924 <k_mutex_unlock.isra.0>
		return 0;
    4f44:	2000      	movs	r0, #0
}
    4f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4f4a:	4642      	mov	r2, r8
    4f4c:	4630      	mov	r0, r6
    4f4e:	69a1      	ldr	r1, [r4, #24]
    4f50:	f006 fcad 	bl	b8ae <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4f54:	69a3      	ldr	r3, [r4, #24]
    4f56:	4443      	add	r3, r8
    4f58:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4f5a:	68e3      	ldr	r3, [r4, #12]
    4f5c:	eba3 0308 	sub.w	r3, r3, r8
    4f60:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    4f62:	2d00      	cmp	r5, #0
    4f64:	d0eb      	beq.n	4f3e <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    4f66:	f8c5 8000 	str.w	r8, [r5]
    4f6a:	e7e8      	b.n	4f3e <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    4f6c:	f06f 0012 	mvn.w	r0, #18
    4f70:	e7e9      	b.n	4f46 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    4f72:	f06f 0015 	mvn.w	r0, #21
    4f76:	e7e6      	b.n	4f46 <usb_dc_ep_read_wait+0x56>
    4f78:	200137f0 	.word	0x200137f0
    4f7c:	20013828 	.word	0x20013828

00004f80 <usb_dc_ep_read_continue>:
{
    4f80:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4f82:	4d1e      	ldr	r5, [pc, #120]	; (4ffc <usb_dc_ep_read_continue+0x7c>)
{
    4f84:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4f86:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    4f8a:	b382      	cbz	r2, 4fee <usb_dc_ep_read_continue+0x6e>
    4f8c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    4f90:	b36a      	cbz	r2, 4fee <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f92:	061b      	lsls	r3, r3, #24
    4f94:	d42e      	bmi.n	4ff4 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    4f96:	f7ff fa9f 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    4f9a:	4604      	mov	r4, r0
    4f9c:	b350      	cbz	r0, 4ff4 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    4f9e:	7a03      	ldrb	r3, [r0, #8]
    4fa0:	b343      	cbz	r3, 4ff4 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4faa:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4fae:	f006 fcb7 	bl	b920 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    4fb2:	68e3      	ldr	r3, [r4, #12]
    4fb4:	b9b3      	cbnz	r3, 4fe4 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    4fb6:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4fb8:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4fba:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4fbc:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4fbe:	7f63      	ldrb	r3, [r4, #29]
    4fc0:	b183      	cbz	r3, 4fe4 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    4fc2:	f7ff facf 	bl	4564 <usbd_evt_alloc>
			if (!ev) {
    4fc6:	b930      	cbnz	r0, 4fd6 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4fc8:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4fcc:	f006 fcaa 	bl	b924 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4fd0:	f06f 000b 	mvn.w	r0, #11
}
    4fd4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    4fd6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4fd8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4fda:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4fdc:	f7ff fa6e 	bl	44bc <usbd_evt_put>
			usbd_work_schedule();
    4fe0:	f7ff fa72 	bl	44c8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4fe4:	4806      	ldr	r0, [pc, #24]	; (5000 <usb_dc_ep_read_continue+0x80>)
    4fe6:	f006 fc9d 	bl	b924 <k_mutex_unlock.isra.0>
	return 0;
    4fea:	2000      	movs	r0, #0
    4fec:	e7f2      	b.n	4fd4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4fee:	f06f 0012 	mvn.w	r0, #18
    4ff2:	e7ef      	b.n	4fd4 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    4ff4:	f06f 0015 	mvn.w	r0, #21
    4ff8:	e7ec      	b.n	4fd4 <usb_dc_ep_read_continue+0x54>
    4ffa:	bf00      	nop
    4ffc:	200137f0 	.word	0x200137f0
    5000:	20013828 	.word	0x20013828

00005004 <usb_dc_ep_set_callback>:
{
    5004:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    5006:	4b08      	ldr	r3, [pc, #32]	; (5028 <usb_dc_ep_set_callback+0x24>)
{
    5008:	460c      	mov	r4, r1
	if (!dev_attached()) {
    500a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    500e:	b12b      	cbz	r3, 501c <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    5010:	f7ff fa62 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    5014:	b128      	cbz	r0, 5022 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    5016:	6004      	str	r4, [r0, #0]
	return 0;
    5018:	2000      	movs	r0, #0
}
    501a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    501c:	f06f 0012 	mvn.w	r0, #18
    5020:	e7fb      	b.n	501a <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    5022:	f06f 0015 	mvn.w	r0, #21
    5026:	e7f8      	b.n	501a <usb_dc_ep_set_callback+0x16>
    5028:	200137f0 	.word	0x200137f0

0000502c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    502c:	4b01      	ldr	r3, [pc, #4]	; (5034 <usb_dc_set_status_callback+0x8>)
    502e:	6018      	str	r0, [r3, #0]
}
    5030:	4770      	bx	lr
    5032:	bf00      	nop
    5034:	200137f0 	.word	0x200137f0

00005038 <usb_dc_ep_mps>:
{
    5038:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    503a:	4b07      	ldr	r3, [pc, #28]	; (5058 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    503c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5040:	b123      	cbz	r3, 504c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5042:	f7ff fa49 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    5046:	b120      	cbz	r0, 5052 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    5048:	6840      	ldr	r0, [r0, #4]
}
    504a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    504c:	f06f 0012 	mvn.w	r0, #18
    5050:	e7fb      	b.n	504a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    5052:	f06f 0015 	mvn.w	r0, #21
    5056:	e7f8      	b.n	504a <usb_dc_ep_mps+0x12>
    5058:	200137f0 	.word	0x200137f0

0000505c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    505c:	4b08      	ldr	r3, [pc, #32]	; (5080 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    505e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5060:	1ac3      	subs	r3, r0, r3
{
    5062:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5064:	4907      	ldr	r1, [pc, #28]	; (5084 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5066:	109b      	asrs	r3, r3, #2
{
    5068:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    506a:	4359      	muls	r1, r3
    506c:	2240      	movs	r2, #64	; 0x40
    506e:	4806      	ldr	r0, [pc, #24]	; (5088 <onoff_stop+0x2c>)
    5070:	f006 fcb6 	bl	b9e0 <stop>
	notify(mgr, res);
    5074:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5076:	4601      	mov	r1, r0
	notify(mgr, res);
    5078:	4620      	mov	r0, r4
}
    507a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    507e:	4718      	bx	r3
    5080:	20014094 	.word	0x20014094
    5084:	b6db6db7 	.word	0xb6db6db7
    5088:	0000e9a0 	.word	0x0000e9a0

0000508c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    508c:	2340      	movs	r3, #64	; 0x40
{
    508e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5090:	4c0b      	ldr	r4, [pc, #44]	; (50c0 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5092:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    5094:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5096:	460b      	mov	r3, r1
{
    5098:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    509a:	490a      	ldr	r1, [pc, #40]	; (50c4 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    509c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    509e:	4361      	muls	r1, r4
{
    50a0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    50a2:	4a09      	ldr	r2, [pc, #36]	; (50c8 <onoff_start+0x3c>)
    50a4:	4809      	ldr	r0, [pc, #36]	; (50cc <onoff_start+0x40>)
    50a6:	f006 fcc8 	bl	ba3a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    50aa:	1e01      	subs	r1, r0, #0
    50ac:	da05      	bge.n	50ba <onoff_start+0x2e>
		notify(mgr, err);
    50ae:	4630      	mov	r0, r6
    50b0:	462b      	mov	r3, r5
	}
}
    50b2:	b002      	add	sp, #8
    50b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    50b8:	4718      	bx	r3
}
    50ba:	b002      	add	sp, #8
    50bc:	bd70      	pop	{r4, r5, r6, pc}
    50be:	bf00      	nop
    50c0:	20014094 	.word	0x20014094
    50c4:	b6db6db7 	.word	0xb6db6db7
    50c8:	0000baa7 	.word	0x0000baa7
    50cc:	0000e9a0 	.word	0x0000e9a0

000050d0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    50d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    50d4:	2200      	movs	r2, #0
    50d6:	2101      	movs	r1, #1
{
    50d8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    50da:	2005      	movs	r0, #5
    50dc:	f7fe fd9c 	bl	3c18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    50e0:	4811      	ldr	r0, [pc, #68]	; (5128 <clk_init+0x58>)
    50e2:	f002 f813 	bl	710c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    50e6:	4b11      	ldr	r3, [pc, #68]	; (512c <clk_init+0x5c>)
    50e8:	4298      	cmp	r0, r3
    50ea:	d119      	bne.n	5120 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    50ec:	f002 f81e 	bl	712c <nrfx_clock_enable>
    50f0:	2400      	movs	r4, #0
	return &data->mgr[type];
    50f2:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    50f6:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    50f8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 5130 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    50fc:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    50fe:	4641      	mov	r1, r8
    5100:	fb09 5004 	mla	r0, r9, r4, r5
    5104:	f005 ff73 	bl	afee <onoff_manager_init>
		if (err < 0) {
    5108:	2800      	cmp	r0, #0
    510a:	db07      	blt.n	511c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    510c:	2301      	movs	r3, #1
    510e:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5112:	441c      	add	r4, r3
    5114:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5116:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5118:	d1f0      	bne.n	50fc <clk_init+0x2c>
	}

	return 0;
    511a:	2000      	movs	r0, #0
}
    511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    5120:	f06f 0004 	mvn.w	r0, #4
    5124:	e7fa      	b.n	511c <clk_init+0x4c>
    5126:	bf00      	nop
    5128:	00005169 	.word	0x00005169
    512c:	0bad0000 	.word	0x0bad0000
    5130:	0000ef20 	.word	0x0000ef20

00005134 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5134:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5136:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    5138:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    513a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    513c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    513e:	4808      	ldr	r0, [pc, #32]	; (5160 <clkstarted_handle.constprop.0+0x2c>)
    5140:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    5142:	3378      	adds	r3, #120	; 0x78
    5144:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    5146:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    514a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    514c:	f006 fc35 	bl	b9ba <set_on_state>
	if (callback) {
    5150:	b12d      	cbz	r5, 515e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5152:	4632      	mov	r2, r6
    5154:	462b      	mov	r3, r5
}
    5156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    515a:	4802      	ldr	r0, [pc, #8]	; (5164 <clkstarted_handle.constprop.0+0x30>)
    515c:	4718      	bx	r3
}
    515e:	bd70      	pop	{r4, r5, r6, pc}
    5160:	20014094 	.word	0x20014094
    5164:	0000e9a0 	.word	0x0000e9a0

00005168 <clock_event_handler>:
	switch (event) {
    5168:	2806      	cmp	r0, #6
    516a:	d812      	bhi.n	5192 <clock_event_handler+0x2a>
    516c:	e8df f000 	tbb	[pc, r0]
    5170:	11110f04 	.word	0x11110f04
    5174:	0d11      	.short	0x0d11
    5176:	0b          	.byte	0x0b
    5177:	00          	.byte	0x00
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5178:	4b06      	ldr	r3, [pc, #24]	; (5194 <clock_event_handler+0x2c>)
    517a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    517c:	f010 0007 	ands.w	r0, r0, #7
    5180:	d107      	bne.n	5192 <clock_event_handler+0x2a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5182:	f7ff bfd7 	b.w	5134 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    5186:	2002      	movs	r0, #2
    5188:	e7fb      	b.n	5182 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    518a:	2003      	movs	r0, #3
    518c:	e7f9      	b.n	5182 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    518e:	2001      	movs	r0, #1
    5190:	e7f7      	b.n	5182 <clock_event_handler+0x1a>
}
    5192:	4770      	bx	lr
    5194:	20014094 	.word	0x20014094

00005198 <generic_hfclk_start>:
{
    5198:	b508      	push	{r3, lr}
	__asm__ volatile(
    519a:	f04f 0320 	mov.w	r3, #32
    519e:	f3ef 8111 	mrs	r1, BASEPRI
    51a2:	f383 8812 	msr	BASEPRI_MAX, r3
    51a6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    51aa:	4a12      	ldr	r2, [pc, #72]	; (51f4 <generic_hfclk_start+0x5c>)
    51ac:	6813      	ldr	r3, [r2, #0]
    51ae:	f043 0002 	orr.w	r0, r3, #2
    51b2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    51b4:	07da      	lsls	r2, r3, #31
    51b6:	d408      	bmi.n	51ca <generic_hfclk_start+0x32>
	__asm__ volatile(
    51b8:	f381 8811 	msr	BASEPRI, r1
    51bc:	f3bf 8f6f 	isb	sy
}
    51c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    51c4:	2001      	movs	r0, #1
    51c6:	f008 bb87 	b.w	d8d8 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    51ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    51ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    51d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    51d6:	07db      	lsls	r3, r3, #31
    51d8:	d5ee      	bpl.n	51b8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    51da:	4807      	ldr	r0, [pc, #28]	; (51f8 <generic_hfclk_start+0x60>)
    51dc:	f006 fbed 	bl	b9ba <set_on_state>
    51e0:	f381 8811 	msr	BASEPRI, r1
    51e4:	f3bf 8f6f 	isb	sy
}
    51e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    51ec:	2000      	movs	r0, #0
    51ee:	f7ff bfa1 	b.w	5134 <clkstarted_handle.constprop.0>
    51f2:	bf00      	nop
    51f4:	20014134 	.word	0x20014134
    51f8:	2001410c 	.word	0x2001410c

000051fc <api_blocking_start>:
{
    51fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    51fe:	2200      	movs	r2, #0
    5200:	2301      	movs	r3, #1
    5202:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5206:	466b      	mov	r3, sp
    5208:	4a08      	ldr	r2, [pc, #32]	; (522c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    520a:	f8cd d000 	str.w	sp, [sp]
    520e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5212:	f006 fc41 	bl	ba98 <api_start>
	if (err < 0) {
    5216:	2800      	cmp	r0, #0
    5218:	db05      	blt.n	5226 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    521a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    521e:	2300      	movs	r3, #0
    5220:	4668      	mov	r0, sp
    5222:	f004 f9e7 	bl	95f4 <z_impl_k_sem_take>
}
    5226:	b005      	add	sp, #20
    5228:	f85d fb04 	ldr.w	pc, [sp], #4
    522c:	0000badd 	.word	0x0000badd

00005230 <generic_hfclk_stop>:
{
    5230:	b510      	push	{r4, lr}
	__asm__ volatile(
    5232:	f04f 0320 	mov.w	r3, #32
    5236:	f3ef 8411 	mrs	r4, BASEPRI
    523a:	f383 8812 	msr	BASEPRI_MAX, r3
    523e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    5242:	4a07      	ldr	r2, [pc, #28]	; (5260 <generic_hfclk_stop+0x30>)
    5244:	6813      	ldr	r3, [r2, #0]
    5246:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    524a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    524c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    524e:	d402      	bmi.n	5256 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5250:	2001      	movs	r0, #1
    5252:	f008 fba0 	bl	d996 <nrfx_clock_stop>
	__asm__ volatile(
    5256:	f384 8811 	msr	BASEPRI, r4
    525a:	f3bf 8f6f 	isb	sy
}
    525e:	bd10      	pop	{r4, pc}
    5260:	20014134 	.word	0x20014134

00005264 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    5264:	b2c3      	uxtb	r3, r0
}
    5266:	201c      	movs	r0, #28
    5268:	4a01      	ldr	r2, [pc, #4]	; (5270 <z_nrf_clock_control_get_onoff+0xc>)
    526a:	fb03 2000 	mla	r0, r3, r0, r2
    526e:	4770      	bx	lr
    5270:	20014094 	.word	0x20014094

00005274 <z_nrf_clock_control_lf_on>:
{
    5274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5278:	2201      	movs	r2, #1
    527a:	4607      	mov	r7, r0
    527c:	4937      	ldr	r1, [pc, #220]	; (535c <CONFIG_USB_DEVICE_PID+0x5c>)
    527e:	e8d1 3fef 	ldaex	r3, [r1]
    5282:	e8c1 2fe0 	stlex	r0, r2, [r1]
    5286:	2800      	cmp	r0, #0
    5288:	d1f9      	bne.n	527e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    528a:	b933      	cbnz	r3, 529a <z_nrf_clock_control_lf_on+0x26>
    528c:	4934      	ldr	r1, [pc, #208]	; (5360 <CONFIG_USB_DEVICE_PID+0x60>)
		err = onoff_request(mgr, &cli);
    528e:	4835      	ldr	r0, [pc, #212]	; (5364 <CONFIG_USB_DEVICE_PID+0x64>)
    5290:	604b      	str	r3, [r1, #4]
    5292:	60cb      	str	r3, [r1, #12]
    5294:	608a      	str	r2, [r1, #8]
    5296:	f005 febd 	bl	b014 <onoff_request>
	switch (start_mode) {
    529a:	1e7b      	subs	r3, r7, #1
    529c:	2b01      	cmp	r3, #1
    529e:	d82b      	bhi.n	52f8 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    52a0:	2f01      	cmp	r7, #1
    52a2:	d107      	bne.n	52b4 <z_nrf_clock_control_lf_on+0x40>
}

#if NRF_CLOCK_HAS_LFCLKSRCCOPY
NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    52a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    52a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
    52ac:	f003 0303 	and.w	r3, r3, #3
    52b0:	2b02      	cmp	r3, #2
    52b2:	d021      	beq.n	52f8 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    52b4:	f009 f816 	bl	e2e4 <k_is_in_isr>
    52b8:	4605      	mov	r5, r0
    52ba:	b9f8      	cbnz	r0, 52fc <z_nrf_clock_control_lf_on+0x88>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    52bc:	4b2a      	ldr	r3, [pc, #168]	; (5368 <CONFIG_USB_DEVICE_PID+0x68>)
    52be:	781b      	ldrb	r3, [r3, #0]
    52c0:	b1e3      	cbz	r3, 52fc <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    52c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    52c6:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    52c8:	4606      	mov	r6, r0
    52ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    52ce:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52d2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 536c <CONFIG_USB_DEVICE_PID+0x6c>
    52d6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    52da:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
    52de:	03d2      	lsls	r2, r2, #15
    52e0:	d516      	bpl.n	5310 <CONFIG_USB_DEVICE_PID+0x10>
    52e2:	f003 0303 	and.w	r3, r3, #3
    52e6:	2b02      	cmp	r3, #2
    52e8:	d001      	beq.n	52ee <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    52ea:	2f01      	cmp	r7, #1
    52ec:	d110      	bne.n	5310 <CONFIG_USB_DEVICE_PID+0x10>
	if (isr_mode) {
    52ee:	b375      	cbz	r5, 534e <CONFIG_USB_DEVICE_PID+0x4e>
    52f0:	f386 8811 	msr	BASEPRI, r6
    52f4:	f3bf 8f6f 	isb	sy
}
    52f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    52fc:	f04f 0320 	mov.w	r3, #32
    5300:	f3ef 8611 	mrs	r6, BASEPRI
    5304:	f383 8812 	msr	BASEPRI_MAX, r3
    5308:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    530c:	2501      	movs	r5, #1
    530e:	e7de      	b.n	52ce <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5310:	b1c5      	cbz	r5, 5344 <CONFIG_USB_DEVICE_PID+0x44>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5312:	4630      	mov	r0, r6
    5314:	f7fe fc3e 	bl	3b94 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
    5318:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
    531c:	b2db      	uxtb	r3, r3
    531e:	2b01      	cmp	r3, #1
    5320:	d1d9      	bne.n	52d6 <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5322:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5326:	2a00      	cmp	r2, #0
    5328:	d0d5      	beq.n	52d6 <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    532a:	2200      	movs	r2, #0
    532c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5330:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    5334:	2202      	movs	r2, #2
    5336:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    533a:	2220      	movs	r2, #32
    533c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5340:	60a3      	str	r3, [r4, #8]
}
    5342:	e7c8      	b.n	52d6 <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    5344:	2100      	movs	r1, #0
    5346:	2021      	movs	r0, #33	; 0x21
    5348:	f004 fcc0 	bl	9ccc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    534c:	e7e4      	b.n	5318 <CONFIG_USB_DEVICE_PID+0x18>
    p_reg->INTENSET = mask;
    534e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5352:	2202      	movs	r2, #2
    5354:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5358:	e7ce      	b.n	52f8 <z_nrf_clock_control_lf_on+0x84>
    535a:	bf00      	nop
    535c:	20014090 	.word	0x20014090
    5360:	20014080 	.word	0x20014080
    5364:	200140b0 	.word	0x200140b0
    5368:	200568b5 	.word	0x200568b5
    536c:	e000e100 	.word	0xe000e100

00005370 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    5370:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    5374:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    5378:	280a      	cmp	r0, #10
    537a:	bf9a      	itte	ls
    537c:	4b02      	ldrls	r3, [pc, #8]	; (5388 <qspi_get_zephyr_ret_code+0x18>)
    537e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    5382:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    5386:	4770      	bx	lr
    5388:	0000f2f8 	.word	0x0000f2f8

0000538c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    538c:	4b02      	ldr	r3, [pc, #8]	; (5398 <qspi_nor_pages_layout+0xc>)
    538e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5390:	2301      	movs	r3, #1
    5392:	6013      	str	r3, [r2, #0]
}
    5394:	4770      	bx	lr
    5396:	bf00      	nop
    5398:	0000efdc 	.word	0x0000efdc

0000539c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    539c:	4800      	ldr	r0, [pc, #0]	; (53a0 <qspi_flash_get_parameters+0x4>)
    539e:	4770      	bx	lr
    53a0:	0000ef68 	.word	0x0000ef68

000053a4 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    53a4:	4b05      	ldr	r3, [pc, #20]	; (53bc <qspi_wait_for_completion.isra.0+0x18>)
    53a6:	4299      	cmp	r1, r3
    53a8:	d106      	bne.n	53b8 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
    53aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53b2:	3020      	adds	r0, #32
    53b4:	f004 b91e 	b.w	95f4 <z_impl_k_sem_take>
}
    53b8:	4770      	bx	lr
    53ba:	bf00      	nop
    53bc:	0bad0000 	.word	0x0bad0000

000053c0 <qspi_device_uninit>:
{
    53c0:	b538      	push	{r3, r4, r5, lr}
	struct qspi_nor_data *dev_data = dev->data;
    53c2:	6905      	ldr	r5, [r0, #16]
{
    53c4:	4604      	mov	r4, r0
	if (dev_data->xip_enabled) {
    53c6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    53ca:	b9fb      	cbnz	r3, 540c <qspi_device_uninit+0x4c>
	qspi_lock(dev);
    53cc:	4628      	mov	r0, r5
    53ce:	f006 fb8e 	bl	baee <qspi_lock.isra.0>
    53d2:	2200      	movs	r2, #0
    53d4:	2300      	movs	r3, #0
    53d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    53da:	f004 f90b 	bl	95f4 <z_impl_k_sem_take>
	if (last) {
    53de:	6bab      	ldr	r3, [r5, #56]	; 0x38
    53e0:	b94b      	cbnz	r3, 53f6 <qspi_device_uninit+0x36>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    53e2:	4d0b      	ldr	r5, [pc, #44]	; (5410 <qspi_device_uninit+0x50>)
    53e4:	f002 fdd4 	bl	7f90 <nrfx_qspi_mem_busy_check>
    53e8:	42a8      	cmp	r0, r5
    53ea:	d109      	bne.n	5400 <qspi_device_uninit+0x40>
		nrfx_qspi_uninit();
    53ec:	f002 fdf2 	bl	7fd4 <nrfx_qspi_uninit>
		qspi_initialized = false;
    53f0:	2200      	movs	r2, #0
    53f2:	4b08      	ldr	r3, [pc, #32]	; (5414 <qspi_device_uninit+0x54>)
    53f4:	701a      	strb	r2, [r3, #0]
	qspi_unlock(dev);
    53f6:	6920      	ldr	r0, [r4, #16]
}
    53f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
    53fc:	f006 bb8f 	b.w	bb1e <qspi_unlock.isra.0>
	return z_impl_k_sleep(timeout);
    5400:	2100      	movs	r1, #0
    5402:	f240 6067 	movw	r0, #1639	; 0x667
    5406:	f004 fc61 	bl	9ccc <z_impl_k_sleep>
    540a:	e7eb      	b.n	53e4 <qspi_device_uninit+0x24>
}
    540c:	bd38      	pop	{r3, r4, r5, pc}
    540e:	bf00      	nop
    5410:	0bad0000 	.word	0x0bad0000
    5414:	200168ae 	.word	0x200168ae

00005418 <qspi_device_init>:
{
    5418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct qspi_nor_data *dev_data = dev->data;
    541a:	6906      	ldr	r6, [r0, #16]
{
    541c:	4605      	mov	r5, r0
	if (dev_data->xip_enabled) {
    541e:	f896 4040 	ldrb.w	r4, [r6, #64]	; 0x40
    5422:	b9d4      	cbnz	r4, 545a <qspi_device_init+0x42>
	qspi_lock(dev);
    5424:	4630      	mov	r0, r6
    5426:	f006 fb62 	bl	baee <qspi_lock.isra.0>
	if (!qspi_initialized) {
    542a:	4f0d      	ldr	r7, [pc, #52]	; (5460 <qspi_device_init+0x48>)
	z_impl_k_sem_give(sem);
    542c:	f106 0030 	add.w	r0, r6, #48	; 0x30
    5430:	f004 f8bc 	bl	95ac <z_impl_k_sem_give>
    5434:	783b      	ldrb	r3, [r7, #0]
    5436:	b95b      	cbnz	r3, 5450 <qspi_device_init+0x38>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    5438:	4632      	mov	r2, r6
    543a:	490a      	ldr	r1, [pc, #40]	; (5464 <qspi_device_init+0x4c>)
    543c:	6868      	ldr	r0, [r5, #4]
    543e:	f002 fd2f 	bl	7ea0 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    5442:	f7ff ff95 	bl	5370 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    5446:	fab0 f380 	clz	r3, r0
    544a:	4604      	mov	r4, r0
    544c:	095b      	lsrs	r3, r3, #5
    544e:	703b      	strb	r3, [r7, #0]
	qspi_unlock(dev);
    5450:	6928      	ldr	r0, [r5, #16]
    5452:	f006 fb64 	bl	bb1e <qspi_unlock.isra.0>
}
    5456:	4620      	mov	r0, r4
    5458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
    545a:	2400      	movs	r4, #0
    545c:	e7fb      	b.n	5456 <qspi_device_init+0x3e>
    545e:	bf00      	nop
    5460:	200168ae 	.word	0x200168ae
    5464:	0000bae3 	.word	0x0000bae3

00005468 <qspi_nor_erase>:
{
    5468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    546c:	1e0d      	subs	r5, r1, #0
{
    546e:	4606      	mov	r6, r0
    5470:	4690      	mov	r8, r2
	const struct qspi_nor_config *params = dev->config;
    5472:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    5476:	db69      	blt.n	554c <qspi_nor_erase+0xe4>
    5478:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
	    (addr + size) > params->size) {
    547c:	18aa      	adds	r2, r5, r2
	if (addr < 0 ||
    547e:	429a      	cmp	r2, r3
    5480:	d864      	bhi.n	554c <qspi_nor_erase+0xe4>
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    5482:	f3c5 020b 	ubfx	r2, r5, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    5486:	f1b8 0f00 	cmp.w	r8, #0
    548a:	d05f      	beq.n	554c <qspi_nor_erase+0xe4>
    548c:	f3c8 030b 	ubfx	r3, r8, #0, #12
    5490:	4313      	orrs	r3, r2
    5492:	d15b      	bne.n	554c <qspi_nor_erase+0xe4>
	rv = qspi_device_init(dev);
    5494:	f7ff ffc0 	bl	5418 <qspi_device_init>
	if (rv != 0) {
    5498:	4604      	mov	r4, r0
    549a:	bb60      	cbnz	r0, 54f6 <qspi_nor_erase+0x8e>
	qspi_trans_lock(dev);
    549c:	6930      	ldr	r0, [r6, #16]
    549e:	f006 fb38 	bl	bb12 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    54a2:	4621      	mov	r1, r4
    54a4:	4630      	mov	r0, r6
    54a6:	f006 fb80 	bl	bbaa <qspi_nor_write_protection_set>
	if (rv != 0) {
    54aa:	4604      	mov	r4, r0
    54ac:	bb00      	cbnz	r0, 54f0 <qspi_nor_erase+0x88>
	qspi_lock(dev);
    54ae:	6930      	ldr	r0, [r6, #16]
    54b0:	f006 fb1d 	bl	baee <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    54b4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5554 <qspi_nor_erase+0xec>
		if (size == params->size) {
    54b8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    54bc:	4543      	cmp	r3, r8
    54be:	d120      	bne.n	5502 <qspi_nor_erase+0x9a>
			res = nrfx_qspi_chip_erase();
    54c0:	f008 faef 	bl	daa2 <nrfx_qspi_chip_erase>
    54c4:	46c3      	mov	fp, r8
    54c6:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    54c8:	4639      	mov	r1, r7
    54ca:	6930      	ldr	r0, [r6, #16]
    54cc:	f7ff ff6a 	bl	53a4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    54d0:	4557      	cmp	r7, sl
    54d2:	d12b      	bne.n	552c <qspi_nor_erase+0xc4>
	while (size > 0) {
    54d4:	ebb8 080b 	subs.w	r8, r8, fp
			addr += adj;
    54d8:	445d      	add	r5, fp
	while (size > 0) {
    54da:	d1ed      	bne.n	54b8 <qspi_nor_erase+0x50>
	qspi_unlock(dev);
    54dc:	6930      	ldr	r0, [r6, #16]
    54de:	f006 fb1e 	bl	bb1e <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    54e2:	2101      	movs	r1, #1
    54e4:	4630      	mov	r0, r6
    54e6:	f006 fb60 	bl	bbaa <qspi_nor_write_protection_set>
    54ea:	2c00      	cmp	r4, #0
    54ec:	bf08      	it	eq
    54ee:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    54f0:	6930      	ldr	r0, [r6, #16]
    54f2:	f004 f85b 	bl	95ac <z_impl_k_sem_give>
	qspi_device_uninit(dev);
    54f6:	4630      	mov	r0, r6
    54f8:	f7ff ff62 	bl	53c0 <qspi_device_uninit>
}
    54fc:	4620      	mov	r0, r4
    54fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    5502:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
    5506:	d309      	bcc.n	551c <qspi_nor_erase+0xb4>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    5508:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    550a:	b9a3      	cbnz	r3, 5536 <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    550c:	4629      	mov	r1, r5
    550e:	2001      	movs	r0, #1
    5510:	f002 fdae 	bl	8070 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    5514:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    5518:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    551a:	e7d5      	b.n	54c8 <qspi_nor_erase+0x60>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    551c:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
    5520:	d209      	bcs.n	5536 <qspi_nor_erase+0xce>
		qspi_wait_for_completion(dev, res);
    5522:	490d      	ldr	r1, [pc, #52]	; (5558 <qspi_nor_erase+0xf0>)
    5524:	6930      	ldr	r0, [r6, #16]
    5526:	f7ff ff3d 	bl	53a4 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    552a:	4f0b      	ldr	r7, [pc, #44]	; (5558 <qspi_nor_erase+0xf0>)
			rv = qspi_get_zephyr_ret_code(res);
    552c:	4638      	mov	r0, r7
    552e:	f7ff ff1f 	bl	5370 <qspi_get_zephyr_ret_code>
    5532:	4604      	mov	r4, r0
			break;
    5534:	e7d2      	b.n	54dc <qspi_nor_erase+0x74>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    5536:	f3c5 000b 	ubfx	r0, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    553a:	2800      	cmp	r0, #0
    553c:	d1f1      	bne.n	5522 <qspi_nor_erase+0xba>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    553e:	4629      	mov	r1, r5
    5540:	f002 fd96 	bl	8070 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    5544:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    5548:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    554a:	e7bd      	b.n	54c8 <qspi_nor_erase+0x60>
		return -EINVAL;
    554c:	f06f 0415 	mvn.w	r4, #21
    5550:	e7d4      	b.n	54fc <qspi_nor_erase+0x94>
    5552:	bf00      	nop
    5554:	0bad0000 	.word	0x0bad0000
    5558:	0bad0004 	.word	0x0bad0004

0000555c <qspi_nor_init>:
{
    555c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    555e:	6843      	ldr	r3, [r0, #4]
{
    5560:	b087      	sub	sp, #28
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    5562:	6b1d      	ldr	r5, [r3, #48]	; 0x30
{
    5564:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5566:	2100      	movs	r1, #0
    5568:	4628      	mov	r0, r5
    556a:	aa03      	add	r2, sp, #12
    556c:	f006 fc36 	bl	bddc <pinctrl_lookup_state>
	if (ret < 0) {
    5570:	2800      	cmp	r0, #0
    5572:	db66      	blt.n	5642 <qspi_nor_init+0xe6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5574:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5576:	682a      	ldr	r2, [r5, #0]
    5578:	7919      	ldrb	r1, [r3, #4]
    557a:	6818      	ldr	r0, [r3, #0]
    557c:	f000 fc4c 	bl	5e18 <pinctrl_configure_pins>
	if (ret < 0) {
    5580:	2800      	cmp	r0, #0
    5582:	db5e      	blt.n	5642 <qspi_nor_init+0xe6>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    5584:	f04f 2750 	mov.w	r7, #1342197760	; 0x50005000
    5588:	2501      	movs	r5, #1
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    558a:	2200      	movs	r2, #0
    558c:	2101      	movs	r1, #1
    558e:	202b      	movs	r0, #43	; 0x2b
    5590:	f7fe fb42 	bl	3c18 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    5594:	6866      	ldr	r6, [r4, #4]
	struct qspi_nor_data *dev_data = dev->data;
    5596:	6922      	ldr	r2, [r4, #16]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    5598:	4630      	mov	r0, r6
    559a:	493d      	ldr	r1, [pc, #244]	; (5690 <qspi_nor_init+0x134>)
    559c:	f8c7 55b8 	str.w	r5, [r7, #1464]	; 0x5b8
    55a0:	f002 fc7e 	bl	7ea0 <nrfx_qspi_init>
    55a4:	2302      	movs	r3, #2
    55a6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
	int ret = qspi_get_zephyr_ret_code(res);
    55aa:	f7ff fee1 	bl	5370 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    55ae:	2800      	cmp	r0, #0
    55b0:	db47      	blt.n	5642 <qspi_nor_init+0xe6>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
    55b2:	2200      	movs	r2, #0
    55b4:	23ab      	movs	r3, #171	; 0xab
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
    55b6:	4620      	mov	r0, r4
    55b8:	a903      	add	r1, sp, #12
		struct qspi_cmd cmd = {
    55ba:	e9cd 2203 	strd	r2, r2, [sp, #12]
    55be:	9205      	str	r2, [sp, #20]
    55c0:	f88d 300c 	strb.w	r3, [sp, #12]
		ret = qspi_send_cmd(dev, &cmd, false);
    55c4:	f006 fab6 	bl	bb34 <qspi_send_cmd>
		if (ret < 0) {
    55c8:	2800      	cmp	r0, #0
    55ca:	db3a      	blt.n	5642 <qspi_nor_init+0xe6>
	z_impl_k_busy_wait(usec_to_wait);
    55cc:	2023      	movs	r0, #35	; 0x23
    55ce:	f009 f8d1 	bl	e774 <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    55d2:	7f73      	ldrb	r3, [r6, #29]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    55d4:	3b02      	subs	r3, #2
    55d6:	42ab      	cmp	r3, r5
    55d8:	d905      	bls.n	55e6 <qspi_nor_init+0x8a>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    55da:	7f35      	ldrb	r5, [r6, #28]
    55dc:	3d03      	subs	r5, #3
    55de:	2d01      	cmp	r5, #1
    55e0:	bf8c      	ite	hi
    55e2:	2500      	movhi	r5, #0
    55e4:	2501      	movls	r5, #1
		ret = qspi_rdsr(dev, sr_num);
    55e6:	4620      	mov	r0, r4
    55e8:	f006 faf4 	bl	bbd4 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    55ec:	2800      	cmp	r0, #0
    55ee:	db28      	blt.n	5642 <qspi_nor_init+0xe6>
		uint8_t sr = (uint8_t)ret;
    55f0:	b2c2      	uxtb	r2, r0
		if (qe_state != qe_value) {
    55f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    55f6:	4285      	cmp	r5, r0
    55f8:	ad01      	add	r5, sp, #4
    55fa:	d124      	bne.n	5646 <qspi_nor_init+0xea>
	qspi_device_uninit(dev);
    55fc:	4620      	mov	r0, r4
    55fe:	f7ff fedf 	bl	53c0 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    5602:	2603      	movs	r6, #3
    5604:	2300      	movs	r3, #0
    5606:	e9cd 6302 	strd	r6, r3, [sp, #8]
    560a:	9304      	str	r3, [sp, #16]
    560c:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    560e:	4620      	mov	r0, r4
	const struct qspi_buf rx_buf = {
    5610:	f8cd d004 	str.w	sp, [sp, #4]
	const struct qspi_cmd cmd = {
    5614:	f88d 300c 	strb.w	r3, [sp, #12]
    5618:	9505      	str	r5, [sp, #20]
	int ret = qspi_device_init(dev);
    561a:	f7ff fefd 	bl	5418 <qspi_device_init>
	if (ret == 0) {
    561e:	4602      	mov	r2, r0
    5620:	bb78      	cbnz	r0, 5682 <qspi_nor_init+0x126>
		ret = qspi_send_cmd(dev, &cmd, false);
    5622:	4620      	mov	r0, r4
    5624:	a903      	add	r1, sp, #12
    5626:	f006 fa85 	bl	bb34 <qspi_send_cmd>
    562a:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    562c:	4620      	mov	r0, r4
    562e:	f7ff fec7 	bl	53c0 <qspi_device_uninit>
	if (ret != 0) {
    5632:	bb4d      	cbnz	r5, 5688 <qspi_nor_init+0x12c>
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    5634:	6860      	ldr	r0, [r4, #4]
    5636:	4632      	mov	r2, r6
    5638:	4669      	mov	r1, sp
    563a:	302c      	adds	r0, #44	; 0x2c
    563c:	f006 f910 	bl	b860 <memcmp>
    5640:	bb10      	cbnz	r0, 5688 <qspi_nor_init+0x12c>
}
    5642:	b007      	add	sp, #28
    5644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t sr_array[2] = {0};
    5646:	2300      	movs	r3, #0
			sr ^= qe_mask;
    5648:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    564c:	f8ad 3000 	strh.w	r3, [sp]
		sr_array[0] = sr_val;
    5650:	f88d 2000 	strb.w	r2, [sp]
	const struct qspi_buf sr_buf = {
    5654:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    5656:	4620      	mov	r0, r4
    5658:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    565a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct qspi_buf sr_buf = {
    565e:	f8cd d004 	str.w	sp, [sp, #4]
	struct qspi_cmd cmd = {
    5662:	9305      	str	r3, [sp, #20]
    5664:	f88d 200c 	strb.w	r2, [sp, #12]
    5668:	9504      	str	r5, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
    566a:	f006 fa63 	bl	bb34 <qspi_send_cmd>
	if (ret == 0) {
    566e:	2800      	cmp	r0, #0
    5670:	d1e7      	bne.n	5642 <qspi_nor_init+0xe6>
		ret = qspi_rdsr(dev, 1);
    5672:	4620      	mov	r0, r4
    5674:	f006 faae 	bl	bbd4 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    5678:	2800      	cmp	r0, #0
    567a:	dbe2      	blt.n	5642 <qspi_nor_init+0xe6>
    567c:	07c3      	lsls	r3, r0, #31
    567e:	d4f8      	bmi.n	5672 <qspi_nor_init+0x116>
    5680:	e7bc      	b.n	55fc <qspi_nor_init+0xa0>
	qspi_device_uninit(dev);
    5682:	4620      	mov	r0, r4
    5684:	f7ff fe9c 	bl	53c0 <qspi_device_uninit>
		return -ENODEV;
    5688:	f06f 0012 	mvn.w	r0, #18
    568c:	e7d9      	b.n	5642 <qspi_nor_init+0xe6>
    568e:	bf00      	nop
    5690:	0000bae3 	.word	0x0000bae3

00005694 <qspi_nor_write>:
{
    5694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5698:	4605      	mov	r5, r0
    569a:	460f      	mov	r7, r1
    569c:	461e      	mov	r6, r3
	if (!src) {
    569e:	4690      	mov	r8, r2
    56a0:	2a00      	cmp	r2, #0
    56a2:	d07f      	beq.n	57a4 <qspi_nor_write+0x110>
	if ((size == 0)
    56a4:	2b00      	cmp	r3, #0
    56a6:	d07d      	beq.n	57a4 <qspi_nor_write+0x110>
	    || ((size > 4) && ((size % 4U) != 0))) {
    56a8:	2b04      	cmp	r3, #4
    56aa:	d901      	bls.n	56b0 <qspi_nor_write+0x1c>
    56ac:	079a      	lsls	r2, r3, #30
    56ae:	d179      	bne.n	57a4 <qspi_nor_write+0x110>
	if ((addr % 4U) != 0) {
    56b0:	07bb      	lsls	r3, r7, #30
    56b2:	d177      	bne.n	57a4 <qspi_nor_write+0x110>
	if (addr < 0 ||
    56b4:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    56b6:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    56b8:	db74      	blt.n	57a4 <qspi_nor_write+0x110>
    56ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
	    (addr + size) > params->size) {
    56bc:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    56be:	4293      	cmp	r3, r2
    56c0:	d870      	bhi.n	57a4 <qspi_nor_write+0x110>
	int rc = qspi_device_init(dev);
    56c2:	4628      	mov	r0, r5
    56c4:	f7ff fea8 	bl	5418 <qspi_device_init>
	if (rc != 0) {
    56c8:	4604      	mov	r4, r0
    56ca:	2800      	cmp	r0, #0
    56cc:	d15f      	bne.n	578e <qspi_nor_write+0xfa>
	qspi_trans_lock(dev);
    56ce:	6928      	ldr	r0, [r5, #16]
    56d0:	f006 fa1f 	bl	bb12 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    56d4:	4621      	mov	r1, r4
    56d6:	4628      	mov	r0, r5
    56d8:	f006 fa67 	bl	bbaa <qspi_nor_write_protection_set>
    56dc:	4604      	mov	r4, r0
	qspi_lock(dev);
    56de:	6928      	ldr	r0, [r5, #16]
    56e0:	f006 fa05 	bl	baee <qspi_lock.isra.0>
	if (!res) {
    56e4:	2c00      	cmp	r4, #0
    56e6:	d140      	bne.n	576a <qspi_nor_write+0xd6>
		if (size < 4U) {
    56e8:	2e03      	cmp	r6, #3
    56ea:	d81c      	bhi.n	5726 <qspi_nor_write+0x92>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    56ec:	463a      	mov	r2, r7
    56ee:	2104      	movs	r1, #4
    56f0:	4668      	mov	r0, sp
    56f2:	f008 f9d3 	bl	da9c <nrfx_qspi_read>
    56f6:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    56f8:	4601      	mov	r1, r0
    56fa:	6928      	ldr	r0, [r5, #16]
    56fc:	f7ff fe52 	bl	53a4 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    5700:	4b2a      	ldr	r3, [pc, #168]	; (57ac <qspi_nor_write+0x118>)
    5702:	429c      	cmp	r4, r3
    5704:	d131      	bne.n	576a <qspi_nor_write+0xd6>
		memcpy(buf, sptr, slen);
    5706:	4632      	mov	r2, r6
    5708:	4641      	mov	r1, r8
    570a:	4668      	mov	r0, sp
    570c:	f006 f8cf 	bl	b8ae <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5710:	463a      	mov	r2, r7
    5712:	2104      	movs	r1, #4
    5714:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    5716:	f008 f9be 	bl	da96 <nrfx_qspi_write>
    571a:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    571c:	4601      	mov	r1, r0
    571e:	6928      	ldr	r0, [r5, #16]
    5720:	f7ff fe40 	bl	53a4 <qspi_wait_for_completion.isra.0>
    5724:	e021      	b.n	576a <qspi_nor_write+0xd6>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5726:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    572a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    572e:	d035      	beq.n	579c <qspi_nor_write+0x108>
			if (res == NRFX_SUCCESS) {
    5730:	f8df a078 	ldr.w	sl, [pc, #120]	; 57ac <qspi_nor_write+0x118>
			size_t len = MIN(slen, sizeof(buf));
    5734:	2e10      	cmp	r6, #16
    5736:	46b1      	mov	r9, r6
    5738:	bf28      	it	cs
    573a:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    573e:	4641      	mov	r1, r8
    5740:	464a      	mov	r2, r9
    5742:	4668      	mov	r0, sp
    5744:	f006 f8b3 	bl	b8ae <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5748:	463a      	mov	r2, r7
    574a:	2110      	movs	r1, #16
    574c:	4668      	mov	r0, sp
    574e:	f008 f9a2 	bl	da96 <nrfx_qspi_write>
    5752:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    5754:	4601      	mov	r1, r0
    5756:	6928      	ldr	r0, [r5, #16]
    5758:	f7ff fe24 	bl	53a4 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    575c:	4554      	cmp	r4, sl
    575e:	d104      	bne.n	576a <qspi_nor_write+0xd6>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5760:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    5764:	44c8      	add	r8, r9
				addr += len;
    5766:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5768:	d1e4      	bne.n	5734 <qspi_nor_write+0xa0>
	qspi_unlock(dev);
    576a:	6928      	ldr	r0, [r5, #16]
    576c:	f006 f9d7 	bl	bb1e <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
    5770:	2101      	movs	r1, #1
    5772:	4628      	mov	r0, r5
    5774:	f006 fa19 	bl	bbaa <qspi_nor_write_protection_set>
    5778:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    577a:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
    577c:	f003 ff16 	bl	95ac <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5780:	2c00      	cmp	r4, #0
    5782:	bf14      	ite	ne
    5784:	4620      	movne	r0, r4
    5786:	4630      	moveq	r0, r6
    5788:	f7ff fdf2 	bl	5370 <qspi_get_zephyr_ret_code>
    578c:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    578e:	4628      	mov	r0, r5
    5790:	f7ff fe16 	bl	53c0 <qspi_device_uninit>
}
    5794:	4620      	mov	r0, r4
    5796:	b004      	add	sp, #16
    5798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
    579c:	463a      	mov	r2, r7
    579e:	4631      	mov	r1, r6
    57a0:	4640      	mov	r0, r8
    57a2:	e7b8      	b.n	5716 <qspi_nor_write+0x82>
		return -EINVAL;
    57a4:	f06f 0415 	mvn.w	r4, #21
    57a8:	e7f4      	b.n	5794 <qspi_nor_write+0x100>
    57aa:	bf00      	nop
    57ac:	0bad0000 	.word	0x0bad0000

000057b0 <qspi_nor_read>:
{
    57b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57b4:	4607      	mov	r7, r0
    57b6:	4688      	mov	r8, r1
    57b8:	461c      	mov	r4, r3
	if (!dest) {
    57ba:	4616      	mov	r6, r2
{
    57bc:	b085      	sub	sp, #20
	if (!dest) {
    57be:	2a00      	cmp	r2, #0
    57c0:	f000 8099 	beq.w	58f6 <qspi_nor_read+0x146>
	if (!size) {
    57c4:	2b00      	cmp	r3, #0
    57c6:	f000 8094 	beq.w	58f2 <qspi_nor_read+0x142>
	if (addr < 0 ||
    57ca:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    57cc:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    57ce:	f2c0 8092 	blt.w	58f6 <qspi_nor_read+0x146>
    57d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
	    (addr + size) > params->size) {
    57d4:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    57d6:	4293      	cmp	r3, r2
    57d8:	f200 808d 	bhi.w	58f6 <qspi_nor_read+0x146>
	int rc = qspi_device_init(dev);
    57dc:	f7ff fe1c 	bl	5418 <qspi_device_init>
	if (rc != 0) {
    57e0:	4605      	mov	r5, r0
    57e2:	2800      	cmp	r0, #0
    57e4:	d17e      	bne.n	58e4 <qspi_nor_read+0x134>
	qspi_lock(dev);
    57e6:	f1c8 0500 	rsb	r5, r8, #0
    57ea:	f005 0503 	and.w	r5, r5, #3
    57ee:	6938      	ldr	r0, [r7, #16]
    57f0:	f006 f97d 	bl	baee <qspi_lock.isra.0>
	if (flash_prefix > size) {
    57f4:	42a5      	cmp	r5, r4
    57f6:	bf28      	it	cs
    57f8:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    57fa:	4273      	negs	r3, r6
    57fc:	f003 0303 	and.w	r3, r3, #3
    5800:	f006 0903 	and.w	r9, r6, #3
    5804:	bf58      	it	pl
    5806:	f1c3 0900 	rsbpl	r9, r3, #0
    580a:	f1c9 0900 	rsb	r9, r9, #0
    580e:	f009 0903 	and.w	r9, r9, #3
    5812:	45a1      	cmp	r9, r4
    5814:	bf28      	it	cs
    5816:	46a1      	movcs	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5818:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    581a:	eba4 0409 	sub.w	r4, r4, r9
    581e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    5822:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    5826:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    5828:	bfc8      	it	gt
    582a:	46a2      	movgt	sl, r4
    582c:	f003 0b03 	and.w	fp, r3, #3
    5830:	bfc8      	it	gt
    5832:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    5836:	f1ba 0f00 	cmp.w	sl, #0
    583a:	d018      	beq.n	586e <qspi_nor_read+0xbe>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    583c:	eb06 0309 	add.w	r3, r6, r9
    5840:	eb08 0205 	add.w	r2, r8, r5
    5844:	4651      	mov	r1, sl
    5846:	4618      	mov	r0, r3
    5848:	9301      	str	r3, [sp, #4]
    584a:	f008 f927 	bl	da9c <nrfx_qspi_read>
    584e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5850:	4601      	mov	r1, r0
    5852:	6938      	ldr	r0, [r7, #16]
    5854:	f7ff fda6 	bl	53a4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5858:	4a28      	ldr	r2, [pc, #160]	; (58fc <qspi_nor_read+0x14c>)
    585a:	4294      	cmp	r4, r2
    585c:	d13b      	bne.n	58d6 <qspi_nor_read+0x126>
		if (flash_prefix != dest_prefix) {
    585e:	454d      	cmp	r5, r9
    5860:	d005      	beq.n	586e <qspi_nor_read+0xbe>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    5862:	9b01      	ldr	r3, [sp, #4]
    5864:	4652      	mov	r2, sl
    5866:	4619      	mov	r1, r3
    5868:	1970      	adds	r0, r6, r5
    586a:	f006 f809 	bl	b880 <memmove>
	if (flash_prefix != 0) {
    586e:	b1bd      	cbz	r5, 58a0 <qspi_nor_read+0xf0>
				     (WORD_SIZE - flash_prefix));
    5870:	f1c5 0904 	rsb	r9, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    5874:	2104      	movs	r1, #4
    5876:	eba8 0209 	sub.w	r2, r8, r9
    587a:	a802      	add	r0, sp, #8
    587c:	f008 f90e 	bl	da9c <nrfx_qspi_read>
    5880:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5882:	4601      	mov	r1, r0
    5884:	6938      	ldr	r0, [r7, #16]
    5886:	f7ff fd8d 	bl	53a4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    588a:	4b1c      	ldr	r3, [pc, #112]	; (58fc <qspi_nor_read+0x14c>)
    588c:	429c      	cmp	r4, r3
    588e:	d122      	bne.n	58d6 <qspi_nor_read+0x126>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    5890:	f109 0308 	add.w	r3, r9, #8
    5894:	462a      	mov	r2, r5
    5896:	4630      	mov	r0, r6
    5898:	eb0d 0103 	add.w	r1, sp, r3
    589c:	f006 f807 	bl	b8ae <memcpy>
	if (flash_suffix != 0) {
    58a0:	f1bb 0f00 	cmp.w	fp, #0
    58a4:	d016      	beq.n	58d4 <qspi_nor_read+0x124>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    58a6:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    58a8:	eb08 0205 	add.w	r2, r8, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    58ac:	4452      	add	r2, sl
    58ae:	eb0d 0001 	add.w	r0, sp, r1
    58b2:	f008 f8f3 	bl	da9c <nrfx_qspi_read>
    58b6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    58b8:	4601      	mov	r1, r0
    58ba:	6938      	ldr	r0, [r7, #16]
    58bc:	f7ff fd72 	bl	53a4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    58c0:	4b0e      	ldr	r3, [pc, #56]	; (58fc <qspi_nor_read+0x14c>)
    58c2:	429c      	cmp	r4, r3
    58c4:	d107      	bne.n	58d6 <qspi_nor_read+0x126>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    58c6:	eb0a 0005 	add.w	r0, sl, r5
    58ca:	465a      	mov	r2, fp
    58cc:	a902      	add	r1, sp, #8
    58ce:	4430      	add	r0, r6
    58d0:	f005 ffed 	bl	b8ae <memcpy>
	return res;
    58d4:	4c09      	ldr	r4, [pc, #36]	; (58fc <qspi_nor_read+0x14c>)
	qspi_unlock(dev);
    58d6:	6938      	ldr	r0, [r7, #16]
    58d8:	f006 f921 	bl	bb1e <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
    58dc:	4620      	mov	r0, r4
    58de:	f7ff fd47 	bl	5370 <qspi_get_zephyr_ret_code>
    58e2:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    58e4:	4638      	mov	r0, r7
    58e6:	f7ff fd6b 	bl	53c0 <qspi_device_uninit>
}
    58ea:	4628      	mov	r0, r5
    58ec:	b005      	add	sp, #20
    58ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
    58f2:	461d      	mov	r5, r3
    58f4:	e7f9      	b.n	58ea <qspi_nor_read+0x13a>
		return -EINVAL;
    58f6:	f06f 0515 	mvn.w	r5, #21
    58fa:	e7f6      	b.n	58ea <qspi_nor_read+0x13a>
    58fc:	0bad0000 	.word	0x0bad0000

00005900 <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    5900:	4b02      	ldr	r3, [pc, #8]	; (590c <flash_sim_page_layout+0xc>)
    5902:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5904:	2301      	movs	r3, #1
    5906:	6013      	str	r3, [r2, #0]
}
    5908:	4770      	bx	lr
    590a:	bf00      	nop
    590c:	0000efe4 	.word	0x0000efe4

00005910 <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    5910:	4800      	ldr	r0, [pc, #0]	; (5914 <flash_sim_get_parameters+0x4>)
    5912:	4770      	bx	lr
    5914:	0000efec 	.word	0x0000efec

00005918 <flash_sim_write>:
{
    5918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    591c:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    591e:	440b      	add	r3, r1
    5920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5924:	460d      	mov	r5, r1
    5926:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5928:	d82c      	bhi.n	5984 <flash_sim_write+0x6c>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    592a:	2900      	cmp	r1, #0
    592c:	db2a      	blt.n	5984 <flash_sim_write+0x6c>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    592e:	ea41 0604 	orr.w	r6, r1, r4
    5932:	f016 0603 	ands.w	r6, r6, #3
    5936:	d125      	bne.n	5984 <flash_sim_write+0x6c>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    5938:	2204      	movs	r2, #4
    593a:	21ff      	movs	r1, #255	; 0xff
    593c:	eb0d 0002 	add.w	r0, sp, r2
    5940:	f005 ffc0 	bl	b8c4 <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    5944:	f8df 8044 	ldr.w	r8, [pc, #68]	; 598c <flash_sim_write+0x74>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    5948:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    594c:	42a6      	cmp	r6, r4
    594e:	d309      	bcc.n	5964 <flash_sim_write+0x4c>
    5950:	463a      	mov	r2, r7
    5952:	eb08 0305 	add.w	r3, r8, r5
    5956:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    5958:	42a2      	cmp	r2, r4
    595a:	d10c      	bne.n	5976 <flash_sim_write+0x5e>
	return 0;
    595c:	2000      	movs	r0, #0
}
    595e:	b003      	add	sp, #12
    5960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    5964:	2204      	movs	r2, #4
    5966:	eb09 0106 	add.w	r1, r9, r6
    596a:	eb0d 0002 	add.w	r0, sp, r2
    596e:	f005 ff77 	bl	b860 <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    5972:	3604      	adds	r6, #4
    5974:	e7ea      	b.n	594c <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    5976:	7819      	ldrb	r1, [r3, #0]
    5978:	f812 0b01 	ldrb.w	r0, [r2], #1
    597c:	4001      	ands	r1, r0
    597e:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i = 0; i < len; i++) {
    5982:	e7e9      	b.n	5958 <flash_sim_write+0x40>
		return -EINVAL;
    5984:	f06f 0015 	mvn.w	r0, #21
    5988:	e7e9      	b.n	595e <flash_sim_write+0x46>
    598a:	bf00      	nop
    598c:	200168af 	.word	0x200168af

00005990 <flash_sim_read>:
{
    5990:	4610      	mov	r0, r2
    5992:	b508      	push	{r3, lr}
    5994:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5996:	440b      	add	r3, r1
    5998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    599c:	d807      	bhi.n	59ae <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    599e:	2900      	cmp	r1, #0
    59a0:	db05      	blt.n	59ae <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    59a2:	4b04      	ldr	r3, [pc, #16]	; (59b4 <flash_sim_read+0x24>)
    59a4:	4419      	add	r1, r3
    59a6:	f005 ff82 	bl	b8ae <memcpy>
	return 0;
    59aa:	2000      	movs	r0, #0
}
    59ac:	bd08      	pop	{r3, pc}
		return -EINVAL;
    59ae:	f06f 0015 	mvn.w	r0, #21
    59b2:	e7fb      	b.n	59ac <flash_sim_read+0x1c>
    59b4:	200168af 	.word	0x200168af

000059b8 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    59b8:	188b      	adds	r3, r1, r2
    59ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    59be:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    59c0:	d81b      	bhi.n	59fa <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    59c2:	2900      	cmp	r1, #0
    59c4:	db19      	blt.n	59fa <flash_sim_erase+0x42>
	    (len % FLASH_SIMULATOR_ERASE_UNIT)) {
    59c6:	ea42 0601 	orr.w	r6, r2, r1
    59ca:	f3c6 060b 	ubfx	r6, r6, #0, #12
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    59ce:	b9a6      	cbnz	r6, 59fa <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    59d0:	4c0b      	ldr	r4, [pc, #44]	; (5a00 <flash_sim_erase+0x48>)
    59d2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    59d6:	f021 010f 	bic.w	r1, r1, #15
    59da:	0b15      	lsrs	r5, r2, #12
    59dc:	440c      	add	r4, r1
    59de:	42ae      	cmp	r6, r5
    59e0:	d101      	bne.n	59e6 <flash_sim_erase+0x2e>
    59e2:	2000      	movs	r0, #0
}
    59e4:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    59e6:	4620      	mov	r0, r4
    59e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    59ec:	21ff      	movs	r1, #255	; 0xff
    59ee:	f005 ff69 	bl	b8c4 <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    59f2:	3601      	adds	r6, #1
    59f4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    59f8:	e7f1      	b.n	59de <flash_sim_erase+0x26>
		return -EINVAL;
    59fa:	f06f 0015 	mvn.w	r0, #21
    59fe:	e7f1      	b.n	59e4 <flash_sim_erase+0x2c>
    5a00:	200168af 	.word	0x200168af

00005a04 <flash_init>:
}
#endif /* DT_NODE_HAS_PROP(DT_PARENT(SOC_NV_FLASH_NODE), memory_region) */
#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    5a04:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    5a06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5a0a:	21ff      	movs	r1, #255	; 0xff
    5a0c:	4802      	ldr	r0, [pc, #8]	; (5a18 <flash_init+0x14>)
    5a0e:	f005 ff59 	bl	b8c4 <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    5a12:	2000      	movs	r0, #0
    5a14:	bd08      	pop	{r3, pc}
    5a16:	bf00      	nop
    5a18:	200168af 	.word	0x200168af

00005a1c <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5a1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    5a20:	4801      	ldr	r0, [pc, #4]	; (5a28 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5a22:	600b      	str	r3, [r1, #0]
}
    5a24:	4770      	bx	lr
    5a26:	bf00      	nop
    5a28:	200168af 	.word	0x200168af

00005a2c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    5a2c:	4b02      	ldr	r3, [pc, #8]	; (5a38 <flash_nrf_pages_layout+0xc>)
    5a2e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5a30:	2301      	movs	r3, #1
    5a32:	6013      	str	r3, [r2, #0]
}
    5a34:	4770      	bx	lr
    5a36:	bf00      	nop
    5a38:	20014138 	.word	0x20014138

00005a3c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    5a3c:	4800      	ldr	r0, [pc, #0]	; (5a40 <flash_nrf_get_parameters+0x4>)
    5a3e:	4770      	bx	lr
    5a40:	0000f01c 	.word	0x0000f01c

00005a44 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    5a44:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    5a46:	2201      	movs	r2, #1
    5a48:	4806      	ldr	r0, [pc, #24]	; (5a64 <nrf_flash_init+0x20>)
    5a4a:	4611      	mov	r1, r2
    5a4c:	f008 fce9 	bl	e422 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    5a50:	f008 f814 	bl	da7c <nrfx_nvmc_flash_page_count_get>
    5a54:	4c04      	ldr	r4, [pc, #16]	; (5a68 <nrf_flash_init+0x24>)
    5a56:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    5a58:	f008 f80d 	bl	da76 <nrfx_nvmc_flash_page_size_get>
    5a5c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    5a5e:	2000      	movs	r0, #0
    5a60:	bd10      	pop	{r4, pc}
    5a62:	bf00      	nop
    5a64:	20014140 	.word	0x20014140
    5a68:	20014138 	.word	0x20014138

00005a6c <flash_nrf_erase>:
{
    5a6c:	b570      	push	{r4, r5, r6, lr}
    5a6e:	460c      	mov	r4, r1
    5a70:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5a72:	f008 f800 	bl	da76 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5a76:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5a78:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    5a7a:	4620      	mov	r0, r4
    5a7c:	f006 f8c5 	bl	bc0a <is_regular_addr_valid>
    5a80:	b308      	cbz	r0, 5ac6 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5a82:	fbb4 f3f6 	udiv	r3, r4, r6
    5a86:	fb06 4313 	mls	r3, r6, r3, r4
    5a8a:	b9e3      	cbnz	r3, 5ac6 <flash_nrf_erase+0x5a>
    5a8c:	fbb5 f3f6 	udiv	r3, r5, r6
    5a90:	fb06 5313 	mls	r3, r6, r3, r5
    5a94:	b9bb      	cbnz	r3, 5ac6 <flash_nrf_erase+0x5a>
		if (!n_pages) {
    5a96:	42ae      	cmp	r6, r5
    5a98:	d901      	bls.n	5a9e <flash_nrf_erase+0x32>
			return 0;
    5a9a:	2000      	movs	r0, #0
}
    5a9c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
    5a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aa6:	4809      	ldr	r0, [pc, #36]	; (5acc <flash_nrf_erase+0x60>)
    5aa8:	f003 fda4 	bl	95f4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5aac:	f007 ffe3 	bl	da76 <nrfx_nvmc_flash_page_size_get>
    5ab0:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5ab2:	4620      	mov	r0, r4
    5ab4:	f001 ff24 	bl	7900 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    5ab8:	1bad      	subs	r5, r5, r6
    5aba:	4434      	add	r4, r6
    5abc:	d1f9      	bne.n	5ab2 <flash_nrf_erase+0x46>
	z_impl_k_sem_give(sem);
    5abe:	4803      	ldr	r0, [pc, #12]	; (5acc <flash_nrf_erase+0x60>)
    5ac0:	f003 fd74 	bl	95ac <z_impl_k_sem_give>
}
    5ac4:	e7e9      	b.n	5a9a <flash_nrf_erase+0x2e>
			return -EINVAL;
    5ac6:	f06f 0015 	mvn.w	r0, #21
    5aca:	e7e7      	b.n	5a9c <flash_nrf_erase+0x30>
    5acc:	20014140 	.word	0x20014140

00005ad0 <flash_nrf_write>:
{
    5ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ad4:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5ad6:	4619      	mov	r1, r3
    5ad8:	4628      	mov	r0, r5
{
    5ada:	4616      	mov	r6, r2
    5adc:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5ade:	f006 f894 	bl	bc0a <is_regular_addr_valid>
    5ae2:	b3c8      	cbz	r0, 5b58 <flash_nrf_write+0x88>
	if (!len) {
    5ae4:	b914      	cbnz	r4, 5aec <flash_nrf_write+0x1c>
		return 0;
    5ae6:	2000      	movs	r0, #0
}
    5ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
    5aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5af4:	481a      	ldr	r0, [pc, #104]	; (5b60 <flash_nrf_write+0x90>)
    5af6:	f003 fd7d 	bl	95f4 <z_impl_k_sem_take>
		nrf_flash_sync_get_timestamp_begin();
	}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
#if defined(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    5afa:	f015 0703 	ands.w	r7, r5, #3
    5afe:	d00c      	beq.n	5b1a <flash_nrf_write+0x4a>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
    5b00:	f1c7 0704 	rsb	r7, r7, #4
    5b04:	42a7      	cmp	r7, r4
    5b06:	bf28      	it	cs
    5b08:	4627      	movcs	r7, r4

		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5b0a:	4631      	mov	r1, r6
    5b0c:	4628      	mov	r0, r5
    5b0e:	463a      	mov	r2, r7
    5b10:	f001 ff24 	bl	795c <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    5b14:	443d      	add	r5, r7
	w_ctx->data_addr += shift;
    5b16:	443e      	add	r6, r7
	w_ctx->len -= shift;
    5b18:	1be4      	subs	r4, r4, r7
{
    5b1a:	2700      	movs	r7, #0
    5b1c:	f024 0803 	bic.w	r8, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    5b20:	45b8      	cmp	r8, r7
    5b22:	eb07 0005 	add.w	r0, r7, r5
    5b26:	d112      	bne.n	5b4e <flash_nrf_write+0x7e>
    5b28:	f06f 0203 	mvn.w	r2, #3
    5b2c:	08a3      	lsrs	r3, r4, #2
    5b2e:	fb02 4203 	mla	r2, r2, r3, r4
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#if defined(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* Write remaining unaligned data */
	if (w_ctx->len) {
    5b32:	b11a      	cbz	r2, 5b3c <flash_nrf_write+0x6c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5b34:	eb06 0108 	add.w	r1, r6, r8
    5b38:	f001 ff10 	bl	795c <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5b3c:	4a09      	ldr	r2, [pc, #36]	; (5b64 <flash_nrf_write+0x94>)
    5b3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    5b42:	07db      	lsls	r3, r3, #31
    5b44:	d5fb      	bpl.n	5b3e <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
    5b46:	4806      	ldr	r0, [pc, #24]	; (5b60 <flash_nrf_write+0x90>)
    5b48:	f003 fd30 	bl	95ac <z_impl_k_sem_give>
	return ret;
    5b4c:	e7cb      	b.n	5ae6 <flash_nrf_write+0x16>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5b4e:	59f1      	ldr	r1, [r6, r7]
    5b50:	f001 fef4 	bl	793c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    5b54:	3704      	adds	r7, #4
}
    5b56:	e7e3      	b.n	5b20 <flash_nrf_write+0x50>
		return -EINVAL;
    5b58:	f06f 0015 	mvn.w	r0, #21
    5b5c:	e7c4      	b.n	5ae8 <flash_nrf_write+0x18>
    5b5e:	bf00      	nop
    5b60:	20014140 	.word	0x20014140
    5b64:	50039000 	.word	0x50039000

00005b68 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5b68:	b530      	push	{r4, r5, lr}
	return port->config;
    5b6a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5b6c:	f001 041f 	and.w	r4, r1, #31
    5b70:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5b72:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5b76:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5b78:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5b7c:	d105      	bne.n	5b8a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5b7e:	4620      	mov	r0, r4
    5b80:	f001 fd80 	bl	7684 <nrfx_gpiote_trigger_disable>

		return 0;
    5b84:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5b86:	b005      	add	sp, #20
    5b88:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b8a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5b8c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b90:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5b94:	d114      	bne.n	5bc0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b9a:	bf0c      	ite	eq
    5b9c:	2304      	moveq	r3, #4
    5b9e:	2305      	movne	r3, #5
    5ba0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ba4:	2300      	movs	r3, #0
    5ba6:	4620      	mov	r0, r4
    5ba8:	4619      	mov	r1, r3
    5baa:	aa02      	add	r2, sp, #8
    5bac:	f001 fbb0 	bl	7310 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5bb0:	4b22      	ldr	r3, [pc, #136]	; (5c3c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    5bb2:	4298      	cmp	r0, r3
    5bb4:	d13c      	bne.n	5c30 <gpio_nrfx_pin_interrupt_configure+0xc8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5bb6:	2101      	movs	r1, #1
    5bb8:	4620      	mov	r0, r4
    5bba:	f001 fd1d 	bl	75f8 <nrfx_gpiote_trigger_enable>
	return 0;
    5bbe:	e7e1      	b.n	5b84 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5bc0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5bc4:	d027      	beq.n	5c16 <gpio_nrfx_pin_interrupt_configure+0xae>
    5bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5bca:	bf14      	ite	ne
    5bcc:	2301      	movne	r3, #1
    5bce:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5bd0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5bd4:	6883      	ldr	r3, [r0, #8]
    5bd6:	fa23 f101 	lsr.w	r1, r3, r1
    5bda:	f011 0101 	ands.w	r1, r1, #1
    5bde:	d1e1      	bne.n	5ba4 <gpio_nrfx_pin_interrupt_configure+0x3c>
    5be0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5be4:	d1de      	bne.n	5ba4 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    5be6:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bea:	0962      	lsrs	r2, r4, #5
    5bec:	f103 0380 	add.w	r3, r3, #128	; 0x80
    5bf0:	d013      	beq.n	5c1a <gpio_nrfx_pin_interrupt_configure+0xb2>
    5bf2:	2a01      	cmp	r2, #1
    5bf4:	d11f      	bne.n	5c36 <gpio_nrfx_pin_interrupt_configure+0xce>
    5bf6:	4a12      	ldr	r2, [pc, #72]	; (5c40 <gpio_nrfx_pin_interrupt_configure+0xd8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5bfc:	07db      	lsls	r3, r3, #31
    5bfe:	d4d1      	bmi.n	5ba4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5c00:	f10d 0507 	add.w	r5, sp, #7
    5c04:	4629      	mov	r1, r5
    5c06:	4620      	mov	r0, r4
    5c08:	f001 fca6 	bl	7558 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5c0c:	4b0d      	ldr	r3, [pc, #52]	; (5c44 <gpio_nrfx_pin_interrupt_configure+0xdc>)
    5c0e:	4298      	cmp	r0, r3
    5c10:	d005      	beq.n	5c1e <gpio_nrfx_pin_interrupt_configure+0xb6>
		trigger_config.p_in_channel = &ch;
    5c12:	9503      	str	r5, [sp, #12]
    5c14:	e7c6      	b.n	5ba4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5c16:	2303      	movs	r3, #3
    5c18:	e7da      	b.n	5bd0 <gpio_nrfx_pin_interrupt_configure+0x68>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    5c1a:	4a0b      	ldr	r2, [pc, #44]	; (5c48 <gpio_nrfx_pin_interrupt_configure+0xe0>)
    5c1c:	e7ec      	b.n	5bf8 <gpio_nrfx_pin_interrupt_configure+0x90>
			err = nrfx_gpiote_channel_alloc(&ch);
    5c1e:	4628      	mov	r0, r5
    5c20:	f001 fce4 	bl	75ec <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5c24:	4b05      	ldr	r3, [pc, #20]	; (5c3c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    5c26:	4298      	cmp	r0, r3
    5c28:	d0f3      	beq.n	5c12 <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
    5c2a:	f06f 000b 	mvn.w	r0, #11
    5c2e:	e7aa      	b.n	5b86 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5c30:	f06f 0015 	mvn.w	r0, #21
    5c34:	e7a7      	b.n	5b86 <gpio_nrfx_pin_interrupt_configure+0x1e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    5c3a:	deff      	udf	#255	; 0xff
    5c3c:	0bad0000 	.word	0x0bad0000
    5c40:	50842800 	.word	0x50842800
    5c44:	0bad0004 	.word	0x0bad0004
    5c48:	50842500 	.word	0x50842500

00005c4c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5c4c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5c4e:	f001 fcbd 	bl	75cc <nrfx_gpiote_is_init>
    5c52:	4604      	mov	r4, r0
    5c54:	b968      	cbnz	r0, 5c72 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5c56:	f001 fc91 	bl	757c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5c5a:	4b08      	ldr	r3, [pc, #32]	; (5c7c <gpio_nrfx_init+0x30>)
    5c5c:	4298      	cmp	r0, r3
    5c5e:	d10a      	bne.n	5c76 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5c60:	4621      	mov	r1, r4
    5c62:	4807      	ldr	r0, [pc, #28]	; (5c80 <gpio_nrfx_init+0x34>)
    5c64:	f001 fc72 	bl	754c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5c68:	4622      	mov	r2, r4
    5c6a:	2105      	movs	r1, #5
    5c6c:	200d      	movs	r0, #13
    5c6e:	f7fd ffd3 	bl	3c18 <z_arm_irq_priority_set>
		return 0;
    5c72:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5c74:	bd10      	pop	{r4, pc}
		return -EIO;
    5c76:	f06f 0004 	mvn.w	r0, #4
    5c7a:	e7fb      	b.n	5c74 <gpio_nrfx_init+0x28>
    5c7c:	0bad0000 	.word	0x0bad0000
    5c80:	00005c85 	.word	0x00005c85

00005c84 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c84:	0942      	lsrs	r2, r0, #5
{
    5c86:	4603      	mov	r3, r0
    5c88:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c8a:	d002      	beq.n	5c92 <nrfx_gpio_handler+0xe>
    5c8c:	2a01      	cmp	r2, #1
    5c8e:	d017      	beq.n	5cc0 <nrfx_gpio_handler+0x3c>
}
    5c90:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c92:	4e0d      	ldr	r6, [pc, #52]	; (5cc8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5c94:	6932      	ldr	r2, [r6, #16]
    5c96:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c98:	2900      	cmp	r1, #0
    5c9a:	d0f9      	beq.n	5c90 <nrfx_gpio_handler+0xc>
    5c9c:	2501      	movs	r5, #1
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    5c9e:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    5ca2:	680c      	ldr	r4, [r1, #0]
    5ca4:	409d      	lsls	r5, r3
    5ca6:	2900      	cmp	r1, #0
    5ca8:	d0f2      	beq.n	5c90 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    5caa:	688a      	ldr	r2, [r1, #8]
    5cac:	402a      	ands	r2, r5
    5cae:	d002      	beq.n	5cb6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5cb0:	4630      	mov	r0, r6
    5cb2:	684b      	ldr	r3, [r1, #4]
    5cb4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5cb6:	b12c      	cbz	r4, 5cc4 <nrfx_gpio_handler+0x40>
    5cb8:	6823      	ldr	r3, [r4, #0]
    5cba:	4621      	mov	r1, r4
    5cbc:	461c      	mov	r4, r3
    5cbe:	e7f2      	b.n	5ca6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5cc0:	4e02      	ldr	r6, [pc, #8]	; (5ccc <nrfx_gpio_handler+0x48>)
    5cc2:	e7e7      	b.n	5c94 <nrfx_gpio_handler+0x10>
    5cc4:	4623      	mov	r3, r4
    5cc6:	e7f8      	b.n	5cba <nrfx_gpio_handler+0x36>
    5cc8:	0000e9d0 	.word	0x0000e9d0
    5ccc:	0000e9b8 	.word	0x0000e9b8

00005cd0 <gpio_nrfx_pin_configure>:
{
    5cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5cd4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5cd6:	f001 051f 	and.w	r5, r1, #31
    5cda:	7b3b      	ldrb	r3, [r7, #12]
{
    5cdc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5cde:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    5ce2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5ce4:	4628      	mov	r0, r5
    5ce6:	f10d 0103 	add.w	r1, sp, #3
    5cea:	f001 fc35 	bl	7558 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5cee:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5cf2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5cf4:	d10b      	bne.n	5d0e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    5cf6:	4628      	mov	r0, r5
    5cf8:	f001 fce6 	bl	76c8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    5cfc:	4b3c      	ldr	r3, [pc, #240]	; (5df0 <gpio_nrfx_pin_configure+0x120>)
    5cfe:	4598      	cmp	r8, r3
    5d00:	d103      	bne.n	5d0a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    5d02:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5d06:	f001 fc6b 	bl	75e0 <nrfx_gpiote_channel_free>
		return 0;
    5d0a:	2000      	movs	r0, #0
    5d0c:	e00c      	b.n	5d28 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d0e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5d10:	4628      	mov	r0, r5
    5d12:	4619      	mov	r1, r3
    5d14:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d16:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5d1a:	f001 faf9 	bl	7310 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5d1e:	4b34      	ldr	r3, [pc, #208]	; (5df0 <gpio_nrfx_pin_configure+0x120>)
    5d20:	4298      	cmp	r0, r3
    5d22:	d004      	beq.n	5d2e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    5d24:	f06f 0015 	mvn.w	r0, #21
}
    5d28:	b004      	add	sp, #16
    5d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    5d2e:	4580      	cmp	r8, r0
    5d30:	d103      	bne.n	5d3a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    5d32:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5d36:	f001 fc53 	bl	75e0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5d3a:	03a3      	lsls	r3, r4, #14
    5d3c:	d549      	bpl.n	5dd2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d3e:	f240 3306 	movw	r3, #774	; 0x306
    5d42:	4023      	ands	r3, r4
    5d44:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5d48:	d019      	beq.n	5d7e <gpio_nrfx_pin_configure+0xae>
    5d4a:	d80c      	bhi.n	5d66 <gpio_nrfx_pin_configure+0x96>
    5d4c:	2b06      	cmp	r3, #6
    5d4e:	d017      	beq.n	5d80 <gpio_nrfx_pin_configure+0xb0>
    5d50:	d804      	bhi.n	5d5c <gpio_nrfx_pin_configure+0x8c>
    5d52:	b1ab      	cbz	r3, 5d80 <gpio_nrfx_pin_configure+0xb0>
    5d54:	2b02      	cmp	r3, #2
    5d56:	d1e5      	bne.n	5d24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5d58:	2304      	movs	r3, #4
    5d5a:	e011      	b.n	5d80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5d60:	d1e0      	bne.n	5d24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5d62:	2301      	movs	r3, #1
    5d64:	e00c      	b.n	5d80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d66:	f240 2202 	movw	r2, #514	; 0x202
    5d6a:	4293      	cmp	r3, r2
    5d6c:	d026      	beq.n	5dbc <gpio_nrfx_pin_configure+0xec>
    5d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5d72:	d025      	beq.n	5dc0 <gpio_nrfx_pin_configure+0xf0>
    5d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5d78:	d1d4      	bne.n	5d24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5d7a:	2302      	movs	r3, #2
    5d7c:	e000      	b.n	5d80 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    5d7e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5d80:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5d84:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5d88:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5d8c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5d8e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    5d92:	bf4c      	ite	mi
    5d94:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    5d96:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5d9a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5d9c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5da0:	d510      	bpl.n	5dc4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5da2:	2301      	movs	r3, #1
    5da4:	687a      	ldr	r2, [r7, #4]
    5da6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5da8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5daa:	2200      	movs	r2, #0
    5dac:	4628      	mov	r0, r5
    5dae:	a901      	add	r1, sp, #4
    5db0:	f001 fb5a 	bl	7468 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5db4:	4b0e      	ldr	r3, [pc, #56]	; (5df0 <gpio_nrfx_pin_configure+0x120>)
    5db6:	4298      	cmp	r0, r3
    5db8:	d0a7      	beq.n	5d0a <gpio_nrfx_pin_configure+0x3a>
    5dba:	e7b3      	b.n	5d24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5dbc:	2305      	movs	r3, #5
    5dbe:	e7df      	b.n	5d80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5dc0:	2303      	movs	r3, #3
    5dc2:	e7dd      	b.n	5d80 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5dc4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5dc6:	bf41      	itttt	mi
    5dc8:	2301      	movmi	r3, #1
    5dca:	687a      	ldrmi	r2, [r7, #4]
    5dcc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5dce:	60d3      	strmi	r3, [r2, #12]
}
    5dd0:	e7eb      	b.n	5daa <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    5dd2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5dd4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5dd8:	bf4c      	ite	mi
    5dda:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    5ddc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5de0:	461a      	mov	r2, r3
    5de2:	4628      	mov	r0, r5
    5de4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    5de6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5dea:	f001 fa91 	bl	7310 <nrfx_gpiote_input_configure>
    5dee:	e7e1      	b.n	5db4 <gpio_nrfx_pin_configure+0xe4>
    5df0:	0bad0000 	.word	0x0bad0000

00005df4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5df4:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    5df6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5dfa:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    5dfc:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5dfe:	d004      	beq.n	5e0a <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    5e00:	2b01      	cmp	r3, #1
    5e02:	4803      	ldr	r0, [pc, #12]	; (5e10 <nrf_gpio_pin_port_decode+0x1c>)
    5e04:	bf18      	it	ne
    5e06:	2000      	movne	r0, #0
    5e08:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e0a:	4802      	ldr	r0, [pc, #8]	; (5e14 <nrf_gpio_pin_port_decode+0x20>)
}
    5e0c:	4770      	bx	lr
    5e0e:	bf00      	nop
    5e10:	50842800 	.word	0x50842800
    5e14:	50842500 	.word	0x50842500

00005e18 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e1c:	4615      	mov	r5, r2
    5e1e:	4682      	mov	sl, r0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5e20:	f04f 0801 	mov.w	r8, #1
    cnf &= ~to_update;
    5e24:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5f8c <pinctrl_configure_pins+0x174>
    5e28:	b085      	sub	sp, #20
    5e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5e2e:	4551      	cmp	r1, sl
    5e30:	d103      	bne.n	5e3a <pinctrl_configure_pins+0x22>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    5e32:	2000      	movs	r0, #0
}
    5e34:	b005      	add	sp, #20
    5e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5e3a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t psel = NRF_GET_PIN(pins[i]);
    5e3e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5e42:	f3c3 2743 	ubfx	r7, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    5e46:	0c1b      	lsrs	r3, r3, #16
			psel = PSEL_DISCONNECTED;
    5e48:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    5e4a:	f1a3 0304 	sub.w	r3, r3, #4
			psel = PSEL_DISCONNECTED;
    5e4e:	bf08      	it	eq
    5e50:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    5e54:	2b1e      	cmp	r3, #30
    5e56:	f200 8096 	bhi.w	5f86 <pinctrl_configure_pins+0x16e>
    5e5a:	e8df f003 	tbb	[pc, r3]
    5e5e:	1710      	.short	0x1710
    5e60:	94949427 	.word	0x94949427
    5e64:	94592d94 	.word	0x94592d94
    5e68:	94949494 	.word	0x94949494
    5e6c:	94949494 	.word	0x94949494
    5e70:	6c69665c 	.word	0x6c69665c
    5e74:	6f949494 	.word	0x6f949494
    5e78:	8c898677 	.word	0x8c898677
    5e7c:	8f          	.byte	0x8f
    5e7d:	00          	.byte	0x00
		if (psel != PSEL_DISCONNECTED) {
    5e7e:	1c62      	adds	r2, r4, #1
			NRF_PSEL_SPIM(reg, SCK) = psel;
    5e80:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
		if (psel != PSEL_DISCONNECTED) {
    5e84:	d17d      	bne.n	5f82 <pinctrl_configure_pins+0x16a>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5e86:	f10a 0a04 	add.w	sl, sl, #4
    5e8a:	e7d0      	b.n	5e2e <pinctrl_configure_pins+0x16>
		if (psel != PSEL_DISCONNECTED) {
    5e8c:	1c63      	adds	r3, r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = psel;
    5e8e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
    5e92:	d0f8      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5e94:	2601      	movs	r6, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e96:	a803      	add	r0, sp, #12
    5e98:	9403      	str	r4, [sp, #12]
    5e9a:	f7ff ffab 	bl	5df4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5e9e:	9b03      	ldr	r3, [sp, #12]
    5ea0:	f04f 0b01 	mov.w	fp, #1
    5ea4:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTCLR = clr_mask;
    5ea8:	60c3      	str	r3, [r0, #12]
    5eaa:	e00e      	b.n	5eca <pinctrl_configure_pins+0xb2>
			NRF_PSEL_SPIM(reg, MISO) = psel;
    5eac:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
		if (psel != PSEL_DISCONNECTED) {
    5eb0:	1c63      	adds	r3, r4, #1
    5eb2:	d0e8      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5eb4:	2600      	movs	r6, #0
    5eb6:	e056      	b.n	5f66 <pinctrl_configure_pins+0x14e>
			NRF_PSEL_TWIM(reg, SCL) = psel;
    5eb8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    5ebc:	2f00      	cmp	r7, #0
    5ebe:	d1f7      	bne.n	5eb0 <pinctrl_configure_pins+0x98>
		if (psel != PSEL_DISCONNECTED) {
    5ec0:	1c67      	adds	r7, r4, #1
    5ec2:	d0e0      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5ec4:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
    5ec6:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5ec8:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5eca:	f8da 3000 	ldr.w	r3, [sl]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ece:	a803      	add	r0, sp, #12
    5ed0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5ed4:	2a00      	cmp	r2, #0
    5ed6:	bf1c      	itt	ne
    5ed8:	2601      	movne	r6, #1
    5eda:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5ede:	9301      	str	r3, [sp, #4]
    5ee0:	9403      	str	r4, [sp, #12]
    5ee2:	f7ff ff87 	bl	5df4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ee6:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    5ee8:	9b01      	ldr	r3, [sp, #4]
    5eea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5eee:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    5ef2:	f3c3 14c1 	ubfx	r4, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    5ef6:	023b      	lsls	r3, r7, #8
    5ef8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    5efc:	ea43 030b 	orr.w	r3, r3, fp
    cnf &= ~to_update;
    5f00:	ea02 0209 	and.w	r2, r2, r9
    5f04:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    5f06:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    5f0a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    5f0e:	e7ba      	b.n	5e86 <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = psel;
    5f10:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    5f14:	e7d2      	b.n	5ebc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_PWM(reg, OUT[0]) = psel;
    5f16:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
		if (psel != PSEL_DISCONNECTED) {
    5f1a:	1c66      	adds	r6, r4, #1
			write = NRF_GET_INVERT(pins[i]);
    5f1c:	f8da 3000 	ldr.w	r3, [sl]
		if (psel != PSEL_DISCONNECTED) {
    5f20:	d0b1      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
			write = NRF_GET_INVERT(pins[i]);
    5f22:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
    5f26:	b9ab      	cbnz	r3, 5f54 <pinctrl_configure_pins+0x13c>
    5f28:	e7b4      	b.n	5e94 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_PWM(reg, OUT[1]) = psel;
    5f2a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    5f2e:	e7f4      	b.n	5f1a <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[2]) = psel;
    5f30:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    5f34:	e7f1      	b.n	5f1a <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[3]) = psel;
    5f36:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
    5f3a:	e7ee      	b.n	5f1a <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, SCK) = psel;
    5f3c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
		if (psel != PSEL_DISCONNECTED) {
    5f40:	1c62      	adds	r2, r4, #1
    5f42:	d0a0      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5f44:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5f46:	f04f 0b00 	mov.w	fp, #0
    5f4a:	e7be      	b.n	5eca <pinctrl_configure_pins+0xb2>
		if (psel != PSEL_DISCONNECTED) {
    5f4c:	1c60      	adds	r0, r4, #1
			NRF_PSEL_QSPI(reg, CSN) = psel;
    5f4e:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
		if (psel != PSEL_DISCONNECTED) {
    5f52:	d098      	beq.n	5e86 <pinctrl_configure_pins+0x6e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f54:	a803      	add	r0, sp, #12
    5f56:	9403      	str	r4, [sp, #12]
    5f58:	f7ff ff4c 	bl	5df4 <nrf_gpio_pin_port_decode>
        nrf_gpio_pin_set(pin_number);
    5f5c:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5f5e:	9b03      	ldr	r3, [sp, #12]
    5f60:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    5f64:	6083      	str	r3, [r0, #8]
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5f66:	46b3      	mov	fp, r6
    5f68:	e7af      	b.n	5eca <pinctrl_configure_pins+0xb2>
			NRF_PSEL_QSPI(reg, IO0) = psel;
    5f6a:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
		if (psel != PSEL_DISCONNECTED) {
    5f6e:	e7e7      	b.n	5f40 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO1) = psel;
    5f70:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
		if (psel != PSEL_DISCONNECTED) {
    5f74:	e7e4      	b.n	5f40 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO2) = psel;
    5f76:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
    5f7a:	e7e1      	b.n	5f40 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO3) = psel;
    5f7c:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
		if (psel != PSEL_DISCONNECTED) {
    5f80:	e7de      	b.n	5f40 <pinctrl_configure_pins+0x128>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5f82:	2600      	movs	r6, #0
    5f84:	e787      	b.n	5e96 <pinctrl_configure_pins+0x7e>
		switch (NRF_GET_FUN(pins[i])) {
    5f86:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5f8a:	e753      	b.n	5e34 <pinctrl_configure_pins+0x1c>
    5f8c:	fffcf0f0 	.word	0xfffcf0f0

00005f90 <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
    5f90:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    5f92:	6844      	ldr	r4, [r0, #4]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    5f94:	2201      	movs	r2, #1
    5f96:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    5f9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f9c:	f005 ffd8 	bl	bf50 <gpio_pin_set>
	int ret;

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
    5fa0:	2800      	cmp	r0, #0
    5fa2:	db02      	blt.n	5faa <regulator_fixed_enable+0x1a>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
    5fa4:	6a24      	ldr	r4, [r4, #32]
    5fa6:	b90c      	cbnz	r4, 5fac <regulator_fixed_enable+0x1c>
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
    5fa8:	2000      	movs	r0, #0
}
    5faa:	bd38      	pop	{r3, r4, r5, pc}
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5fac:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    5fb0:	2100      	movs	r1, #0
    5fb2:	4805      	ldr	r0, [pc, #20]	; (5fc8 <regulator_fixed_enable+0x38>)
    5fb4:	2300      	movs	r3, #0
    5fb6:	fbe4 0105 	umlal	r0, r1, r4, r5
    5fba:	4a04      	ldr	r2, [pc, #16]	; (5fcc <regulator_fixed_enable+0x3c>)
    5fbc:	f7fa f8ca 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5fc0:	f003 fe84 	bl	9ccc <z_impl_k_sleep>
    5fc4:	e7f0      	b.n	5fa8 <regulator_fixed_enable+0x18>
    5fc6:	bf00      	nop
    5fc8:	000f423f 	.word	0x000f423f
    5fcc:	000f4240 	.word	0x000f4240

00005fd0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5fd0:	2301      	movs	r3, #1
    5fd2:	4083      	lsls	r3, r0
{
    5fd4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5fd6:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fd8:	4a0b      	ldr	r2, [pc, #44]	; (6008 <compare_int_lock+0x38>)
    5fda:	e8d2 1fef 	ldaex	r1, [r2]
    5fde:	ea01 0504 	and.w	r5, r1, r4
    5fe2:	e8c2 5fe6 	stlex	r6, r5, [r2]
    5fe6:	2e00      	cmp	r6, #0
    5fe8:	d1f7      	bne.n	5fda <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    5fea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5fee:	4082      	lsls	r2, r0
    5ff0:	4806      	ldr	r0, [pc, #24]	; (600c <compare_int_lock+0x3c>)
    5ff2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    5ff6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ffa:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
    5ffe:	420b      	tst	r3, r1
}
    6000:	bf14      	ite	ne
    6002:	2001      	movne	r0, #1
    6004:	2000      	moveq	r0, #0
    6006:	bd70      	pop	{r4, r5, r6, pc}
    6008:	2001419c 	.word	0x2001419c
    600c:	50015000 	.word	0x50015000

00006010 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6010:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6012:	490e      	ldr	r1, [pc, #56]	; (604c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    6014:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6018:	e9d1 3400 	ldrd	r3, r4, [r1]
    601c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    601e:	18c3      	adds	r3, r0, r3
    6020:	f144 0400 	adc.w	r4, r4, #0
    6024:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6028:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    602c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6030:	d209      	bcs.n	6046 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6032:	4b07      	ldr	r3, [pc, #28]	; (6050 <sys_clock_timeout_handler+0x40>)
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	0a1a      	lsrs	r2, r3, #8
    6038:	061b      	lsls	r3, r3, #24
    603a:	199c      	adds	r4, r3, r6
    603c:	4b05      	ldr	r3, [pc, #20]	; (6054 <sys_clock_timeout_handler+0x44>)
    603e:	f142 0500 	adc.w	r5, r2, #0
    6042:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
    6046:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    6048:	f003 bfc2 	b.w	9fd0 <sys_clock_announce>
    604c:	200025d0 	.word	0x200025d0
    6050:	200141a0 	.word	0x200141a0
    6054:	200025d8 	.word	0x200025d8

00006058 <compare_int_unlock>:
	if (key) {
    6058:	b1d9      	cbz	r1, 6092 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    605a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    605c:	4a0d      	ldr	r2, [pc, #52]	; (6094 <compare_int_unlock+0x3c>)
    605e:	4083      	lsls	r3, r0
    6060:	e8d2 cfef 	ldaex	ip, [r2]
    6064:	ea4c 0c03 	orr.w	ip, ip, r3
    6068:	e8c2 cfe1 	stlex	r1, ip, [r2]
    606c:	2900      	cmp	r1, #0
    606e:	d1f7      	bne.n	6060 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    6070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    6074:	4a08      	ldr	r2, [pc, #32]	; (6098 <compare_int_unlock+0x40>)
    6076:	4083      	lsls	r3, r0
    6078:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    607c:	4b07      	ldr	r3, [pc, #28]	; (609c <compare_int_unlock+0x44>)
    607e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6082:	40c3      	lsrs	r3, r0
    6084:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6086:	bf42      	ittt	mi
    6088:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    608c:	4b04      	ldrmi	r3, [pc, #16]	; (60a0 <compare_int_unlock+0x48>)
    608e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6092:	4770      	bx	lr
    6094:	2001419c 	.word	0x2001419c
    6098:	50015000 	.word	0x50015000
    609c:	20014198 	.word	0x20014198
    60a0:	e000e100 	.word	0xe000e100

000060a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    60a4:	4b0d      	ldr	r3, [pc, #52]	; (60dc <z_nrf_rtc_timer_read+0x38>)
    60a6:	6818      	ldr	r0, [r3, #0]
    60a8:	0a01      	lsrs	r1, r0, #8
    60aa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    60ac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    60b0:	4b0b      	ldr	r3, [pc, #44]	; (60e0 <z_nrf_rtc_timer_read+0x3c>)
    60b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    60b6:	1818      	adds	r0, r3, r0
    60b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    60bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    60c0:	d20a      	bcs.n	60d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    60c2:	4b08      	ldr	r3, [pc, #32]	; (60e4 <z_nrf_rtc_timer_read+0x40>)
    60c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    60c8:	4290      	cmp	r0, r2
    60ca:	eb71 0303 	sbcs.w	r3, r1, r3
    60ce:	d203      	bcs.n	60d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    60d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    60d4:	f141 0100 	adc.w	r1, r1, #0
}
    60d8:	4770      	bx	lr
    60da:	bf00      	nop
    60dc:	200141a0 	.word	0x200141a0
    60e0:	50015000 	.word	0x50015000
    60e4:	200025d8 	.word	0x200025d8

000060e8 <compare_set>:
{
    60e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60ec:	b085      	sub	sp, #20
    60ee:	4616      	mov	r6, r2
    60f0:	461f      	mov	r7, r3
    60f2:	4604      	mov	r4, r0
    60f4:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
	key = compare_int_lock(chan);
    60f8:	f7ff ff6a 	bl	5fd0 <compare_int_lock>
    60fc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    60fe:	f7ff ffd1 	bl	60a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6102:	42b0      	cmp	r0, r6
    6104:	eb71 0307 	sbcs.w	r3, r1, r7
    6108:	d252      	bcs.n	61b0 <compare_set+0xc8>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    610a:	4b3b      	ldr	r3, [pc, #236]	; (61f8 <compare_set+0x110>)
    610c:	1a30      	subs	r0, r6, r0
    610e:	eb67 0101 	sbc.w	r1, r7, r1
    6112:	4298      	cmp	r0, r3
    6114:	f171 0100 	sbcs.w	r1, r1, #0
    6118:	d24d      	bcs.n	61b6 <compare_set+0xce>
		if (target_time != cc_data[chan].target_time) {
    611a:	4b38      	ldr	r3, [pc, #224]	; (61fc <compare_set+0x114>)
    611c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6120:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6124:	429f      	cmp	r7, r3
    6126:	bf08      	it	eq
    6128:	4296      	cmpeq	r6, r2
    612a:	d058      	beq.n	61de <compare_set+0xf6>
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    612c:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    6130:	4933      	ldr	r1, [pc, #204]	; (6200 <compare_set+0x118>)
    6132:	fa08 f804 	lsl.w	r8, r8, r4
	event_clear(chan);
    6136:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    6138:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    613c:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
    6140:	f005 ff48 	bl	bfd4 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    6144:	f04f 0903 	mov.w	r9, #3
	uint32_t cc_val = req_cc;
    6148:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    614a:	f104 0550 	add.w	r5, r4, #80	; 0x50
    614e:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6150:	b2ad      	uxth	r5, r5
    6152:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    6156:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    615a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    615e:	9302      	str	r3, [sp, #8]
    6160:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6162:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6166:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
    616a:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    616e:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6172:	4a24      	ldr	r2, [pc, #144]	; (6204 <compare_set+0x11c>)
	return (a - b) & COUNTER_MAX;
    6174:	1ac0      	subs	r0, r0, r3
    6176:	3803      	subs	r0, #3
    6178:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    617c:	4290      	cmp	r0, r2
    617e:	d92e      	bls.n	61de <compare_set+0xf6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6180:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6182:	b168      	cbz	r0, 61a0 <compare_set+0xb8>
     return p_reg->COUNTER;
    6184:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6188:	eba3 000b 	sub.w	r0, r3, fp
    618c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6190:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    6194:	9303      	str	r3, [sp, #12]
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6196:	d922      	bls.n	61de <compare_set+0xf6>
					event_clear(chan);
    6198:	4620      	mov	r0, r4
    619a:	f005 ff1b 	bl	bfd4 <event_clear>
					if (exact) {
    619e:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
    61a0:	f1ba 0f00 	cmp.w	sl, #0
    61a4:	d107      	bne.n	61b6 <compare_set+0xce>
			cc_val = now + cc_inc;
    61a6:	eb09 0003 	add.w	r0, r9, r3
			cc_inc++;
    61aa:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
    61ae:	e7d7      	b.n	6160 <compare_set+0x78>
	} else if (!exact) {
    61b0:	f1ba 0f00 	cmp.w	sl, #0
    61b4:	d009      	beq.n	61ca <compare_set+0xe2>
			return -EINVAL;
    61b6:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
    61ba:	4620      	mov	r0, r4
    61bc:	9901      	ldr	r1, [sp, #4]
    61be:	f7ff ff4b 	bl	6058 <compare_int_unlock>
}
    61c2:	4628      	mov	r0, r5
    61c4:	b005      	add	sp, #20
    61c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
    61ca:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    61cc:	4a0e      	ldr	r2, [pc, #56]	; (6208 <compare_set+0x120>)
    61ce:	40a3      	lsls	r3, r4
    61d0:	e8d2 0fef 	ldaex	r0, [r2]
    61d4:	4318      	orrs	r0, r3
    61d6:	e8c2 0fe1 	stlex	r1, r0, [r2]
    61da:	2900      	cmp	r1, #0
    61dc:	d1f8      	bne.n	61d0 <compare_set+0xe8>
		cc_data[chan].target_time = target_time;
    61de:	4907      	ldr	r1, [pc, #28]	; (61fc <compare_set+0x114>)
		cc_data[chan].callback = handler;
    61e0:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
    61e2:	0123      	lsls	r3, r4, #4
		cc_data[chan].callback = handler;
    61e4:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
    61e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		cc_data[chan].target_time = target_time;
    61e8:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].user_context = user_data;
    61ec:	2500      	movs	r5, #0
		cc_data[chan].target_time = target_time;
    61ee:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
    61f2:	6053      	str	r3, [r2, #4]
    61f4:	e7e1      	b.n	61ba <compare_set+0xd2>
    61f6:	bf00      	nop
    61f8:	00800001 	.word	0x00800001
    61fc:	200025c0 	.word	0x200025c0
    6200:	50015000 	.word	0x50015000
    6204:	007ffffd 	.word	0x007ffffd
    6208:	20014198 	.word	0x20014198

0000620c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    620c:	b530      	push	{r4, r5, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    620e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    p_reg->PRESCALER = val;
    6212:	2400      	movs	r4, #0
    6214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    6218:	4d19      	ldr	r5, [pc, #100]	; (6280 <sys_clock_driver_init+0x74>)
    621a:	4b1a      	ldr	r3, [pc, #104]	; (6284 <sys_clock_driver_init+0x78>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    621c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6220:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6224:	f8c5 3348 	str.w	r3, [r5, #840]	; 0x348
    6228:	4b17      	ldr	r3, [pc, #92]	; (6288 <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
    622a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    622e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    6232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6236:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    623a:	2302      	movs	r3, #2
    623c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    6240:	4b12      	ldr	r3, [pc, #72]	; (628c <sys_clock_driver_init+0x80>)
{
    6242:	b085      	sub	sp, #20

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6244:	2101      	movs	r1, #1
    6246:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    624a:	2015      	movs	r0, #21
    624c:	4622      	mov	r2, r4
    624e:	f7fd fce3 	bl	3c18 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6252:	2015      	movs	r0, #21
    6254:	f7fd fcb0 	bl	3bb8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6258:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    625a:	4a0d      	ldr	r2, [pc, #52]	; (6290 <sys_clock_driver_init+0x84>)
    625c:	60ab      	str	r3, [r5, #8]
    625e:	602b      	str	r3, [r5, #0]
    6260:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
    6262:	4b0c      	ldr	r3, [pc, #48]	; (6294 <sys_clock_driver_init+0x88>)
    6264:	4a0c      	ldr	r2, [pc, #48]	; (6298 <sys_clock_driver_init+0x8c>)
    6266:	9300      	str	r3, [sp, #0]
    6268:	4620      	mov	r0, r4
    626a:	2300      	movs	r3, #0
    626c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6270:	f7ff ff3a 	bl	60e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6274:	4620      	mov	r0, r4
    6276:	f7fe fffd 	bl	5274 <z_nrf_clock_control_lf_on>

	return 0;
}
    627a:	4620      	mov	r0, r4
    627c:	b005      	add	sp, #20
    627e:	bd30      	pop	{r4, r5, pc}
    6280:	50015000 	.word	0x50015000
    6284:	000f0003 	.word	0x000f0003
    6288:	200025c0 	.word	0x200025c0
    628c:	e000e100 	.word	0xe000e100
    6290:	2001419c 	.word	0x2001419c
    6294:	00006011 	.word	0x00006011
    6298:	007fffff 	.word	0x007fffff

0000629c <rtc_nrf_isr>:
{
    629c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    62a0:	4b2e      	ldr	r3, [pc, #184]	; (635c <rtc_nrf_isr+0xc0>)
    62a2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    62a6:	0790      	lsls	r0, r2, #30
    62a8:	d50b      	bpl.n	62c2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    62ae:	b142      	cbz	r2, 62c2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    62b0:	2200      	movs	r2, #0
    62b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    62b6:	4a2a      	ldr	r2, [pc, #168]	; (6360 <rtc_nrf_isr+0xc4>)
    62b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    62bc:	6813      	ldr	r3, [r2, #0]
    62be:	3301      	adds	r3, #1
    62c0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    62c2:	4a26      	ldr	r2, [pc, #152]	; (635c <rtc_nrf_isr+0xc0>)
    62c4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
    62c8:	03d9      	lsls	r1, r3, #15
    62ca:	d527      	bpl.n	631c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    62cc:	4b25      	ldr	r3, [pc, #148]	; (6364 <rtc_nrf_isr+0xc8>)
    62ce:	e8d3 1fef 	ldaex	r1, [r3]
    62d2:	f021 0001 	bic.w	r0, r1, #1
    62d6:	e8c3 0fe4 	stlex	r4, r0, [r3]
    62da:	2c00      	cmp	r4, #0
    62dc:	d1f7      	bne.n	62ce <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    62de:	07cb      	lsls	r3, r1, #31
    62e0:	d402      	bmi.n	62e8 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62e2:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    62e6:	b1cb      	cbz	r3, 631c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    62e8:	2500      	movs	r5, #0
    62ea:	4c1c      	ldr	r4, [pc, #112]	; (635c <rtc_nrf_isr+0xc0>)
    62ec:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    62f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    62f4:	f7ff fed6 	bl	60a4 <z_nrf_rtc_timer_read>
    62f8:	f04f 0320 	mov.w	r3, #32
    62fc:	f3ef 8211 	mrs	r2, BASEPRI
    6300:	f383 8812 	msr	BASEPRI_MAX, r3
    6304:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    6308:	4b17      	ldr	r3, [pc, #92]	; (6368 <rtc_nrf_isr+0xcc>)
    630a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    630e:	42b0      	cmp	r0, r6
    6310:	41b9      	sbcs	r1, r7
    6312:	d206      	bcs.n	6322 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    6314:	f382 8811 	msr	BASEPRI, r2
    6318:	f3bf 8f6f 	isb	sy
}
    631c:	b003      	add	sp, #12
    631e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6322:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    6326:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    632a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    632e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6330:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    6334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6338:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    633c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6340:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6344:	f382 8811 	msr	BASEPRI, r2
    6348:	f3bf 8f6f 	isb	sy
		if (handler) {
    634c:	2900      	cmp	r1, #0
    634e:	d0e5      	beq.n	631c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    6350:	9000      	str	r0, [sp, #0]
    6352:	4632      	mov	r2, r6
    6354:	463b      	mov	r3, r7
    6356:	4628      	mov	r0, r5
    6358:	4788      	blx	r1
    635a:	e7df      	b.n	631c <rtc_nrf_isr+0x80>
    635c:	50015000 	.word	0x50015000
    6360:	200141a0 	.word	0x200141a0
    6364:	20014198 	.word	0x20014198
    6368:	200025c0 	.word	0x200025c0

0000636c <sys_clock_set_timeout>:
{
    636c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    636e:	1c43      	adds	r3, r0, #1
    6370:	d022      	beq.n	63b8 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6372:	2801      	cmp	r0, #1
    6374:	dd22      	ble.n	63bc <sys_clock_set_timeout+0x50>
    6376:	4a12      	ldr	r2, [pc, #72]	; (63c0 <sys_clock_set_timeout+0x54>)
    6378:	4b12      	ldr	r3, [pc, #72]	; (63c4 <sys_clock_set_timeout+0x58>)
    637a:	4290      	cmp	r0, r2
    637c:	bfd4      	ite	le
    637e:	4604      	movle	r4, r0
    6380:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6382:	f7ff fe8f 	bl	60a4 <z_nrf_rtc_timer_read>
    6386:	4b10      	ldr	r3, [pc, #64]	; (63c8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6388:	490e      	ldr	r1, [pc, #56]	; (63c4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    638a:	e9d3 2300 	ldrd	r2, r3, [r3]
    638e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6390:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6394:	bf28      	it	cs
    6396:	2400      	movcs	r4, #0
	cyc += unannounced;
    6398:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    639a:	428c      	cmp	r4, r1
    639c:	bf28      	it	cs
    639e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    63a0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    63a2:	490a      	ldr	r1, [pc, #40]	; (63cc <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    63a4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    63a6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    63aa:	9100      	str	r1, [sp, #0]
    63ac:	f143 0300 	adc.w	r3, r3, #0
    63b0:	f7ff fe9a 	bl	60e8 <compare_set>
}
    63b4:	b004      	add	sp, #16
    63b6:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    63b8:	4c02      	ldr	r4, [pc, #8]	; (63c4 <sys_clock_set_timeout+0x58>)
    63ba:	e7e2      	b.n	6382 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    63bc:	2401      	movs	r4, #1
    63be:	e7e0      	b.n	6382 <sys_clock_set_timeout+0x16>
    63c0:	007ffffe 	.word	0x007ffffe
    63c4:	007fffff 	.word	0x007fffff
    63c8:	200025d0 	.word	0x200025d0
    63cc:	00006011 	.word	0x00006011

000063d0 <sys_clock_elapsed>:
{
    63d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    63d2:	f7ff fe67 	bl	60a4 <z_nrf_rtc_timer_read>
    63d6:	4b02      	ldr	r3, [pc, #8]	; (63e0 <sys_clock_elapsed+0x10>)
    63d8:	681b      	ldr	r3, [r3, #0]
}
    63da:	1ac0      	subs	r0, r0, r3
    63dc:	bd08      	pop	{r3, pc}
    63de:	bf00      	nop
    63e0:	200025d0 	.word	0x200025d0

000063e4 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    63e4:	2301      	movs	r3, #1
{
    63e6:	b510      	push	{r4, lr}
    63e8:	4c07      	ldr	r4, [pc, #28]	; (6408 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    63ea:	2015      	movs	r0, #21
    63ec:	6063      	str	r3, [r4, #4]
    63ee:	f7fd fbf1 	bl	3bd4 <arch_irq_disable>
    63f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    63f6:	4b05      	ldr	r3, [pc, #20]	; (640c <sys_clock_disable+0x28>)
    63f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    63fc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    6400:	4b03      	ldr	r3, [pc, #12]	; (6410 <sys_clock_disable+0x2c>)
    6402:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    6406:	bd10      	pop	{r4, pc}
    6408:	50015000 	.word	0x50015000
    640c:	000f0003 	.word	0x000f0003
    6410:	e000e100 	.word	0xe000e100

00006414 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    6414:	ea40 0301 	orr.w	r3, r0, r1
    6418:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    641c:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    641e:	b98b      	cbnz	r3, 6444 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    6420:	f240 1515 	movw	r5, #277	; 0x115
    6424:	4c09      	ldr	r4, [pc, #36]	; (644c <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6426:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    6428:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    642c:	4299      	cmp	r1, r3
    642e:	d101      	bne.n	6434 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    6430:	2000      	movs	r0, #0
}
    6432:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    6434:	18c2      	adds	r2, r0, r3
    6436:	b2d2      	uxtb	r2, r2
    6438:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    643c:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6440:	3301      	adds	r3, #1
    6442:	e7f3      	b.n	642c <fprotect_area+0x18>
		return -EINVAL;
    6444:	f06f 0015 	mvn.w	r0, #21
    6448:	e7f3      	b.n	6432 <fprotect_area+0x1e>
    644a:	bf00      	nop
    644c:	50003000 	.word	0x50003000

00006450 <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    6450:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    6454:	6818      	ldr	r0, [r3, #0]
    6456:	4b05      	ldr	r3, [pc, #20]	; (646c <pcd_fw_copy_status_get+0x1c>)
    6458:	4298      	cmp	r0, r3
    645a:	d005      	beq.n	6468 <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
    645c:	4b04      	ldr	r3, [pc, #16]	; (6470 <pcd_fw_copy_status_get+0x20>)
    645e:	4298      	cmp	r0, r3
    6460:	bf0c      	ite	eq
    6462:	2001      	moveq	r0, #1
    6464:	2002      	movne	r0, #2
    6466:	4770      	bx	lr
		return PCD_STATUS_COPY;
    6468:	2000      	movs	r0, #0
}
    646a:	4770      	bx	lr
    646c:	b5b4b3b6 	.word	0xb5b4b3b6
    6470:	f103ce5d 	.word	0xf103ce5d

00006474 <network_core_finished_check_handler>:
	 */
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
}

static void network_core_finished_check_handler(struct k_timer *timer)
{
    6474:	b508      	push	{r3, lr}
	if (pcd_fw_copy_status_get() != PCD_STATUS_COPY) {
    6476:	f7ff ffeb 	bl	6450 <pcd_fw_copy_status_get>
    647a:	b130      	cbz	r0, 648a <network_core_finished_check_handler+0x16>
	z_impl_k_timer_stop(timer);
    647c:	4803      	ldr	r0, [pc, #12]	; (648c <network_core_finished_check_handler+0x18>)
    647e:	f008 f99f 	bl	e7c0 <z_impl_k_timer_stop>
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    6482:	2200      	movs	r2, #0
    6484:	4b02      	ldr	r3, [pc, #8]	; (6490 <network_core_finished_check_handler+0x1c>)
    6486:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		 * successfully, tidy up and cancel timer
		 */
		k_timer_stop(&network_core_finished_check_timer);
		network_core_pcd_tidy();
	}
}
    648a:	bd08      	pop	{r3, pc}
    648c:	200022c0 	.word	0x200022c0
    6490:	50003000 	.word	0x50003000

00006494 <pcd_network_core_update_initiate>:
    6494:	2210      	movs	r2, #16
    6496:	4b14      	ldr	r3, [pc, #80]	; (64e8 <pcd_network_core_update_initiate+0x54>)

	return network_core_pcd_cmdset(src_addr, len, wait);
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    6498:	b513      	push	{r0, r1, r4, lr}
    649a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    if (hold)
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    649e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    64a2:	2301      	movs	r3, #1
    64a4:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    64a8:	b1d0      	cbz	r0, 64e0 <pcd_network_core_update_initiate+0x4c>
    64aa:	b1c9      	cbz	r1, 64e0 <pcd_network_core_update_initiate+0x4c>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    64ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    64b0:	4c0e      	ldr	r4, [pc, #56]	; (64ec <pcd_network_core_update_initiate+0x58>)
	cmd->len = len;
    64b2:	6099      	str	r1, [r3, #8]
	cmd->data = data;
    64b4:	e9c3 4000 	strd	r4, r0, [r3]
	cmd->offset = offset;
    64b8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
                                  RESET_NETWORK_FORCEOFF_FORCEOFF_Pos;
        *(volatile uint32_t *)0x50005618UL = 0UL;
    }
    else
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    64bc:	2400      	movs	r4, #0
    64be:	60d9      	str	r1, [r3, #12]
    64c0:	f8c2 4614 	str.w	r4, [r2, #1556]	; 0x614
	int rc = network_core_update(src_addr, len, false);

	if (rc == 0) {
		k_timer_start(&network_core_finished_check_timer,
    64c4:	2300      	movs	r3, #0
	compiler_barrier();
    64c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
    64ca:	4809      	ldr	r0, [pc, #36]	; (64f0 <pcd_network_core_update_initiate+0x5c>)
    64cc:	e9cd 2300 	strd	r2, r3, [sp]
    64d0:	f003 fe72 	bl	a1b8 <z_impl_k_timer_start>
	z_impl_k_busy_wait(usec_to_wait);
    64d4:	4807      	ldr	r0, [pc, #28]	; (64f4 <pcd_network_core_update_initiate+0x60>)
    64d6:	f008 f94d 	bl	e774 <z_impl_k_busy_wait>
    64da:	4620      	mov	r0, r4
			      NETWORK_CORE_UPDATE_CHECK_TIME);
		k_busy_wait(1 * USEC_PER_SEC);
	}

	return rc;
}
    64dc:	b002      	add	sp, #8
    64de:	bd10      	pop	{r4, pc}
    64e0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    64e4:	e7fa      	b.n	64dc <pcd_network_core_update_initiate+0x48>
    64e6:	bf00      	nop
    64e8:	50003000 	.word	0x50003000
    64ec:	b5b4b3b6 	.word	0xb5b4b3b6
    64f0:	200022c0 	.word	0x200022c0
    64f4:	000f4240 	.word	0x000f4240

000064f8 <pcd_network_core_update>:
    64f8:	2210      	movs	r2, #16
    64fa:	4b17      	ldr	r3, [pc, #92]	; (6558 <pcd_network_core_update+0x60>)

int pcd_network_core_update(const void *src_addr, size_t len)
{
    64fc:	b510      	push	{r4, lr}
    64fe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    6502:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6506:	2301      	movs	r3, #1
    6508:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    650c:	b308      	cbz	r0, 6552 <pcd_network_core_update+0x5a>
    650e:	b301      	cbz	r1, 6552 <pcd_network_core_update+0x5a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    6510:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    6514:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    6516:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    651a:	4c10      	ldr	r4, [pc, #64]	; (655c <pcd_network_core_update+0x64>)
	cmd->offset = offset;
    651c:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    651e:	e9c3 4000 	strd	r4, r0, [r3]
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    6522:	2300      	movs	r3, #0
    6524:	4c0e      	ldr	r4, [pc, #56]	; (6560 <pcd_network_core_update+0x68>)
    6526:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    652a:	4620      	mov	r0, r4
    652c:	f008 f922 	bl	e774 <z_impl_k_busy_wait>
		err = pcd_fw_copy_status_get();
    6530:	f7ff ff8e 	bl	6450 <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    6534:	2800      	cmp	r0, #0
    6536:	d0f8      	beq.n	652a <pcd_network_core_update+0x32>
	if (err == PCD_STATUS_COPY_FAILED) {
    6538:	2802      	cmp	r0, #2
    653a:	d009      	beq.n	6550 <pcd_network_core_update+0x58>
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    653c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6540:	2201      	movs	r2, #1
    6542:	2000      	movs	r0, #0
    6544:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    6548:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    654c:	f8c3 0440 	str.w	r0, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, true);
}
    6550:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6552:	f06f 0015 	mvn.w	r0, #21
	return network_core_update(src_addr, len, true);
    6556:	e7fb      	b.n	6550 <pcd_network_core_update+0x58>
    6558:	50003000 	.word	0x50003000
    655c:	b5b4b3b6 	.word	0xb5b4b3b6
    6560:	000f4240 	.word	0x000f4240

00006564 <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    6564:	f44f 7282 	mov.w	r2, #260	; 0x104
    6568:	4b01      	ldr	r3, [pc, #4]	; (6570 <pcd_lock_ram+0xc>)
    656a:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    656e:	4770      	bx	lr
    6570:	50003000 	.word	0x50003000

00006574 <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    6574:	2801      	cmp	r0, #1
    6576:	d10f      	bne.n	6598 <boot_read_image_header_hook+0x24>
    6578:	b979      	cbnz	r1, 659a <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    657a:	4b08      	ldr	r3, [pc, #32]	; (659c <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    657c:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    657e:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    6580:	f44f 7300 	mov.w	r3, #512	; 0x200
    6584:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    6586:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    658a:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    658e:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    6592:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    6594:	61d1      	str	r1, [r2, #28]
		return 0;
    6596:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    6598:	2001      	movs	r0, #1
}
    659a:	4770      	bx	lr
    659c:	96f3b83d 	.word	0x96f3b83d

000065a0 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    65a0:	2801      	cmp	r0, #1
    65a2:	d103      	bne.n	65ac <boot_image_check_hook+0xc>
    65a4:	b919      	cbnz	r1, 65ae <boot_image_check_hook+0xe>
		FIH_RET(FIH_SUCCESS);
    65a6:	4b02      	ldr	r3, [pc, #8]	; (65b0 <boot_image_check_hook+0x10>)
    65a8:	6818      	ldr	r0, [r3, #0]
    65aa:	4770      	bx	lr
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    65ac:	2001      	movs	r0, #1
}
    65ae:	4770      	bx	lr
    65b0:	20002770 	.word	0x20002770

000065b4 <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    65b4:	b513      	push	{r0, r1, r4, lr}
    65b6:	4604      	mov	r4, r0
    65b8:	4810      	ldr	r0, [pc, #64]	; (65fc <network_core_update+0x48>)
    65ba:	f007 fe10 	bl	e1de <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    65be:	b1b0      	cbz	r0, 65ee <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    65c0:	2000      	movs	r0, #0
    65c2:	a901      	add	r1, sp, #4
    65c4:	f7ff fa2a 	bl	5a1c <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    65c8:	4b0d      	ldr	r3, [pc, #52]	; (6600 <network_core_update+0x4c>)
    65ca:	6802      	ldr	r2, [r0, #0]
    65cc:	429a      	cmp	r2, r3
    65ce:	d111      	bne.n	65f4 <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    65d0:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    65d2:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    65d4:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    65d6:	6843      	ldr	r3, [r0, #4]
    65d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    65dc:	d90a      	bls.n	65f4 <network_core_update+0x40>
			if (wait) {
    65de:	b11c      	cbz	r4, 65e8 <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    65e0:	f7ff ff8a 	bl	64f8 <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    65e4:	b002      	add	sp, #8
    65e6:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    65e8:	f7ff ff54 	bl	6494 <pcd_network_core_update_initiate>
    65ec:	e7fa      	b.n	65e4 <network_core_update+0x30>
		return -ENODEV;
    65ee:	f06f 0012 	mvn.w	r0, #18
    65f2:	e7f7      	b.n	65e4 <network_core_update+0x30>
	return -ENODATA;
    65f4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    65f8:	e7f4      	b.n	65e4 <network_core_update+0x30>
    65fa:	bf00      	nop
    65fc:	0000ea00 	.word	0x0000ea00
    6600:	96f3b83d 	.word	0x96f3b83d

00006604 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    6604:	b530      	push	{r4, r5, lr}
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    6606:	6881      	ldr	r1, [r0, #8]
    6608:	b085      	sub	sp, #20
    660a:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    660c:	f021 0407 	bic.w	r4, r1, #7
{
    6610:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    6612:	f004 fec5 	bl	b3a0 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    6616:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    6618:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    661a:	4668      	mov	r0, sp
    661c:	f005 f952 	bl	b8c4 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    6620:	2210      	movs	r2, #16
    6622:	4668      	mov	r0, sp
    6624:	4906      	ldr	r1, [pc, #24]	; (6640 <boot_write_magic+0x3c>)
    6626:	f005 f942 	bl	b8ae <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    662a:	2310      	movs	r3, #16
    662c:	466a      	mov	r2, sp
    662e:	4621      	mov	r1, r4
    6630:	4628      	mov	r0, r5
    6632:	f004 fe85 	bl	b340 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    6636:	3800      	subs	r0, #0
    6638:	bf18      	it	ne
    663a:	2001      	movne	r0, #1
    663c:	b005      	add	sp, #20
    663e:	bd30      	pop	{r4, r5, pc}
    6640:	0000f30e 	.word	0x0000f30e

00006644 <boot_read_swap_state>:
{
    6644:	b530      	push	{r4, r5, lr}
    6646:	460d      	mov	r5, r1
    6648:	6881      	ldr	r1, [r0, #8]
    664a:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    664c:	2310      	movs	r3, #16
    664e:	aa02      	add	r2, sp, #8
    6650:	3910      	subs	r1, #16
{
    6652:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6654:	f004 fe5f 	bl	b316 <flash_area_read>
    if (rc < 0) {
    6658:	2800      	cmp	r0, #0
    665a:	da02      	bge.n	6662 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    665c:	2001      	movs	r0, #1
}
    665e:	b007      	add	sp, #28
    6660:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    6662:	2210      	movs	r2, #16
    6664:	4620      	mov	r0, r4
    6666:	a902      	add	r1, sp, #8
    6668:	f005 fd05 	bl	c076 <bootutil_buffer_is_erased>
    666c:	2800      	cmp	r0, #0
    666e:	d13a      	bne.n	66e6 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    6670:	2210      	movs	r2, #16
    6672:	491e      	ldr	r1, [pc, #120]	; (66ec <boot_read_swap_state+0xa8>)
    6674:	a802      	add	r0, sp, #8
    6676:	f005 f8f3 	bl	b860 <memcmp>
    return BOOT_MAGIC_BAD;
    667a:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    667c:	bf0c      	ite	eq
    667e:	2301      	moveq	r3, #1
    6680:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    6682:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    6684:	4620      	mov	r0, r4
    6686:	f005 fce2 	bl	c04e <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    668a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    668c:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    668e:	f10d 0207 	add.w	r2, sp, #7
    6692:	4620      	mov	r0, r4
    6694:	f004 fe3f 	bl	b316 <flash_area_read>
    if (rc < 0) {
    6698:	2800      	cmp	r0, #0
    669a:	dbdf      	blt.n	665c <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    669c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    66a0:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    66a2:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    66a6:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    66a8:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    66aa:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    66ac:	2201      	movs	r2, #1
    66ae:	f10d 0107 	add.w	r1, sp, #7
    66b2:	f005 fce0 	bl	c076 <bootutil_buffer_is_erased>
    66b6:	b910      	cbnz	r0, 66be <boot_read_swap_state+0x7a>
    66b8:	786b      	ldrb	r3, [r5, #1]
    66ba:	2b04      	cmp	r3, #4
    66bc:	d903      	bls.n	66c6 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    66be:	2301      	movs	r3, #1
    66c0:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    66c2:	2300      	movs	r3, #0
    66c4:	712b      	strb	r3, [r5, #4]
}

static inline uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66c6:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    66c8:	4620      	mov	r0, r4
    66ca:	3a18      	subs	r2, #24
    66cc:	f022 0207 	bic.w	r2, r2, #7
    66d0:	3a08      	subs	r2, #8
    66d2:	1ca9      	adds	r1, r5, #2
    66d4:	f005 fce2 	bl	c09c <boot_read_flag>
    if (rc) {
    66d8:	2800      	cmp	r0, #0
    66da:	d1bf      	bne.n	665c <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    66dc:	4620      	mov	r0, r4
    66de:	1ce9      	adds	r1, r5, #3
    66e0:	f005 fcf8 	bl	c0d4 <boot_read_image_ok>
    66e4:	e7bb      	b.n	665e <boot_read_swap_state+0x1a>
    66e6:	2303      	movs	r3, #3
    66e8:	e7cb      	b.n	6682 <boot_read_swap_state+0x3e>
    66ea:	bf00      	nop
    66ec:	0000f30e 	.word	0x0000f30e

000066f0 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    66f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    66f2:	4669      	mov	r1, sp
{
    66f4:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    66f6:	f005 fc7f 	bl	bff8 <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    66fa:	2801      	cmp	r0, #1
    66fc:	d14a      	bne.n	6794 <boot_swap_type_multi+0xa4>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    66fe:	4669      	mov	r1, sp
    6700:	2c00      	cmp	r4, #0
    6702:	d041      	beq.n	6788 <boot_swap_type_multi+0x98>
    6704:	2c01      	cmp	r4, #1
    6706:	d03a      	beq.n	677e <boot_swap_type_multi+0x8e>
    6708:	20ff      	movs	r0, #255	; 0xff
    670a:	f005 fce9 	bl	c0e0 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    670e:	2800      	cmp	r0, #0
    6710:	d148      	bne.n	67a4 <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6712:	20ff      	movs	r0, #255	; 0xff
    6714:	a902      	add	r1, sp, #8
    6716:	f005 fce3 	bl	c0e0 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    671a:	2801      	cmp	r0, #1
    671c:	d140      	bne.n	67a0 <boot_swap_type_multi+0xb0>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    671e:	2303      	movs	r3, #3
    6720:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    6724:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    6728:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    672a:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    672e:	f89d 6008 	ldrb.w	r6, [sp, #8]
    6732:	4a21      	ldr	r2, [pc, #132]	; (67b8 <boot_swap_type_multi+0xc8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6734:	4629      	mov	r1, r5
    6736:	7810      	ldrb	r0, [r2, #0]
    6738:	f005 fc8f 	bl	c05a <boot_magic_compatible_check>
    673c:	b3a0      	cbz	r0, 67a8 <boot_swap_type_multi+0xb8>
            boot_magic_compatible_check(table->magic_secondary_slot,
    673e:	4631      	mov	r1, r6
    6740:	7850      	ldrb	r0, [r2, #1]
    6742:	f005 fc8a 	bl	c05a <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    6746:	b378      	cbz	r0, 67a8 <boot_swap_type_multi+0xb8>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    6748:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    674a:	2b04      	cmp	r3, #4
    674c:	d003      	beq.n	6756 <boot_swap_type_multi+0x66>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    674e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    6752:	4299      	cmp	r1, r3
    6754:	d128      	bne.n	67a8 <boot_swap_type_multi+0xb8>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    6756:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    6758:	2b04      	cmp	r3, #4
    675a:	d003      	beq.n	6764 <boot_swap_type_multi+0x74>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    675c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    6760:	4299      	cmp	r1, r3
    6762:	d121      	bne.n	67a8 <boot_swap_type_multi+0xb8>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    6764:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    6766:	2b04      	cmp	r3, #4
    6768:	d003      	beq.n	6772 <boot_swap_type_multi+0x82>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    676a:	f89d 1002 	ldrb.w	r1, [sp, #2]
    676e:	4299      	cmp	r1, r3
    6770:	d11a      	bne.n	67a8 <boot_swap_type_multi+0xb8>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    6772:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    6774:	1e83      	subs	r3, r0, #2
    6776:	2b02      	cmp	r3, #2
    6778:	d814      	bhi.n	67a4 <boot_swap_type_multi+0xb4>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    677a:	b004      	add	sp, #16
    677c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    677e:	f005 fcaf 	bl	c0e0 <boot_read_swap_state_by_id>
    if (rc) {
    6782:	b978      	cbnz	r0, 67a4 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6784:	2008      	movs	r0, #8
    6786:	e7c5      	b.n	6714 <boot_swap_type_multi+0x24>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6788:	2004      	movs	r0, #4
    678a:	f005 fca9 	bl	c0e0 <boot_read_swap_state_by_id>
    if (rc) {
    678e:	b948      	cbnz	r0, 67a4 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6790:	2002      	movs	r0, #2
    6792:	e7bf      	b.n	6714 <boot_swap_type_multi+0x24>
    if (rc) {
    6794:	b930      	cbnz	r0, 67a4 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6796:	2c00      	cmp	r4, #0
    6798:	d0fa      	beq.n	6790 <boot_swap_type_multi+0xa0>
    679a:	2c01      	cmp	r4, #1
    679c:	d1b9      	bne.n	6712 <boot_swap_type_multi+0x22>
    679e:	e7f1      	b.n	6784 <boot_swap_type_multi+0x94>
    } else if (rc) {
    67a0:	2800      	cmp	r0, #0
    67a2:	d0c1      	beq.n	6728 <boot_swap_type_multi+0x38>
        return BOOT_SWAP_TYPE_PANIC;
    67a4:	20ff      	movs	r0, #255	; 0xff
    67a6:	e7e8      	b.n	677a <boot_swap_type_multi+0x8a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    67a8:	3401      	adds	r4, #1
    67aa:	2c03      	cmp	r4, #3
    67ac:	f102 0206 	add.w	r2, r2, #6
    67b0:	d1c0      	bne.n	6734 <boot_swap_type_multi+0x44>
    return BOOT_SWAP_TYPE_NONE;
    67b2:	2001      	movs	r0, #1
    67b4:	e7e1      	b.n	677a <boot_swap_type_multi+0x8a>
    67b6:	bf00      	nop
    67b8:	0000f72a 	.word	0x0000f72a

000067bc <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    67bc:	4b01      	ldr	r3, [pc, #4]	; (67c4 <mbedtls_calloc+0x8>)
    67be:	681b      	ldr	r3, [r3, #0]
    67c0:	4718      	bx	r3
    67c2:	bf00      	nop
    67c4:	20002184 	.word	0x20002184

000067c8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    67c8:	4b01      	ldr	r3, [pc, #4]	; (67d0 <mbedtls_free+0x8>)
    67ca:	681b      	ldr	r3, [r3, #0]
    67cc:	4718      	bx	r3
    67ce:	bf00      	nop
    67d0:	20002180 	.word	0x20002180

000067d4 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    67d4:	4b02      	ldr	r3, [pc, #8]	; (67e0 <mbedtls_platform_set_calloc_free+0xc>)
    67d6:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    67d8:	4b02      	ldr	r3, [pc, #8]	; (67e4 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    67da:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    67dc:	6019      	str	r1, [r3, #0]
}
    67de:	4770      	bx	lr
    67e0:	20002184 	.word	0x20002184
    67e4:	20002180 	.word	0x20002180

000067e8 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    67e8:	6801      	ldr	r1, [r0, #0]
    67ea:	4a0e      	ldr	r2, [pc, #56]	; (6824 <verify_header+0x3c>)
{
    67ec:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    67ee:	4291      	cmp	r1, r2
    67f0:	d115      	bne.n	681e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    67f2:	69c1      	ldr	r1, [r0, #28]
    67f4:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    67f8:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    67fc:	4291      	cmp	r1, r2
    67fe:	d10e      	bne.n	681e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    6800:	6882      	ldr	r2, [r0, #8]
    6802:	2a01      	cmp	r2, #1
    6804:	d80b      	bhi.n	681e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    6806:	68c2      	ldr	r2, [r0, #12]
    6808:	b112      	cbz	r2, 6810 <verify_header+0x28>
    680a:	6901      	ldr	r1, [r0, #16]
    680c:	428a      	cmp	r2, r1
    680e:	d006      	beq.n	681e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    6810:	6958      	ldr	r0, [r3, #20]
    6812:	b128      	cbz	r0, 6820 <verify_header+0x38>
    6814:	699b      	ldr	r3, [r3, #24]
    6816:	1a1b      	subs	r3, r3, r0
    6818:	4258      	negs	r0, r3
    681a:	4158      	adcs	r0, r3
    681c:	4770      	bx	lr
        return( 1 );
    681e:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    6820:	4770      	bx	lr
    6822:	bf00      	nop
    6824:	ff00aa55 	.word	0xff00aa55

00006828 <verify_chain>:

static int verify_chain( void )
{
    6828:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    682a:	4b0d      	ldr	r3, [pc, #52]	; (6860 <verify_chain+0x38>)
    682c:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    682e:	b1a6      	cbz	r6, 685a <verify_chain+0x32>
    6830:	4630      	mov	r0, r6
    6832:	f7ff ffd9 	bl	67e8 <verify_header>
    6836:	4604      	mov	r4, r0
    6838:	b978      	cbnz	r0, 685a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    683a:	68f3      	ldr	r3, [r6, #12]
    683c:	b96b      	cbnz	r3, 685a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    683e:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    6840:	b90d      	cbnz	r5, 6846 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    6842:	4620      	mov	r0, r4
    6844:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    6846:	4628      	mov	r0, r5
    6848:	f7ff ffce 	bl	67e8 <verify_header>
    684c:	b928      	cbnz	r0, 685a <verify_chain+0x32>
        if( cur->prev != prv )
    684e:	68eb      	ldr	r3, [r5, #12]
    6850:	42b3      	cmp	r3, r6
    6852:	d102      	bne.n	685a <verify_chain+0x32>
        cur = cur->next;
    6854:	462e      	mov	r6, r5
    6856:	692d      	ldr	r5, [r5, #16]
    6858:	e7f2      	b.n	6840 <verify_chain+0x18>
        return( 1 );
    685a:	2401      	movs	r4, #1
    685c:	e7f1      	b.n	6842 <verify_chain+0x1a>
    685e:	bf00      	nop
    6860:	200141a4 	.word	0x200141a4

00006864 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    6864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    6868:	4f3f      	ldr	r7, [pc, #252]	; (6968 <buffer_alloc_calloc+0x104>)
    686a:	683c      	ldr	r4, [r7, #0]
    686c:	b1d4      	cbz	r4, 68a4 <buffer_alloc_calloc+0x40>
    686e:	68bc      	ldr	r4, [r7, #8]
    6870:	b1c4      	cbz	r4, 68a4 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    6872:	2800      	cmp	r0, #0
    6874:	d04a      	beq.n	690c <buffer_alloc_calloc+0xa8>
    6876:	2900      	cmp	r1, #0
    6878:	d048      	beq.n	690c <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    687a:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    687e:	fbb5 f0f0 	udiv	r0, r5, r0
    6882:	4288      	cmp	r0, r1
    6884:	d142      	bne.n	690c <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6886:	1d28      	adds	r0, r5, #4
    6888:	d840      	bhi.n	690c <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    688a:	07a9      	lsls	r1, r5, #30
    688c:	d00d      	beq.n	68aa <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    688e:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    6892:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    6894:	68fc      	ldr	r4, [r7, #12]
    6896:	e003      	b.n	68a0 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    6898:	6863      	ldr	r3, [r4, #4]
    689a:	42b3      	cmp	r3, r6
    689c:	d238      	bcs.n	6910 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    689e:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    68a0:	2c00      	cmp	r4, #0
    68a2:	d1f9      	bne.n	6898 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    68a4:	4620      	mov	r0, r4
    68a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68aa:	462e      	mov	r6, r5
    68ac:	e7f2      	b.n	6894 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    68ae:	60fb      	str	r3, [r7, #12]
    68b0:	e041      	b.n	6936 <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    68b2:	f106 0120 	add.w	r1, r6, #32
    68b6:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    68b8:	3a20      	subs	r2, #32
    68ba:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    68bc:	2200      	movs	r2, #0
    new->prev = cur;
    68be:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    68c2:	482a      	ldr	r0, [pc, #168]	; (696c <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    68c4:	6922      	ldr	r2, [r4, #16]
    68c6:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    68c8:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    68ca:	4929      	ldr	r1, [pc, #164]	; (6970 <buffer_alloc_calloc+0x10c>)
    68cc:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    68ce:	b102      	cbz	r2, 68d2 <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    68d0:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    68d2:	6962      	ldr	r2, [r4, #20]
    68d4:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    68d6:	69a1      	ldr	r1, [r4, #24]
    68d8:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    68da:	b1aa      	cbz	r2, 6908 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    68dc:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    68de:	699a      	ldr	r2, [r3, #24]
    68e0:	b102      	cbz	r2, 68e4 <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    68e2:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    68e4:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    68e8:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    68ea:	2300      	movs	r3, #0
    cur->size = len;
    68ec:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    68f0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    68f4:	693b      	ldr	r3, [r7, #16]
    68f6:	07db      	lsls	r3, r3, #31
    68f8:	d52e      	bpl.n	6958 <buffer_alloc_calloc+0xf4>
    68fa:	f7ff ff95 	bl	6828 <verify_chain>
    68fe:	b358      	cbz	r0, 6958 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    6900:	4b1c      	ldr	r3, [pc, #112]	; (6974 <buffer_alloc_calloc+0x110>)
    6902:	4648      	mov	r0, r9
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	e026      	b.n	6956 <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    6908:	60fb      	str	r3, [r7, #12]
    690a:	e7e8      	b.n	68de <buffer_alloc_calloc+0x7a>
        return( NULL );
    690c:	2400      	movs	r4, #0
    690e:	e7c9      	b.n	68a4 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    6910:	68a3      	ldr	r3, [r4, #8]
    6912:	b11b      	cbz	r3, 691c <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    6914:	4b17      	ldr	r3, [pc, #92]	; (6974 <buffer_alloc_calloc+0x110>)
    6916:	2001      	movs	r0, #1
    6918:	681b      	ldr	r3, [r3, #0]
    691a:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    691c:	6862      	ldr	r2, [r4, #4]
    691e:	f104 0820 	add.w	r8, r4, #32
    6922:	1b92      	subs	r2, r2, r6
    6924:	2a23      	cmp	r2, #35	; 0x23
    6926:	d8c4      	bhi.n	68b2 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    6928:	2301      	movs	r3, #1
    692a:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    692c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    6930:	2a00      	cmp	r2, #0
    6932:	d0bc      	beq.n	68ae <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    6934:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    6936:	69a3      	ldr	r3, [r4, #24]
    6938:	b10b      	cbz	r3, 693e <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    693a:	6962      	ldr	r2, [r4, #20]
    693c:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    693e:	2300      	movs	r3, #0
        cur->next_free = NULL;
    6940:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    6944:	693b      	ldr	r3, [r7, #16]
    6946:	07da      	lsls	r2, r3, #31
    6948:	d506      	bpl.n	6958 <buffer_alloc_calloc+0xf4>
    694a:	f7ff ff6d 	bl	6828 <verify_chain>
    694e:	b118      	cbz	r0, 6958 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    6950:	2001      	movs	r0, #1
    6952:	4b08      	ldr	r3, [pc, #32]	; (6974 <buffer_alloc_calloc+0x110>)
    6954:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    6956:	4798      	blx	r3
    memset( ret, 0, original_len );
    6958:	462a      	mov	r2, r5
    695a:	2100      	movs	r1, #0
    695c:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    695e:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    6960:	f004 ffb0 	bl	b8c4 <memset>
    return( ret );
    6964:	e79e      	b.n	68a4 <buffer_alloc_calloc+0x40>
    6966:	bf00      	nop
    6968:	200141a4 	.word	0x200141a4
    696c:	ff00aa55 	.word	0xff00aa55
    6970:	ee119966 	.word	0xee119966
    6974:	2000217c 	.word	0x2000217c

00006978 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    6978:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    697a:	4605      	mov	r5, r0
    697c:	2800      	cmp	r0, #0
    697e:	f000 8088 	beq.w	6a92 <buffer_alloc_free+0x11a>
    6982:	4e44      	ldr	r6, [pc, #272]	; (6a94 <buffer_alloc_free+0x11c>)
    6984:	6833      	ldr	r3, [r6, #0]
    6986:	2b00      	cmp	r3, #0
    6988:	f000 8083 	beq.w	6a92 <buffer_alloc_free+0x11a>
    698c:	68b2      	ldr	r2, [r6, #8]
    698e:	2a00      	cmp	r2, #0
    6990:	d07f      	beq.n	6a92 <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    6992:	4283      	cmp	r3, r0
    6994:	d803      	bhi.n	699e <buffer_alloc_free+0x26>
    6996:	6872      	ldr	r2, [r6, #4]
    6998:	4413      	add	r3, r2
    699a:	4298      	cmp	r0, r3
    699c:	d303      	bcc.n	69a6 <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    699e:	4b3e      	ldr	r3, [pc, #248]	; (6a98 <buffer_alloc_free+0x120>)
    69a0:	2001      	movs	r0, #1
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    69a6:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    69aa:	4620      	mov	r0, r4
    69ac:	f7ff ff1c 	bl	67e8 <verify_header>
    69b0:	b118      	cbz	r0, 69ba <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    69b2:	4b39      	ldr	r3, [pc, #228]	; (6a98 <buffer_alloc_free+0x120>)
    69b4:	2001      	movs	r0, #1
    69b6:	681b      	ldr	r3, [r3, #0]
    69b8:	4798      	blx	r3

    if( hdr->alloc != 1 )
    69ba:	f855 3c18 	ldr.w	r3, [r5, #-24]
    69be:	2b01      	cmp	r3, #1
    69c0:	d003      	beq.n	69ca <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    69c2:	4b35      	ldr	r3, [pc, #212]	; (6a98 <buffer_alloc_free+0x120>)
    69c4:	2001      	movs	r0, #1
    69c6:	681b      	ldr	r3, [r3, #0]
    69c8:	4798      	blx	r3
    }

    hdr->alloc = 0;
    69ca:	2300      	movs	r3, #0
    69cc:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    69d0:	f855 3c14 	ldr.w	r3, [r5, #-20]
    69d4:	b33b      	cbz	r3, 6a26 <buffer_alloc_free+0xae>
    69d6:	689a      	ldr	r2, [r3, #8]
    69d8:	bb2a      	cbnz	r2, 6a26 <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    69da:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    69de:	f102 0120 	add.w	r1, r2, #32
    69e2:	685a      	ldr	r2, [r3, #4]
    69e4:	440a      	add	r2, r1
    69e6:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    69e8:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    69ec:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    69ee:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    69f2:	692b      	ldr	r3, [r5, #16]
    69f4:	b103      	cbz	r3, 69f8 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    69f6:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    69f8:	2220      	movs	r2, #32
    69fa:	2100      	movs	r1, #0
    69fc:	4620      	mov	r0, r4
    69fe:	f004 ff61 	bl	b8c4 <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6a02:	6928      	ldr	r0, [r5, #16]
    6a04:	b110      	cbz	r0, 6a0c <buffer_alloc_free+0x94>
    6a06:	6883      	ldr	r3, [r0, #8]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d02e      	beq.n	6a6a <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    6a0c:	6933      	ldr	r3, [r6, #16]
    6a0e:	079b      	lsls	r3, r3, #30
    6a10:	d53f      	bpl.n	6a92 <buffer_alloc_free+0x11a>
    6a12:	f7ff ff09 	bl	6828 <verify_chain>
    6a16:	2800      	cmp	r0, #0
    6a18:	d03b      	beq.n	6a92 <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    6a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    6a1e:	4b1e      	ldr	r3, [pc, #120]	; (6a98 <buffer_alloc_free+0x120>)
    6a20:	2001      	movs	r0, #1
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6a26:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d02a      	beq.n	6a84 <buffer_alloc_free+0x10c>
    6a2e:	6883      	ldr	r3, [r0, #8]
    6a30:	bb43      	cbnz	r3, 6a84 <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    6a32:	6842      	ldr	r2, [r0, #4]
    6a34:	6863      	ldr	r3, [r4, #4]
    6a36:	4413      	add	r3, r2
    6a38:	3320      	adds	r3, #32
    6a3a:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    6a3c:	6903      	ldr	r3, [r0, #16]
    6a3e:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    6a40:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    6a44:	b99a      	cbnz	r2, 6a6e <buffer_alloc_free+0xf6>
    6a46:	b9cb      	cbnz	r3, 6a7c <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    6a48:	6943      	ldr	r3, [r0, #20]
    6a4a:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    6a4c:	6982      	ldr	r2, [r0, #24]
    6a4e:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    6a50:	b1b3      	cbz	r3, 6a80 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    6a52:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    6a54:	69a3      	ldr	r3, [r4, #24]
    6a56:	b103      	cbz	r3, 6a5a <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    6a58:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    6a5a:	6923      	ldr	r3, [r4, #16]
    6a5c:	b103      	cbz	r3, 6a60 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    6a5e:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    6a60:	2220      	movs	r2, #32
    6a62:	2100      	movs	r1, #0
    6a64:	f004 ff2e 	bl	b8c4 <memset>
    if( old == NULL )
    6a68:	e7d0      	b.n	6a0c <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6a6a:	462c      	mov	r4, r5
    6a6c:	e7e1      	b.n	6a32 <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    6a6e:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    6a70:	69a3      	ldr	r3, [r4, #24]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d0e8      	beq.n	6a48 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    6a76:	6962      	ldr	r2, [r4, #20]
    6a78:	615a      	str	r2, [r3, #20]
    6a7a:	e7e5      	b.n	6a48 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    6a7c:	60f3      	str	r3, [r6, #12]
    6a7e:	e7f7      	b.n	6a70 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    6a80:	60f4      	str	r4, [r6, #12]
    6a82:	e7e7      	b.n	6a54 <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    6a84:	68f3      	ldr	r3, [r6, #12]
    6a86:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    6a8a:	b103      	cbz	r3, 6a8e <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    6a8c:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    6a8e:	60f4      	str	r4, [r6, #12]
    6a90:	e7bc      	b.n	6a0c <buffer_alloc_free+0x94>
}
    6a92:	bd70      	pop	{r4, r5, r6, pc}
    6a94:	200141a4 	.word	0x200141a4
    6a98:	2000217c 	.word	0x2000217c

00006a9c <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    6a9c:	b538      	push	{r3, r4, r5, lr}
    6a9e:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    6aa0:	2214      	movs	r2, #20
    6aa2:	2100      	movs	r1, #0
{
    6aa4:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    6aa6:	4813      	ldr	r0, [pc, #76]	; (6af4 <mbedtls_memory_buffer_alloc_init+0x58>)
    6aa8:	f004 ff0c 	bl	b8c4 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    6aac:	4912      	ldr	r1, [pc, #72]	; (6af8 <mbedtls_memory_buffer_alloc_init+0x5c>)
    6aae:	4813      	ldr	r0, [pc, #76]	; (6afc <mbedtls_memory_buffer_alloc_init+0x60>)
    6ab0:	f7ff fe90 	bl	67d4 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6ab4:	2c23      	cmp	r4, #35	; 0x23
    6ab6:	d91c      	bls.n	6af2 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6ab8:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    6abc:	bf1f      	itttt	ne
    6abe:	3c04      	subne	r4, #4
    6ac0:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    6ac2:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    6ac6:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    6ac8:	4622      	mov	r2, r4
    6aca:	2100      	movs	r1, #0
    6acc:	4628      	mov	r0, r5
    6ace:	f004 fef9 	bl	b8c4 <memset>

    heap.buf = buf;
    6ad2:	4b08      	ldr	r3, [pc, #32]	; (6af4 <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    6ad4:	490a      	ldr	r1, [pc, #40]	; (6b00 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    6ad6:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    6ada:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    6adc:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    6ade:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    6ae0:	689a      	ldr	r2, [r3, #8]
    6ae2:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    6ae4:	689a      	ldr	r2, [r3, #8]
    6ae6:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    6aea:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    6aee:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    6af0:	60da      	str	r2, [r3, #12]
}
    6af2:	bd38      	pop	{r3, r4, r5, pc}
    6af4:	200141a4 	.word	0x200141a4
    6af8:	00006979 	.word	0x00006979
    6afc:	00006865 	.word	0x00006865
    6b00:	ff00aa55 	.word	0xff00aa55

00006b04 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b06:	f100 0608 	add.w	r6, r0, #8
    6b0a:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b0c:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b0e:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b10:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b12:	f005 fc50 	bl	c3b6 <mbedtls_mpi_size>
    6b16:	4287      	cmp	r7, r0
    6b18:	d14b      	bne.n	6bb2 <rsa_check_context.constprop.0+0xae>
    6b1a:	6863      	ldr	r3, [r4, #4]
    6b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6b20:	d847      	bhi.n	6bb2 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6b22:	2100      	movs	r1, #0
    6b24:	4630      	mov	r0, r6
    6b26:	f005 fd3e 	bl	c5a6 <mbedtls_mpi_cmp_int>
    6b2a:	2800      	cmp	r0, #0
    6b2c:	dd41      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    6b2e:	2100      	movs	r1, #0
    6b30:	4630      	mov	r0, r6
    6b32:	f005 fc2c 	bl	c38e <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6b36:	b3e0      	cbz	r0, 6bb2 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    6b38:	b945      	cbnz	r5, 6b4c <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6b3a:	4629      	mov	r1, r5
    6b3c:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6b40:	f005 fd31 	bl	c5a6 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6b44:	2800      	cmp	r0, #0
    6b46:	dd34      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    6b48:	2000      	movs	r0, #0
}
    6b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6b4c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6b50:	2100      	movs	r1, #0
    6b52:	4628      	mov	r0, r5
    6b54:	f005 fd27 	bl	c5a6 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6b58:	2800      	cmp	r0, #0
    6b5a:	dd2a      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6b5c:	2100      	movs	r1, #0
    6b5e:	4628      	mov	r0, r5
    6b60:	f005 fc15 	bl	c38e <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6b64:	b328      	cbz	r0, 6bb2 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6b66:	f104 0538 	add.w	r5, r4, #56	; 0x38
    6b6a:	2100      	movs	r1, #0
    6b6c:	4628      	mov	r0, r5
    6b6e:	f005 fd1a 	bl	c5a6 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6b72:	2800      	cmp	r0, #0
    6b74:	dd1d      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    6b76:	2100      	movs	r1, #0
    6b78:	4628      	mov	r0, r5
    6b7a:	f005 fc08 	bl	c38e <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6b7e:	b1c0      	cbz	r0, 6bb2 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6b80:	2100      	movs	r1, #0
    6b82:	f104 0014 	add.w	r0, r4, #20
    6b86:	f005 fd0e 	bl	c5a6 <mbedtls_mpi_cmp_int>
    6b8a:	2800      	cmp	r0, #0
    6b8c:	dd11      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6b8e:	2100      	movs	r1, #0
    6b90:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6b94:	f005 fd07 	bl	c5a6 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6b98:	2800      	cmp	r0, #0
    6b9a:	dd0a      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    6b9c:	2100      	movs	r1, #0
    6b9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6ba2:	f005 fd00 	bl	c5a6 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6ba6:	2800      	cmp	r0, #0
    6ba8:	dd03      	ble.n	6bb2 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6baa:	2100      	movs	r1, #0
    6bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6bb0:	e7c6      	b.n	6b40 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6bb2:	4801      	ldr	r0, [pc, #4]	; (6bb8 <rsa_check_context.constprop.0+0xb4>)
    6bb4:	e7c9      	b.n	6b4a <rsa_check_context.constprop.0+0x46>
    6bb6:	bf00      	nop
    6bb8:	ffffbf80 	.word	0xffffbf80

00006bbc <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    6bbc:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6bbe:	2100      	movs	r1, #0
{
    6bc0:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6bc2:	f7ff ff9f 	bl	6b04 <rsa_check_context.constprop.0>
    6bc6:	4605      	mov	r5, r0
    6bc8:	b110      	cbz	r0, 6bd0 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    6bca:	4d0e      	ldr	r5, [pc, #56]	; (6c04 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    6bcc:	4628      	mov	r0, r5
    6bce:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    6bd0:	f104 0608 	add.w	r6, r4, #8
    6bd4:	4630      	mov	r0, r6
    6bd6:	f005 fbea 	bl	c3ae <mbedtls_mpi_bitlen>
    6bda:	287f      	cmp	r0, #127	; 0x7f
    6bdc:	d9f5      	bls.n	6bca <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6bde:	3414      	adds	r4, #20
    6be0:	4629      	mov	r1, r5
    6be2:	4620      	mov	r0, r4
    6be4:	f005 fbd3 	bl	c38e <mbedtls_mpi_get_bit>
    6be8:	2800      	cmp	r0, #0
    6bea:	d0ee      	beq.n	6bca <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6bec:	4620      	mov	r0, r4
    6bee:	f005 fbde 	bl	c3ae <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6bf2:	2801      	cmp	r0, #1
    6bf4:	d9e9      	bls.n	6bca <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    6bf6:	4631      	mov	r1, r6
    6bf8:	4620      	mov	r0, r4
    6bfa:	f005 fc93 	bl	c524 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6bfe:	2800      	cmp	r0, #0
    6c00:	dbe4      	blt.n	6bcc <mbedtls_rsa_check_pubkey+0x10>
    6c02:	e7e2      	b.n	6bca <mbedtls_rsa_check_pubkey+0xe>
    6c04:	ffffbe00 	.word	0xffffbe00

00006c08 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    6c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c0a:	460c      	mov	r4, r1
    6c0c:	b087      	sub	sp, #28
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6c0e:	2100      	movs	r1, #0
{
    6c10:	4605      	mov	r5, r0
    6c12:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6c14:	f7ff ff76 	bl	6b04 <rsa_check_context.constprop.0>
    6c18:	2800      	cmp	r0, #0
    6c1a:	d139      	bne.n	6c90 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    6c1c:	a803      	add	r0, sp, #12
    6c1e:	f005 fb0e 	bl	c23e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    6c22:	4621      	mov	r1, r4
    6c24:	686a      	ldr	r2, [r5, #4]
    6c26:	a803      	add	r0, sp, #12
    6c28:	f005 fbcb 	bl	c3c2 <mbedtls_mpi_read_binary>
    6c2c:	4604      	mov	r4, r0
    6c2e:	b118      	cbz	r0, 6c38 <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    6c30:	a803      	add	r0, sp, #12
    6c32:	f005 fb0a 	bl	c24a <mbedtls_mpi_free>

    if( ret != 0 )
    6c36:	e00c      	b.n	6c52 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    6c38:	f105 0408 	add.w	r4, r5, #8
    6c3c:	4621      	mov	r1, r4
    6c3e:	a803      	add	r0, sp, #12
    6c40:	f005 fc70 	bl	c524 <mbedtls_mpi_cmp_mpi>
    6c44:	2800      	cmp	r0, #0
    6c46:	db07      	blt.n	6c58 <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    6c48:	a803      	add	r0, sp, #12
    6c4a:	f005 fafe 	bl	c24a <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    6c4e:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    6c52:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    6c56:	e018      	b.n	6c8a <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6c58:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6c5c:	a903      	add	r1, sp, #12
    olen = ctx->len;
    6c5e:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6c60:	4608      	mov	r0, r1
    6c62:	9300      	str	r3, [sp, #0]
    6c64:	f105 0214 	add.w	r2, r5, #20
    6c68:	4623      	mov	r3, r4
    6c6a:	f005 ff76 	bl	cb5a <mbedtls_mpi_exp_mod>
    6c6e:	4604      	mov	r4, r0
    6c70:	2800      	cmp	r0, #0
    6c72:	d1dd      	bne.n	6c30 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    6c74:	463a      	mov	r2, r7
    6c76:	4631      	mov	r1, r6
    6c78:	a803      	add	r0, sp, #12
    6c7a:	f005 fbb8 	bl	c3ee <mbedtls_mpi_write_binary>
    6c7e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    6c80:	a803      	add	r0, sp, #12
    6c82:	f005 fae2 	bl	c24a <mbedtls_mpi_free>
    if( ret != 0 )
    6c86:	2c00      	cmp	r4, #0
    6c88:	d1e3      	bne.n	6c52 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    6c8a:	4620      	mov	r0, r4
    6c8c:	b007      	add	sp, #28
    6c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6c90:	4c00      	ldr	r4, [pc, #0]	; (6c94 <mbedtls_rsa_public+0x8c>)
    6c92:	e7fa      	b.n	6c8a <mbedtls_rsa_public+0x82>
    6c94:	ffffbf80 	.word	0xffffbf80

00006c98 <mbedtls_sha256_starts>:
 * SHA-256 context setup
 */
int mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
#if defined(MBEDTLS_SHA224_C)
    if( is224 != 0 && is224 != 1 )
    6c98:	2901      	cmp	r1, #1
{
    6c9a:	4603      	mov	r3, r0
    6c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 != 0 && is224 != 1 )
    6ca0:	d843      	bhi.n	6d2a <mbedtls_sha256_starts+0x92>
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    6ca2:	4a23      	ldr	r2, [pc, #140]	; (6d30 <mbedtls_sha256_starts+0x98>)
    6ca4:	2900      	cmp	r1, #0
    6ca6:	bf18      	it	ne
    6ca8:	4690      	movne	r8, r2
    6caa:	4a22      	ldr	r2, [pc, #136]	; (6d34 <mbedtls_sha256_starts+0x9c>)
    6cac:	4f22      	ldr	r7, [pc, #136]	; (6d38 <mbedtls_sha256_starts+0xa0>)
    6cae:	bf18      	it	ne
    6cb0:	4696      	movne	lr, r2
    6cb2:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    6cb6:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    6cba:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    6cbe:	bf18      	it	ne
    6cc0:	4694      	movne	ip, r2
    6cc2:	4a1e      	ldr	r2, [pc, #120]	; (6d3c <mbedtls_sha256_starts+0xa4>)
    6cc4:	481e      	ldr	r0, [pc, #120]	; (6d40 <mbedtls_sha256_starts+0xa8>)
    6cc6:	bf18      	it	ne
    6cc8:	4617      	movne	r7, r2
    6cca:	4a1e      	ldr	r2, [pc, #120]	; (6d44 <mbedtls_sha256_starts+0xac>)
    6ccc:	4e1e      	ldr	r6, [pc, #120]	; (6d48 <mbedtls_sha256_starts+0xb0>)
    6cce:	bf18      	it	ne
    6cd0:	4616      	movne	r6, r2
    6cd2:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    6cd6:	bf08      	it	eq
    6cd8:	4680      	moveq	r8, r0
    6cda:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    6cde:	481b      	ldr	r0, [pc, #108]	; (6d4c <mbedtls_sha256_starts+0xb4>)
    6ce0:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    6ce4:	bf08      	it	eq
    6ce6:	4686      	moveq	lr, r0
    6ce8:	4d19      	ldr	r5, [pc, #100]	; (6d50 <mbedtls_sha256_starts+0xb8>)
    6cea:	481a      	ldr	r0, [pc, #104]	; (6d54 <mbedtls_sha256_starts+0xbc>)
    6cec:	bf18      	it	ne
    6cee:	4615      	movne	r5, r2
    6cf0:	4a19      	ldr	r2, [pc, #100]	; (6d58 <mbedtls_sha256_starts+0xc0>)
    6cf2:	bf08      	it	eq
    6cf4:	4684      	moveq	ip, r0
    6cf6:	4c19      	ldr	r4, [pc, #100]	; (6d5c <mbedtls_sha256_starts+0xc4>)
    6cf8:	4819      	ldr	r0, [pc, #100]	; (6d60 <mbedtls_sha256_starts+0xc8>)
    6cfa:	bf18      	it	ne
    6cfc:	4614      	movne	r4, r2
    6cfe:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    6d02:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    6d06:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    6d0a:	bf18      	it	ne
    6d0c:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    6d0e:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    6d10:	e9c3 8e02 	strd	r8, lr, [r3, #8]
    ctx->total[1] = 0;
    6d14:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    6d18:	e9c3 c704 	strd	ip, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    6d1c:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    6d20:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    6d24:	6699      	str	r1, [r3, #104]	; 0x68

    return( 0 );
}
    6d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    6d2a:	f06f 0073 	mvn.w	r0, #115	; 0x73
    6d2e:	e7fa      	b.n	6d26 <mbedtls_sha256_starts+0x8e>
    6d30:	c1059ed8 	.word	0xc1059ed8
    6d34:	367cd507 	.word	0x367cd507
    6d38:	a54ff53a 	.word	0xa54ff53a
    6d3c:	f70e5939 	.word	0xf70e5939
    6d40:	6a09e667 	.word	0x6a09e667
    6d44:	ffc00b31 	.word	0xffc00b31
    6d48:	510e527f 	.word	0x510e527f
    6d4c:	bb67ae85 	.word	0xbb67ae85
    6d50:	9b05688c 	.word	0x9b05688c
    6d54:	3c6ef372 	.word	0x3c6ef372
    6d58:	64f98fa7 	.word	0x64f98fa7
    6d5c:	1f83d9ab 	.word	0x1f83d9ab
    6d60:	befa4fa4 	.word	0xbefa4fa4

00006d64 <mbedtls_internal_sha256_process>:
 */
static
#endif
int mbedtls_internal_sha256_process_c( mbedtls_sha256_context *ctx,
                                const unsigned char data[SHA256_BLOCK_SIZE] )
{
    6d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d68:	b0d1      	sub	sp, #324	; 0x144
    6d6a:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    6d6e:	465a      	mov	r2, fp
    6d70:	1d03      	adds	r3, r0, #4
    6d72:	9301      	str	r3, [sp, #4]
    6d74:	f100 0324 	add.w	r3, r0, #36	; 0x24
    6d78:	9303      	str	r3, [sp, #12]
    6d7a:	9b01      	ldr	r3, [sp, #4]
    } local;

    unsigned int i;

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    6d7c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    6d80:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    6d84:	9803      	ldr	r0, [sp, #12]
    6d86:	4298      	cmp	r0, r3
    6d88:	d1f8      	bne.n	6d7c <mbedtls_internal_sha256_process+0x18>
    6d8a:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    6d8e:	f04f 0900 	mov.w	r9, #0
    6d92:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    6d94:	ad4c      	add	r5, sp, #304	; 0x130
    6d96:	9302      	str	r3, [sp, #8]
    6d98:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    6d9c:	9304      	str	r3, [sp, #16]
    6d9e:	4b42      	ldr	r3, [pc, #264]	; (6ea8 <mbedtls_internal_sha256_process+0x144>)
    6da0:	aa06      	add	r2, sp, #24
    6da2:	9305      	str	r3, [sp, #20]
    6da4:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    6da8:	f1b9 0f0f 	cmp.w	r9, #15
    6dac:	d863      	bhi.n	6e76 <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    6dae:	784c      	ldrb	r4, [r1, #1]
    6db0:	780b      	ldrb	r3, [r1, #0]
    6db2:	0424      	lsls	r4, r4, #16
    6db4:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    6db8:	78cb      	ldrb	r3, [r1, #3]
    6dba:	4323      	orrs	r3, r4
    6dbc:	788c      	ldrb	r4, [r1, #2]
    6dbe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6dc2:	ea4f 2af5 	mov.w	sl, r5, ror #11
    6dc6:	ea8c 0408 	eor.w	r4, ip, r8
    6dca:	9e05      	ldr	r6, [sp, #20]
    6dcc:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    6dd0:	402c      	ands	r4, r5
    6dd2:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    6dd6:	ea84 040c 	eor.w	r4, r4, ip
    6dda:	4454      	add	r4, sl
    6ddc:	f856 ab04 	ldr.w	sl, [r6], #4
    6de0:	6093      	str	r3, [r2, #8]
    6de2:	4454      	add	r4, sl
    6de4:	4423      	add	r3, r4
    6de6:	9c02      	ldr	r4, [sp, #8]
    6de8:	ea4f 3a70 	mov.w	sl, r0, ror #13
    6dec:	4423      	add	r3, r4
    6dee:	ea40 0407 	orr.w	r4, r0, r7
    6df2:	9605      	str	r6, [sp, #20]
    6df4:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    6df8:	ea04 040e 	and.w	r4, r4, lr
    6dfc:	ea00 0607 	and.w	r6, r0, r7
    6e00:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    6e04:	4334      	orrs	r4, r6
    6e06:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    6e08:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e0c:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    6e10:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e14:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    6e16:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e1a:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    6e1c:	f101 0104 	add.w	r1, r1, #4
    6e20:	f8cd c008 	str.w	ip, [sp, #8]
    6e24:	f8cd e010 	str.w	lr, [sp, #16]
    6e28:	d11e      	bne.n	6e68 <mbedtls_internal_sha256_process+0x104>
    6e2a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    6e2e:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    6e32:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    6e36:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    6e3a:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    6e3e:	9a01      	ldr	r2, [sp, #4]
    6e40:	f852 3f04 	ldr.w	r3, [r2, #4]!
    6e44:	9201      	str	r2, [sp, #4]
    6e46:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    6e4a:	4413      	add	r3, r2
    6e4c:	9a01      	ldr	r2, [sp, #4]
    6e4e:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    6e50:	9b03      	ldr	r3, [sp, #12]
    6e52:	4293      	cmp	r3, r2
    6e54:	d1f3      	bne.n	6e3e <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    6e56:	a806      	add	r0, sp, #24
    6e58:	f44f 7194 	mov.w	r1, #296	; 0x128
    6e5c:	f003 fb26 	bl	a4ac <mbedtls_platform_zeroize>

    return( 0 );
}
    6e60:	2000      	movs	r0, #0
    6e62:	b051      	add	sp, #324	; 0x144
    6e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e68:	46be      	mov	lr, r7
    6e6a:	46c4      	mov	ip, r8
    6e6c:	4607      	mov	r7, r0
    6e6e:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e70:	4618      	mov	r0, r3
    6e72:	4655      	mov	r5, sl
    6e74:	e798      	b.n	6da8 <mbedtls_internal_sha256_process+0x44>
            R( i );
    6e76:	6813      	ldr	r3, [r2, #0]
    6e78:	f852 4c38 	ldr.w	r4, [r2, #-56]
    6e7c:	ea4f 4af3 	mov.w	sl, r3, ror #19
    6e80:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    6e84:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    6e88:	f852 3c14 	ldr.w	r3, [r2, #-20]
    6e8c:	f852 6c34 	ldr.w	r6, [r2, #-52]
    6e90:	4423      	add	r3, r4
    6e92:	f852 4c34 	ldr.w	r4, [r2, #-52]
    6e96:	4453      	add	r3, sl
    6e98:	ea4f 44b4 	mov.w	r4, r4, ror #18
    6e9c:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    6ea0:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    6ea4:	4423      	add	r3, r4
    6ea6:	e78c      	b.n	6dc2 <mbedtls_internal_sha256_process+0x5e>
    6ea8:	0000f0ec 	.word	0x0000f0ec

00006eac <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6eac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6eb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6eb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6eb8:	2a07      	cmp	r2, #7
    6eba:	d105      	bne.n	6ec8 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    6ebc:	3b02      	subs	r3, #2
    6ebe:	2b03      	cmp	r3, #3
    6ec0:	d802      	bhi.n	6ec8 <nrf53_errata_42+0x1c>
    6ec2:	4a02      	ldr	r2, [pc, #8]	; (6ecc <nrf53_errata_42+0x20>)
    6ec4:	5cd0      	ldrb	r0, [r2, r3]
    6ec6:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    6ec8:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    6eca:	4770      	bx	lr
    6ecc:	0000f744 	.word	0x0000f744

00006ed0 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    6ed0:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    6ed2:	f7ff ffeb 	bl	6eac <nrf53_errata_42>
    6ed6:	b158      	cbz	r0, 6ef0 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    6ed8:	4b64      	ldr	r3, [pc, #400]	; (706c <SystemInit+0x19c>)
    6eda:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    6ede:	b93a      	cbnz	r2, 6ef0 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    6ee0:	210d      	movs	r1, #13
    6ee2:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    6ee6:	2101      	movs	r1, #1
    6ee8:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    6eec:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    6ef0:	2200      	movs	r2, #0
    6ef2:	00d3      	lsls	r3, r2, #3
    6ef4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6ef8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    6efc:	3101      	adds	r1, #1
    6efe:	d007      	beq.n	6f10 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f00:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6f04:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f06:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6f0a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f0c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6f0e:	d1f0      	bne.n	6ef2 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    6f10:	f7ff ffcc 	bl	6eac <nrf53_errata_42>
    6f14:	2800      	cmp	r0, #0
    6f16:	f040 80a0 	bne.w	705a <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    6f1a:	f7ff ffc7 	bl	6eac <nrf53_errata_42>
    6f1e:	b140      	cbz	r0, 6f32 <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    6f20:	4b53      	ldr	r3, [pc, #332]	; (7070 <SystemInit+0x1a0>)
    6f22:	4a54      	ldr	r2, [pc, #336]	; (7074 <SystemInit+0x1a4>)
    6f24:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    6f28:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f2c:	2201      	movs	r2, #1
    6f2e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f32:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f36:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6f3e:	2a07      	cmp	r2, #7
    6f40:	d109      	bne.n	6f56 <SystemInit+0x86>
                {
                    switch(var2)
    6f42:	3b02      	subs	r3, #2
    6f44:	2b03      	cmp	r3, #3
    6f46:	d806      	bhi.n	6f56 <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    6f48:	4a4b      	ldr	r2, [pc, #300]	; (7078 <SystemInit+0x1a8>)
    6f4a:	5cd3      	ldrb	r3, [r2, r3]
    6f4c:	b11b      	cbz	r3, 6f56 <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    6f4e:	2200      	movs	r2, #0
    6f50:	4b4a      	ldr	r3, [pc, #296]	; (707c <SystemInit+0x1ac>)
    6f52:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    6f56:	f7ff ffa9 	bl	6eac <nrf53_errata_42>
    6f5a:	b150      	cbz	r0, 6f72 <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    6f5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6f64:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    6f66:	bf42      	ittt	mi
    6f68:	2200      	movmi	r2, #0
    6f6a:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    6f6e:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f72:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f76:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6f7e:	2a07      	cmp	r2, #7
    6f80:	d109      	bne.n	6f96 <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    6f82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f86:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6f8a:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    6f8c:	bf44      	itt	mi
    6f8e:	f06f 0201 	mvnmi.w	r2, #1
    6f92:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    6f96:	f7ff ff89 	bl	6eac <nrf53_errata_42>
    6f9a:	b118      	cbz	r0, 6fa4 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    6f9c:	2265      	movs	r2, #101	; 0x65
    6f9e:	4b33      	ldr	r3, [pc, #204]	; (706c <SystemInit+0x19c>)
    6fa0:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fa4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fa8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    6fb0:	2a07      	cmp	r2, #7
    6fb2:	d116      	bne.n	6fe2 <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    6fb4:	4b31      	ldr	r3, [pc, #196]	; (707c <SystemInit+0x1ac>)
    6fb6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    6fba:	2b00      	cmp	r3, #0
    6fbc:	da11      	bge.n	6fe2 <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    6fbe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fc2:	2203      	movs	r2, #3
    6fc4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    6fc8:	2201      	movs	r2, #1
    6fca:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    6fcc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6fd0:	2a00      	cmp	r2, #0
    6fd2:	d0fb      	beq.n	6fcc <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    6fd4:	2200      	movs	r2, #0
    6fd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    6fda:	2201      	movs	r2, #1
    6fdc:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    6fde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fe2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fe6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6fee:	2a07      	cmp	r2, #7
    6ff0:	d123      	bne.n	703a <SystemInit+0x16a>
                {
                    switch(var2)
    6ff2:	3b02      	subs	r3, #2
    6ff4:	2b03      	cmp	r3, #3
    6ff6:	d802      	bhi.n	6ffe <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    6ff8:	4a21      	ldr	r2, [pc, #132]	; (7080 <SystemInit+0x1b0>)
    6ffa:	5cd3      	ldrb	r3, [r2, r3]
    6ffc:	b1eb      	cbz	r3, 703a <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    6ffe:	227e      	movs	r2, #126	; 0x7e
    7000:	4b1a      	ldr	r3, [pc, #104]	; (706c <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    7002:	491b      	ldr	r1, [pc, #108]	; (7070 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    7004:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    7008:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    700c:	237f      	movs	r3, #127	; 0x7f
    700e:	4a1d      	ldr	r2, [pc, #116]	; (7084 <SystemInit+0x1b4>)
    7010:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    7014:	2300      	movs	r3, #0
    7016:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    701a:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    701e:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    7022:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    7026:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    702a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    702e:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    7032:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7036:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    703a:	4a13      	ldr	r2, [pc, #76]	; (7088 <SystemInit+0x1b8>)
    703c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    7040:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    7044:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    7048:	4a10      	ldr	r2, [pc, #64]	; (708c <SystemInit+0x1bc>)
    704a:	4b11      	ldr	r3, [pc, #68]	; (7090 <SystemInit+0x1c0>)
    704c:	6811      	ldr	r1, [r2, #0]
    704e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    7052:	69d2      	ldr	r2, [r2, #28]
    7054:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    7058:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    705a:	2229      	movs	r2, #41	; 0x29
    705c:	4b03      	ldr	r3, [pc, #12]	; (706c <SystemInit+0x19c>)
    705e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    7062:	2203      	movs	r2, #3
    7064:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    7068:	e757      	b.n	6f1a <SystemInit+0x4a>
    706a:	bf00      	nop
    706c:	50004000 	.word	0x50004000
    7070:	50039000 	.word	0x50039000
    7074:	beef0044 	.word	0xbeef0044
    7078:	0000f740 	.word	0x0000f740
    707c:	50032000 	.word	0x50032000
    7080:	0000f73c 	.word	0x0000f73c
    7084:	50002000 	.word	0x50002000
    7088:	e000ed00 	.word	0xe000ed00
    708c:	00ff8000 	.word	0x00ff8000
    7090:	50006000 	.word	0x50006000

00007094 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7094:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    7096:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
    7098:	b1ac      	cbz	r4, 70c6 <nrfx_flag32_alloc+0x32>
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
    709a:	fab4 f384 	clz	r3, r4
        new_mask = prev_mask & ~NRFX_BIT(idx);
    709e:	2201      	movs	r2, #1
        idx = 31 - NRF_CLZ(prev_mask);
    70a0:	f1c3 031f 	rsb	r3, r3, #31
    70a4:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    70a6:	409a      	lsls	r2, r3
    70a8:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    70ac:	e8d0 5fef 	ldaex	r5, [r0]
    70b0:	42a5      	cmp	r5, r4
    70b2:	d104      	bne.n	70be <nrfx_flag32_alloc+0x2a>
    70b4:	e8c0 2fec 	stlex	ip, r2, [r0]
    70b8:	f1bc 0f00 	cmp.w	ip, #0
    70bc:	d1f6      	bne.n	70ac <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    70be:	d1ea      	bne.n	7096 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
    70c0:	4802      	ldr	r0, [pc, #8]	; (70cc <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    70c2:	700b      	strb	r3, [r1, #0]
}
    70c4:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
    70c6:	4802      	ldr	r0, [pc, #8]	; (70d0 <nrfx_flag32_alloc+0x3c>)
    70c8:	e7fc      	b.n	70c4 <nrfx_flag32_alloc+0x30>
    70ca:	bf00      	nop
    70cc:	0bad0000 	.word	0x0bad0000
    70d0:	0bad0002 	.word	0x0bad0002

000070d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    70d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    70d6:	6803      	ldr	r3, [r0, #0]
    70d8:	40cb      	lsrs	r3, r1
    70da:	07db      	lsls	r3, r3, #31
    70dc:	d410      	bmi.n	7100 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    70de:	2301      	movs	r3, #1
    70e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    70e2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    70e4:	ea43 0102 	orr.w	r1, r3, r2
    70e8:	e8d0 4fef 	ldaex	r4, [r0]
    70ec:	4294      	cmp	r4, r2
    70ee:	d104      	bne.n	70fa <nrfx_flag32_free+0x26>
    70f0:	e8c0 1fec 	stlex	ip, r1, [r0]
    70f4:	f1bc 0f00 	cmp.w	ip, #0
    70f8:	d1f6      	bne.n	70e8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    70fa:	d1f2      	bne.n	70e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    70fc:	4801      	ldr	r0, [pc, #4]	; (7104 <nrfx_flag32_free+0x30>)
}
    70fe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7100:	4801      	ldr	r0, [pc, #4]	; (7108 <nrfx_flag32_free+0x34>)
    7102:	e7fc      	b.n	70fe <nrfx_flag32_free+0x2a>
    7104:	0bad0000 	.word	0x0bad0000
    7108:	0bad0004 	.word	0x0bad0004

0000710c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    710c:	4b04      	ldr	r3, [pc, #16]	; (7120 <nrfx_clock_init+0x14>)
    710e:	791a      	ldrb	r2, [r3, #4]
    7110:	b922      	cbnz	r2, 711c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    7112:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    7114:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    7116:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7118:	4802      	ldr	r0, [pc, #8]	; (7124 <nrfx_clock_init+0x18>)
    711a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    711c:	4802      	ldr	r0, [pc, #8]	; (7128 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    711e:	4770      	bx	lr
    7120:	200141b8 	.word	0x200141b8
    7124:	0bad0000 	.word	0x0bad0000
    7128:	0bad000c 	.word	0x0bad000c

0000712c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    712c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    712e:	2005      	movs	r0, #5
    7130:	f7fc fd64 	bl	3bfc <arch_irq_is_enabled>
    7134:	b910      	cbnz	r0, 713c <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7136:	2005      	movs	r0, #5
    7138:	f7fc fd3e 	bl	3bb8 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    713c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7140:	2301      	movs	r3, #1
    7142:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    7146:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    714a:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    714e:	4a01      	ldr	r2, [pc, #4]	; (7154 <nrfx_clock_enable+0x28>)
    7150:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7152:	bd08      	pop	{r3, pc}
    7154:	200568af 	.word	0x200568af

00007158 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7158:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    715c:	b510      	push	{r4, lr}
    715e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7162:	b152      	cbz	r2, 717a <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7164:	2000      	movs	r0, #0
    7166:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    716a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    716e:	2201      	movs	r2, #1
    7170:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7174:	4b23      	ldr	r3, [pc, #140]	; (7204 <nrfx_clock_irq_handler+0xac>)
    7176:	681b      	ldr	r3, [r3, #0]
    7178:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    717a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    717e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7182:	b182      	cbz	r2, 71a6 <nrfx_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7184:	2200      	movs	r2, #0
    7186:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    718a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    718e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    7192:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7196:	2102      	movs	r1, #2
    7198:	f002 0203 	and.w	r2, r2, #3
    719c:	2a01      	cmp	r2, #1
    719e:	d128      	bne.n	71f2 <nrfx_clock_irq_handler+0x9a>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    71a0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71a4:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    71a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    71aa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    71ae:	b162      	cbz	r2, 71ca <nrfx_clock_irq_handler+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71b0:	2200      	movs	r2, #0
    71b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    71b6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    71ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    71be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    71c2:	4b10      	ldr	r3, [pc, #64]	; (7204 <nrfx_clock_irq_handler+0xac>)
    71c4:	2005      	movs	r0, #5
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    71ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    71ce:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    71d2:	b1aa      	cbz	r2, 7200 <nrfx_clock_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71d4:	2200      	movs	r2, #0
    71d6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    71da:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    71de:	f44f 7200 	mov.w	r2, #512	; 0x200
    71e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    71e6:	4b07      	ldr	r3, [pc, #28]	; (7204 <nrfx_clock_irq_handler+0xac>)
    71e8:	2006      	movs	r0, #6
    }
#endif
}
    71ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    71ee:	681b      	ldr	r3, [r3, #0]
    71f0:	4718      	bx	r3
    71f2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    71f6:	4b03      	ldr	r3, [pc, #12]	; (7204 <nrfx_clock_irq_handler+0xac>)
    71f8:	2001      	movs	r0, #1
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	4798      	blx	r3
    71fe:	e7d2      	b.n	71a6 <nrfx_clock_irq_handler+0x4e>
}
    7200:	bd10      	pop	{r4, pc}
    7202:	bf00      	nop
    7204:	200141b8 	.word	0x200141b8

00007208 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7208:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    720a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    720e:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    7210:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7212:	d004      	beq.n	721e <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    7214:	2b01      	cmp	r3, #1
    7216:	4803      	ldr	r0, [pc, #12]	; (7224 <nrf_gpio_pin_port_decode+0x1c>)
    7218:	bf18      	it	ne
    721a:	2000      	movne	r0, #0
    721c:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    721e:	4802      	ldr	r0, [pc, #8]	; (7228 <nrf_gpio_pin_port_decode+0x20>)
}
    7220:	4770      	bx	lr
    7222:	bf00      	nop
    7224:	50842800 	.word	0x50842800
    7228:	50842500 	.word	0x50842500

0000722c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    722c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    722e:	4c0d      	ldr	r4, [pc, #52]	; (7264 <call_handler+0x38>)
    7230:	f100 0308 	add.w	r3, r0, #8
    7234:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    7238:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    723a:	05da      	lsls	r2, r3, #23
{
    723c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    723e:	d507      	bpl.n	7250 <call_handler+0x24>
    7240:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7244:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    7248:	6852      	ldr	r2, [r2, #4]
    724a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    724e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7250:	68a3      	ldr	r3, [r4, #8]
    7252:	b12b      	cbz	r3, 7260 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7254:	4631      	mov	r1, r6
    7256:	4628      	mov	r0, r5
    7258:	68e2      	ldr	r2, [r4, #12]
    }
}
    725a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    725e:	4718      	bx	r3
}
    7260:	bd70      	pop	{r4, r5, r6, pc}
    7262:	bf00      	nop
    7264:	2000218c 	.word	0x2000218c

00007268 <release_handler>:
{
    7268:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    726a:	4a12      	ldr	r2, [pc, #72]	; (72b4 <release_handler+0x4c>)
    726c:	3008      	adds	r0, #8
    726e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    7272:	05d9      	lsls	r1, r3, #23
    7274:	d51b      	bpl.n	72ae <release_handler+0x46>
    7276:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    727a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    727e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7282:	2000      	movs	r0, #0
    7284:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7288:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    728c:	f413 7f80 	tst.w	r3, #256	; 0x100
    7290:	d003      	beq.n	729a <release_handler+0x32>
    7292:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7296:	4299      	cmp	r1, r3
    7298:	d009      	beq.n	72ae <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    729a:	3001      	adds	r0, #1
    729c:	2830      	cmp	r0, #48	; 0x30
    729e:	d1f3      	bne.n	7288 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    72a0:	2300      	movs	r3, #0
    72a2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    72a6:	4804      	ldr	r0, [pc, #16]	; (72b8 <release_handler+0x50>)
}
    72a8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    72aa:	f7ff bf13 	b.w	70d4 <nrfx_flag32_free>
}
    72ae:	bc10      	pop	{r4}
    72b0:	4770      	bx	lr
    72b2:	bf00      	nop
    72b4:	2000218c 	.word	0x2000218c
    72b8:	20002200 	.word	0x20002200

000072bc <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
    72bc:	4601      	mov	r1, r0
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;
    72be:	2000      	movs	r0, #0
NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
    72c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    72c2:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    72c4:	4606      	mov	r6, r0
NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
    72c6:	4a0f      	ldr	r2, [pc, #60]	; (7304 <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    72c8:	4c0f      	ldr	r4, [pc, #60]	; (7308 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    72ca:	f102 4330 	add.w	r3, r2, #2952790016	; 0xb0000000
    72ce:	f5a3 4351 	sub.w	r3, r3, #53504	; 0xd100
    72d2:	089b      	lsrs	r3, r3, #2
    72d4:	fa05 f303 	lsl.w	r3, r5, r3
    72d8:	4219      	tst	r1, r3
    72da:	d004      	beq.n	72e6 <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    72dc:	6817      	ldr	r7, [r2, #0]
    72de:	b117      	cbz	r7, 72e6 <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    72e0:	6016      	str	r6, [r2, #0]
    72e2:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    72e4:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    72e6:	3204      	adds	r2, #4
    72e8:	42a2      	cmp	r2, r4
    72ea:	d1ee      	bne.n	72ca <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    72ec:	4b07      	ldr	r3, [pc, #28]	; (730c <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
    72ee:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    72f2:	b132      	cbz	r2, 7302 <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    72f4:	2200      	movs	r2, #0
    72f6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    72fa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    72fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
    7302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7304:	5000d100 	.word	0x5000d100
    7308:	5000d120 	.word	0x5000d120
    730c:	5000d000 	.word	0x5000d000

00007310 <nrfx_gpiote_input_configure>:
{
    7310:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7314:	461d      	mov	r5, r3
    7316:	4604      	mov	r4, r0
    7318:	4690      	mov	r8, r2
    if (p_input_config)
    731a:	460b      	mov	r3, r1
    731c:	b1e9      	cbz	r1, 735a <nrfx_gpiote_input_configure+0x4a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    731e:	4e4e      	ldr	r6, [pc, #312]	; (7458 <nrfx_gpiote_input_configure+0x148>)
    7320:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7324:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    7328:	f002 0222 	and.w	r2, r2, #34	; 0x22
    732c:	2a22      	cmp	r2, #34	; 0x22
    732e:	d023      	beq.n	7378 <nrfx_gpiote_input_configure+0x68>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7330:	2200      	movs	r2, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
    7332:	f10d 010e 	add.w	r1, sp, #14
    7336:	e9cd 2200 	strd	r2, r2, [sp]
    733a:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    733e:	f88d 200f 	strb.w	r2, [sp, #15]
    7342:	f10d 020f 	add.w	r2, sp, #15
    7346:	f006 fb28 	bl	d99a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    734a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    734e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7352:	f043 0301 	orr.w	r3, r3, #1
    7356:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    735a:	f1b8 0f00 	cmp.w	r8, #0
    735e:	d02d      	beq.n	73bc <nrfx_gpiote_input_configure+0xac>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7360:	4e3d      	ldr	r6, [pc, #244]	; (7458 <nrfx_gpiote_input_configure+0x148>)
    7362:	f104 0708 	add.w	r7, r4, #8
    7366:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    736a:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    736e:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7370:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    7374:	d502      	bpl.n	737c <nrfx_gpiote_input_configure+0x6c>
            if (use_evt)
    7376:	b1cb      	cbz	r3, 73ac <nrfx_gpiote_input_configure+0x9c>
            return NRFX_ERROR_INVALID_PARAM;
    7378:	4838      	ldr	r0, [pc, #224]	; (745c <nrfx_gpiote_input_configure+0x14c>)
    737a:	e021      	b.n	73c0 <nrfx_gpiote_input_configure+0xb0>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    737c:	f021 0120 	bic.w	r1, r1, #32
    7380:	04c9      	lsls	r1, r1, #19
    7382:	0cc9      	lsrs	r1, r1, #19
    7384:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    7388:	b183      	cbz	r3, 73ac <nrfx_gpiote_input_configure+0x9c>
                if (!edge)
    738a:	2803      	cmp	r0, #3
    738c:	d8f4      	bhi.n	7378 <nrfx_gpiote_input_configure+0x68>
                uint8_t ch = *p_trigger_config->p_in_channel;
    738e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7392:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7396:	4662      	mov	r2, ip
    7398:	0092      	lsls	r2, r2, #2
    739a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    739e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    73a2:	b980      	cbnz	r0, 73c6 <nrfx_gpiote_input_configure+0xb6>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    73a4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#if !defined(NRF51_SERIES) && !defined(NRF52_SERIES)
    p_reg->CONFIG[idx] = 0;
    73a8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    73ac:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    73b0:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    73b4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    73b8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    73bc:	bb1d      	cbnz	r5, 7406 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    73be:	4828      	ldr	r0, [pc, #160]	; (7460 <nrfx_gpiote_input_configure+0x150>)
}
    73c0:	b004      	add	sp, #16
    73c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    73c6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    73ca:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    73ce:	f023 0303 	bic.w	r3, r3, #3
    73d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    73d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    73da:	f041 0120 	orr.w	r1, r1, #32
    73de:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    73e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    73e6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    73ea:	0223      	lsls	r3, r4, #8
    73ec:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    73f0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    73f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    73f8:	ea43 030e 	orr.w	r3, r3, lr
    73fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    7400:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    7404:	e7d2      	b.n	73ac <nrfx_gpiote_input_configure+0x9c>
    release_handler(pin);
    7406:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7408:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    740c:	f7ff ff2c 	bl	7268 <release_handler>
    if (!handler)
    7410:	2e00      	cmp	r6, #0
    7412:	d0d4      	beq.n	73be <nrfx_gpiote_input_configure+0xae>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7414:	4d10      	ldr	r5, [pc, #64]	; (7458 <nrfx_gpiote_input_configure+0x148>)
    7416:	e9d5 2300 	ldrd	r2, r3, [r5]
    741a:	4296      	cmp	r6, r2
    741c:	d101      	bne.n	7422 <nrfx_gpiote_input_configure+0x112>
    741e:	429f      	cmp	r7, r3
    7420:	d018      	beq.n	7454 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7422:	4810      	ldr	r0, [pc, #64]	; (7464 <nrfx_gpiote_input_configure+0x154>)
    7424:	f10d 010f 	add.w	r1, sp, #15
    7428:	f7ff fe34 	bl	7094 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    742c:	4b0c      	ldr	r3, [pc, #48]	; (7460 <nrfx_gpiote_input_configure+0x150>)
    742e:	4298      	cmp	r0, r3
    7430:	d1c6      	bne.n	73c0 <nrfx_gpiote_input_configure+0xb0>
        handler_id = (int32_t)id;
    7432:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    7436:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    743a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    743c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    743e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    7442:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7446:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    744a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    744e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    7452:	e7b4      	b.n	73be <nrfx_gpiote_input_configure+0xae>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7454:	2200      	movs	r2, #0
    7456:	e7ee      	b.n	7436 <nrfx_gpiote_input_configure+0x126>
    7458:	2000218c 	.word	0x2000218c
    745c:	0bad0004 	.word	0x0bad0004
    7460:	0bad0000 	.word	0x0bad0000
    7464:	20002200 	.word	0x20002200

00007468 <nrfx_gpiote_output_configure>:
{
    7468:	b5f0      	push	{r4, r5, r6, r7, lr}
    746a:	4604      	mov	r4, r0
    746c:	4615      	mov	r5, r2
    746e:	b085      	sub	sp, #20
    if (p_config)
    7470:	b309      	cbz	r1, 74b6 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7472:	4e33      	ldr	r6, [pc, #204]	; (7540 <nrfx_gpiote_output_configure+0xd8>)
    7474:	f100 0708 	add.w	r7, r0, #8
    7478:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    747c:	0798      	lsls	r0, r3, #30
    747e:	d401      	bmi.n	7484 <nrfx_gpiote_output_configure+0x1c>
    7480:	069a      	lsls	r2, r3, #26
    7482:	d45a      	bmi.n	753a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7484:	f013 0f1c 	tst.w	r3, #28
    7488:	d002      	beq.n	7490 <nrfx_gpiote_output_configure+0x28>
    748a:	784b      	ldrb	r3, [r1, #1]
    748c:	2b01      	cmp	r3, #1
    748e:	d054      	beq.n	753a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7490:	2301      	movs	r3, #1
    7492:	f88d 300f 	strb.w	r3, [sp, #15]
    7496:	2300      	movs	r3, #0
    7498:	1c4a      	adds	r2, r1, #1
    749a:	e9cd 1300 	strd	r1, r3, [sp]
    749e:	4620      	mov	r0, r4
    74a0:	1c8b      	adds	r3, r1, #2
    74a2:	f10d 010f 	add.w	r1, sp, #15
    74a6:	f006 fa78 	bl	d99a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    74aa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    74ae:	f043 0303 	orr.w	r3, r3, #3
    74b2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    74b6:	b915      	cbnz	r5, 74be <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    74b8:	4822      	ldr	r0, [pc, #136]	; (7544 <nrfx_gpiote_output_configure+0xdc>)
}
    74ba:	b005      	add	sp, #20
    74bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    74be:	4e20      	ldr	r6, [pc, #128]	; (7540 <nrfx_gpiote_output_configure+0xd8>)
    74c0:	f104 0708 	add.w	r7, r4, #8
    74c4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    74c8:	0783      	lsls	r3, r0, #30
    74ca:	d536      	bpl.n	753a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    74cc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    74d0:	2300      	movs	r3, #0
    74d2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    74d4:	f020 0020 	bic.w	r0, r0, #32
    74d8:	0089      	lsls	r1, r1, #2
    74da:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    74de:	04c0      	lsls	r0, r0, #19
    74e0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    74e4:	0cc0      	lsrs	r0, r0, #19
    74e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    74ea:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    74ee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    74f2:	786a      	ldrb	r2, [r5, #1]
    74f4:	2a00      	cmp	r2, #0
    74f6:	d0df      	beq.n	74b8 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    74f8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
    74fc:	78ad      	ldrb	r5, [r5, #2]
    74fe:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    7502:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7506:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    750a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    750e:	0223      	lsls	r3, r4, #8
    7510:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7514:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7516:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    751a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    751e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7520:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7522:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7526:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    752a:	432b      	orrs	r3, r5
    752c:	f040 0020 	orr.w	r0, r0, #32
    7530:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7534:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7538:	e7be      	b.n	74b8 <nrfx_gpiote_output_configure+0x50>
{
    753a:	4803      	ldr	r0, [pc, #12]	; (7548 <nrfx_gpiote_output_configure+0xe0>)
    753c:	e7bd      	b.n	74ba <nrfx_gpiote_output_configure+0x52>
    753e:	bf00      	nop
    7540:	2000218c 	.word	0x2000218c
    7544:	0bad0000 	.word	0x0bad0000
    7548:	0bad0004 	.word	0x0bad0004

0000754c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    754c:	4b01      	ldr	r3, [pc, #4]	; (7554 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    754e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    7552:	4770      	bx	lr
    7554:	2000218c 	.word	0x2000218c

00007558 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7558:	4b05      	ldr	r3, [pc, #20]	; (7570 <nrfx_gpiote_channel_get+0x18>)
    755a:	3008      	adds	r0, #8
    755c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    7560:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7562:	bf43      	ittte	mi
    7564:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    7566:	4803      	ldrmi	r0, [pc, #12]	; (7574 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7568:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    756a:	4803      	ldrpl	r0, [pc, #12]	; (7578 <nrfx_gpiote_channel_get+0x20>)
}
    756c:	4770      	bx	lr
    756e:	bf00      	nop
    7570:	2000218c 	.word	0x2000218c
    7574:	0bad0000 	.word	0x0bad0000
    7578:	0bad0004 	.word	0x0bad0004

0000757c <nrfx_gpiote_init>:
{
    757c:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    757e:	4c0f      	ldr	r4, [pc, #60]	; (75bc <nrfx_gpiote_init+0x40>)
    7580:	f894 6078 	ldrb.w	r6, [r4, #120]	; 0x78
    7584:	b9be      	cbnz	r6, 75b6 <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7586:	4d0e      	ldr	r5, [pc, #56]	; (75c0 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7588:	2260      	movs	r2, #96	; 0x60
    758a:	4631      	mov	r1, r6
    758c:	f104 0010 	add.w	r0, r4, #16
    7590:	f004 f998 	bl	b8c4 <memset>
    NRFX_IRQ_ENABLE(irqn);
    7594:	200d      	movs	r0, #13
    7596:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    759a:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    759e:	f7fc fb0b 	bl	3bb8 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    75a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    75a6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    75aa:	2301      	movs	r3, #1
    return err_code;
    75ac:	4805      	ldr	r0, [pc, #20]	; (75c4 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    75ae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    75b2:	6763      	str	r3, [r4, #116]	; 0x74
}
    75b4:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    75b6:	4804      	ldr	r0, [pc, #16]	; (75c8 <nrfx_gpiote_init+0x4c>)
    75b8:	e7fc      	b.n	75b4 <nrfx_gpiote_init+0x38>
    75ba:	bf00      	nop
    75bc:	2000218c 	.word	0x2000218c
    75c0:	5000d000 	.word	0x5000d000
    75c4:	0bad0000 	.word	0x0bad0000
    75c8:	0bad0005 	.word	0x0bad0005

000075cc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    75cc:	4b03      	ldr	r3, [pc, #12]	; (75dc <nrfx_gpiote_is_init+0x10>)
    75ce:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    75d2:	3800      	subs	r0, #0
    75d4:	bf18      	it	ne
    75d6:	2001      	movne	r0, #1
    75d8:	4770      	bx	lr
    75da:	bf00      	nop
    75dc:	2000218c 	.word	0x2000218c

000075e0 <nrfx_gpiote_channel_free>:
{
    75e0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    75e2:	4801      	ldr	r0, [pc, #4]	; (75e8 <nrfx_gpiote_channel_free+0x8>)
    75e4:	f7ff bd76 	b.w	70d4 <nrfx_flag32_free>
    75e8:	200021fc 	.word	0x200021fc

000075ec <nrfx_gpiote_channel_alloc>:
{
    75ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    75ee:	4801      	ldr	r0, [pc, #4]	; (75f4 <nrfx_gpiote_channel_alloc+0x8>)
    75f0:	f7ff bd50 	b.w	7094 <nrfx_flag32_alloc>
    75f4:	200021fc 	.word	0x200021fc

000075f8 <nrfx_gpiote_trigger_enable>:
{
    75f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    75fa:	4b20      	ldr	r3, [pc, #128]	; (767c <nrfx_gpiote_trigger_enable+0x84>)
    75fc:	f100 0208 	add.w	r2, r0, #8
    7600:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    7604:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7606:	069a      	lsls	r2, r3, #26
    7608:	d51d      	bpl.n	7646 <nrfx_gpiote_trigger_enable+0x4e>
    760a:	f013 0502 	ands.w	r5, r3, #2
    760e:	d11a      	bne.n	7646 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7610:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7612:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    7614:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    7618:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    761c:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7620:	6005      	str	r5, [r0, #0]
    7622:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    7626:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7628:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    762c:	f040 0001 	orr.w	r0, r0, #1
    7630:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7634:	b129      	cbz	r1, 7642 <nrfx_gpiote_trigger_enable+0x4a>
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7636:	2201      	movs	r2, #1
    7638:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    763c:	4a10      	ldr	r2, [pc, #64]	; (7680 <nrfx_gpiote_trigger_enable+0x88>)
    763e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7642:	b003      	add	sp, #12
    7644:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7646:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    764a:	2b04      	cmp	r3, #4
    764c:	d011      	beq.n	7672 <nrfx_gpiote_trigger_enable+0x7a>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    764e:	2b05      	cmp	r3, #5
    7650:	d011      	beq.n	7676 <nrfx_gpiote_trigger_enable+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7652:	a801      	add	r0, sp, #4
    7654:	9401      	str	r4, [sp, #4]
    7656:	f7ff fdd7 	bl	7208 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    765a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    765c:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    765e:	40d9      	lsrs	r1, r3
    7660:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
    7664:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
    7666:	4620      	mov	r0, r4
}
    7668:	b003      	add	sp, #12
    766a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    766e:	f006 b9dd 	b.w	da2c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7672:	2103      	movs	r1, #3
    7674:	e7f7      	b.n	7666 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7676:	2102      	movs	r1, #2
    7678:	e7f5      	b.n	7666 <nrfx_gpiote_trigger_enable+0x6e>
    767a:	bf00      	nop
    767c:	2000218c 	.word	0x2000218c
    7680:	5000d000 	.word	0x5000d000

00007684 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7684:	4b0e      	ldr	r3, [pc, #56]	; (76c0 <nrfx_gpiote_trigger_disable+0x3c>)
    7686:	f100 0208 	add.w	r2, r0, #8
    768a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    768e:	0699      	lsls	r1, r3, #26
    7690:	d513      	bpl.n	76ba <nrfx_gpiote_trigger_disable+0x36>
    7692:	079a      	lsls	r2, r3, #30
    7694:	d411      	bmi.n	76ba <nrfx_gpiote_trigger_disable+0x36>
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7696:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7698:	0b5b      	lsrs	r3, r3, #13
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    769a:	409a      	lsls	r2, r3
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
    769c:	4909      	ldr	r1, [pc, #36]	; (76c4 <nrfx_gpiote_trigger_disable+0x40>)
    769e:	009b      	lsls	r3, r3, #2
    76a0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    76a4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    76a8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    76ac:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    76b0:	f022 0203 	bic.w	r2, r2, #3
    76b4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    76b8:	4770      	bx	lr
    76ba:	2100      	movs	r1, #0
    76bc:	f006 b9b6 	b.w	da2c <nrf_gpio_cfg_sense_set>
    76c0:	2000218c 	.word	0x2000218c
    76c4:	5000d000 	.word	0x5000d000

000076c8 <nrfx_gpiote_pin_uninit>:
{
    76c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    76ca:	4d19      	ldr	r5, [pc, #100]	; (7730 <nrfx_gpiote_pin_uninit+0x68>)
    76cc:	f100 0608 	add.w	r6, r0, #8
    76d0:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
{
    76d4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    76d6:	07d9      	lsls	r1, r3, #31
    76d8:	d528      	bpl.n	772c <nrfx_gpiote_pin_uninit+0x64>
    nrfx_gpiote_trigger_disable(pin);
    76da:	f7ff ffd3 	bl	7684 <nrfx_gpiote_trigger_disable>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    76de:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (pin_in_use_by_te(pin))
    76e2:	069a      	lsls	r2, r3, #26
    76e4:	d50a      	bpl.n	76fc <nrfx_gpiote_pin_uninit+0x34>
    p_reg->CONFIG[idx] = 0;
    76e6:	2200      	movs	r2, #0
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    76e8:	0b5b      	lsrs	r3, r3, #13
    76ea:	009b      	lsls	r3, r3, #2
    76ec:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    76f0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    76f4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    76f8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    76fc:	4620      	mov	r0, r4
    76fe:	f7ff fdb3 	bl	7268 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7702:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7704:	a801      	add	r0, sp, #4
    7706:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    nrf_gpio_cfg(
    770a:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    770c:	f7ff fd7c 	bl	7208 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7710:	9b01      	ldr	r3, [sp, #4]
    7712:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7716:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    cnf &= ~to_update;
    771a:	4b06      	ldr	r3, [pc, #24]	; (7734 <nrfx_gpiote_pin_uninit+0x6c>)
    771c:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    771e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    7722:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    7726:	4804      	ldr	r0, [pc, #16]	; (7738 <nrfx_gpiote_pin_uninit+0x70>)
}
    7728:	b002      	add	sp, #8
    772a:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
    772c:	4803      	ldr	r0, [pc, #12]	; (773c <nrfx_gpiote_pin_uninit+0x74>)
    772e:	e7fb      	b.n	7728 <nrfx_gpiote_pin_uninit+0x60>
    7730:	2000218c 	.word	0x2000218c
    7734:	fffcf0f0 	.word	0xfffcf0f0
    7738:	0bad0000 	.word	0x0bad0000
    773c:	0bad0004 	.word	0x0bad0004

00007740 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
    7744:	4b5f      	ldr	r3, [pc, #380]	; (78c4 <nrfx_gpiote_irq_handler+0x184>)
    7746:	b087      	sub	sp, #28
    7748:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    774c:	b2c0      	uxtb	r0, r0
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
    774e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    7752:	f7ff fdb3 	bl	72bc <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
    7756:	1e05      	subs	r5, r0, #0
    7758:	f280 8097 	bge.w	788a <nrfx_gpiote_irq_handler+0x14a>
        *p_masks = gpio_regs[i]->LATCH;
    775c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 78c8 <nrfx_gpiote_irq_handler+0x188>
    7760:	f8df 8168 	ldr.w	r8, [pc, #360]	; 78cc <nrfx_gpiote_irq_handler+0x18c>
    7764:	f8d9 3020 	ldr.w	r3, [r9, #32]
    7768:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    776a:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
    776e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    7772:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7774:	f8c8 3020 	str.w	r3, [r8, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7778:	f04f 0a00 	mov.w	sl, #0
            while (latch[i])
    777c:	f10d 0b10 	add.w	fp, sp, #16
    7780:	ea4f 134a 	mov.w	r3, sl, lsl #5
    7784:	9300      	str	r3, [sp, #0]
    7786:	e048      	b.n	781a <nrfx_gpiote_irq_handler+0xda>
                uint32_t pin = NRF_CTZ(latch[i]);
    7788:	fa94 f4a4 	rbit	r4, r4
    778c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7790:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7792:	4a4f      	ldr	r2, [pc, #316]	; (78d0 <nrfx_gpiote_irq_handler+0x190>)
                pin += 32 * i;
    7794:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7796:	f104 0308 	add.w	r3, r4, #8
    779a:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    779e:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    77a0:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    77a2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    77a6:	fa03 f202 	lsl.w	r2, r3, r2
    77aa:	f81b 3000 	ldrb.w	r3, [fp, r0]
    77ae:	9403      	str	r4, [sp, #12]
    77b0:	ea23 0302 	bic.w	r3, r3, r2
    77b4:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77b8:	a803      	add	r0, sp, #12
    77ba:	f7ff fd25 	bl	7208 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    77be:	9b03      	ldr	r3, [sp, #12]
    77c0:	08b9      	lsrs	r1, r7, #2
    77c2:	3380      	adds	r3, #128	; 0x80
    77c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    77c8:	f3c7 0682 	ubfx	r6, r7, #2, #3
    if (is_level(trigger))
    77cc:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    77ce:	4637      	mov	r7, r6
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    77d0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    77d4:	d52b      	bpl.n	782e <nrfx_gpiote_irq_handler+0xee>
        call_handler(pin, trigger);
    77d6:	4620      	mov	r0, r4
    77d8:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    77da:	b2de      	uxtb	r6, r3
    77dc:	f7ff fd26 	bl	722c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77e0:	a803      	add	r0, sp, #12
    77e2:	9403      	str	r4, [sp, #12]
    77e4:	f7ff fd10 	bl	7208 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    77e8:	9b03      	ldr	r3, [sp, #12]
    77ea:	3380      	adds	r3, #128	; 0x80
    77ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
    77f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    77f4:	429e      	cmp	r6, r3
    77f6:	d107      	bne.n	7808 <nrfx_gpiote_irq_handler+0xc8>
    77f8:	2100      	movs	r1, #0
    77fa:	4620      	mov	r0, r4
    77fc:	f006 f916 	bl	da2c <nrf_gpio_cfg_sense_set>
    7800:	4631      	mov	r1, r6
    7802:	4620      	mov	r0, r4
    7804:	f006 f912 	bl	da2c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7808:	a803      	add	r0, sp, #12
    780a:	9403      	str	r4, [sp, #12]
    780c:	f7ff fcfc 	bl	7208 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    7810:	2201      	movs	r2, #1
    7812:	9b03      	ldr	r3, [sp, #12]
    7814:	fa02 f303 	lsl.w	r3, r2, r3
    7818:	6203      	str	r3, [r0, #32]
            while (latch[i])
    781a:	f85b 402a 	ldr.w	r4, [fp, sl, lsl #2]
    781e:	2c00      	cmp	r4, #0
    7820:	d1b2      	bne.n	7788 <nrfx_gpiote_irq_handler+0x48>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7822:	f1ba 0f00 	cmp.w	sl, #0
    7826:	d11d      	bne.n	7864 <nrfx_gpiote_irq_handler+0x124>
    7828:	f04f 0a01 	mov.w	sl, #1
    782c:	e7a8      	b.n	7780 <nrfx_gpiote_irq_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    782e:	2b02      	cmp	r3, #2
    7830:	d10c      	bne.n	784c <nrfx_gpiote_irq_handler+0x10c>
    7832:	2103      	movs	r1, #3
    7834:	4620      	mov	r0, r4
    7836:	f006 f8f9 	bl	da2c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    783a:	f006 0305 	and.w	r3, r6, #5
    783e:	2b01      	cmp	r3, #1
    7840:	d1e2      	bne.n	7808 <nrfx_gpiote_irq_handler+0xc8>
            call_handler(pin, trigger);
    7842:	4639      	mov	r1, r7
    7844:	4620      	mov	r0, r4
    7846:	f7ff fcf1 	bl	722c <call_handler>
    784a:	e7dd      	b.n	7808 <nrfx_gpiote_irq_handler+0xc8>
    784c:	2102      	movs	r1, #2
    784e:	4620      	mov	r0, r4
    7850:	9301      	str	r3, [sp, #4]
    7852:	f006 f8eb 	bl	da2c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7856:	2e03      	cmp	r6, #3
    7858:	d0f3      	beq.n	7842 <nrfx_gpiote_irq_handler+0x102>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    785a:	9b01      	ldr	r3, [sp, #4]
    785c:	2b03      	cmp	r3, #3
    785e:	d1d3      	bne.n	7808 <nrfx_gpiote_irq_handler+0xc8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7860:	2e02      	cmp	r6, #2
    7862:	e7ed      	b.n	7840 <nrfx_gpiote_irq_handler+0x100>
    7864:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    7868:	f7ff fd28 	bl	72bc <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
    786c:	f8d9 3020 	ldr.w	r3, [r9, #32]
    7870:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7872:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
    7876:	f8d8 2020 	ldr.w	r2, [r8, #32]
        if (latch[port_idx])
    787a:	4313      	orrs	r3, r2
    787c:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    787e:	f8c8 2020 	str.w	r2, [r8, #32]
    7882:	f47f af79 	bne.w	7778 <nrfx_gpiote_irq_handler+0x38>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
    7886:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
    788a:	2401      	movs	r4, #1
    while (mask)
    788c:	b915      	cbnz	r5, 7894 <nrfx_gpiote_irq_handler+0x154>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
    788e:	b007      	add	sp, #28
    7890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7894:	fa95 f3a5 	rbit	r3, r5
    7898:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    789c:	fa04 f203 	lsl.w	r2, r4, r3
    78a0:	009b      	lsls	r3, r3, #2
    78a2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    78a6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    78aa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    78ae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    78b2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    78b6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    78ba:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    78be:	f7ff fcb5 	bl	722c <call_handler>
    78c2:	e7e3      	b.n	788c <nrfx_gpiote_irq_handler+0x14c>
    78c4:	5000d000 	.word	0x5000d000
    78c8:	50842500 	.word	0x50842500
    78cc:	50842800 	.word	0x50842800
    78d0:	2000218c 	.word	0x2000218c

000078d4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    78d4:	2200      	movs	r2, #0
    78d6:	4b03      	ldr	r3, [pc, #12]	; (78e4 <nvmc_readonly_mode_set+0x10>)
    78d8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    78dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    78e0:	4770      	bx	lr
    78e2:	bf00      	nop
    78e4:	50039000 	.word	0x50039000

000078e8 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    78e8:	4a04      	ldr	r2, [pc, #16]	; (78fc <nvmc_word_write+0x14>)
    78ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    78ee:	07db      	lsls	r3, r3, #31
    78f0:	d5fb      	bpl.n	78ea <nvmc_word_write+0x2>
#endif

NRF_STATIC_INLINE void nrf_nvmc_word_write(uint32_t address,
                                           uint32_t value)
{
    *(volatile uint32_t *)address = value;
    78f2:	6001      	str	r1, [r0, #0]
    78f4:	f3bf 8f5f 	dmb	sy
    {}
#endif

    nrf_nvmc_word_write(addr, value);
    __DMB();
}
    78f8:	4770      	bx	lr
    78fa:	bf00      	nop
    78fc:	50039000 	.word	0x50039000

00007900 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    7900:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    7902:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    7906:	b983      	cbnz	r3, 792a <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    7908:	2202      	movs	r2, #2
    790a:	4b09      	ldr	r3, [pc, #36]	; (7930 <nrfx_nvmc_page_erase+0x30>)
    790c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7910:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    7914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7918:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    791a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    791e:	07d2      	lsls	r2, r2, #31
    7920:	d5fb      	bpl.n	791a <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    7922:	f7ff ffd7 	bl	78d4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    7926:	4803      	ldr	r0, [pc, #12]	; (7934 <nrfx_nvmc_page_erase+0x34>)
}
    7928:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    792a:	4803      	ldr	r0, [pc, #12]	; (7938 <nrfx_nvmc_page_erase+0x38>)
    792c:	e7fc      	b.n	7928 <nrfx_nvmc_page_erase+0x28>
    792e:	bf00      	nop
    7930:	50039000 	.word	0x50039000
    7934:	0bad0000 	.word	0x0bad0000
    7938:	0bad000a 	.word	0x0bad000a

0000793c <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    793c:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    793e:	b508      	push	{r3, lr}
    7940:	4b05      	ldr	r3, [pc, #20]	; (7958 <nrfx_nvmc_word_write+0x1c>)
    7942:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7946:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    794a:	f7ff ffcd 	bl	78e8 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    794e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    7952:	f7ff bfbf 	b.w	78d4 <nvmc_readonly_mode_set>
    7956:	bf00      	nop
    7958:	50039000 	.word	0x50039000

0000795c <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    795c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7960:	4615      	mov	r5, r2
    p_reg->CONFIGNS = (uint32_t)mode;
    7962:	2201      	movs	r2, #1
    7964:	4b1d      	ldr	r3, [pc, #116]	; (79dc <nrfx_nvmc_bytes_write+0x80>)
    7966:	4604      	mov	r4, r0
    7968:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    796c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    7970:	f010 0303 	ands.w	r3, r0, #3
{
    7974:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
    7976:	d010      	beq.n	799a <nrfx_nvmc_bytes_write+0x3e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    7978:	f1c3 0704 	rsb	r7, r3, #4
    797c:	42af      	cmp	r7, r5
    797e:	bf28      	it	cs
    7980:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
    7982:	463a      	mov	r2, r7
    7984:	eba0 0803 	sub.w	r8, r0, r3
    7988:	f006 f85f 	bl	da4a <partial_word_create>
    798c:	4601      	mov	r1, r0
    798e:	4640      	mov	r0, r8
    7990:	f7ff ffaa 	bl	78e8 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    7994:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    7996:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    7998:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
    799a:	4637      	mov	r7, r6
    799c:	f025 0803 	bic.w	r8, r5, #3
    79a0:	44b0      	add	r8, r6
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    79a2:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
    79a6:	45b8      	cmp	r8, r7
    79a8:	d111      	bne.n	79ce <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    79aa:	f015 0203 	ands.w	r2, r5, #3
    79ae:	d00a      	beq.n	79c6 <nrfx_nvmc_bytes_write+0x6a>
        addr += word_count * NVMC_BYTES_IN_WORD;
    79b0:	f025 0503 	bic.w	r5, r5, #3
    79b4:	442c      	add	r4, r5
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    79b6:	1971      	adds	r1, r6, r5
    79b8:	4620      	mov	r0, r4
    79ba:	f006 f846 	bl	da4a <partial_word_create>
    79be:	4601      	mov	r1, r0
    79c0:	4620      	mov	r0, r4
    79c2:	f7ff ff91 	bl	78e8 <nvmc_word_write>
    }

    nvmc_readonly_mode_set();
}
    79c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    nvmc_readonly_mode_set();
    79ca:	f7ff bf83 	b.w	78d4 <nvmc_readonly_mode_set>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    79ce:	eb09 0007 	add.w	r0, r9, r7
    79d2:	f857 1b04 	ldr.w	r1, [r7], #4
    79d6:	f7ff ff87 	bl	78e8 <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    79da:	e7e4      	b.n	79a6 <nrfx_nvmc_bytes_write+0x4a>
    79dc:	50039000 	.word	0x50039000

000079e0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    79e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    79e2:	4c17      	ldr	r4, [pc, #92]	; (7a40 <nrfx_power_init+0x60>)
    79e4:	7823      	ldrb	r3, [r4, #0]
    79e6:	bb4b      	cbnz	r3, 7a3c <nrfx_power_init+0x5c>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    79e8:	7803      	ldrb	r3, [r0, #0]
    79ea:	4a16      	ldr	r2, [pc, #88]	; (7a44 <nrfx_power_init+0x64>)
    79ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
    79f0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    79f4:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    79f6:	f003 0301 	and.w	r3, r3, #1
    79fa:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    79fe:	7803      	ldrb	r3, [r0, #0]
    7a00:	07db      	lsls	r3, r3, #31
    7a02:	d510      	bpl.n	7a26 <nrfx_power_init+0x46>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7a04:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7a08:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7a0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    7a10:	2907      	cmp	r1, #7
    7a12:	d108      	bne.n	7a26 <nrfx_power_init+0x46>
                    switch(var2)
    7a14:	3b02      	subs	r3, #2
    7a16:	2b03      	cmp	r3, #3
    7a18:	d805      	bhi.n	7a26 <nrfx_power_init+0x46>
    7a1a:	490b      	ldr	r1, [pc, #44]	; (7a48 <nrfx_power_init+0x68>)
    7a1c:	5ccb      	ldrb	r3, [r1, r3]
    7a1e:	b113      	cbz	r3, 7a26 <nrfx_power_init+0x46>
    {
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    7a20:	2301      	movs	r3, #1
    7a22:	f8c2 3728 	str.w	r3, [r2, #1832]	; 0x728
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7a26:	2005      	movs	r0, #5
    7a28:	f7fc f8e8 	bl	3bfc <arch_irq_is_enabled>
    7a2c:	b910      	cbnz	r0, 7a34 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7a2e:	2005      	movs	r0, #5
    7a30:	f7fc f8c2 	bl	3bb8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7a34:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    7a36:	4805      	ldr	r0, [pc, #20]	; (7a4c <nrfx_power_init+0x6c>)
    m_initialized = true;
    7a38:	7023      	strb	r3, [r4, #0]
}
    7a3a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7a3c:	4804      	ldr	r0, [pc, #16]	; (7a50 <nrfx_power_init+0x70>)
    7a3e:	e7fc      	b.n	7a3a <nrfx_power_init+0x5a>
    7a40:	200568b0 	.word	0x200568b0
    7a44:	50004000 	.word	0x50004000
    7a48:	0000f75f 	.word	0x0000f75f
    7a4c:	0bad0000 	.word	0x0bad0000
    7a50:	0bad000c 	.word	0x0bad000c

00007a54 <nrfx_power_irq_handler>:
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    7a54:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7a58:	b510      	push	{r4, lr}
    7a5a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7a5e:	0761      	lsls	r1, r4, #29
    7a60:	d50a      	bpl.n	7a78 <nrfx_power_irq_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (ret)
    7a66:	b13a      	cbz	r2, 7a78 <nrfx_power_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a68:	2200      	movs	r2, #0
    7a6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7a72:	4b12      	ldr	r3, [pc, #72]	; (7abc <nrfx_power_irq_handler+0x68>)
    7a74:	681b      	ldr	r3, [r3, #0]
    7a76:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7a78:	06a2      	lsls	r2, r4, #26
    7a7a:	d50c      	bpl.n	7a96 <nrfx_power_irq_handler+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7a80:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    7a84:	b13a      	cbz	r2, 7a96 <nrfx_power_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a86:	2000      	movs	r0, #0
    7a88:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    7a8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7a90:	4b0b      	ldr	r3, [pc, #44]	; (7ac0 <nrfx_power_irq_handler+0x6c>)
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7a96:	0663      	lsls	r3, r4, #25
    7a98:	d50f      	bpl.n	7aba <nrfx_power_irq_handler+0x66>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7a9e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    7aa2:	b152      	cbz	r2, 7aba <nrfx_power_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7aa4:	2200      	movs	r2, #0
    7aa6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    7aaa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7aae:	4b04      	ldr	r3, [pc, #16]	; (7ac0 <nrfx_power_irq_handler+0x6c>)
    7ab0:	2001      	movs	r0, #1
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    7ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7ab6:	681b      	ldr	r3, [r3, #0]
    7ab8:	4718      	bx	r3
}
    7aba:	bd10      	pop	{r4, pc}
    7abc:	200141c4 	.word	0x200141c4
    7ac0:	200141c0 	.word	0x200141c0

00007ac4 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    7ac4:	b570      	push	{r4, r5, r6, lr}
    7ac6:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    7aca:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    7ace:	d168      	bne.n	7ba2 <qspi_xfer+0xde>
    7ad0:	0784      	lsls	r4, r0, #30
    7ad2:	d166      	bne.n	7ba2 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    7ad4:	4d35      	ldr	r5, [pc, #212]	; (7bac <qspi_xfer+0xe8>)
    7ad6:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    7ada:	2c01      	cmp	r4, #1
    7adc:	d001      	beq.n	7ae2 <qspi_xfer+0x1e>
    7ade:	429c      	cmp	r4, r3
    7ae0:	d161      	bne.n	7ba6 <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    7ae2:	682c      	ldr	r4, [r5, #0]
    7ae4:	bb04      	cbnz	r4, 7b28 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7ae6:	2b02      	cmp	r3, #2
    7ae8:	4b31      	ldr	r3, [pc, #196]	; (7bb0 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    7aea:	bf0b      	itete	eq
    7aec:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    7af0:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7af4:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7af8:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7afc:	bf0b      	itete	eq
    7afe:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7b02:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    7b06:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    7b08:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b0a:	2100      	movs	r1, #0
    7b0c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b10:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    7b14:	2201      	movs	r2, #1
    7b16:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    7b1a:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b1c:	4a24      	ldr	r2, [pc, #144]	; (7bb0 <qspi_xfer+0xec>)
    7b1e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7b22:	2b00      	cmp	r3, #0
    7b24:	d0fb      	beq.n	7b1e <qspi_xfer+0x5a>
    7b26:	e00d      	b.n	7b44 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    7b28:	68ae      	ldr	r6, [r5, #8]
    7b2a:	4c21      	ldr	r4, [pc, #132]	; (7bb0 <qspi_xfer+0xec>)
    7b2c:	b166      	cbz	r6, 7b48 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b2e:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    7b30:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    7b32:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    7b34:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b36:	d12d      	bne.n	7b94 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    7b38:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7b3c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    7b40:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    7b44:	481b      	ldr	r0, [pc, #108]	; (7bb4 <qspi_xfer+0xf0>)
}
    7b46:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b48:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    7b4a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    7b4e:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    7b50:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    7b52:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    7b54:	bf0c      	ite	eq
    7b56:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    7b5a:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b5e:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7b62:	bf0b      	itete	eq
    7b64:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7b68:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7b6c:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7b70:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    7b74:	bf08      	it	eq
    7b76:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b78:	490d      	ldr	r1, [pc, #52]	; (7bb0 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    7b7a:	bf18      	it	ne
    7b7c:	2304      	movne	r3, #4
    7b7e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    7b82:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b84:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7b88:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    7b8c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b90:	601a      	str	r2, [r3, #0]
}
    7b92:	e7d7      	b.n	7b44 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    7b94:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    7b98:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    7b9c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    7ba0:	e7d0      	b.n	7b44 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    7ba2:	4805      	ldr	r0, [pc, #20]	; (7bb8 <qspi_xfer+0xf4>)
    7ba4:	e7cf      	b.n	7b46 <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    7ba6:	4805      	ldr	r0, [pc, #20]	; (7bbc <qspi_xfer+0xf8>)
    7ba8:	e7cd      	b.n	7b46 <qspi_xfer+0x82>
    7baa:	bf00      	nop
    7bac:	200141c8 	.word	0x200141c8
    7bb0:	5002b000 	.word	0x5002b000
    7bb4:	0bad0000 	.word	0x0bad0000
    7bb8:	0bad000a 	.word	0x0bad000a
    7bbc:	0bad000b 	.word	0x0bad000b

00007bc0 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    7bc0:	b538      	push	{r3, r4, r5, lr}
    7bc2:	f24c 3450 	movw	r4, #50000	; 0xc350
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7bc6:	4d06      	ldr	r5, [pc, #24]	; (7be0 <qspi_ready_wait+0x20>)
    7bc8:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    7bcc:	b933      	cbnz	r3, 7bdc <qspi_ready_wait+0x1c>
    7bce:	200a      	movs	r0, #10
    7bd0:	f005 fdcf 	bl	d772 <nrfx_busy_wait>
    7bd4:	3c01      	subs	r4, #1
    7bd6:	d1f7      	bne.n	7bc8 <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    7bd8:	4802      	ldr	r0, [pc, #8]	; (7be4 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    7bda:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    7bdc:	4802      	ldr	r0, [pc, #8]	; (7be8 <qspi_ready_wait+0x28>)
    7bde:	e7fc      	b.n	7bda <qspi_ready_wait+0x1a>
    7be0:	5002b000 	.word	0x5002b000
    7be4:	0bad0007 	.word	0x0bad0007
    7be8:	0bad0000 	.word	0x0bad0000

00007bec <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    7bec:	4b08      	ldr	r3, [pc, #32]	; (7c10 <qspi_event_xfer_handle.constprop.0+0x24>)
    7bee:	689a      	ldr	r2, [r3, #8]
    7bf0:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    7bf2:	691a      	ldr	r2, [r3, #16]
    7bf4:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    7bf6:	699a      	ldr	r2, [r3, #24]
    7bf8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    7bfa:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    7bfc:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    7bfe:	b132      	cbz	r2, 7c0e <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    7c00:	695a      	ldr	r2, [r3, #20]
    7c02:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    7c04:	69da      	ldr	r2, [r3, #28]
    7c06:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    7c08:	2200      	movs	r2, #0
    7c0a:	60da      	str	r2, [r3, #12]
    7c0c:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    7c0e:	4770      	bx	lr
    7c10:	200141c8 	.word	0x200141c8

00007c14 <nrf_gpio_cfg.constprop.0>:
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    7c14:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c18:	0940      	lsrs	r0, r0, #5
    7c1a:	d00f      	beq.n	7c3c <nrf_gpio_cfg.constprop.0+0x28>
    7c1c:	2801      	cmp	r0, #1
    7c1e:	d10f      	bne.n	7c40 <nrf_gpio_cfg.constprop.0+0x2c>
    7c20:	4a0a      	ldr	r2, [pc, #40]	; (7c4c <nrf_gpio_cfg.constprop.0+0x38>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7c22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7c26:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    cnf &= ~to_update;
    7c2a:	4b09      	ldr	r3, [pc, #36]	; (7c50 <nrf_gpio_cfg.constprop.0+0x3c>)
    7c2c:	4003      	ands	r3, r0
    7c2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    7c32:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    7c36:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    7c3a:	4770      	bx	lr
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    7c3c:	4a05      	ldr	r2, [pc, #20]	; (7c54 <nrf_gpio_cfg.constprop.0+0x40>)
    7c3e:	e7f0      	b.n	7c22 <nrf_gpio_cfg.constprop.0+0xe>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7c40:	2200      	movs	r2, #0
    7c42:	3380      	adds	r3, #128	; 0x80
    7c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c48:	deff      	udf	#255	; 0xff
    7c4a:	bf00      	nop
    7c4c:	50842800 	.word	0x50842800
    7c50:	fffcf0f0 	.word	0xfffcf0f0
    7c54:	50842500 	.word	0x50842500

00007c58 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    7c58:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    7c5a:	4b0e      	ldr	r3, [pc, #56]	; (7c94 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    7c5c:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    7c5e:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    7c62:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    7c66:	2807      	cmp	r0, #7
    7c68:	d813      	bhi.n	7c92 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    7c6a:	e8df f000 	tbb	[pc, r0]
    7c6e:	0f11      	.short	0x0f11
    7c70:	080a0b0d 	.word	0x080a0b0d
    7c74:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    7c76:	0e10      	lsrs	r0, r2, #24
    7c78:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    7c7a:	0c10      	lsrs	r0, r2, #16
    7c7c:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    7c7e:	0a10      	lsrs	r0, r2, #8
    7c80:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    7c82:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    7c84:	0e1a      	lsrs	r2, r3, #24
    7c86:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    7c88:	0c1a      	lsrs	r2, r3, #16
    7c8a:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    7c8c:	0a1a      	lsrs	r2, r3, #8
    7c8e:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    7c90:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    7c92:	bd10      	pop	{r4, pc}
    7c94:	5002b000 	.word	0x5002b000

00007c98 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    7c98:	3802      	subs	r0, #2
    7c9a:	2807      	cmp	r0, #7
    7c9c:	d81f      	bhi.n	7cde <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    7c9e:	e8df f000 	tbb	[pc, r0]
    7ca2:	2729      	.short	0x2729
    7ca4:	21231125 	.word	0x21231125
    7ca8:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    7caa:	79cb      	ldrb	r3, [r1, #7]
    7cac:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    7cae:	798a      	ldrb	r2, [r1, #6]
    7cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    7cb4:	794a      	ldrb	r2, [r1, #5]
    7cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    7cba:	790a      	ldrb	r2, [r1, #4]
    7cbc:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    7cbe:	4a0e      	ldr	r2, [pc, #56]	; (7cf8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7cc0:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    7cc4:	78cb      	ldrb	r3, [r1, #3]
    7cc6:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    7cc8:	788a      	ldrb	r2, [r1, #2]
    7cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    7cce:	784a      	ldrb	r2, [r1, #1]
    7cd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    7cd4:	780a      	ldrb	r2, [r1, #0]
    7cd6:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    7cd8:	4a07      	ldr	r2, [pc, #28]	; (7cf8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7cda:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    7cde:	4770      	bx	lr
    switch (length)
    7ce0:	2300      	movs	r3, #0
    7ce2:	e7e4      	b.n	7cae <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    7ce4:	2300      	movs	r3, #0
    7ce6:	e7e5      	b.n	7cb4 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    7ce8:	2300      	movs	r3, #0
    7cea:	e7e6      	b.n	7cba <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    7cec:	2300      	movs	r3, #0
    7cee:	e7eb      	b.n	7cc8 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    7cf0:	2300      	movs	r3, #0
    7cf2:	e7ec      	b.n	7cce <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    7cf4:	2300      	movs	r3, #0
    7cf6:	e7ed      	b.n	7cd4 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    7cf8:	5002b000 	.word	0x5002b000

00007cfc <qspi_configure>:
{
    7cfc:	b570      	push	{r4, r5, r6, lr}
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7cfe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
{
    7d02:	4604      	mov	r4, r0
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7d04:	b11b      	cbz	r3, 7d0e <qspi_configure+0x12>
    7d06:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
    7d0a:	2a00      	cmp	r2, #0
    7d0c:	d16b      	bne.n	7de6 <qspi_configure+0xea>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d0e:	6860      	ldr	r0, [r4, #4]
    7d10:	28ff      	cmp	r0, #255	; 0xff
    7d12:	f000 80b8 	beq.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d16:	68a1      	ldr	r1, [r4, #8]
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d18:	29ff      	cmp	r1, #255	; 0xff
    7d1a:	f000 80b4 	beq.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d1e:	68e2      	ldr	r2, [r4, #12]
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d20:	2aff      	cmp	r2, #255	; 0xff
    7d22:	f000 80b0 	beq.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d26:	6925      	ldr	r5, [r4, #16]
    7d28:	2d0e      	cmp	r5, #14
    7d2a:	f040 80ac 	bne.w	7e86 <qspi_configure+0x18a>
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    7d2e:	2811      	cmp	r0, #17
    7d30:	f040 80a9 	bne.w	7e86 <qspi_configure+0x18a>
    7d34:	2912      	cmp	r1, #18
    7d36:	f040 80a6 	bne.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    7d3a:	2a0d      	cmp	r2, #13
    7d3c:	f040 80a3 	bne.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d40:	6962      	ldr	r2, [r4, #20]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    7d42:	2aff      	cmp	r2, #255	; 0xff
    7d44:	d002      	beq.n	7d4c <qspi_configure+0x50>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d46:	2a0f      	cmp	r2, #15
    7d48:	f040 809d 	bne.w	7e86 <qspi_configure+0x18a>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d4c:	69a2      	ldr	r2, [r4, #24]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    7d4e:	2aff      	cmp	r2, #255	; 0xff
    7d50:	d002      	beq.n	7d58 <qspi_configure+0x5c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d52:	2a10      	cmp	r2, #16
    7d54:	f040 8097 	bne.w	7e86 <qspi_configure+0x18a>
    if (!p_config->skip_gpio_cfg)
    7d58:	b9bb      	cbnz	r3, 7d8a <qspi_configure+0x8e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    7d5a:	2103      	movs	r1, #3
    7d5c:	2011      	movs	r0, #17
    7d5e:	f7ff ff59 	bl	7c14 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    7d62:	68a0      	ldr	r0, [r4, #8]
    7d64:	f7ff ff56 	bl	7c14 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    7d68:	68e0      	ldr	r0, [r4, #12]
    7d6a:	f7ff ff53 	bl	7c14 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    7d6e:	6920      	ldr	r0, [r4, #16]
    7d70:	f7ff ff50 	bl	7c14 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7d74:	6960      	ldr	r0, [r4, #20]
    7d76:	28ff      	cmp	r0, #255	; 0xff
    7d78:	d001      	beq.n	7d7e <qspi_configure+0x82>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    7d7a:	f7ff ff4b 	bl	7c14 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7d7e:	69a0      	ldr	r0, [r4, #24]
    7d80:	28ff      	cmp	r0, #255	; 0xff
    7d82:	d002      	beq.n	7d8a <qspi_configure+0x8e>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    7d84:	2103      	movs	r1, #3
    7d86:	f7ff ff45 	bl	7c14 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    7d8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    7d8e:	bb53      	cbnz	r3, 7de6 <qspi_configure+0xea>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    7d90:	6862      	ldr	r2, [r4, #4]
    7d92:	4b3e      	ldr	r3, [pc, #248]	; (7e8c <qspi_configure+0x190>)
    7d94:	2aff      	cmp	r2, #255	; 0xff
    7d96:	bf08      	it	eq
    7d98:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7d9c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    7da0:	68a2      	ldr	r2, [r4, #8]
    7da2:	2aff      	cmp	r2, #255	; 0xff
    7da4:	bf08      	it	eq
    7da6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7daa:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    7dae:	68e2      	ldr	r2, [r4, #12]
    7db0:	2aff      	cmp	r2, #255	; 0xff
    7db2:	bf08      	it	eq
    7db4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7db8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    7dbc:	6922      	ldr	r2, [r4, #16]
    7dbe:	2aff      	cmp	r2, #255	; 0xff
    7dc0:	bf08      	it	eq
    7dc2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7dc6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    7dca:	6962      	ldr	r2, [r4, #20]
    7dcc:	2aff      	cmp	r2, #255	; 0xff
    7dce:	bf08      	it	eq
    7dd0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7dd4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    7dd8:	69a2      	ldr	r2, [r4, #24]
    7dda:	2aff      	cmp	r2, #255	; 0xff
    7ddc:	bf08      	it	eq
    7dde:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7de2:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    7de6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    7dea:	4d29      	ldr	r5, [pc, #164]	; (7e90 <qspi_configure+0x194>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7dec:	4e27      	ldr	r6, [pc, #156]	; (7e8c <qspi_configure+0x190>)
    7dee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    7df2:	2300      	movs	r3, #0
    7df4:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7df8:	2301      	movs	r3, #1
    7dfa:	6033      	str	r3, [r6, #0]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7dfc:	f7ff fee0 	bl	7bc0 <qspi_ready_wait>
    7e00:	4b24      	ldr	r3, [pc, #144]	; (7e94 <qspi_configure+0x198>)
    7e02:	4298      	cmp	r0, r3
    7e04:	d039      	beq.n	7e7a <qspi_configure+0x17e>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    7e06:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    7e08:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7e0c:	7fa3      	ldrb	r3, [r4, #30]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    7e0e:	7f61      	ldrb	r1, [r4, #29]
    uint32_t config = p_config->readoc;
    7e10:	7f22      	ldrb	r2, [r4, #28]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7e12:	019b      	lsls	r3, r3, #6
    7e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    7e18:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    7e1a:	7fe2      	ldrb	r2, [r4, #31]
    7e1c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
    7e20:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    7e24:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    return p_reg->IFCONFIG0;
    7e28:	f8d6 3544 	ldr.w	r3, [r6, #1348]	; 0x544
    7e2c:	bb32      	cbnz	r2, 7e7c <qspi_configure+0x180>
        regval |= ((1 << 16) | (1 << 17));
    7e2e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    7e32:	4916      	ldr	r1, [pc, #88]	; (7e8c <qspi_configure+0x190>)
    7e34:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    7e38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    7e3c:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7e40:	f8d1 2600 	ldr.w	r2, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
    7e44:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7e48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    7e4c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
    7e50:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    7e52:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    7e56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    7e5a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    7e5e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    7e62:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    7e66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
    7e6a:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    if (m_cb.handler)
    7e6e:	682b      	ldr	r3, [r5, #0]
    7e70:	b113      	cbz	r3, 7e78 <qspi_configure+0x17c>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    7e72:	202b      	movs	r0, #43	; 0x2b
    7e74:	f7fb fea0 	bl	3bb8 <arch_irq_enable>
        return NRFX_ERROR_INVALID_PARAM;
    7e78:	4807      	ldr	r0, [pc, #28]	; (7e98 <qspi_configure+0x19c>)
}
    7e7a:	bd70      	pop	{r4, r5, r6, pc}
        regval &= ~(1 << 17);
    7e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    7e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7e84:	e7d5      	b.n	7e32 <qspi_configure+0x136>
        return NRFX_ERROR_INVALID_PARAM;
    7e86:	4805      	ldr	r0, [pc, #20]	; (7e9c <qspi_configure+0x1a0>)
    7e88:	e7f7      	b.n	7e7a <qspi_configure+0x17e>
    7e8a:	bf00      	nop
    7e8c:	5002b000 	.word	0x5002b000
    7e90:	200141c8 	.word	0x200141c8
    7e94:	0bad0007 	.word	0x0bad0007
    7e98:	0bad0000 	.word	0x0bad0000
    7e9c:	0bad0004 	.word	0x0bad0004

00007ea0 <nrfx_qspi_init>:
{
    7ea0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7ea2:	4c11      	ldr	r4, [pc, #68]	; (7ee8 <nrfx_qspi_init+0x48>)
    7ea4:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
    7ea8:	b9e5      	cbnz	r5, 7ee4 <nrfx_qspi_init+0x44>
    m_cb.p_context = p_context;
    7eaa:	e9c4 1200 	strd	r1, r2, [r4]
    p_reg->INTENCLR = mask;
    7eae:	2101      	movs	r1, #1
    7eb0:	4a0e      	ldr	r2, [pc, #56]	; (7eec <nrfx_qspi_init+0x4c>)
    7eb2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (p_config)
    7eb6:	b978      	cbnz	r0, 7ed8 <nrfx_qspi_init+0x38>
    m_cb.p_buffer_primary = NULL;
    7eb8:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7eba:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    7ebc:	e9c4 1102 	strd	r1, r1, [r4, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    7ec0:	4b0a      	ldr	r3, [pc, #40]	; (7eec <nrfx_qspi_init+0x4c>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7ec2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    7ec6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7eca:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ece:	601a      	str	r2, [r3, #0]
}
    7ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return qspi_ready_wait();
    7ed4:	f7ff be74 	b.w	7bc0 <qspi_ready_wait>
        nrfx_err_t result = qspi_configure(p_config);
    7ed8:	f7ff ff10 	bl	7cfc <qspi_configure>
        if (result != NRFX_SUCCESS)
    7edc:	4b04      	ldr	r3, [pc, #16]	; (7ef0 <nrfx_qspi_init+0x50>)
    7ede:	4298      	cmp	r0, r3
    7ee0:	d0ea      	beq.n	7eb8 <nrfx_qspi_init+0x18>
}
    7ee2:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_STATE;
    7ee4:	4803      	ldr	r0, [pc, #12]	; (7ef4 <nrfx_qspi_init+0x54>)
    7ee6:	e7fc      	b.n	7ee2 <nrfx_qspi_init+0x42>
    7ee8:	200141c8 	.word	0x200141c8
    7eec:	5002b000 	.word	0x5002b000
    7ef0:	0bad0000 	.word	0x0bad0000
    7ef4:	0bad0005 	.word	0x0bad0005

00007ef8 <nrfx_qspi_cinstr_xfer>:
{
    7ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7efc:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7efe:	4a1f      	ldr	r2, [pc, #124]	; (7f7c <nrfx_qspi_cinstr_xfer+0x84>)
{
    7f00:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7f02:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    7f06:	2a01      	cmp	r2, #1
    7f08:	d135      	bne.n	7f76 <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
    7f0a:	b111      	cbz	r1, 7f12 <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    7f0c:	7840      	ldrb	r0, [r0, #1]
    7f0e:	f7ff fec3 	bl	7c98 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    7f12:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f14:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    7f16:	4e1a      	ldr	r6, [pc, #104]	; (7f80 <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7f18:	f8df 8068 	ldr.w	r8, [pc, #104]	; 7f84 <nrfx_qspi_cinstr_xfer+0x8c>
    7f1c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f20:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f24:	6033      	str	r3, [r6, #0]
    7f26:	f7ff fe4b 	bl	7bc0 <qspi_ready_wait>
    7f2a:	4540      	cmp	r0, r8
    7f2c:	d102      	bne.n	7f34 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
    7f2e:	4815      	ldr	r0, [pc, #84]	; (7f84 <nrfx_qspi_cinstr_xfer+0x8c>)
}
    7f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f34:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7f38:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7f3a:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7f3c:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7f42:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7f44:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7f46:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7f48:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7f4c:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7f4e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    7f52:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7f54:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7f58:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7f5c:	f7ff fe30 	bl	7bc0 <qspi_ready_wait>
    7f60:	4540      	cmp	r0, r8
    7f62:	d0e4      	beq.n	7f2e <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f64:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
    7f68:	b11d      	cbz	r5, 7f72 <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    7f6a:	4629      	mov	r1, r5
    7f6c:	7860      	ldrb	r0, [r4, #1]
    7f6e:	f7ff fe73 	bl	7c58 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
    7f72:	4805      	ldr	r0, [pc, #20]	; (7f88 <nrfx_qspi_cinstr_xfer+0x90>)
    7f74:	e7dc      	b.n	7f30 <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
    7f76:	4805      	ldr	r0, [pc, #20]	; (7f8c <nrfx_qspi_cinstr_xfer+0x94>)
    7f78:	e7da      	b.n	7f30 <nrfx_qspi_cinstr_xfer+0x38>
    7f7a:	bf00      	nop
    7f7c:	200141c8 	.word	0x200141c8
    7f80:	5002b000 	.word	0x5002b000
    7f84:	0bad0007 	.word	0x0bad0007
    7f88:	0bad0000 	.word	0x0bad0000
    7f8c:	0bad000b 	.word	0x0bad000b

00007f90 <nrfx_qspi_mem_busy_check>:
{
    7f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    7f92:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    7f94:	4a0c      	ldr	r2, [pc, #48]	; (7fc8 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7f96:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    7f98:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7f9a:	f10d 0207 	add.w	r2, sp, #7
    7f9e:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    7fa0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    7fa4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7fa8:	f7ff ffa6 	bl	7ef8 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    7fac:	4b07      	ldr	r3, [pc, #28]	; (7fcc <nrfx_qspi_mem_busy_check+0x3c>)
    7fae:	4298      	cmp	r0, r3
    7fb0:	d106      	bne.n	7fc0 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    7fb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    7fb6:	f013 0f01 	tst.w	r3, #1
    7fba:	4b05      	ldr	r3, [pc, #20]	; (7fd0 <nrfx_qspi_mem_busy_check+0x40>)
    7fbc:	bf18      	it	ne
    7fbe:	4618      	movne	r0, r3
}
    7fc0:	b005      	add	sp, #20
    7fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    7fc6:	bf00      	nop
    7fc8:	01000205 	.word	0x01000205
    7fcc:	0bad0000 	.word	0x0bad0000
    7fd0:	0bad000b 	.word	0x0bad000b

00007fd4 <nrfx_qspi_uninit>:
{
    7fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    7fd8:	202b      	movs	r0, #43	; 0x2b
    7fda:	f7fb fdfb 	bl	3bd4 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    7fde:	4b21      	ldr	r3, [pc, #132]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    if (!m_cb.skip_gpio_cfg)
    7fe0:	4e21      	ldr	r6, [pc, #132]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    7fe2:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    7fe6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    7fea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    7fee:	bf04      	itt	eq
    7ff0:	4a1e      	ldreq	r2, [pc, #120]	; (806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    7ff2:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    7ff6:	2201      	movs	r2, #1
    7ff8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ffc:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    7ffe:	2200      	movs	r2, #0
    8000:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8004:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    8008:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    800c:	bb2a      	cbnz	r2, 805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    800e:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    8012:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    8016:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    8018:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    801c:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    8020:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    8024:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    8028:	f005 fd32 	bl	da90 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    802c:	fa5f f089 	uxtb.w	r0, r9
    8030:	f005 fd2e 	bl	da90 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    8034:	fa5f f088 	uxtb.w	r0, r8
    8038:	f005 fd2a 	bl	da90 <nrf_gpio_cfg_default>
    803c:	b2ed      	uxtb	r5, r5
    nrf_gpio_cfg_default(pins.io1_pin);
    803e:	b2f8      	uxtb	r0, r7
    8040:	f005 fd26 	bl	da90 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    8044:	2dff      	cmp	r5, #255	; 0xff
    8046:	b2e4      	uxtb	r4, r4
    8048:	d002      	beq.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
        nrf_gpio_cfg_default(pins.io2_pin);
    804a:	4628      	mov	r0, r5
    804c:	f005 fd20 	bl	da90 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    8050:	2cff      	cmp	r4, #255	; 0xff
    8052:	d002      	beq.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
        nrf_gpio_cfg_default(pins.io3_pin);
    8054:	4620      	mov	r0, r4
    8056:	f005 fd1b 	bl	da90 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    805a:	2300      	movs	r3, #0
    805c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    8060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8064:	5002b000 	.word	0x5002b000
    8068:	200141c8 	.word	0x200141c8
    806c:	00030100 	.word	0x00030100

00008070 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    8070:	078b      	lsls	r3, r1, #30
    8072:	d121      	bne.n	80b8 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    8074:	4a12      	ldr	r2, [pc, #72]	; (80c0 <nrfx_qspi_erase+0x50>)
    8076:	6813      	ldr	r3, [r2, #0]
    8078:	b11b      	cbz	r3, 8082 <nrfx_qspi_erase+0x12>
    807a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    807e:	2b01      	cmp	r3, #1
    8080:	d11c      	bne.n	80bc <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    8082:	2304      	movs	r3, #4
    8084:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    8088:	4b0e      	ldr	r3, [pc, #56]	; (80c4 <nrfx_qspi_erase+0x54>)
    808a:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    808e:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    8090:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8094:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8098:	2101      	movs	r1, #1
    809a:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    809c:	6810      	ldr	r0, [r2, #0]
    809e:	b940      	cbnz	r0, 80b2 <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    80a0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    80a4:	2900      	cmp	r1, #0
    80a6:	d0fb      	beq.n	80a0 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    80a8:	2301      	movs	r3, #1
    80aa:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    80ae:	4806      	ldr	r0, [pc, #24]	; (80c8 <nrfx_qspi_erase+0x58>)
    80b0:	4770      	bx	lr
    p_reg->INTENSET = mask;
    80b2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    80b6:	e7fa      	b.n	80ae <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    80b8:	4804      	ldr	r0, [pc, #16]	; (80cc <nrfx_qspi_erase+0x5c>)
    80ba:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    80bc:	4804      	ldr	r0, [pc, #16]	; (80d0 <nrfx_qspi_erase+0x60>)
}
    80be:	4770      	bx	lr
    80c0:	200141c8 	.word	0x200141c8
    80c4:	5002b000 	.word	0x5002b000
    80c8:	0bad0000 	.word	0x0bad0000
    80cc:	0bad000a 	.word	0x0bad000a
    80d0:	0bad000b 	.word	0x0bad000b

000080d4 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    80d4:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    80d6:	4b17      	ldr	r3, [pc, #92]	; (8134 <nrfx_qspi_irq_handler+0x60>)
    80d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    80dc:	b1e2      	cbz	r2, 8118 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80de:	2200      	movs	r2, #0
    switch (m_cb.state)
    80e0:	4c15      	ldr	r4, [pc, #84]	; (8138 <nrfx_qspi_irq_handler+0x64>)
    80e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    80e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    80ea:	2a03      	cmp	r2, #3
    80ec:	d015      	beq.n	811a <nrfx_qspi_irq_handler+0x46>
    80ee:	2a04      	cmp	r2, #4
    80f0:	d015      	beq.n	811e <nrfx_qspi_irq_handler+0x4a>
    80f2:	2a02      	cmp	r2, #2
    80f4:	d104      	bne.n	8100 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    80f6:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    80f8:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    80fc:	f7ff fd76 	bl	7bec <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    8100:	68a3      	ldr	r3, [r4, #8]
    8102:	b913      	cbnz	r3, 810a <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    8104:	2301      	movs	r3, #1
    8106:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    810a:	e9d4 3100 	ldrd	r3, r1, [r4]
    810e:	2000      	movs	r0, #0
    8110:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    8112:	2300      	movs	r3, #0
    8114:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    8118:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    811a:	2302      	movs	r3, #2
    811c:	e7ec      	b.n	80f8 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    811e:	2203      	movs	r2, #3
    8120:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    8124:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    8128:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    812a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    812e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    8132:	e7e5      	b.n	8100 <nrfx_qspi_irq_handler+0x2c>
    8134:	5002b000 	.word	0x5002b000
    8138:	200141c8 	.word	0x200141c8

0000813c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    813c:	4b05      	ldr	r3, [pc, #20]	; (8154 <ep_state_access+0x18>)
    813e:	f010 0f80 	tst.w	r0, #128	; 0x80
    8142:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    8146:	bf08      	it	eq
    8148:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    814a:	f000 000f 	and.w	r0, r0, #15
}
    814e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    8152:	4770      	bx	lr
    8154:	200143a4 	.word	0x200143a4

00008158 <ev_usbreset_handler>:
 * @{
 */

static void ev_usbreset_handler(void)
{
    m_bus_suspend = false;
    8158:	2300      	movs	r3, #0
{
    815a:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    815c:	4a06      	ldr	r2, [pc, #24]	; (8178 <ev_usbreset_handler+0x20>)

    const nrfx_usbd_evt_t evt = {
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    815e:	a801      	add	r0, sp, #4
    m_bus_suspend = false;
    8160:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8162:	4a06      	ldr	r2, [pc, #24]	; (817c <ev_usbreset_handler+0x24>)
    8164:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    8166:	2301      	movs	r3, #1
    8168:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    816a:	4b05      	ldr	r3, [pc, #20]	; (8180 <ev_usbreset_handler+0x28>)
    816c:	681b      	ldr	r3, [r3, #0]
    816e:	4798      	blx	r3
}
    8170:	b003      	add	sp, #12
    8172:	f85d fb04 	ldr.w	pc, [sp], #4
    8176:	bf00      	nop
    8178:	200568b3 	.word	0x200568b3
    817c:	200568b2 	.word	0x200568b2
    8180:	2001443c 	.word	0x2001443c

00008184 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    8184:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    8186:	4b19      	ldr	r3, [pc, #100]	; (81ec <ev_usbevent_handler+0x68>)
    8188:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    818c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    8190:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    8192:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8196:	d508      	bpl.n	81aa <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8198:	2201      	movs	r2, #1
    819a:	4b15      	ldr	r3, [pc, #84]	; (81f0 <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    819c:	a801      	add	r0, sp, #4
        m_bus_suspend = true;
    819e:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    81a0:	2302      	movs	r3, #2
    81a2:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    81a4:	4b13      	ldr	r3, [pc, #76]	; (81f4 <ev_usbevent_handler+0x70>)
    81a6:	681b      	ldr	r3, [r3, #0]
    81a8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    81aa:	05a2      	lsls	r2, r4, #22
    81ac:	d508      	bpl.n	81c0 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    81ae:	2200      	movs	r2, #0
    81b0:	4b0f      	ldr	r3, [pc, #60]	; (81f0 <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    81b2:	a801      	add	r0, sp, #4
        m_bus_suspend = false;
    81b4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    81b6:	2303      	movs	r3, #3
    81b8:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    81ba:	4b0e      	ldr	r3, [pc, #56]	; (81f4 <ev_usbevent_handler+0x70>)
    81bc:	681b      	ldr	r3, [r3, #0]
    81be:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    81c0:	0563      	lsls	r3, r4, #21
    81c2:	d510      	bpl.n	81e6 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    81c4:	4b0a      	ldr	r3, [pc, #40]	; (81f0 <ev_usbevent_handler+0x6c>)
    81c6:	781a      	ldrb	r2, [r3, #0]
    81c8:	b16a      	cbz	r2, 81e6 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    81ca:	2200      	movs	r2, #0
    81cc:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    81ce:	2201      	movs	r2, #1
    81d0:	4b06      	ldr	r3, [pc, #24]	; (81ec <ev_usbevent_handler+0x68>)
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    81d2:	a801      	add	r0, sp, #4
    81d4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    81d8:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    81da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
            const nrfx_usbd_evt_t evt = {
    81dc:	2304      	movs	r3, #4
    81de:	9301      	str	r3, [sp, #4]
            m_event_handler(&evt);
    81e0:	4b04      	ldr	r3, [pc, #16]	; (81f4 <ev_usbevent_handler+0x70>)
    81e2:	681b      	ldr	r3, [r3, #0]
    81e4:	4798      	blx	r3
        }
    }
}
    81e6:	b002      	add	sp, #8
    81e8:	bd10      	pop	{r4, pc}
    81ea:	bf00      	nop
    81ec:	50036000 	.word	0x50036000
    81f0:	200568b3 	.word	0x200568b3
    81f4:	2001443c 	.word	0x2001443c

000081f8 <nrfx_usbd_feeder_flash>:
{
    81f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81fa:	684b      	ldr	r3, [r1, #4]
    81fc:	4606      	mov	r6, r0
    81fe:	429a      	cmp	r2, r3
    8200:	bf28      	it	cs
    8202:	461a      	movcs	r2, r3
    8204:	4615      	mov	r5, r2
    8206:	460c      	mov	r4, r1
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8208:	4f08      	ldr	r7, [pc, #32]	; (822c <nrfx_usbd_feeder_flash+0x34>)
    820a:	6809      	ldr	r1, [r1, #0]
    820c:	4638      	mov	r0, r7
    820e:	f003 fb4e 	bl	b8ae <memcpy>
    p_next->size = tx_size;
    8212:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    8216:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8218:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    821a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    821c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    821e:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8220:	6023      	str	r3, [r4, #0]
}
    8222:	3800      	subs	r0, #0
    8224:	bf18      	it	ne
    8226:	2001      	movne	r0, #1
    8228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    822a:	bf00      	nop
    822c:	200141fc 	.word	0x200141fc

00008230 <nrfx_usbd_feeder_flash_zlp>:
{
    8230:	b570      	push	{r4, r5, r6, lr}
    8232:	684b      	ldr	r3, [r1, #4]
    8234:	4606      	mov	r6, r0
    8236:	429a      	cmp	r2, r3
    8238:	bf28      	it	cs
    823a:	461a      	movcs	r2, r3
    823c:	460d      	mov	r5, r1
    823e:	4614      	mov	r4, r2
    if (tx_size != 0)
    8240:	b18a      	cbz	r2, 8266 <nrfx_usbd_feeder_flash_zlp+0x36>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8242:	6809      	ldr	r1, [r1, #0]
    8244:	4809      	ldr	r0, [pc, #36]	; (826c <nrfx_usbd_feeder_flash_zlp+0x3c>)
    8246:	f003 fb32 	bl	b8ae <memcpy>
        p_next->p_data.tx = p_buffer;
    824a:	4b08      	ldr	r3, [pc, #32]	; (826c <nrfx_usbd_feeder_flash_zlp+0x3c>)
    p_next->size = tx_size;
    824c:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    8250:	686b      	ldr	r3, [r5, #4]
}
    8252:	1e20      	subs	r0, r4, #0
    p_transfer->size -= tx_size;
    8254:	eba3 0304 	sub.w	r3, r3, r4
    8258:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    825a:	682b      	ldr	r3, [r5, #0]
}
    825c:	bf18      	it	ne
    825e:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    8260:	4423      	add	r3, r4
    8262:	602b      	str	r3, [r5, #0]
}
    8264:	bd70      	pop	{r4, r5, r6, pc}
    8266:	4613      	mov	r3, r2
    8268:	e7f0      	b.n	824c <nrfx_usbd_feeder_flash_zlp+0x1c>
    826a:	bf00      	nop
    826c:	200141fc 	.word	0x200141fc

00008270 <ev_sof_handler>:
    nrfx_usbd_evt_t evt =  {
    8270:	2300      	movs	r3, #0
{
    8272:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    8274:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8278:	4b0b      	ldr	r3, [pc, #44]	; (82a8 <ev_sof_handler+0x38>)
    m_event_handler(&evt);
    827a:	a801      	add	r0, sp, #4
    827c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    8280:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    8284:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    8288:	4a08      	ldr	r2, [pc, #32]	; (82ac <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    828a:	2b00      	cmp	r3, #0
    828c:	bf14      	ite	ne
    828e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    8292:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    8296:	6813      	ldr	r3, [r2, #0]
    8298:	430b      	orrs	r3, r1
    829a:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    829c:	4b04      	ldr	r3, [pc, #16]	; (82b0 <ev_sof_handler+0x40>)
    829e:	681b      	ldr	r3, [r3, #0]
    82a0:	4798      	blx	r3
}
    82a2:	b003      	add	sp, #12
    82a4:	f85d fb04 	ldr.w	pc, [sp], #4
    82a8:	50036000 	.word	0x50036000
    82ac:	20014438 	.word	0x20014438
    82b0:	2001443c 	.word	0x2001443c

000082b4 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    82b4:	4b04      	ldr	r3, [pc, #16]	; (82c8 <atomic_and.constprop.0.isra.0+0x14>)
    82b6:	e8d3 1fef 	ldaex	r1, [r3]
    82ba:	4001      	ands	r1, r0
    82bc:	e8c3 1fe2 	stlex	r2, r1, [r3]
    82c0:	2a00      	cmp	r2, #0
    82c2:	d1f8      	bne.n	82b6 <atomic_and.constprop.0.isra.0+0x2>
}
    82c4:	4770      	bx	lr
    82c6:	bf00      	nop
    82c8:	20014434 	.word	0x20014434

000082cc <nrf_usbd_epin_dma_handler>:
    m_dma_pending = false;
    82cc:	2200      	movs	r2, #0
{
    82ce:	b508      	push	{r3, lr}
    m_dma_pending = false;
    82d0:	4b0b      	ldr	r3, [pc, #44]	; (8300 <nrf_usbd_epin_dma_handler+0x34>)
{
    82d2:	4601      	mov	r1, r0
    m_dma_pending = false;
    82d4:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    82d6:	f7ff ff31 	bl	813c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    82da:	7b83      	ldrb	r3, [r0, #14]
    82dc:	2b03      	cmp	r3, #3
    82de:	d10a      	bne.n	82f6 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    82e0:	4608      	mov	r0, r1
    82e2:	f005 fc21 	bl	db28 <ep2bit>
    82e6:	2301      	movs	r3, #1
    82e8:	fa03 f000 	lsl.w	r0, r3, r0
    82ec:	43c0      	mvns	r0, r0
}
    82ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    82f2:	f7ff bfdf 	b.w	82b4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    82f6:	6803      	ldr	r3, [r0, #0]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d0f1      	beq.n	82e0 <nrf_usbd_epin_dma_handler+0x14>
}
    82fc:	bd08      	pop	{r3, pc}
    82fe:	bf00      	nop
    8300:	200568b1 	.word	0x200568b1

00008304 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    8304:	2200      	movs	r2, #0
    8306:	4b08      	ldr	r3, [pc, #32]	; (8328 <nrf_usbd_ep0in_dma_handler+0x24>)
    8308:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    830a:	4b08      	ldr	r3, [pc, #32]	; (832c <nrf_usbd_ep0in_dma_handler+0x28>)
    830c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    8310:	2a03      	cmp	r2, #3
    8312:	d103      	bne.n	831c <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8314:	f06f 0001 	mvn.w	r0, #1
    8318:	f7ff bfcc 	b.w	82b4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8320:	2b00      	cmp	r3, #0
    8322:	d0f7      	beq.n	8314 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8324:	4770      	bx	lr
    8326:	bf00      	nop
    8328:	200568b1 	.word	0x200568b1
    832c:	20014314 	.word	0x20014314

00008330 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    8330:	2201      	movs	r2, #1
{
    8332:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    8334:	fa02 f501 	lsl.w	r5, r2, r1
    8338:	491c      	ldr	r1, [pc, #112]	; (83ac <usbd_ep_data_handler+0x7c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    833a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    833e:	680b      	ldr	r3, [r1, #0]
{
    8340:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    8342:	ea43 0305 	orr.w	r3, r3, r5
    8346:	4e1a      	ldr	r6, [pc, #104]	; (83b0 <usbd_ep_data_handler+0x80>)
    8348:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    834a:	d024      	beq.n	8396 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    834c:	4b19      	ldr	r3, [pc, #100]	; (83b4 <usbd_ep_data_handler+0x84>)
    834e:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8352:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8356:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    835a:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    835e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8360:	b132      	cbz	r2, 8370 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8362:	2200      	movs	r2, #0
            if (ep != NRFX_USBD_EPIN0)
    8364:	2880      	cmp	r0, #128	; 0x80
    8366:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8368:	681b      	ldr	r3, [r3, #0]
    836a:	d011      	beq.n	8390 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    836c:	f7ff ffae 	bl	82cc <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8370:	6833      	ldr	r3, [r6, #0]
    8372:	402b      	ands	r3, r5
    8374:	d10a      	bne.n	838c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8376:	2206      	movs	r2, #6
    8378:	f88d 4006 	strb.w	r4, [sp, #6]
    837c:	f88d 2004 	strb.w	r2, [sp, #4]
    8380:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8384:	4b0c      	ldr	r3, [pc, #48]	; (83b8 <usbd_ep_data_handler+0x88>)
    8386:	a801      	add	r0, sp, #4
    8388:	681b      	ldr	r3, [r3, #0]
    838a:	4798      	blx	r3
}
    838c:	b002      	add	sp, #8
    838e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    8390:	f7ff ffb8 	bl	8304 <nrf_usbd_ep0in_dma_handler>
    8394:	e7ec      	b.n	8370 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8396:	6833      	ldr	r3, [r6, #0]
    8398:	421d      	tst	r5, r3
    839a:	d1f7      	bne.n	838c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    839c:	2306      	movs	r3, #6
    839e:	f88d 0006 	strb.w	r0, [sp, #6]
    83a2:	f88d 3004 	strb.w	r3, [sp, #4]
    83a6:	f88d 2007 	strb.w	r2, [sp, #7]
    83aa:	e7eb      	b.n	8384 <usbd_ep_data_handler+0x54>
    83ac:	20014438 	.word	0x20014438
    83b0:	20014434 	.word	0x20014434
    83b4:	0000f330 	.word	0x0000f330
    83b8:	2001443c 	.word	0x2001443c

000083bc <ev_setup_data_handler>:
{
    83bc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    83be:	4b05      	ldr	r3, [pc, #20]	; (83d4 <ev_setup_data_handler+0x18>)
    83c0:	781a      	ldrb	r2, [r3, #0]
    83c2:	4610      	mov	r0, r2
    83c4:	f005 fbb0 	bl	db28 <ep2bit>
}
    83c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    83cc:	4601      	mov	r1, r0
    83ce:	4610      	mov	r0, r2
    83d0:	f7ff bfae 	b.w	8330 <usbd_ep_data_handler>
    83d4:	200568b2 	.word	0x200568b2

000083d8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    83d8:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    83da:	2200      	movs	r2, #0
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <ev_dma_epout8_handler+0x3c>)
    83de:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    83e0:	4b0d      	ldr	r3, [pc, #52]	; (8418 <ev_dma_epout8_handler+0x40>)
    83e2:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    83e6:	2a03      	cmp	r2, #3
    83e8:	d010      	beq.n	840c <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    83ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    83ee:	b96b      	cbnz	r3, 840c <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83f0:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    83f4:	f7ff ff5e 	bl	82b4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    83f8:	2306      	movs	r3, #6
    83fa:	f88d 3004 	strb.w	r3, [sp, #4]
    83fe:	2308      	movs	r3, #8
    8400:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8404:	4b05      	ldr	r3, [pc, #20]	; (841c <ev_dma_epout8_handler+0x44>)
    8406:	a801      	add	r0, sp, #4
    8408:	681b      	ldr	r3, [r3, #0]
    840a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    840c:	b003      	add	sp, #12
    840e:	f85d fb04 	ldr.w	pc, [sp], #4
    8412:	bf00      	nop
    8414:	200568b1 	.word	0x200568b1
    8418:	20014314 	.word	0x20014314
    841c:	2001443c 	.word	0x2001443c

00008420 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8420:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    8422:	2200      	movs	r2, #0
    8424:	4b10      	ldr	r3, [pc, #64]	; (8468 <ev_dma_epin8_handler+0x48>)
    8426:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8428:	4b10      	ldr	r3, [pc, #64]	; (846c <ev_dma_epin8_handler+0x4c>)
    842a:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    842e:	2a03      	cmp	r2, #3
    8430:	d106      	bne.n	8440 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8432:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8436:	b003      	add	sp, #12
    8438:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    843c:	f7ff bf3a 	b.w	82b4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8440:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8444:	b96b      	cbnz	r3, 8462 <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8446:	f46f 7080 	mvn.w	r0, #256	; 0x100
    844a:	f7ff ff33 	bl	82b4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    844e:	2306      	movs	r3, #6
    8450:	f88d 3004 	strb.w	r3, [sp, #4]
    8454:	2388      	movs	r3, #136	; 0x88
    8456:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    845a:	4b05      	ldr	r3, [pc, #20]	; (8470 <ev_dma_epin8_handler+0x50>)
    845c:	a801      	add	r0, sp, #4
    845e:	681b      	ldr	r3, [r3, #0]
    8460:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8462:	b003      	add	sp, #12
    8464:	f85d fb04 	ldr.w	pc, [sp], #4
    8468:	200568b1 	.word	0x200568b1
    846c:	20014314 	.word	0x20014314
    8470:	2001443c 	.word	0x2001443c

00008474 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8474:	2300      	movs	r3, #0
    8476:	4a02      	ldr	r2, [pc, #8]	; (8480 <nrfx_usbd_uninit+0xc>)
    8478:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    847a:	4a02      	ldr	r2, [pc, #8]	; (8484 <nrfx_usbd_uninit+0x10>)
    847c:	7013      	strb	r3, [r2, #0]
    return;
}
    847e:	4770      	bx	lr
    8480:	2001443c 	.word	0x2001443c
    8484:	200568b4 	.word	0x200568b4

00008488 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    8488:	f44f 6200 	mov.w	r2, #2048	; 0x800
    848c:	4b13      	ldr	r3, [pc, #76]	; (84dc <nrfx_usbd_enable+0x54>)
    848e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8492:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    8496:	2201      	movs	r2, #1
    8498:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    849c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    84a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    84a4:	0512      	lsls	r2, r2, #20
    84a6:	d5fb      	bpl.n	84a0 <nrfx_usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    84a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    84ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    84b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    84b4:	2280      	movs	r2, #128	; 0x80
    84b6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    84ba:	2200      	movs	r2, #0
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    84bc:	f240 11ff 	movw	r1, #511	; 0x1ff
    84c0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    84c4:	4b06      	ldr	r3, [pc, #24]	; (84e0 <nrfx_usbd_enable+0x58>)
    84c6:	6019      	str	r1, [r3, #0]
    m_ep_dma_waiting = 0;
    84c8:	4b06      	ldr	r3, [pc, #24]	; (84e4 <nrfx_usbd_enable+0x5c>)
    84ca:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    84cc:	4b06      	ldr	r3, [pc, #24]	; (84e8 <nrfx_usbd_enable+0x60>)
    84ce:	701a      	strb	r2, [r3, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    84d0:	4b06      	ldr	r3, [pc, #24]	; (84ec <nrfx_usbd_enable+0x64>)
    84d2:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    84d4:	2202      	movs	r2, #2
    84d6:	4b06      	ldr	r3, [pc, #24]	; (84f0 <nrfx_usbd_enable+0x68>)
    84d8:	701a      	strb	r2, [r3, #0]
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    84da:	4770      	bx	lr
    84dc:	50036000 	.word	0x50036000
    84e0:	20014438 	.word	0x20014438
    84e4:	20014434 	.word	0x20014434
    84e8:	200568b1 	.word	0x200568b1
    84ec:	200568b2 	.word	0x200568b2
    84f0:	200568b4 	.word	0x200568b4

000084f4 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    84f4:	2200      	movs	r2, #0
    84f6:	4b0a      	ldr	r3, [pc, #40]	; (8520 <nrfx_usbd_start+0x2c>)
{
    84f8:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    84fa:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    84fc:	4a09      	ldr	r2, [pc, #36]	; (8524 <nrfx_usbd_start+0x30>)
    84fe:	4b0a      	ldr	r3, [pc, #40]	; (8528 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    8500:	4c0a      	ldr	r4, [pc, #40]	; (852c <nrfx_usbd_start+0x38>)
    8502:	2800      	cmp	r0, #0
    8504:	bf08      	it	eq
    8506:	4613      	moveq	r3, r2
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8508:	2036      	movs	r0, #54	; 0x36
    850a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    850e:	f7fb fb53 	bl	3bb8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8512:	2301      	movs	r3, #1
    8514:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8518:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    851c:	bd10      	pop	{r4, pc}
    851e:	bf00      	nop
    8520:	200568b3 	.word	0x200568b3
    8524:	01c01407 	.word	0x01c01407
    8528:	01e01407 	.word	0x01e01407
    852c:	50036000 	.word	0x50036000

00008530 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8530:	4b03      	ldr	r3, [pc, #12]	; (8540 <nrfx_usbd_is_enabled+0x10>)
    8532:	7818      	ldrb	r0, [r3, #0]
}
    8534:	2801      	cmp	r0, #1
    8536:	bf94      	ite	ls
    8538:	2000      	movls	r0, #0
    853a:	2001      	movhi	r0, #1
    853c:	4770      	bx	lr
    853e:	bf00      	nop
    8540:	200568b4 	.word	0x200568b4

00008544 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    8544:	b510      	push	{r4, lr}
	__asm__ volatile(
    8546:	f04f 0320 	mov.w	r3, #32
    854a:	f3ef 8111 	mrs	r1, BASEPRI
    854e:	f383 8812 	msr	BASEPRI_MAX, r3
    8552:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    8556:	4b0f      	ldr	r3, [pc, #60]	; (8594 <nrfx_usbd_suspend+0x50>)
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    855e:	b193      	cbz	r3, 8586 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    8560:	4b0d      	ldr	r3, [pc, #52]	; (8598 <nrfx_usbd_suspend+0x54>)
    8562:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8566:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    856a:	d10c      	bne.n	8586 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    856c:	2401      	movs	r4, #1
    856e:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8572:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8576:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    857a:	05a4      	lsls	r4, r4, #22
    857c:	d504      	bpl.n	8588 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    857e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8582:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8586:	2000      	movs	r0, #0
	__asm__ volatile(
    8588:	f381 8811 	msr	BASEPRI, r1
    858c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    8590:	bd10      	pop	{r4, pc}
    8592:	bf00      	nop
    8594:	200568b3 	.word	0x200568b3
    8598:	50036000 	.word	0x50036000

0000859c <nrfx_usbd_init>:
{
    859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    859e:	4b1c      	ldr	r3, [pc, #112]	; (8610 <nrfx_usbd_init+0x74>)
    85a0:	781c      	ldrb	r4, [r3, #0]
    85a2:	bb94      	cbnz	r4, 860a <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    85a4:	4a1b      	ldr	r2, [pc, #108]	; (8614 <nrfx_usbd_init+0x78>)
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85a6:	f240 17ff 	movw	r7, #511	; 0x1ff
    m_event_handler = event_handler;
    85aa:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    85ac:	2201      	movs	r2, #1
        p_state->status = NRFX_USBD_EP_OK;
    85ae:	4626      	mov	r6, r4
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    85b0:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    85b2:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85b6:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    85ba:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85bc:	bf14      	ite	ne
    85be:	4639      	movne	r1, r7
    85c0:	2140      	moveq	r1, #64	; 0x40
    85c2:	4628      	mov	r0, r5
    85c4:	f005 fad0 	bl	db68 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    85c8:	4628      	mov	r0, r5
    85ca:	f7ff fdb7 	bl	813c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    85ce:	3401      	adds	r4, #1
    85d0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    85d2:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    85d4:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    85d6:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    85d8:	d1eb      	bne.n	85b2 <nrfx_usbd_init+0x16>
    85da:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85dc:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    85e0:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85e2:	f014 0f08 	tst.w	r4, #8
    85e6:	b2e6      	uxtb	r6, r4
    85e8:	bf14      	ite	ne
    85ea:	4639      	movne	r1, r7
    85ec:	2140      	moveq	r1, #64	; 0x40
    85ee:	4630      	mov	r0, r6
    85f0:	f005 faba 	bl	db68 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    85f4:	4630      	mov	r0, r6
    85f6:	f7ff fda1 	bl	813c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    85fa:	3401      	adds	r4, #1
    85fc:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    85fe:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    8600:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    8602:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8604:	d1ed      	bne.n	85e2 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    8606:	4804      	ldr	r0, [pc, #16]	; (8618 <nrfx_usbd_init+0x7c>)
}
    8608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    860a:	4804      	ldr	r0, [pc, #16]	; (861c <nrfx_usbd_init+0x80>)
    860c:	e7fc      	b.n	8608 <nrfx_usbd_init+0x6c>
    860e:	bf00      	nop
    8610:	200568b4 	.word	0x200568b4
    8614:	2001443c 	.word	0x2001443c
    8618:	0bad0000 	.word	0x0bad0000
    861c:	0bad0005 	.word	0x0bad0005

00008620 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8624:	4604      	mov	r4, r0
	__asm__ volatile(
    8626:	f04f 0320 	mov.w	r3, #32
    862a:	f3ef 8611 	mrs	r6, BASEPRI
    862e:	f383 8812 	msr	BASEPRI_MAX, r3
    8632:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8636:	f010 090f 	ands.w	r9, r0, #15
    863a:	d103      	bne.n	8644 <nrfx_usbd_ep_transfer+0x24>
    863c:	4b28      	ldr	r3, [pc, #160]	; (86e0 <nrfx_usbd_ep_transfer+0xc0>)
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	4283      	cmp	r3, r0
    8642:	d148      	bne.n	86d6 <nrfx_usbd_ep_transfer+0xb6>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8644:	4b27      	ldr	r3, [pc, #156]	; (86e4 <nrfx_usbd_ep_transfer+0xc4>)
    8646:	4f28      	ldr	r7, [pc, #160]	; (86e8 <nrfx_usbd_ep_transfer+0xc8>)
    8648:	681a      	ldr	r2, [r3, #0]
    864a:	683b      	ldr	r3, [r7, #0]
    864c:	43d2      	mvns	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    864e:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8650:	b292      	uxth	r2, r2
    8652:	431a      	orrs	r2, r3
    8654:	f04f 0801 	mov.w	r8, #1
    const uint8_t ep_bitpos = ep2bit(ep);
    8658:	f005 fa66 	bl	db28 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    865c:	fa08 f800 	lsl.w	r8, r8, r0
    8660:	ea12 0f08 	tst.w	r2, r8
    8664:	d139      	bne.n	86da <nrfx_usbd_ep_transfer+0xba>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8666:	4620      	mov	r0, r4
    8668:	f7ff fd68 	bl	813c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    866c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    866e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8670:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8672:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    8676:	d52a      	bpl.n	86ce <nrfx_usbd_ep_transfer+0xae>
    8678:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    867a:	6888      	ldr	r0, [r1, #8]
    867c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8680:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8684:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8688:	d11e      	bne.n	86c8 <nrfx_usbd_ep_transfer+0xa8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    868a:	4a18      	ldr	r2, [pc, #96]	; (86ec <nrfx_usbd_ep_transfer+0xcc>)
    868c:	4c18      	ldr	r4, [pc, #96]	; (86f0 <nrfx_usbd_ep_transfer+0xd0>)
    868e:	2800      	cmp	r0, #0
    8690:	bf08      	it	eq
    8692:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8694:	4817      	ldr	r0, [pc, #92]	; (86f4 <nrfx_usbd_ep_transfer+0xd4>)
    8696:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8698:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    869a:	c907      	ldmia	r1, {r0, r1, r2}
    869c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    86a0:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    86a2:	2300      	movs	r3, #0
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    86a8:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    86aa:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    86ac:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    86ae:	4812      	ldr	r0, [pc, #72]	; (86f8 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    86b0:	ea43 0308 	orr.w	r3, r3, r8
    86b4:	603b      	str	r3, [r7, #0]
    86b6:	4b11      	ldr	r3, [pc, #68]	; (86fc <nrfx_usbd_ep_transfer+0xdc>)
    86b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    86bc:	f386 8811 	msr	BASEPRI, r6
    86c0:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    86c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    86c8:	4a0d      	ldr	r2, [pc, #52]	; (8700 <nrfx_usbd_ep_transfer+0xe0>)
    86ca:	4c0e      	ldr	r4, [pc, #56]	; (8704 <nrfx_usbd_ep_transfer+0xe4>)
    86cc:	e7df      	b.n	868e <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    86ce:	4a0e      	ldr	r2, [pc, #56]	; (8708 <nrfx_usbd_ep_transfer+0xe8>)
    86d0:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    86d2:	4a0e      	ldr	r2, [pc, #56]	; (870c <nrfx_usbd_ep_transfer+0xec>)
    86d4:	e7e0      	b.n	8698 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    86d6:	480e      	ldr	r0, [pc, #56]	; (8710 <nrfx_usbd_ep_transfer+0xf0>)
    86d8:	e7f0      	b.n	86bc <nrfx_usbd_ep_transfer+0x9c>
        ret = NRFX_ERROR_BUSY;
    86da:	480e      	ldr	r0, [pc, #56]	; (8714 <nrfx_usbd_ep_transfer+0xf4>)
    86dc:	e7ee      	b.n	86bc <nrfx_usbd_ep_transfer+0x9c>
    86de:	bf00      	nop
    86e0:	200568b2 	.word	0x200568b2
    86e4:	20014438 	.word	0x20014438
    86e8:	20014434 	.word	0x20014434
    86ec:	0000daff 	.word	0x0000daff
    86f0:	0000dadd 	.word	0x0000dadd
    86f4:	200142a8 	.word	0x200142a8
    86f8:	0bad0000 	.word	0x0bad0000
    86fc:	e000e100 	.word	0xe000e100
    8700:	00008231 	.word	0x00008231
    8704:	000081f9 	.word	0x000081f9
    8708:	2001423c 	.word	0x2001423c
    870c:	0000daab 	.word	0x0000daab
    8710:	0bad000a 	.word	0x0bad000a
    8714:	0bad000b 	.word	0x0bad000b

00008718 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8718:	f010 0f08 	tst.w	r0, #8
    871c:	4b07      	ldr	r3, [pc, #28]	; (873c <nrfx_usbd_epout_size_get+0x24>)
    871e:	d006      	beq.n	872e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8720:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8724:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8728:	bf18      	it	ne
    872a:	2000      	movne	r0, #0
    872c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    872e:	f000 000f 	and.w	r0, r0, #15
    8732:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8736:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    873a:	4770      	bx	lr
    873c:	50036000 	.word	0x50036000

00008740 <usbd_dmareq_process>:
{
    8740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8744:	4e54      	ldr	r6, [pc, #336]	; (8898 <usbd_dmareq_process+0x158>)
{
    8746:	b085      	sub	sp, #20
    if (!m_dma_pending)
    8748:	7833      	ldrb	r3, [r6, #0]
    874a:	2b00      	cmp	r3, #0
    874c:	d169      	bne.n	8822 <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    874e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 889c <usbd_dmareq_process+0x15c>
    8752:	4d53      	ldr	r5, [pc, #332]	; (88a0 <usbd_dmareq_process+0x160>)
    8754:	f8d8 4000 	ldr.w	r4, [r8]
    8758:	682b      	ldr	r3, [r5, #0]
    875a:	401c      	ands	r4, r3
    875c:	d061      	beq.n	8822 <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    875e:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    8762:	bf14      	ite	ne
    8764:	fa93 f4a3 	rbitne	r4, r3
    8768:	fa94 f4a4 	rbiteq	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    876c:	f04f 0901 	mov.w	r9, #1
    return NRF_CTZ(req);
    8770:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8774:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8778:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    877a:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    877e:	d953      	bls.n	8828 <usbd_dmareq_process+0xe8>
    8780:	3c10      	subs	r4, #16
    8782:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8784:	4620      	mov	r0, r4
    8786:	f7ff fcd9 	bl	813c <ep_state_access>
    878a:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    878c:	4620      	mov	r0, r4
    878e:	f7ff ffc3 	bl	8718 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8792:	f8da 7000 	ldr.w	r7, [sl]
    8796:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8798:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    879a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    879e:	f8da 1004 	ldr.w	r1, [sl, #4]
    87a2:	a802      	add	r0, sp, #8
    87a4:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    87a6:	9b02      	ldr	r3, [sp, #8]
    87a8:	2b00      	cmp	r3, #0
    87aa:	d149      	bne.n	8840 <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    87ac:	b908      	cbnz	r0, 87b2 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    87ae:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    87b2:	2301      	movs	r3, #1
    87b4:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    87b6:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    87b8:	9a03      	ldr	r2, [sp, #12]
            m_ep_ready &= ~(1U << pos);
    87ba:	ea03 0309 	and.w	r3, r3, r9
    87be:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    87c0:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    87c4:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    87c6:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    87c8:	2900      	cmp	r1, #0
    87ca:	f8ca 3008 	str.w	r3, [sl, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    87ce:	f004 0508 	and.w	r5, r4, #8
    87d2:	9802      	ldr	r0, [sp, #8]
    87d4:	4b33      	ldr	r3, [pc, #204]	; (88a4 <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    87d6:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    87da:	da4e      	bge.n	887a <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    87dc:	2d00      	cmp	r5, #0
    87de:	d044      	beq.n	886a <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    87e0:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    87e4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    87e8:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    87ea:	2201      	movs	r2, #1
    87ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    87f0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    87f4:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    87f8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    87fa:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    87fc:	4a2a      	ldr	r2, [pc, #168]	; (88a8 <usbd_dmareq_process+0x168>)
    87fe:	4b2b      	ldr	r3, [pc, #172]	; (88ac <usbd_dmareq_process+0x16c>)
    8800:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    8804:	bf38      	it	cc
    8806:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8808:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    880c:	4925      	ldr	r1, [pc, #148]	; (88a4 <usbd_dmareq_process+0x164>)
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    880e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8812:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8816:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8818:	b91a      	cbnz	r2, 8822 <usbd_dmareq_process+0xe2>
    881a:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    881e:	2a00      	cmp	r2, #0
    8820:	d0f9      	beq.n	8816 <usbd_dmareq_process+0xd6>
}
    8822:	b005      	add	sp, #20
    8824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8828:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    882c:	4620      	mov	r0, r4
    882e:	f7ff fc85 	bl	813c <ep_state_access>
    8832:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    8834:	6803      	ldr	r3, [r0, #0]
    8836:	8982      	ldrh	r2, [r0, #12]
    8838:	6841      	ldr	r1, [r0, #4]
    883a:	a802      	add	r0, sp, #8
    883c:	4798      	blx	r3
    883e:	e7b5      	b.n	87ac <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    8840:	9b03      	ldr	r3, [sp, #12]
    8842:	459b      	cmp	fp, r3
    8844:	d9b2      	bls.n	87ac <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8846:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8848:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    884a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    884e:	f7ff fd31 	bl	82b4 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8852:	2306      	movs	r3, #6
    8854:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8858:	4b15      	ldr	r3, [pc, #84]	; (88b0 <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    885a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    885e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8860:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8864:	a801      	add	r0, sp, #4
    8866:	4798      	blx	r3
                    continue;
    8868:	e774      	b.n	8754 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    886a:	2514      	movs	r5, #20
    886c:	fb05 3304 	mla	r3, r5, r4, r3
    8870:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8874:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8878:	e7b6      	b.n	87e8 <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    887a:	b12d      	cbz	r5, 8888 <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    887c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8880:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    8884:	2328      	movs	r3, #40	; 0x28
    8886:	e7b0      	b.n	87ea <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8888:	2514      	movs	r5, #20
    888a:	fb05 3304 	mla	r3, r5, r4, r3
    888e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8892:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8896:	e7f5      	b.n	8884 <usbd_dmareq_process+0x144>
    8898:	200568b1 	.word	0x200568b1
    889c:	20014434 	.word	0x20014434
    88a0:	20014438 	.word	0x20014438
    88a4:	50036000 	.word	0x50036000
    88a8:	0000f31e 	.word	0x0000f31e
    88ac:	0000f330 	.word	0x0000f330
    88b0:	2001443c 	.word	0x2001443c

000088b4 <ev_epdata_handler>:
{
    88b4:	b538      	push	{r3, r4, r5, lr}
        dataepstatus &= ~(1UL << bitpos);
    88b6:	2501      	movs	r5, #1
    return p_reg->EPDATASTATUS;
    88b8:	4b0e      	ldr	r3, [pc, #56]	; (88f4 <ev_epdata_handler+0x40>)
    88ba:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    88be:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    while (dataepstatus)
    88c2:	b91c      	cbnz	r4, 88cc <ev_epdata_handler+0x18>
}
    88c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    88c8:	f7ff bf3a 	b.w	8740 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    88cc:	fa94 f3a4 	rbit	r3, r4
    88d0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    88d4:	2b0f      	cmp	r3, #15
    88d6:	bfc8      	it	gt
    88d8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    88dc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    88de:	bfd4      	ite	le
    88e0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    88e4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    88e6:	fa05 f303 	lsl.w	r3, r5, r3
    88ea:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    88ee:	f7ff fd1f 	bl	8330 <usbd_ep_data_handler>
    88f2:	e7e6      	b.n	88c2 <ev_epdata_handler+0xe>
    88f4:	50036000 	.word	0x50036000

000088f8 <nrf_usbd_epout_dma_handler>:
{
    88f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    88fa:	2200      	movs	r2, #0
    88fc:	4b16      	ldr	r3, [pc, #88]	; (8958 <nrf_usbd_epout_dma_handler+0x60>)
{
    88fe:	4604      	mov	r4, r0
    m_dma_pending = false;
    8900:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8902:	f7ff fc1b 	bl	813c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8906:	7b83      	ldrb	r3, [r0, #14]
    8908:	2b03      	cmp	r3, #3
    890a:	d10d      	bne.n	8928 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    890c:	4620      	mov	r0, r4
    890e:	f005 f90b 	bl	db28 <ep2bit>
    8912:	2301      	movs	r3, #1
    8914:	fa03 f000 	lsl.w	r0, r3, r0
    8918:	43c0      	mvns	r0, r0
    891a:	f7ff fccb 	bl	82b4 <atomic_and.constprop.0.isra.0>
}
    891e:	b003      	add	sp, #12
    8920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8924:	f7ff bf0c 	b.w	8740 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8928:	6805      	ldr	r5, [r0, #0]
    892a:	2d00      	cmp	r5, #0
    892c:	d1f7      	bne.n	891e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    892e:	4620      	mov	r0, r4
    8930:	f005 f8fa 	bl	db28 <ep2bit>
    8934:	2301      	movs	r3, #1
    8936:	fa03 f000 	lsl.w	r0, r3, r0
    893a:	43c0      	mvns	r0, r0
    893c:	f7ff fcba 	bl	82b4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8940:	2306      	movs	r3, #6
    8942:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8946:	4b05      	ldr	r3, [pc, #20]	; (895c <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8948:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    894c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    894e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    8952:	a801      	add	r0, sp, #4
    8954:	4798      	blx	r3
    8956:	e7e2      	b.n	891e <nrf_usbd_epout_dma_handler+0x26>
    8958:	200568b1 	.word	0x200568b1
    895c:	2001443c 	.word	0x2001443c

00008960 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8960:	4b02      	ldr	r3, [pc, #8]	; (896c <nrfx_usbd_ep_stall+0xc>)
    8962:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8966:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    896a:	4770      	bx	lr
    896c:	50036000 	.word	0x50036000

00008970 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8970:	0702      	lsls	r2, r0, #28
    8972:	d413      	bmi.n	899c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8974:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8978:	f010 0f80 	tst.w	r0, #128	; 0x80
    897c:	4a08      	ldr	r2, [pc, #32]	; (89a0 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    897e:	bf0b      	itete	eq
    8980:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8984:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8988:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    898c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    8990:	bf08      	it	eq
    8992:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8994:	1e43      	subs	r3, r0, #1
    8996:	4258      	negs	r0, r3
    8998:	4158      	adcs	r0, r3
    899a:	4770      	bx	lr
        return false;
    899c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    899e:	4770      	bx	lr
    89a0:	50036000 	.word	0x50036000

000089a4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    89a4:	4b04      	ldr	r3, [pc, #16]	; (89b8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    89a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    89aa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    89ae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    89b2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    89b6:	4770      	bx	lr
    89b8:	50036000 	.word	0x50036000

000089bc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    89bc:	b510      	push	{r4, lr}
    89be:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    89c0:	2208      	movs	r2, #8
    89c2:	2100      	movs	r1, #0
    89c4:	f002 ff7e 	bl	b8c4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    89c8:	4b0e      	ldr	r3, [pc, #56]	; (8a04 <nrfx_usbd_setup_get+0x48>)
    89ca:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    89ce:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    89d0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    89d4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    89d6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    89da:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    89de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    89e2:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    89e4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    89e8:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    89ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    89f0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    89f2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    89f6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    89fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    89fe:	80e3      	strh	r3, [r4, #6]
}
    8a00:	bd10      	pop	{r4, pc}
    8a02:	bf00      	nop
    8a04:	50036000 	.word	0x50036000

00008a08 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8a08:	2201      	movs	r2, #1
    8a0a:	4b02      	ldr	r3, [pc, #8]	; (8a14 <nrfx_usbd_setup_data_clear+0xc>)
    8a0c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    8a10:	4770      	bx	lr
    8a12:	bf00      	nop
    8a14:	50036000 	.word	0x50036000

00008a18 <ev_dma_epout0_handler>:
    m_dma_pending = false;
    8a18:	2200      	movs	r2, #0
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8a1a:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    8a1c:	4b11      	ldr	r3, [pc, #68]	; (8a64 <ev_dma_epout0_handler+0x4c>)
    8a1e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8a20:	4b11      	ldr	r3, [pc, #68]	; (8a68 <ev_dma_epout0_handler+0x50>)
    8a22:	7b9a      	ldrb	r2, [r3, #14]
    8a24:	2a03      	cmp	r2, #3
    8a26:	d106      	bne.n	8a36 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8a28:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8a2c:	b002      	add	sp, #8
    8a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8a32:	f7ff bc3f 	b.w	82b4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    8a36:	681c      	ldr	r4, [r3, #0]
    8a38:	b974      	cbnz	r4, 8a58 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8a3a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    8a3e:	f7ff fc39 	bl	82b4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a42:	2306      	movs	r3, #6
    8a44:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8a48:	4b08      	ldr	r3, [pc, #32]	; (8a6c <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a4a:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	a801      	add	r0, sp, #4
    8a52:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8a54:	b002      	add	sp, #8
    8a56:	bd10      	pop	{r4, pc}
    8a58:	b002      	add	sp, #8
    8a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    8a5e:	f7ff bfd3 	b.w	8a08 <nrfx_usbd_setup_data_clear>
    8a62:	bf00      	nop
    8a64:	200568b1 	.word	0x200568b1
    8a68:	20014314 	.word	0x20014314
    8a6c:	2001443c 	.word	0x2001443c

00008a70 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8a70:	2201      	movs	r2, #1
    8a72:	4b02      	ldr	r3, [pc, #8]	; (8a7c <nrfx_usbd_setup_clear+0xc>)
    8a74:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8a78:	4770      	bx	lr
    8a7a:	bf00      	nop
    8a7c:	50036000 	.word	0x50036000

00008a80 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8a80:	2201      	movs	r2, #1
    8a82:	4b02      	ldr	r3, [pc, #8]	; (8a8c <nrfx_usbd_setup_stall+0xc>)
    8a84:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    8a88:	4770      	bx	lr
    8a8a:	bf00      	nop
    8a8c:	50036000 	.word	0x50036000

00008a90 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    8a90:	4b01      	ldr	r3, [pc, #4]	; (8a98 <nrfx_usbd_last_setup_dir_get+0x8>)
    8a92:	7818      	ldrb	r0, [r3, #0]
    8a94:	4770      	bx	lr
    8a96:	bf00      	nop
    8a98:	200568b2 	.word	0x200568b2

00008a9c <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8a9c:	4602      	mov	r2, r0
    8a9e:	b510      	push	{r4, lr}
	__asm__ volatile(
    8aa0:	f04f 0320 	mov.w	r3, #32
    8aa4:	f3ef 8411 	mrs	r4, BASEPRI
    8aa8:	f383 8812 	msr	BASEPRI_MAX, r3
    8aac:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    8ab0:	f005 f83a 	bl	db28 <ep2bit>
    8ab4:	2301      	movs	r3, #1
    8ab6:	490d      	ldr	r1, [pc, #52]	; (8aec <nrfx_usbd_transfer_out_drop+0x50>)
    8ab8:	fa03 f000 	lsl.w	r0, r3, r0
    8abc:	680b      	ldr	r3, [r1, #0]
    8abe:	ea23 0300 	bic.w	r3, r3, r0
    8ac2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    8ac4:	f012 0108 	ands.w	r1, r2, #8
    8ac8:	d10a      	bne.n	8ae0 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    8aca:	f002 030f 	and.w	r3, r2, #15
    8ace:	009b      	lsls	r3, r3, #2
    8ad0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8ad4:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    8ad8:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8adc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    8ae0:	f384 8811 	msr	BASEPRI, r4
    8ae4:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8ae8:	bd10      	pop	{r4, pc}
    8aea:	bf00      	nop
    8aec:	20014438 	.word	0x20014438

00008af0 <usbd_ep_abort>:
{
    8af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8af2:	4601      	mov	r1, r0
	__asm__ volatile(
    8af4:	f04f 0320 	mov.w	r3, #32
    8af8:	f3ef 8511 	mrs	r5, BASEPRI
    8afc:	f383 8812 	msr	BASEPRI_MAX, r3
    8b00:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8b04:	f7ff fb1a 	bl	813c <ep_state_access>
    8b08:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8b0a:	4608      	mov	r0, r1
    8b0c:	f005 f80c 	bl	db28 <ep2bit>
    8b10:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    8b12:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8b16:	fa02 f200 	lsl.w	r2, r2, r0
    8b1a:	482e      	ldr	r0, [pc, #184]	; (8bd4 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    8b1c:	d119      	bne.n	8b52 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8b1e:	6803      	ldr	r3, [r0, #0]
    8b20:	ea32 0303 	bics.w	r3, r2, r3
    8b24:	d00a      	beq.n	8b3c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8b26:	4608      	mov	r0, r1
    8b28:	f7ff ffb8 	bl	8a9c <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    8b2c:	2303      	movs	r3, #3
    8b2e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    8b30:	f385 8811 	msr	BASEPRI, r5
    8b34:	f3bf 8f6f 	isb	sy
}
    8b38:	b003      	add	sp, #12
    8b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    8b3c:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8b3e:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8b40:	4925      	ldr	r1, [pc, #148]	; (8bd8 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8b42:	ea23 0302 	bic.w	r3, r3, r2
    8b46:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8b48:	680b      	ldr	r3, [r1, #0]
    8b4a:	ea23 0302 	bic.w	r3, r3, r2
    8b4e:	600b      	str	r3, [r1, #0]
    8b50:	e7ec      	b.n	8b2c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    8b52:	070b      	lsls	r3, r1, #28
    8b54:	d415      	bmi.n	8b82 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    8b56:	2980      	cmp	r1, #128	; 0x80
    8b58:	4b20      	ldr	r3, [pc, #128]	; (8bdc <usbd_ep_abort+0xec>)
    8b5a:	d02f      	beq.n	8bbc <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8b5c:	f001 040f 	and.w	r4, r1, #15
    8b60:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8b64:	0064      	lsls	r4, r4, #1
    8b66:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8b6a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8b6e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8b72:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8b74:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8b78:	433c      	orrs	r4, r7
    8b7a:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8b7e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    8b82:	4f15      	ldr	r7, [pc, #84]	; (8bd8 <usbd_ep_abort+0xe8>)
    8b84:	6804      	ldr	r4, [r0, #0]
    8b86:	683b      	ldr	r3, [r7, #0]
    8b88:	ea64 0c03 	orn	ip, r4, r3
    8b8c:	ea1c 0f02 	tst.w	ip, r2
    8b90:	d0ce      	beq.n	8b30 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8b92:	4313      	orrs	r3, r2
    8b94:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    8b96:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8b98:	ea24 0402 	bic.w	r4, r4, r2
    8b9c:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8b9e:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    8ba0:	2303      	movs	r3, #3
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8ba2:	2206      	movs	r2, #6
            p_state->status = NRFX_USBD_EP_ABORTED;
    8ba4:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8ba6:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8baa:	4b0d      	ldr	r3, [pc, #52]	; (8be0 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8bac:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    8bb0:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8bb2:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    8bb6:	a801      	add	r0, sp, #4
    8bb8:	4798      	blx	r3
    8bba:	e7b9      	b.n	8b30 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    8bbc:	f240 74b4 	movw	r4, #1972	; 0x7b4
    8bc0:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8bc4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8bc8:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8bcc:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8bce:	f044 0404 	orr.w	r4, r4, #4
    8bd2:	e7d1      	b.n	8b78 <usbd_ep_abort+0x88>
    8bd4:	20014434 	.word	0x20014434
    8bd8:	20014438 	.word	0x20014438
    8bdc:	50036000 	.word	0x50036000
    8be0:	2001443c 	.word	0x2001443c

00008be4 <ev_setup_handler>:
{
    8be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8be6:	4b14      	ldr	r3, [pc, #80]	; (8c38 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8be8:	4c14      	ldr	r4, [pc, #80]	; (8c3c <ev_setup_handler+0x58>)
    8bea:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    8bee:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8bf0:	4e13      	ldr	r6, [pc, #76]	; (8c40 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8bf2:	43da      	mvns	r2, r3
    8bf4:	4b13      	ldr	r3, [pc, #76]	; (8c44 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    8bf6:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8bf8:	681b      	ldr	r3, [r3, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8bfa:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8bfc:	b292      	uxth	r2, r2
    8bfe:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    8c00:	f004 ff92 	bl	db28 <ep2bit>
    8c04:	2301      	movs	r3, #1
    8c06:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8c08:	4213      	tst	r3, r2
    8c0a:	d002      	beq.n	8c12 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    8c0c:	4608      	mov	r0, r1
    8c0e:	f7ff ff6f 	bl	8af0 <usbd_ep_abort>
    (void)(NRFX_ATOMIC_FETCH_AND(
    8c12:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8c16:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    m_last_setup_dir =
    8c1a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    8c1c:	f7ff fb4a 	bl	82b4 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8c20:	6823      	ldr	r3, [r4, #0]
    m_event_handler(&evt);
    8c22:	a801      	add	r0, sp, #4
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8c24:	f043 0301 	orr.w	r3, r3, #1
    8c28:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    8c2a:	2305      	movs	r3, #5
    8c2c:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    8c2e:	4b06      	ldr	r3, [pc, #24]	; (8c48 <ev_setup_handler+0x64>)
    8c30:	681b      	ldr	r3, [r3, #0]
    8c32:	4798      	blx	r3
}
    8c34:	b002      	add	sp, #8
    8c36:	bd70      	pop	{r4, r5, r6, pc}
    8c38:	50036000 	.word	0x50036000
    8c3c:	20014438 	.word	0x20014438
    8c40:	200568b2 	.word	0x200568b2
    8c44:	20014434 	.word	0x20014434
    8c48:	2001443c 	.word	0x2001443c

00008c4c <nrfx_usbd_irq_handler>:
{
    8c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    8c50:	4b1a      	ldr	r3, [pc, #104]	; (8cbc <nrfx_usbd_irq_handler+0x70>)
            active |= 1UL << event_nr;
    8c52:	2401      	movs	r4, #1
    8c54:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    8c58:	2300      	movs	r3, #0
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8c5a:	461d      	mov	r5, r3
    while (to_process)
    8c5c:	b970      	cbnz	r0, 8c7c <nrfx_usbd_irq_handler+0x30>
        active &= ~(1UL << event_nr);
    8c5e:	f04f 0801 	mov.w	r8, #1
        m_isr[event_nr]();
    8c62:	4f17      	ldr	r7, [pc, #92]	; (8cc0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8c64:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8c68:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
    while (active)
    8c6c:	b9bc      	cbnz	r4, 8c9e <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8c6e:	f7ff fd67 	bl	8740 <usbd_dmareq_process>
    if (setup_active)
    8c72:	b306      	cbz	r6, 8cb6 <nrfx_usbd_irq_handler+0x6a>
}
    8c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    8c78:	f7ff bfb4 	b.w	8be4 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8c7c:	fa90 f2a0 	rbit	r2, r0
    8c80:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8c84:	490f      	ldr	r1, [pc, #60]	; (8cc4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    8c86:	0096      	lsls	r6, r2, #2
    8c88:	4431      	add	r1, r6
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8c8a:	680e      	ldr	r6, [r1, #0]
            active |= 1UL << event_nr;
    8c8c:	fa04 f202 	lsl.w	r2, r4, r2
    if (ret)
    8c90:	b116      	cbz	r6, 8c98 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8c92:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8c94:	6809      	ldr	r1, [r1, #0]
    8c96:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    8c98:	ea20 0002 	bic.w	r0, r0, r2
    8c9c:	e7de      	b.n	8c5c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8c9e:	fa94 f5a4 	rbit	r5, r4
    8ca2:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    8ca6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    8caa:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8cae:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8cb0:	ea24 0405 	bic.w	r4, r4, r5
    8cb4:	e7da      	b.n	8c6c <nrfx_usbd_irq_handler+0x20>
}
    8cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cba:	bf00      	nop
    8cbc:	50036000 	.word	0x50036000
    8cc0:	0000f1ec 	.word	0x0000f1ec
    8cc4:	50036100 	.word	0x50036100

00008cc8 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
    8ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cce:	4b1a      	ldr	r3, [pc, #104]	; (8d38 <nrfx_usbd_stop+0x70>)
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8cd0:	2036      	movs	r0, #54	; 0x36
    8cd2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8cd6:	f7fa ff91 	bl	3bfc <arch_irq_is_enabled>
    8cda:	b1b8      	cbz	r0, 8d0c <nrfx_usbd_stop+0x44>
        ep_waiting &= ~(1U << bitpos);
    8cdc:	2701      	movs	r7, #1
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    8cde:	4e17      	ldr	r6, [pc, #92]	; (8d3c <nrfx_usbd_stop+0x74>)
    8ce0:	4b17      	ldr	r3, [pc, #92]	; (8d40 <nrfx_usbd_stop+0x78>)
    8ce2:	6834      	ldr	r4, [r6, #0]
    8ce4:	681b      	ldr	r3, [r3, #0]
    8ce6:	0c24      	lsrs	r4, r4, #16
    8ce8:	0424      	lsls	r4, r4, #16
    8cea:	431c      	orrs	r4, r3
    while (0 != ep_waiting)
    8cec:	b97c      	cbnz	r4, 8d0e <nrfx_usbd_stop+0x46>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8cee:	f240 13ff 	movw	r3, #511	; 0x1ff
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8cf2:	4d14      	ldr	r5, [pc, #80]	; (8d44 <nrfx_usbd_stop+0x7c>)
    8cf4:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8cf6:	2036      	movs	r0, #54	; 0x36
    8cf8:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8cfc:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    8d00:	f7fa ff68 	bl	3bd4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d08:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    8d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8d0e:	fa94 f5a4 	rbit	r5, r4
    8d12:	fab5 f585 	clz	r5, r5
    8d16:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8d18:	2d0f      	cmp	r5, #15
    8d1a:	bfc6      	itte	gt
    8d1c:	f1a5 0010 	subgt.w	r0, r5, #16
    8d20:	b2c0      	uxtbgt	r0, r0
    8d22:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8d26:	0703      	lsls	r3, r0, #28
    8d28:	d401      	bmi.n	8d2e <nrfx_usbd_stop+0x66>
            usbd_ep_abort(bit2ep(bitpos));
    8d2a:	f7ff fee1 	bl	8af0 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8d2e:	fa07 f505 	lsl.w	r5, r7, r5
    8d32:	ea24 0405 	bic.w	r4, r4, r5
    8d36:	e7d9      	b.n	8cec <nrfx_usbd_stop+0x24>
    8d38:	e000e100 	.word	0xe000e100
    8d3c:	20014438 	.word	0x20014438
    8d40:	20014434 	.word	0x20014434
    8d44:	50036000 	.word	0x50036000

00008d48 <nrfx_usbd_disable>:
{
    8d48:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    8d4a:	f7ff ffbd 	bl	8cc8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8d4e:	4b08      	ldr	r3, [pc, #32]	; (8d70 <nrfx_usbd_disable+0x28>)
    8d50:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    8d54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8d58:	2200      	movs	r2, #0
    8d5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8d5e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8d62:	4b04      	ldr	r3, [pc, #16]	; (8d74 <nrfx_usbd_disable+0x2c>)
    8d64:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8d66:	2201      	movs	r2, #1
    8d68:	4b03      	ldr	r3, [pc, #12]	; (8d78 <nrfx_usbd_disable+0x30>)
    8d6a:	701a      	strb	r2, [r3, #0]
}
    8d6c:	bd08      	pop	{r3, pc}
    8d6e:	bf00      	nop
    8d70:	50036000 	.word	0x50036000
    8d74:	200568b1 	.word	0x200568b1
    8d78:	200568b4 	.word	0x200568b4

00008d7c <nrfx_usbd_ep_disable>:
{
    8d7c:	b510      	push	{r4, lr}
    8d7e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8d80:	f7ff feb6 	bl	8af0 <usbd_ep_abort>
        p_reg->EPINEN &= ~(1UL << epnr);
    8d84:	2301      	movs	r3, #1
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8d86:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8d8a:	4083      	lsls	r3, r0
    8d8c:	43db      	mvns	r3, r3
    8d8e:	4a0c      	ldr	r2, [pc, #48]	; (8dc0 <nrfx_usbd_ep_disable+0x44>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8d90:	f014 0f80 	tst.w	r4, #128	; 0x80
        p_reg->EPINEN &= ~(1UL << epnr);
    8d94:	bf15      	itete	ne
    8d96:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8d9a:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8d9e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8da0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    8da2:	bf15      	itete	ne
    8da4:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8da8:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8dac:	4b05      	ldrne	r3, [pc, #20]	; (8dc4 <nrfx_usbd_ep_disable+0x48>)
    8dae:	4b06      	ldreq	r3, [pc, #24]	; (8dc8 <nrfx_usbd_ep_disable+0x4c>)
    8db0:	5c1a      	ldrb	r2, [r3, r0]
    8db2:	2301      	movs	r3, #1
    8db4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    8db6:	4a02      	ldr	r2, [pc, #8]	; (8dc0 <nrfx_usbd_ep_disable+0x44>)
    8db8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8dbc:	bd10      	pop	{r4, pc}
    8dbe:	bf00      	nop
    8dc0:	50036000 	.word	0x50036000
    8dc4:	0000f76c 	.word	0x0000f76c
    8dc8:	0000f763 	.word	0x0000f763

00008dcc <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8dcc:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    8dd0:	b570      	push	{r4, r5, r6, lr}
    8dd2:	4924      	ldr	r1, [pc, #144]	; (8e64 <nrfx_usbd_ep_enable+0x98>)
    8dd4:	4604      	mov	r4, r0
    8dd6:	f04f 0501 	mov.w	r5, #1
    8dda:	f000 030f 	and.w	r3, r0, #15
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8dde:	d012      	beq.n	8e06 <nrfx_usbd_ep_enable+0x3a>
    8de0:	4a21      	ldr	r2, [pc, #132]	; (8e68 <nrfx_usbd_ep_enable+0x9c>)
    8de2:	5cd2      	ldrb	r2, [r2, r3]
    8de4:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8de8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    8dec:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8df0:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8df2:	07d0      	lsls	r0, r2, #31
    8df4:	d406      	bmi.n	8e04 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    8df6:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8dfa:	fa05 f303 	lsl.w	r3, r5, r3
    8dfe:	4313      	orrs	r3, r2
    8e00:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    8e04:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8e06:	4a19      	ldr	r2, [pc, #100]	; (8e6c <nrfx_usbd_ep_enable+0xa0>)
    8e08:	5cd2      	ldrb	r2, [r2, r3]
    8e0a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8e0e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8e12:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    8e16:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8e18:	07d2      	lsls	r2, r2, #31
    8e1a:	d4f3      	bmi.n	8e04 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    8e1c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    8e20:	fa05 f203 	lsl.w	r2, r5, r3
    8e24:	4332      	orrs	r2, r6
    8e26:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d0ea      	beq.n	8e04 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    8e2e:	0703      	lsls	r3, r0, #28
    8e30:	d4e8      	bmi.n	8e04 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    8e32:	f04f 0320 	mov.w	r3, #32
    8e36:	f3ef 8611 	mrs	r6, BASEPRI
    8e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e3e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    8e42:	f7ff fe2b 	bl	8a9c <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8e46:	4620      	mov	r0, r4
    8e48:	f004 fe6e 	bl	db28 <ep2bit>
    8e4c:	4a08      	ldr	r2, [pc, #32]	; (8e70 <nrfx_usbd_ep_enable+0xa4>)
    8e4e:	fa05 f000 	lsl.w	r0, r5, r0
    8e52:	6813      	ldr	r3, [r2, #0]
    8e54:	ea23 0300 	bic.w	r3, r3, r0
    8e58:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8e5a:	f386 8811 	msr	BASEPRI, r6
    8e5e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8e62:	e7cf      	b.n	8e04 <nrfx_usbd_ep_enable+0x38>
    8e64:	50036000 	.word	0x50036000
    8e68:	0000f76c 	.word	0x0000f76c
    8e6c:	0000f763 	.word	0x0000f763
    8e70:	20014434 	.word	0x20014434

00008e74 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8e74:	0603      	lsls	r3, r0, #24
{
    8e76:	b510      	push	{r4, lr}
    8e78:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8e7a:	d405      	bmi.n	8e88 <nrfx_usbd_ep_stall_clear+0x14>
    8e7c:	f7ff fd78 	bl	8970 <nrfx_usbd_ep_stall_check>
    8e80:	b110      	cbz	r0, 8e88 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8e82:	4620      	mov	r0, r4
    8e84:	f7ff fe0a 	bl	8a9c <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8e88:	4b01      	ldr	r3, [pc, #4]	; (8e90 <nrfx_usbd_ep_stall_clear+0x1c>)
    8e8a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8e8e:	bd10      	pop	{r4, pc}
    8e90:	50036000 	.word	0x50036000

00008e94 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    8e94:	2207      	movs	r2, #7
    8e96:	4b02      	ldr	r3, [pc, #8]	; (8ea0 <nrfx_usbreg_enable+0xc>)
    8e98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    8e9c:	4770      	bx	lr
    8e9e:	bf00      	nop
    8ea0:	50037000 	.word	0x50037000

00008ea4 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    8ea4:	2207      	movs	r2, #7
    8ea6:	4b02      	ldr	r3, [pc, #8]	; (8eb0 <nrfx_usbreg_disable+0xc>)
    8ea8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    8eac:	4770      	bx	lr
    8eae:	bf00      	nop
    8eb0:	50037000 	.word	0x50037000

00008eb4 <nrfx_usbreg_uninit>:
    8eb4:	2207      	movs	r2, #7

void nrfx_usbreg_uninit(void)
{
    8eb6:	b508      	push	{r3, lr}
    8eb8:	4b04      	ldr	r3, [pc, #16]	; (8ecc <nrfx_usbreg_uninit+0x18>)
    nrfx_usbreg_disable();
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8eba:	2037      	movs	r0, #55	; 0x37
    8ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8ec0:	f7fa fe88 	bl	3bd4 <arch_irq_disable>
    m_usbevt_handler = NULL;
    8ec4:	2200      	movs	r2, #0
    8ec6:	4b02      	ldr	r3, [pc, #8]	; (8ed0 <nrfx_usbreg_uninit+0x1c>)
    8ec8:	601a      	str	r2, [r3, #0]
}
    8eca:	bd08      	pop	{r3, pc}
    8ecc:	50037000 	.word	0x50037000
    8ed0:	20014440 	.word	0x20014440

00008ed4 <nrfx_usbreg_init>:
{
    8ed4:	b510      	push	{r4, lr}
    8ed6:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    8ed8:	f7ff ffec 	bl	8eb4 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    8edc:	6822      	ldr	r2, [r4, #0]
    8ede:	4b07      	ldr	r3, [pc, #28]	; (8efc <nrfx_usbreg_init+0x28>)
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8ee0:	2037      	movs	r0, #55	; 0x37
    m_usbevt_handler = p_config->handler;
    8ee2:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ee4:	2200      	movs	r2, #0
    8ee6:	4b06      	ldr	r3, [pc, #24]	; (8f00 <nrfx_usbreg_init+0x2c>)
    8ee8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8eec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8ef0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    8ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8ef8:	f7fa be5e 	b.w	3bb8 <arch_irq_enable>
    8efc:	20014440 	.word	0x20014440
    8f00:	50037000 	.word	0x50037000

00008f04 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    8f04:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f06:	4c11      	ldr	r4, [pc, #68]	; (8f4c <nrfx_usbreg_irq_handler+0x48>)
    8f08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    8f0c:	b12b      	cbz	r3, 8f1a <nrfx_usbreg_irq_handler+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f0e:	2000      	movs	r0, #0
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    8f10:	4b0f      	ldr	r3, [pc, #60]	; (8f50 <nrfx_usbreg_irq_handler+0x4c>)
    8f12:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    8f16:	681b      	ldr	r3, [r3, #0]
    8f18:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f1a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    8f1e:	b133      	cbz	r3, 8f2e <nrfx_usbreg_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f20:	2300      	movs	r3, #0
    8f22:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    8f26:	4b0a      	ldr	r3, [pc, #40]	; (8f50 <nrfx_usbreg_irq_handler+0x4c>)
    8f28:	2001      	movs	r0, #1
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f2e:	4b07      	ldr	r3, [pc, #28]	; (8f4c <nrfx_usbreg_irq_handler+0x48>)
    8f30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    8f34:	b142      	cbz	r2, 8f48 <nrfx_usbreg_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f36:	2200      	movs	r2, #0
    8f38:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8f3c:	4b04      	ldr	r3, [pc, #16]	; (8f50 <nrfx_usbreg_irq_handler+0x4c>)
    8f3e:	2002      	movs	r0, #2
    }
}
    8f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8f44:	681b      	ldr	r3, [r3, #0]
    8f46:	4718      	bx	r3
}
    8f48:	bd10      	pop	{r4, pc}
    8f4a:	bf00      	nop
    8f4c:	50037000 	.word	0x50037000
    8f50:	20014440 	.word	0x20014440

00008f54 <get_result_len>:
	return true;
}


static size_t get_result_len(const void *const input, size_t max_result_len)
{
    8f54:	4603      	mov	r3, r0
    8f56:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	size_t len = max_result_len;

	for (; len > 0; len--) {
    8f58:	b900      	cbnz	r0, 8f5c <get_result_len+0x8>
    8f5a:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    8f5c:	1e42      	subs	r2, r0, #1
    8f5e:	5c99      	ldrb	r1, [r3, r2]
    8f60:	b909      	cbnz	r1, 8f66 <get_result_len+0x12>
	for (; len > 0; len--) {
    8f62:	4610      	mov	r0, r2
    8f64:	e7f8      	b.n	8f58 <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    8f66:	2802      	cmp	r0, #2
    8f68:	d907      	bls.n	8f7a <get_result_len+0x26>
	switch(val) {
    8f6a:	3802      	subs	r0, #2
    8f6c:	2806      	cmp	r0, #6
    8f6e:	bf96      	itet	ls
    8f70:	4b02      	ldrls	r3, [pc, #8]	; (8f7c <get_result_len+0x28>)
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    8f72:	2300      	movhi	r3, #0
    8f74:	5c1b      	ldrbls	r3, [r3, r0]
    8f76:	2001      	movs	r0, #1
    8f78:	4098      	lsls	r0, r3
}
    8f7a:	4770      	bx	lr
    8f7c:	0000f788 	.word	0x0000f788

00008f80 <value_encode_len>:
{
    8f80:	b570      	push	{r4, r5, r6, lr}
    8f82:	461c      	mov	r4, r3

static size_t get_encoded_len(const void *const result, size_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    8f84:	2c01      	cmp	r4, #1
{
    8f86:	4605      	mov	r5, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8f88:	6803      	ldr	r3, [r0, #0]
{
    8f8a:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8f8c:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    8f8e:	d116      	bne.n	8fbe <value_encode_len+0x3e>
    8f90:	7812      	ldrb	r2, [r2, #0]
    8f92:	2a17      	cmp	r2, #23
    8f94:	d904      	bls.n	8fa0 <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8f96:	3302      	adds	r3, #2
    8f98:	4298      	cmp	r0, r3
    8f9a:	d314      	bcc.n	8fc6 <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8f9c:	2300      	movs	r3, #0
    8f9e:	e021      	b.n	8fe4 <value_encode_len+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8fa0:	3301      	adds	r3, #1
    8fa2:	4298      	cmp	r0, r3
    8fa4:	d30f      	bcc.n	8fc6 <value_encode_len+0x46>
		return 0;
    8fa6:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
    8fa8:	4628      	mov	r0, r5
    8faa:	f005 f865 	bl	e078 <encode_header_byte>
    8fae:	b160      	cbz	r0, 8fca <value_encode_len+0x4a>
    8fb0:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
    8fb2:	42b4      	cmp	r4, r6
    8fb4:	d119      	bne.n	8fea <value_encode_len+0x6a>
	state->elem_count++;
    8fb6:	68ab      	ldr	r3, [r5, #8]
    8fb8:	3301      	adds	r3, #1
    8fba:	60ab      	str	r3, [r5, #8]
	return true;
    8fbc:	e006      	b.n	8fcc <value_encode_len+0x4c>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8fbe:	1c62      	adds	r2, r4, #1
    8fc0:	4413      	add	r3, r2
    8fc2:	4298      	cmp	r0, r3
    8fc4:	d206      	bcs.n	8fd4 <value_encode_len+0x54>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    8fc6:	696b      	ldr	r3, [r5, #20]
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		if (state->constant_state) {
    8fc8:	b90b      	cbnz	r3, 8fce <value_encode_len+0x4e>
    8fca:	2000      	movs	r0, #0
}
    8fcc:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    8fce:	2208      	movs	r2, #8
    8fd0:	60da      	str	r2, [r3, #12]
    8fd2:	e7fa      	b.n	8fca <value_encode_len+0x4a>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8fd4:	b90c      	cbnz	r4, 8fda <value_encode_len+0x5a>
	if (!encode_header_byte(state, major_type,
    8fd6:	7832      	ldrb	r2, [r6, #0]
    8fd8:	e7e6      	b.n	8fa8 <value_encode_len+0x28>
	switch(val) {
    8fda:	1ea3      	subs	r3, r4, #2
    8fdc:	2b06      	cmp	r3, #6
    8fde:	d8dd      	bhi.n	8f9c <value_encode_len+0x1c>
    8fe0:	4a05      	ldr	r2, [pc, #20]	; (8ff8 <value_encode_len+0x78>)
    8fe2:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8fe4:	3318      	adds	r3, #24
    8fe6:	b2da      	uxtb	r2, r3
    8fe8:	e7de      	b.n	8fa8 <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    8fea:	682b      	ldr	r3, [r5, #0]
    8fec:	1c5a      	adds	r2, r3, #1
    8fee:	602a      	str	r2, [r5, #0]
    8ff0:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    8ff4:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    8ff6:	e7dc      	b.n	8fb2 <value_encode_len+0x32>
    8ff8:	0000f788 	.word	0x0000f788

00008ffc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8ffc:	4b10      	ldr	r3, [pc, #64]	; (9040 <z_sys_init_run_level+0x44>)
{
    8ffe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9000:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9004:	3001      	adds	r0, #1
    9006:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    900a:	42a6      	cmp	r6, r4
    900c:	d800      	bhi.n	9010 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    900e:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
    9010:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    9014:	b195      	cbz	r5, 903c <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
    9016:	b153      	cbz	r3, 902e <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
    9018:	4628      	mov	r0, r5
    901a:	4798      	blx	r3
				if (rc != 0) {
    901c:	b138      	cbz	r0, 902e <z_sys_init_run_level+0x32>
					if (rc < 0) {
    901e:	2800      	cmp	r0, #0
    9020:	bfb8      	it	lt
    9022:	4240      	neglt	r0, r0
					if (rc > UINT8_MAX) {
    9024:	28ff      	cmp	r0, #255	; 0xff
    9026:	bfa8      	it	ge
    9028:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
    902a:	68eb      	ldr	r3, [r5, #12]
    902c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    902e:	68ea      	ldr	r2, [r5, #12]
    9030:	7853      	ldrb	r3, [r2, #1]
    9032:	f043 0301 	orr.w	r3, r3, #1
    9036:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9038:	3408      	adds	r4, #8
    903a:	e7e6      	b.n	900a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    903c:	4798      	blx	r3
    903e:	e7fb      	b.n	9038 <z_sys_init_run_level+0x3c>
    9040:	0000f254 	.word	0x0000f254

00009044 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    9044:	2201      	movs	r2, #1
{
    9046:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    9048:	4b09      	ldr	r3, [pc, #36]	; (9070 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    904a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    904c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    904e:	f7ff ffd5 	bl	8ffc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    9052:	f005 fbd9 	bl	e808 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    9056:	2004      	movs	r0, #4
    9058:	f7ff ffd0 	bl	8ffc <z_sys_init_run_level>

	z_init_static_threads();
    905c:	f000 f960 	bl	9320 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    9060:	f7f7 f9e0 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9064:	4a03      	ldr	r2, [pc, #12]	; (9074 <bg_thread_main+0x30>)
    9066:	7b13      	ldrb	r3, [r2, #12]
    9068:	f023 0301 	bic.w	r3, r3, #1
    906c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    906e:	bd08      	pop	{r3, pc}
    9070:	200568b5 	.word	0x200568b5
    9074:	20002658 	.word	0x20002658

00009078 <z_bss_zero>:
{
    9078:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    907a:	4803      	ldr	r0, [pc, #12]	; (9088 <z_bss_zero+0x10>)
    907c:	4a03      	ldr	r2, [pc, #12]	; (908c <z_bss_zero+0x14>)
    907e:	2100      	movs	r1, #0
    9080:	1a12      	subs	r2, r2, r0
    9082:	f005 f8de 	bl	e242 <z_early_memset>
}
    9086:	bd08      	pop	{r3, pc}
    9088:	20002490 	.word	0x20002490
    908c:	200568b8 	.word	0x200568b8

00009090 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    9090:	2378      	movs	r3, #120	; 0x78
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    9092:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    9094:	4e17      	ldr	r6, [pc, #92]	; (90f4 <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
    9096:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    9098:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    909c:	2300      	movs	r3, #0
{
    909e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    90a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    90a4:	220f      	movs	r2, #15
    90a6:	9301      	str	r3, [sp, #4]
    90a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    90ac:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    90ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    90b2:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    90b4:	4d10      	ldr	r5, [pc, #64]	; (90f8 <z_init_cpu+0x68>)
	z_setup_new_thread(thread, stack,
    90b6:	4911      	ldr	r1, [pc, #68]	; (90fc <z_init_cpu+0x6c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    90b8:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    90bc:	fb02 1100 	mla	r1, r2, r0, r1
    90c0:	4b0f      	ldr	r3, [pc, #60]	; (9100 <z_init_cpu+0x70>)
    90c2:	4630      	mov	r0, r6
    90c4:	9500      	str	r5, [sp, #0]
    90c6:	f000 f8cf 	bl	9268 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    90ca:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    90cc:	742c      	strb	r4, [r5, #16]
    90ce:	f023 0304 	bic.w	r3, r3, #4
    90d2:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    90d4:	4b0b      	ldr	r3, [pc, #44]	; (9104 <z_init_cpu+0x74>)
    90d6:	3401      	adds	r4, #1
    90d8:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
    90dc:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    90de:	4b0a      	ldr	r3, [pc, #40]	; (9108 <z_init_cpu+0x78>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    90e0:	60ee      	str	r6, [r5, #12]
    90e2:	e8d3 1fef 	ldaex	r1, [r3]
    90e6:	3101      	adds	r1, #1
    90e8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    90ec:	2a00      	cmp	r2, #0
    90ee:	d1f8      	bne.n	90e2 <z_init_cpu+0x52>
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
    90f0:	b006      	add	sp, #24
    90f2:	bd70      	pop	{r4, r5, r6, pc}
    90f4:	200025e0 	.word	0x200025e0
    90f8:	20014448 	.word	0x20014448
    90fc:	200578b8 	.word	0x200578b8
    9100:	0000e2fb 	.word	0x0000e2fb
    9104:	200570b8 	.word	0x200570b8
    9108:	20014444 	.word	0x20014444

0000910c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    910c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    910e:	2000      	movs	r0, #0
{
    9110:	b0a4      	sub	sp, #144	; 0x90
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    9112:	f7ff ff73 	bl	8ffc <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    9116:	4b2d      	ldr	r3, [pc, #180]	; (91cc <z_cstart+0xc0>)
	uint32_t msp =
    9118:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    911c:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    9120:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9124:	2400      	movs	r4, #0
    9126:	23e0      	movs	r3, #224	; 0xe0
    9128:	4d29      	ldr	r5, [pc, #164]	; (91d0 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    912a:	4e2a      	ldr	r6, [pc, #168]	; (91d4 <z_cstart+0xc8>)
    912c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    9130:	77ec      	strb	r4, [r5, #31]
    9132:	762c      	strb	r4, [r5, #24]
    9134:	766c      	strb	r4, [r5, #25]
    9136:	76ac      	strb	r4, [r5, #26]
    9138:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    913c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    913e:	4f26      	ldr	r7, [pc, #152]	; (91d8 <z_cstart+0xcc>)
    9140:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9144:	626b      	str	r3, [r5, #36]	; 0x24
    9146:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    914a:	f7fa ff6d 	bl	4028 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    914e:	f7fa fd07 	bl	3b60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9156:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9158:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    915a:	f7fb f96f 	bl	443c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    915e:	f7fb f815 	bl	418c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    9162:	f240 1301 	movw	r3, #257	; 0x101
    9166:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    916a:	ab06      	add	r3, sp, #24
    916c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    916e:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	dummy_thread->resource_pool = NULL;
    9172:	9421      	str	r4, [sp, #132]	; 0x84
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9174:	f005 f832 	bl	e1dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    9178:	2001      	movs	r0, #1
    917a:	f7ff ff3f 	bl	8ffc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    917e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    9180:	4d16      	ldr	r5, [pc, #88]	; (91dc <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9182:	f7ff ff3b 	bl	8ffc <z_sys_init_run_level>
	z_sched_init();
    9186:	f000 fd1b 	bl	9bc0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    918a:	4b15      	ldr	r3, [pc, #84]	; (91e0 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    918c:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    918e:	9305      	str	r3, [sp, #20]
    9190:	2301      	movs	r3, #1
    9192:	4914      	ldr	r1, [pc, #80]	; (91e4 <z_cstart+0xd8>)
    9194:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    9198:	e9cd 4303 	strd	r4, r3, [sp, #12]
    919c:	4628      	mov	r0, r5
    919e:	463b      	mov	r3, r7
    91a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    91a4:	9400      	str	r4, [sp, #0]
    91a6:	f000 f85f 	bl	9268 <z_setup_new_thread>
    91aa:	4606      	mov	r6, r0
    91ac:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    91ae:	4628      	mov	r0, r5
    91b0:	f022 0204 	bic.w	r2, r2, #4
    91b4:	736a      	strb	r2, [r5, #13]
    91b6:	f005 f9e5 	bl	e584 <z_ready_thread>
	z_init_cpu(0);
    91ba:	4620      	mov	r0, r4
    91bc:	f7ff ff68 	bl	9090 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    91c0:	463a      	mov	r2, r7
    91c2:	4631      	mov	r1, r6
    91c4:	4628      	mov	r0, r5
    91c6:	f7fa fdcf 	bl	3d68 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    91ca:	bf00      	nop
    91cc:	200570b8 	.word	0x200570b8
    91d0:	e000ed00 	.word	0xe000ed00
    91d4:	20014448 	.word	0x20014448
    91d8:	00009045 	.word	0x00009045
    91dc:	20002658 	.word	0x20002658
    91e0:	0000f78f 	.word	0x0000f78f
    91e4:	200579f8 	.word	0x200579f8

000091e8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    91e8:	2000      	movs	r0, #0
{
    91ea:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    91ec:	4c05      	ldr	r4, [pc, #20]	; (9204 <init_mem_slab_module+0x1c>)
    91ee:	4d06      	ldr	r5, [pc, #24]	; (9208 <init_mem_slab_module+0x20>)
    91f0:	42ac      	cmp	r4, r5
    91f2:	d300      	bcc.n	91f6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    91f4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    91f6:	4620      	mov	r0, r4
    91f8:	f005 f827 	bl	e24a <create_free_list>
		if (rc < 0) {
    91fc:	2800      	cmp	r0, #0
    91fe:	dbf9      	blt.n	91f4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9200:	341c      	adds	r4, #28
    9202:	e7f5      	b.n	91f0 <init_mem_slab_module+0x8>
    9204:	200022f8 	.word	0x200022f8
    9208:	20002314 	.word	0x20002314

0000920c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    920c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    920e:	460c      	mov	r4, r1
	__asm__ volatile(
    9210:	f04f 0520 	mov.w	r5, #32
    9214:	f3ef 8111 	mrs	r1, BASEPRI
    9218:	f385 8812 	msr	BASEPRI_MAX, r5
    921c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    9220:	6945      	ldr	r5, [r0, #20]
    9222:	b15d      	cbz	r5, 923c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    9224:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9226:	682b      	ldr	r3, [r5, #0]
    9228:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    922a:	6983      	ldr	r3, [r0, #24]
    922c:	3301      	adds	r3, #1
    922e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    9230:	2000      	movs	r0, #0
	__asm__ volatile(
    9232:	f381 8811 	msr	BASEPRI, r1
    9236:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    923a:	e011      	b.n	9260 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    923c:	ea52 0603 	orrs.w	r6, r2, r3
    9240:	d103      	bne.n	924a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    9242:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    9246:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9248:	e7f3      	b.n	9232 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    924a:	e9cd 2300 	strd	r2, r3, [sp]
    924e:	4602      	mov	r2, r0
    9250:	3008      	adds	r0, #8
    9252:	f000 fbc5 	bl	99e0 <z_pend_curr>
		if (result == 0) {
    9256:	b918      	cbnz	r0, 9260 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9258:	4b02      	ldr	r3, [pc, #8]	; (9264 <k_mem_slab_alloc+0x58>)
    925a:	689b      	ldr	r3, [r3, #8]
    925c:	695b      	ldr	r3, [r3, #20]
    925e:	6023      	str	r3, [r4, #0]
}
    9260:	b002      	add	sp, #8
    9262:	bd70      	pop	{r4, r5, r6, pc}
    9264:	20014448 	.word	0x20014448

00009268 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9268:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    926c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    926e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    9272:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9274:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9276:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    927a:	2500      	movs	r5, #0
{
    927c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    927e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9280:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    9282:	e9c0 5506 	strd	r5, r5, [r0, #24]
    9286:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9288:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    928a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    928c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    9290:	e9c0 1618 	strd	r1, r6, [r0, #96]	; 0x60
	thread_base->pended_on = NULL;
    9294:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9296:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    9298:	6685      	str	r5, [r0, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    929a:	9202      	str	r2, [sp, #8]
    929c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    929e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    92a2:	9201      	str	r2, [sp, #4]
    92a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    92a6:	9200      	str	r2, [sp, #0]
    92a8:	4642      	mov	r2, r8
    92aa:	f7fa fd41 	bl	3d30 <arch_new_thread>
	if (!_current) {
    92ae:	4b05      	ldr	r3, [pc, #20]	; (92c4 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    92b0:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    92b2:	689b      	ldr	r3, [r3, #8]
    92b4:	b103      	cbz	r3, 92b8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    92b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    92b8:	4640      	mov	r0, r8
    92ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    92bc:	b004      	add	sp, #16
    92be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92c2:	bf00      	nop
    92c4:	20014448 	.word	0x20014448

000092c8 <z_impl_k_thread_create>:
{
    92c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    92ca:	2500      	movs	r5, #0
{
    92cc:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    92ce:	9505      	str	r5, [sp, #20]
    92d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    92d2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    92d6:	9504      	str	r5, [sp, #16]
    92d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    92da:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    92dc:	9503      	str	r5, [sp, #12]
    92de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    92e0:	9502      	str	r5, [sp, #8]
    92e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    92e4:	9501      	str	r5, [sp, #4]
    92e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    92e8:	9500      	str	r5, [sp, #0]
    92ea:	f7ff ffbd 	bl	9268 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    92ee:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    92f2:	bf08      	it	eq
    92f4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    92f8:	d005      	beq.n	9306 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    92fa:	ea56 0307 	orrs.w	r3, r6, r7
    92fe:	d105      	bne.n	930c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    9300:	4620      	mov	r0, r4
    9302:	f000 fbdd 	bl	9ac0 <z_sched_start>
}
    9306:	4620      	mov	r0, r4
    9308:	b007      	add	sp, #28
    930a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    930c:	463a      	mov	r2, r7
    930e:	4633      	mov	r3, r6
    9310:	4902      	ldr	r1, [pc, #8]	; (931c <z_impl_k_thread_create+0x54>)
    9312:	f104 0018 	add.w	r0, r4, #24
    9316:	f000 fde5 	bl	9ee4 <z_add_timeout>
    931a:	e7f4      	b.n	9306 <z_impl_k_thread_create+0x3e>
    931c:	0000e60d 	.word	0x0000e60d

00009320 <z_init_static_threads>:
{
    9320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9324:	4c29      	ldr	r4, [pc, #164]	; (93cc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    9326:	4d2a      	ldr	r5, [pc, #168]	; (93d0 <z_init_static_threads+0xb0>)
{
    9328:	b087      	sub	sp, #28
    932a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    932c:	42ae      	cmp	r6, r5
    932e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    9332:	d30f      	bcc.n	9354 <z_init_static_threads+0x34>
	k_sched_lock();
    9334:	f000 fc14 	bl	9b60 <k_sched_lock>
    9338:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    933c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    9340:	4c22      	ldr	r4, [pc, #136]	; (93cc <z_init_static_threads+0xac>)
    9342:	f8df 9090 	ldr.w	r9, [pc, #144]	; 93d4 <z_init_static_threads+0xb4>
    9346:	42ac      	cmp	r4, r5
    9348:	d320      	bcc.n	938c <z_init_static_threads+0x6c>
}
    934a:	b007      	add	sp, #28
    934c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    9350:	f000 bc1a 	b.w	9b88 <k_sched_unlock>
		z_setup_new_thread(
    9354:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9358:	9305      	str	r3, [sp, #20]
    935a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    935e:	9304      	str	r3, [sp, #16]
    9360:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9364:	9303      	str	r3, [sp, #12]
    9366:	f854 3c14 	ldr.w	r3, [r4, #-20]
    936a:	9302      	str	r3, [sp, #8]
    936c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    9370:	9301      	str	r3, [sp, #4]
    9372:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9376:	9300      	str	r3, [sp, #0]
    9378:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    937c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    9380:	f7ff ff72 	bl	9268 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9384:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    9388:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    938a:	e7ce      	b.n	932a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    938c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    938e:	1c5a      	adds	r2, r3, #1
    9390:	d00d      	beq.n	93ae <z_init_static_threads+0x8e>
    9392:	2100      	movs	r1, #0
    9394:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    9396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    939a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    939e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    93a2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    93a6:	d104      	bne.n	93b2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    93a8:	4640      	mov	r0, r8
    93aa:	f000 fb89 	bl	9ac0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    93ae:	342c      	adds	r4, #44	; 0x2c
    93b0:	e7c9      	b.n	9346 <z_init_static_threads+0x26>
    93b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    93b6:	2300      	movs	r3, #0
    93b8:	f7f6 fecc 	bl	154 <__aeabi_uldivmod>
    93bc:	4602      	mov	r2, r0
    93be:	460b      	mov	r3, r1
    93c0:	f108 0018 	add.w	r0, r8, #24
    93c4:	4649      	mov	r1, r9
    93c6:	f000 fd8d 	bl	9ee4 <z_add_timeout>
    93ca:	e7f0      	b.n	93ae <z_init_static_threads+0x8e>
    93cc:	0000eca0 	.word	0x0000eca0
    93d0:	0000eca0 	.word	0x0000eca0
    93d4:	0000e60d 	.word	0x0000e60d

000093d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    93d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    93dc:	4604      	mov	r4, r0
    93de:	4617      	mov	r7, r2
    93e0:	461e      	mov	r6, r3
	__asm__ volatile(
    93e2:	f04f 0320 	mov.w	r3, #32
    93e6:	f3ef 8811 	mrs	r8, BASEPRI
    93ea:	f383 8812 	msr	BASEPRI_MAX, r3
    93ee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    93f2:	68c3      	ldr	r3, [r0, #12]
    93f4:	4a33      	ldr	r2, [pc, #204]	; (94c4 <z_impl_k_mutex_lock+0xec>)
    93f6:	b17b      	cbz	r3, 9418 <z_impl_k_mutex_lock+0x40>
    93f8:	6880      	ldr	r0, [r0, #8]
    93fa:	6891      	ldr	r1, [r2, #8]
    93fc:	4288      	cmp	r0, r1
    93fe:	d019      	beq.n	9434 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9400:	ea57 0306 	orrs.w	r3, r7, r6
    9404:	d118      	bne.n	9438 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    9406:	f388 8811 	msr	BASEPRI, r8
    940a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    940e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9412:	b002      	add	sp, #8
    9414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    9418:	6891      	ldr	r1, [r2, #8]
    941a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    941e:	3301      	adds	r3, #1
    9420:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    9422:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9424:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    9426:	60a3      	str	r3, [r4, #8]
    9428:	f388 8811 	msr	BASEPRI, r8
    942c:	f3bf 8f6f 	isb	sy
		return 0;
    9430:	2000      	movs	r0, #0
    9432:	e7ee      	b.n	9412 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    9434:	6921      	ldr	r1, [r4, #16]
    9436:	e7f2      	b.n	941e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9438:	f991 100e 	ldrsb.w	r1, [r1, #14]
    943c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9440:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9444:	4299      	cmp	r1, r3
    9446:	bfa8      	it	ge
    9448:	4619      	movge	r1, r3
    944a:	4291      	cmp	r1, r2
    944c:	bfb8      	it	lt
    944e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9450:	428b      	cmp	r3, r1
    9452:	dd2e      	ble.n	94b2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9454:	f004 ff5d 	bl	e312 <adjust_owner_prio.isra.0>
    9458:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    945a:	4622      	mov	r2, r4
    945c:	4641      	mov	r1, r8
    945e:	e9cd 7600 	strd	r7, r6, [sp]
    9462:	4819      	ldr	r0, [pc, #100]	; (94c8 <z_impl_k_mutex_lock+0xf0>)
    9464:	f000 fabc 	bl	99e0 <z_pend_curr>
	if (got_mutex == 0) {
    9468:	2800      	cmp	r0, #0
    946a:	d0e1      	beq.n	9430 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    946c:	f04f 0320 	mov.w	r3, #32
    9470:	f3ef 8611 	mrs	r6, BASEPRI
    9474:	f383 8812 	msr	BASEPRI_MAX, r3
    9478:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    947c:	68a0      	ldr	r0, [r4, #8]
    947e:	b1d0      	cbz	r0, 94b6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9480:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9482:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9484:	429c      	cmp	r4, r3
    9486:	d00a      	beq.n	949e <z_impl_k_mutex_lock+0xc6>
    9488:	b14b      	cbz	r3, 949e <z_impl_k_mutex_lock+0xc6>
    948a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    948e:	4299      	cmp	r1, r3
    9490:	bfa8      	it	ge
    9492:	4619      	movge	r1, r3
    9494:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9498:	4299      	cmp	r1, r3
    949a:	bfb8      	it	lt
    949c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    949e:	f004 ff38 	bl	e312 <adjust_owner_prio.isra.0>
    94a2:	b140      	cbz	r0, 94b6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    94a4:	4631      	mov	r1, r6
    94a6:	4808      	ldr	r0, [pc, #32]	; (94c8 <z_impl_k_mutex_lock+0xf0>)
    94a8:	f000 faf8 	bl	9a9c <z_reschedule>
	return -EAGAIN;
    94ac:	f06f 000a 	mvn.w	r0, #10
    94b0:	e7af      	b.n	9412 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    94b2:	2500      	movs	r5, #0
    94b4:	e7d1      	b.n	945a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    94b6:	2d00      	cmp	r5, #0
    94b8:	d1f4      	bne.n	94a4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    94ba:	f386 8811 	msr	BASEPRI, r6
    94be:	f3bf 8f6f 	isb	sy
    94c2:	e7f3      	b.n	94ac <z_impl_k_mutex_lock+0xd4>
    94c4:	20014448 	.word	0x20014448
    94c8:	200568b6 	.word	0x200568b6

000094cc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    94cc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    94ce:	6883      	ldr	r3, [r0, #8]
{
    94d0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    94d2:	b36b      	cbz	r3, 9530 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    94d4:	4a19      	ldr	r2, [pc, #100]	; (953c <z_impl_k_mutex_unlock+0x70>)
    94d6:	6892      	ldr	r2, [r2, #8]
    94d8:	4293      	cmp	r3, r2
    94da:	d12c      	bne.n	9536 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    94dc:	68c3      	ldr	r3, [r0, #12]
    94de:	2b01      	cmp	r3, #1
    94e0:	d903      	bls.n	94ea <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    94e2:	3b01      	subs	r3, #1
    94e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    94e6:	2000      	movs	r0, #0
}
    94e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    94ea:	f04f 0320 	mov.w	r3, #32
    94ee:	f3ef 8511 	mrs	r5, BASEPRI
    94f2:	f383 8812 	msr	BASEPRI_MAX, r3
    94f6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    94fa:	6901      	ldr	r1, [r0, #16]
    94fc:	6880      	ldr	r0, [r0, #8]
    94fe:	f004 ff08 	bl	e312 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9502:	4620      	mov	r0, r4
    9504:	f005 f89d 	bl	e642 <z_unpend_first_thread>
	mutex->owner = new_owner;
    9508:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    950a:	b158      	cbz	r0, 9524 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    950c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9510:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9512:	2200      	movs	r2, #0
    9514:	6742      	str	r2, [r0, #116]	; 0x74
		z_ready_thread(new_owner);
    9516:	f005 f835 	bl	e584 <z_ready_thread>
		z_reschedule(&lock, key);
    951a:	4629      	mov	r1, r5
    951c:	4808      	ldr	r0, [pc, #32]	; (9540 <z_impl_k_mutex_unlock+0x74>)
    951e:	f000 fabd 	bl	9a9c <z_reschedule>
    9522:	e7e0      	b.n	94e6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    9524:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    9526:	f385 8811 	msr	BASEPRI, r5
    952a:	f3bf 8f6f 	isb	sy
    952e:	e7da      	b.n	94e6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    9530:	f06f 0015 	mvn.w	r0, #21
    9534:	e7d8      	b.n	94e8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    9536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    953a:	e7d5      	b.n	94e8 <z_impl_k_mutex_unlock+0x1c>
    953c:	20014448 	.word	0x20014448
    9540:	200568b6 	.word	0x200568b6

00009544 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9544:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9546:	4611      	mov	r1, r2
	__asm__ volatile(
    9548:	f04f 0220 	mov.w	r2, #32
    954c:	f3ef 8511 	mrs	r5, BASEPRI
    9550:	f382 8812 	msr	BASEPRI_MAX, r2
    9554:	f3bf 8f6f 	isb	sy
    9558:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    955a:	b19c      	cbz	r4, 9584 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    955c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    955e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9560:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9564:	4294      	cmp	r4, r2
	list->head = node;
    9566:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9568:	bf08      	it	eq
    956a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    956c:	2101      	movs	r1, #1
    956e:	4620      	mov	r0, r4
    9570:	f004 ff40 	bl	e3f4 <z_queue_node_peek>
    9574:	4604      	mov	r4, r0
	__asm__ volatile(
    9576:	f385 8811 	msr	BASEPRI, r5
    957a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    957e:	4620      	mov	r0, r4
    9580:	b003      	add	sp, #12
    9582:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9584:	ea51 0203 	orrs.w	r2, r1, r3
    9588:	d0f5      	beq.n	9576 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    958a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    958e:	e9cd 1300 	strd	r1, r3, [sp]
    9592:	4610      	mov	r0, r2
    9594:	4629      	mov	r1, r5
    9596:	f000 fa23 	bl	99e0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    959a:	2800      	cmp	r0, #0
    959c:	d1ef      	bne.n	957e <z_impl_k_queue_get+0x3a>
    959e:	4b02      	ldr	r3, [pc, #8]	; (95a8 <z_impl_k_queue_get+0x64>)
    95a0:	689b      	ldr	r3, [r3, #8]
    95a2:	695c      	ldr	r4, [r3, #20]
    95a4:	e7eb      	b.n	957e <z_impl_k_queue_get+0x3a>
    95a6:	bf00      	nop
    95a8:	20014448 	.word	0x20014448

000095ac <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    95ac:	b538      	push	{r3, r4, r5, lr}
    95ae:	4604      	mov	r4, r0
	__asm__ volatile(
    95b0:	f04f 0320 	mov.w	r3, #32
    95b4:	f3ef 8511 	mrs	r5, BASEPRI
    95b8:	f383 8812 	msr	BASEPRI_MAX, r3
    95bc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    95c0:	f005 f83f 	bl	e642 <z_unpend_first_thread>

	if (thread != NULL) {
    95c4:	b148      	cbz	r0, 95da <z_impl_k_sem_give+0x2e>
    95c6:	2200      	movs	r2, #0
    95c8:	6742      	str	r2, [r0, #116]	; 0x74
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    95ca:	f004 ffdb 	bl	e584 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
    95ce:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    95d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    95d4:	4806      	ldr	r0, [pc, #24]	; (95f0 <z_impl_k_sem_give+0x44>)
    95d6:	f000 ba61 	b.w	9a9c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    95da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    95de:	429a      	cmp	r2, r3
    95e0:	bf18      	it	ne
    95e2:	3301      	addne	r3, #1
    95e4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    95e6:	f385 8811 	msr	BASEPRI, r5
    95ea:	f3bf 8f6f 	isb	sy
}
    95ee:	bd38      	pop	{r3, r4, r5, pc}
    95f0:	200568b6 	.word	0x200568b6

000095f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    95f4:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
    95f6:	f04f 0420 	mov.w	r4, #32
    95fa:	f3ef 8111 	mrs	r1, BASEPRI
    95fe:	f384 8812 	msr	BASEPRI_MAX, r4
    9602:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    9606:	6884      	ldr	r4, [r0, #8]
    9608:	b144      	cbz	r4, 961c <z_impl_k_sem_take+0x28>
		sem->count--;
    960a:	3c01      	subs	r4, #1
    960c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    960e:	f381 8811 	msr	BASEPRI, r1
    9612:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9616:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    9618:	b002      	add	sp, #8
    961a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    961c:	ea52 0403 	orrs.w	r4, r2, r3
    9620:	d106      	bne.n	9630 <z_impl_k_sem_take+0x3c>
    9622:	f381 8811 	msr	BASEPRI, r1
    9626:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    962a:	f06f 000f 	mvn.w	r0, #15
    962e:	e7f3      	b.n	9618 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9630:	e9cd 2300 	strd	r2, r3, [sp]
    9634:	4602      	mov	r2, r0
    9636:	4802      	ldr	r0, [pc, #8]	; (9640 <z_impl_k_sem_take+0x4c>)
    9638:	f000 f9d2 	bl	99e0 <z_pend_curr>
	return ret;
    963c:	e7ec      	b.n	9618 <z_impl_k_sem_take+0x24>
    963e:	bf00      	nop
    9640:	200568b6 	.word	0x200568b6

00009644 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9648:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    964a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    964e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
    9652:	4e46      	ldr	r6, [pc, #280]	; (976c <work_queue_main+0x128>)
{
    9654:	b085      	sub	sp, #20
	__asm__ volatile(
    9656:	f04f 0320 	mov.w	r3, #32
    965a:	f3ef 8711 	mrs	r7, BASEPRI
    965e:	f383 8812 	msr	BASEPRI_MAX, r3
    9662:	f3bf 8f6f 	isb	sy
    9666:	6fa5      	ldr	r5, [r4, #120]	; 0x78
Z_GENLIST_GET(slist, snode)
    9668:	b98d      	cbnz	r5, 968e <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    966a:	2102      	movs	r1, #2
    966c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9670:	f004 fee3 	bl	e43a <flag_test_and_clear>
    9674:	2800      	cmp	r0, #0
    9676:	d140      	bne.n	96fa <work_queue_main+0xb6>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9678:	2300      	movs	r3, #0
    967a:	4639      	mov	r1, r7
    967c:	e9cd 8900 	strd	r8, r9, [sp]
    9680:	9302      	str	r3, [sp, #8]
    9682:	f104 0280 	add.w	r2, r4, #128	; 0x80
    9686:	483a      	ldr	r0, [pc, #232]	; (9770 <work_queue_main+0x12c>)
    9688:	f000 fbba 	bl	9e00 <z_sched_wait>
			continue;
    968c:	e7e3      	b.n	9656 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    968e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
    9690:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9692:	4295      	cmp	r5, r2
	list->head = node;
    9694:	67a3      	str	r3, [r4, #120]	; 0x78
	list->tail = node;
    9696:	bf08      	it	eq
    9698:	67e3      	streq	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
    969a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    969e:	f043 0302 	orr.w	r3, r3, #2
    96a2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
    96a6:	68eb      	ldr	r3, [r5, #12]
    96a8:	f023 0304 	bic.w	r3, r3, #4
    96ac:	f043 0301 	orr.w	r3, r3, #1
    96b0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    96b2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    96b4:	f387 8811 	msr	BASEPRI, r7
    96b8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    96bc:	4628      	mov	r0, r5
    96be:	4798      	blx	r3
	__asm__ volatile(
    96c0:	f04f 0320 	mov.w	r3, #32
    96c4:	f3ef 8b11 	mrs	fp, BASEPRI
    96c8:	f383 8812 	msr	BASEPRI_MAX, r3
    96cc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    96d0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    96d2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    96d4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    96d8:	d419      	bmi.n	970e <work_queue_main+0xca>
	*flagp &= ~BIT(bit);
    96da:	60ea      	str	r2, [r5, #12]
    96dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    96e0:	f023 0302 	bic.w	r3, r3, #2
    96e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
    96e8:	f38b 8811 	msr	BASEPRI, fp
    96ec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    96f0:	05db      	lsls	r3, r3, #23
    96f2:	d4b0      	bmi.n	9656 <work_queue_main+0x12>
	z_impl_k_yield();
    96f4:	f000 fa6c 	bl	9bd0 <z_impl_k_yield>
}
    96f8:	e7ad      	b.n	9656 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    96fa:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    96fe:	2200      	movs	r2, #0
    9700:	2101      	movs	r1, #1
    9702:	4628      	mov	r0, r5
    9704:	f004 fff7 	bl	e6f6 <z_sched_wake>
    9708:	2800      	cmp	r0, #0
    970a:	d1f8      	bne.n	96fe <work_queue_main+0xba>
    970c:	e7b4      	b.n	9678 <work_queue_main+0x34>
	return list->head;
    970e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    9710:	f023 0303 	bic.w	r3, r3, #3
    9714:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9716:	2800      	cmp	r0, #0
    9718:	d0e0      	beq.n	96dc <work_queue_main+0x98>
	return node->next;
    971a:	2700      	movs	r7, #0
	parent->next = child;
    971c:	463b      	mov	r3, r7
	return node->next;
    971e:	f8d0 a000 	ldr.w	sl, [r0]
    9722:	2800      	cmp	r0, #0
    9724:	d0da      	beq.n	96dc <work_queue_main+0x98>
		if (wc->work == work) {
    9726:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9728:	4601      	mov	r1, r0
		if (wc->work == work) {
    972a:	4295      	cmp	r5, r2
    972c:	d10c      	bne.n	9748 <work_queue_main+0x104>
    972e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9730:	b99f      	cbnz	r7, 975a <work_queue_main+0x116>
    9732:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9734:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9736:	4282      	cmp	r2, r0
    9738:	d100      	bne.n	973c <work_queue_main+0xf8>
	list->tail = node;
    973a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    973c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    9740:	f7ff ff34 	bl	95ac <z_impl_k_sem_give>
}
    9744:	4639      	mov	r1, r7
    9746:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9748:	f1ba 0f00 	cmp.w	sl, #0
    974c:	d00b      	beq.n	9766 <work_queue_main+0x122>
	return node->next;
    974e:	f8da 2000 	ldr.w	r2, [sl]
    9752:	4650      	mov	r0, sl
    9754:	460f      	mov	r7, r1
    9756:	4692      	mov	sl, r2
    9758:	e7e3      	b.n	9722 <work_queue_main+0xde>
	parent->next = child;
    975a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    975c:	6872      	ldr	r2, [r6, #4]
    975e:	4282      	cmp	r2, r0
	list->tail = node;
    9760:	bf08      	it	eq
    9762:	6077      	streq	r7, [r6, #4]
}
    9764:	e7ea      	b.n	973c <work_queue_main+0xf8>
    9766:	4652      	mov	r2, sl
    9768:	e7f3      	b.n	9752 <work_queue_main+0x10e>
    976a:	bf00      	nop
    976c:	20014468 	.word	0x20014468
    9770:	200568b6 	.word	0x200568b6

00009774 <submit_to_queue_locked>:
{
    9774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    9776:	68c3      	ldr	r3, [r0, #12]
{
    9778:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    977a:	079a      	lsls	r2, r3, #30
{
    977c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    977e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    9782:	d42c      	bmi.n	97de <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9784:	075b      	lsls	r3, r3, #29
    9786:	d41a      	bmi.n	97be <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    9788:	680b      	ldr	r3, [r1, #0]
    978a:	b90b      	cbnz	r3, 9790 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    978c:	6883      	ldr	r3, [r0, #8]
    978e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    9790:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9792:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    9794:	bf42      	ittt	mi
    9796:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    9798:	2602      	movmi	r6, #2
			*queuep = work->queue;
    979a:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    979c:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    979e:	bf58      	it	pl
    97a0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    97a2:	2d00      	cmp	r5, #0
    97a4:	d038      	beq.n	9818 <submit_to_queue_locked+0xa4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    97a6:	4b1e      	ldr	r3, [pc, #120]	; (9820 <submit_to_queue_locked+0xac>)
    97a8:	689b      	ldr	r3, [r3, #8]
    97aa:	42ab      	cmp	r3, r5
    97ac:	d00a      	beq.n	97c4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    97ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    97b2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    97b4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    97b8:	d414      	bmi.n	97e4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    97ba:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    97be:	2300      	movs	r3, #0
    97c0:	603b      	str	r3, [r7, #0]
	return ret;
    97c2:	e024      	b.n	980e <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    97c4:	f004 fd8e 	bl	e2e4 <k_is_in_isr>
    97c8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    97cc:	2800      	cmp	r0, #0
    97ce:	d1f0      	bne.n	97b2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    97d0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    97d2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    97d6:	d5f0      	bpl.n	97ba <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    97d8:	b152      	cbz	r2, 97f0 <submit_to_queue_locked+0x7c>
    97da:	075b      	lsls	r3, r3, #29
    97dc:	d408      	bmi.n	97f0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    97de:	f06f 060f 	mvn.w	r6, #15
    97e2:	e7ec      	b.n	97be <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    97e4:	2a00      	cmp	r2, #0
    97e6:	d1fa      	bne.n	97de <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    97e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    97ec:	2b00      	cmp	r3, #0
    97ee:	d1f6      	bne.n	97de <submit_to_queue_locked+0x6a>
	parent->next = child;
    97f0:	2300      	movs	r3, #0
    97f2:	6023      	str	r3, [r4, #0]
	return list->tail;
    97f4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
    97f6:	b963      	cbnz	r3, 9812 <submit_to_queue_locked+0x9e>
	list->head = node;
    97f8:	e9c5 441e 	strd	r4, r4, [r5, #120]	; 0x78
		(void)notify_queue_locked(queue);
    97fc:	4628      	mov	r0, r5
    97fe:	f004 fe27 	bl	e450 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    9802:	68e3      	ldr	r3, [r4, #12]
    9804:	f043 0304 	orr.w	r3, r3, #4
    9808:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    980a:	683b      	ldr	r3, [r7, #0]
    980c:	60a3      	str	r3, [r4, #8]
}
    980e:	4630      	mov	r0, r6
    9810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    9812:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9814:	67ec      	str	r4, [r5, #124]	; 0x7c
}
    9816:	e7f1      	b.n	97fc <submit_to_queue_locked+0x88>
		return -EINVAL;
    9818:	f06f 0615 	mvn.w	r6, #21
    981c:	e7cf      	b.n	97be <submit_to_queue_locked+0x4a>
    981e:	bf00      	nop
    9820:	20014448 	.word	0x20014448

00009824 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9824:	b5f0      	push	{r4, r5, r6, r7, lr}
    9826:	4604      	mov	r4, r0
	list->head = NULL;
    9828:	2000      	movs	r0, #0
    982a:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    982c:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    9830:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9832:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
    9836:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    983a:	f104 0088 	add.w	r0, r4, #136	; 0x88
    983e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9842:	b31d      	cbz	r5, 988c <k_work_queue_start+0x68>
    9844:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9846:	2800      	cmp	r0, #0
    9848:	f240 1001 	movw	r0, #257	; 0x101
    984c:	bf08      	it	eq
    984e:	2001      	moveq	r0, #1
	*flagp = flags;
    9850:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9854:	2000      	movs	r0, #0
    9856:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    985a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    985e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9862:	e9cd 0001 	strd	r0, r0, [sp, #4]
    9866:	e9cd 6706 	strd	r6, r7, [sp, #24]
    986a:	4620      	mov	r0, r4
    986c:	4b08      	ldr	r3, [pc, #32]	; (9890 <k_work_queue_start+0x6c>)
    986e:	9400      	str	r4, [sp, #0]
    9870:	f7ff fd2a 	bl	92c8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9874:	b125      	cbz	r5, 9880 <k_work_queue_start+0x5c>
    9876:	6829      	ldr	r1, [r5, #0]
    9878:	b111      	cbz	r1, 9880 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    987a:	4620      	mov	r0, r4
    987c:	f004 fd38 	bl	e2f0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9880:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9882:	b009      	add	sp, #36	; 0x24
    9884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9888:	f004 bd35 	b.w	e2f6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    988c:	2001      	movs	r0, #1
    988e:	e7df      	b.n	9850 <k_work_queue_start+0x2c>
    9890:	00009645 	.word	0x00009645

00009894 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    9894:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9896:	9001      	str	r0, [sp, #4]
    9898:	4608      	mov	r0, r1
	__asm__ volatile(
    989a:	f04f 0120 	mov.w	r1, #32
    989e:	f3ef 8411 	mrs	r4, BASEPRI
    98a2:	f381 8812 	msr	BASEPRI_MAX, r1
    98a6:	f3bf 8f6f 	isb	sy
	return *flagp;
    98aa:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    98ac:	f011 0f0e 	tst.w	r1, #14
    98b0:	d116      	bne.n	98e0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    98b2:	ea53 0502 	orrs.w	r5, r3, r2
    98b6:	d108      	bne.n	98ca <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    98b8:	a901      	add	r1, sp, #4
    98ba:	f7ff ff5b 	bl	9774 <submit_to_queue_locked>
	__asm__ volatile(
    98be:	f384 8811 	msr	BASEPRI, r4
    98c2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    98c6:	b003      	add	sp, #12
    98c8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    98ca:	f041 0108 	orr.w	r1, r1, #8
    98ce:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    98d0:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    98d2:	3010      	adds	r0, #16
	dwork->queue = *queuep;
    98d4:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    98d6:	4903      	ldr	r1, [pc, #12]	; (98e4 <k_work_schedule_for_queue+0x50>)
    98d8:	f000 fb04 	bl	9ee4 <z_add_timeout>
	return ret;
    98dc:	2001      	movs	r0, #1
    98de:	e7ee      	b.n	98be <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    98e0:	2000      	movs	r0, #0
    98e2:	e7ec      	b.n	98be <k_work_schedule_for_queue+0x2a>
    98e4:	0000e45f 	.word	0x0000e45f

000098e8 <update_cache>:
	return list->head == list;
    98e8:	4a0a      	ldr	r2, [pc, #40]	; (9914 <update_cache+0x2c>)
    98ea:	4611      	mov	r1, r2
    98ec:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98f0:	428b      	cmp	r3, r1
    98f2:	d000      	beq.n	98f6 <update_cache+0xe>
	 * the queue (actually we have to, otherwise the assembly
	 * context switch code for all architectures would be
	 * responsible for putting it back in z_swap and ISR return!),
	 * which makes this choice simple.
	 */
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    98f4:	b903      	cbnz	r3, 98f8 <update_cache+0x10>
    98f6:	68d3      	ldr	r3, [r2, #12]
	if (preempt_ok != 0) {
    98f8:	b948      	cbnz	r0, 990e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    98fa:	6891      	ldr	r1, [r2, #8]
    98fc:	7b48      	ldrb	r0, [r1, #13]
    98fe:	06c0      	lsls	r0, r0, #27
    9900:	d105      	bne.n	990e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9902:	6998      	ldr	r0, [r3, #24]
    9904:	b918      	cbnz	r0, 990e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    9906:	89c8      	ldrh	r0, [r1, #14]
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
	} else {
		_kernel.ready_q.cache = _current;
    9908:	287f      	cmp	r0, #127	; 0x7f
    990a:	bf88      	it	hi
    990c:	460b      	movhi	r3, r1
    990e:	6153      	str	r3, [r2, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    9910:	4770      	bx	lr
    9912:	bf00      	nop
    9914:	20014448 	.word	0x20014448

00009918 <unready_thread>:

	return thread->base.pended_on;
}

static void unready_thread(struct k_thread *thread)
{
    9918:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    991a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    991e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9920:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    9922:	7b43      	ldrb	r3, [r0, #13]
    9924:	da04      	bge.n	9930 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    992a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    992c:	f004 fdf0 	bl	e510 <sys_dlist_remove>
	update_cache(thread == _current);
    9930:	4b04      	ldr	r3, [pc, #16]	; (9944 <unready_thread+0x2c>)
    9932:	6898      	ldr	r0, [r3, #8]
    9934:	1a43      	subs	r3, r0, r1
    9936:	4258      	negs	r0, r3
    9938:	4158      	adcs	r0, r3
}
    993a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    993e:	f7ff bfd3 	b.w	98e8 <update_cache>
    9942:	bf00      	nop
    9944:	20014448 	.word	0x20014448

00009948 <pend_locked>:
{
    9948:	b570      	push	{r4, r5, r6, lr}
    994a:	4615      	mov	r5, r2
    994c:	461c      	mov	r4, r3
    994e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    9950:	f004 fdf0 	bl	e534 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9954:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9958:	bf08      	it	eq
    995a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    995e:	d008      	beq.n	9972 <pend_locked+0x2a>
    9960:	462a      	mov	r2, r5
    9962:	4623      	mov	r3, r4
    9964:	f106 0018 	add.w	r0, r6, #24
    9968:	4902      	ldr	r1, [pc, #8]	; (9974 <pend_locked+0x2c>)
}
    996a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    996e:	f000 bab9 	b.w	9ee4 <z_add_timeout>
    9972:	bd70      	pop	{r4, r5, r6, pc}
    9974:	0000e60d 	.word	0x0000e60d

00009978 <ready_thread>:
{
    9978:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    997a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    997e:	7b42      	ldrb	r2, [r0, #13]
    9980:	2b00      	cmp	r3, #0
    9982:	db29      	blt.n	99d8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9984:	06d3      	lsls	r3, r2, #27
    9986:	d127      	bne.n	99d8 <ready_thread+0x60>
	return node->next != NULL;
    9988:	6983      	ldr	r3, [r0, #24]
    998a:	bb2b      	cbnz	r3, 99d8 <ready_thread+0x60>
	return list->head == list;
    998c:	4913      	ldr	r1, [pc, #76]	; (99dc <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    998e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9992:	7342      	strb	r2, [r0, #13]
    9994:	460a      	mov	r2, r1
    9996:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    999a:	4294      	cmp	r4, r2
    999c:	bf18      	it	ne
    999e:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    99a0:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99a2:	b923      	cbnz	r3, 99ae <ready_thread+0x36>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    99a4:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
    99a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    99aa:	61c8      	str	r0, [r1, #28]
}
    99ac:	e00c      	b.n	99c8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    99ae:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    99b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    99b6:	42b5      	cmp	r5, r6
    99b8:	d00a      	beq.n	99d0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    99ba:	42ae      	cmp	r6, r5
    99bc:	dd08      	ble.n	99d0 <ready_thread+0x58>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    99be:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    99c0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    99c4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    99c6:	6058      	str	r0, [r3, #4]
		update_cache(0);
    99c8:	2000      	movs	r0, #0
}
    99ca:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    99cc:	f7ff bf8c 	b.w	98e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    99d0:	429c      	cmp	r4, r3
    99d2:	d0e7      	beq.n	99a4 <ready_thread+0x2c>
    99d4:	681b      	ldr	r3, [r3, #0]
    99d6:	e7e4      	b.n	99a2 <ready_thread+0x2a>
}
    99d8:	bc70      	pop	{r4, r5, r6}
    99da:	4770      	bx	lr
    99dc:	20014448 	.word	0x20014448

000099e0 <z_pend_curr>:
{
    99e0:	b538      	push	{r3, r4, r5, lr}
    99e2:	460c      	mov	r4, r1
    99e4:	4611      	mov	r1, r2
    99e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    99ea:	f04f 0520 	mov.w	r5, #32
    99ee:	f3ef 8011 	mrs	r0, BASEPRI
    99f2:	f385 8812 	msr	BASEPRI_MAX, r5
    99f6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    99fa:	4804      	ldr	r0, [pc, #16]	; (9a0c <z_pend_curr+0x2c>)
    99fc:	6880      	ldr	r0, [r0, #8]
    99fe:	f7ff ffa3 	bl	9948 <pend_locked>
	ret = arch_swap(key);
    9a02:	4620      	mov	r0, r4
}
    9a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9a08:	f7fa b93c 	b.w	3c84 <arch_swap>
    9a0c:	20014448 	.word	0x20014448

00009a10 <z_set_prio>:
{
    9a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a12:	4604      	mov	r4, r0
    9a14:	f04f 0320 	mov.w	r3, #32
    9a18:	f3ef 8611 	mrs	r6, BASEPRI
    9a1c:	f383 8812 	msr	BASEPRI_MAX, r3
    9a20:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9a24:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    9a26:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9a28:	06da      	lsls	r2, r3, #27
    9a2a:	d119      	bne.n	9a60 <z_set_prio+0x50>
	return node->next != NULL;
    9a2c:	6985      	ldr	r5, [r0, #24]
    9a2e:	b9bd      	cbnz	r5, 9a60 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a34:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9a36:	f004 fd6b 	bl	e510 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9a3a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    9a3c:	4a16      	ldr	r2, [pc, #88]	; (9a98 <z_set_prio+0x88>)
    9a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9a42:	7343      	strb	r3, [r0, #13]
    9a44:	4613      	mov	r3, r2
				thread->base.prio = prio;
    9a46:	7381      	strb	r1, [r0, #14]
    9a48:	f853 0f18 	ldr.w	r0, [r3, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a4c:	4298      	cmp	r0, r3
    9a4e:	bf18      	it	ne
    9a50:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    9a52:	69d0      	ldr	r0, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a54:	b95d      	cbnz	r5, 9a6e <z_set_prio+0x5e>
	node->prev = tail;
    9a56:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    9a5a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    9a5c:	61d4      	str	r4, [r2, #28]
}
    9a5e:	e011      	b.n	9a84 <z_set_prio+0x74>
    9a60:	2000      	movs	r0, #0
			thread->base.prio = prio;
    9a62:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    9a64:	f386 8811 	msr	BASEPRI, r6
    9a68:	f3bf 8f6f 	isb	sy
}
    9a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    9a6e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    9a72:	42b9      	cmp	r1, r7
    9a74:	d00b      	beq.n	9a8e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9a76:	428f      	cmp	r7, r1
    9a78:	dd09      	ble.n	9a8e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    9a7a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    9a7c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    9a80:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9a82:	606c      	str	r4, [r5, #4]
			update_cache(1);
    9a84:	2001      	movs	r0, #1
    9a86:	f7ff ff2f 	bl	98e8 <update_cache>
    9a8a:	2001      	movs	r0, #1
    9a8c:	e7ea      	b.n	9a64 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    9a8e:	42a8      	cmp	r0, r5
    9a90:	d0e1      	beq.n	9a56 <z_set_prio+0x46>
    9a92:	682d      	ldr	r5, [r5, #0]
    9a94:	e7de      	b.n	9a54 <z_set_prio+0x44>
    9a96:	bf00      	nop
    9a98:	20014448 	.word	0x20014448

00009a9c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9a9c:	b949      	cbnz	r1, 9ab2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9a9e:	f3ef 8005 	mrs	r0, IPSR
    9aa2:	b930      	cbnz	r0, 9ab2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    9aa4:	4b05      	ldr	r3, [pc, #20]	; (9abc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    9aa6:	695a      	ldr	r2, [r3, #20]
    9aa8:	689b      	ldr	r3, [r3, #8]
    9aaa:	429a      	cmp	r2, r3
    9aac:	d001      	beq.n	9ab2 <z_reschedule+0x16>
    9aae:	f7fa b8e9 	b.w	3c84 <arch_swap>
    9ab2:	f381 8811 	msr	BASEPRI, r1
    9ab6:	f3bf 8f6f 	isb	sy
}
    9aba:	4770      	bx	lr
    9abc:	20014448 	.word	0x20014448

00009ac0 <z_sched_start>:
{
    9ac0:	b510      	push	{r4, lr}
	__asm__ volatile(
    9ac2:	f04f 0220 	mov.w	r2, #32
    9ac6:	f3ef 8411 	mrs	r4, BASEPRI
    9aca:	f382 8812 	msr	BASEPRI_MAX, r2
    9ace:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9ad2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9ad4:	0751      	lsls	r1, r2, #29
    9ad6:	d404      	bmi.n	9ae2 <z_sched_start+0x22>
	__asm__ volatile(
    9ad8:	f384 8811 	msr	BASEPRI, r4
    9adc:	f3bf 8f6f 	isb	sy
}
    9ae0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9ae2:	f022 0204 	bic.w	r2, r2, #4
    9ae6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    9ae8:	f7ff ff46 	bl	9978 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9aec:	4621      	mov	r1, r4
}
    9aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9af2:	4801      	ldr	r0, [pc, #4]	; (9af8 <z_sched_start+0x38>)
    9af4:	f7ff bfd2 	b.w	9a9c <z_reschedule>
    9af8:	200568b6 	.word	0x200568b6

00009afc <z_impl_k_thread_suspend>:
{
    9afc:	b570      	push	{r4, r5, r6, lr}
    9afe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9b00:	3018      	adds	r0, #24
    9b02:	f004 fe1b 	bl	e73c <z_abort_timeout>
	__asm__ volatile(
    9b06:	f04f 0320 	mov.w	r3, #32
    9b0a:	f3ef 8611 	mrs	r6, BASEPRI
    9b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b12:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9b16:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    9b1a:	7b63      	ldrb	r3, [r4, #13]
    9b1c:	2a00      	cmp	r2, #0
    9b1e:	da05      	bge.n	9b2c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    9b24:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9b26:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9b28:	f004 fcf2 	bl	e510 <sys_dlist_remove>
		update_cache(thread == _current);
    9b2c:	4d0b      	ldr	r5, [pc, #44]	; (9b5c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9b2e:	7b63      	ldrb	r3, [r4, #13]
    9b30:	68a8      	ldr	r0, [r5, #8]
    9b32:	f043 0310 	orr.w	r3, r3, #16
    9b36:	7363      	strb	r3, [r4, #13]
    9b38:	1b03      	subs	r3, r0, r4
    9b3a:	4258      	negs	r0, r3
    9b3c:	4158      	adcs	r0, r3
    9b3e:	f7ff fed3 	bl	98e8 <update_cache>
	__asm__ volatile(
    9b42:	f386 8811 	msr	BASEPRI, r6
    9b46:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    9b4a:	68ab      	ldr	r3, [r5, #8]
    9b4c:	42a3      	cmp	r3, r4
    9b4e:	d103      	bne.n	9b58 <z_impl_k_thread_suspend+0x5c>
}
    9b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9b54:	f004 bdb5 	b.w	e6c2 <z_reschedule_unlocked>
}
    9b58:	bd70      	pop	{r4, r5, r6, pc}
    9b5a:	bf00      	nop
    9b5c:	20014448 	.word	0x20014448

00009b60 <k_sched_lock>:
	__asm__ volatile(
    9b60:	f04f 0320 	mov.w	r3, #32
    9b64:	f3ef 8111 	mrs	r1, BASEPRI
    9b68:	f383 8812 	msr	BASEPRI_MAX, r3
    9b6c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    9b70:	4b04      	ldr	r3, [pc, #16]	; (9b84 <k_sched_lock+0x24>)
    9b72:	689a      	ldr	r2, [r3, #8]
    9b74:	7bd3      	ldrb	r3, [r2, #15]
    9b76:	3b01      	subs	r3, #1
    9b78:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    9b7a:	f381 8811 	msr	BASEPRI, r1
    9b7e:	f3bf 8f6f 	isb	sy
}
    9b82:	4770      	bx	lr
    9b84:	20014448 	.word	0x20014448

00009b88 <k_sched_unlock>:
{
    9b88:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b8a:	f04f 0320 	mov.w	r3, #32
    9b8e:	f3ef 8411 	mrs	r4, BASEPRI
    9b92:	f383 8812 	msr	BASEPRI_MAX, r3
    9b96:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    9b9a:	4b08      	ldr	r3, [pc, #32]	; (9bbc <k_sched_unlock+0x34>)
		update_cache(0);
    9b9c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9b9e:	689a      	ldr	r2, [r3, #8]
    9ba0:	7bd3      	ldrb	r3, [r2, #15]
    9ba2:	3301      	adds	r3, #1
    9ba4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9ba6:	f7ff fe9f 	bl	98e8 <update_cache>
	__asm__ volatile(
    9baa:	f384 8811 	msr	BASEPRI, r4
    9bae:	f3bf 8f6f 	isb	sy
}
    9bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    9bb6:	f004 bd84 	b.w	e6c2 <z_reschedule_unlocked>
    9bba:	bf00      	nop
    9bbc:	20014448 	.word	0x20014448

00009bc0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9bc0:	4b02      	ldr	r3, [pc, #8]	; (9bcc <z_sched_init+0xc>)
    9bc2:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
    9bc6:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    9bca:	4770      	bx	lr
    9bcc:	20014448 	.word	0x20014448

00009bd0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    9bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    9bd2:	f04f 0320 	mov.w	r3, #32
    9bd6:	f3ef 8511 	mrs	r5, BASEPRI
    9bda:	f383 8812 	msr	BASEPRI_MAX, r3
    9bde:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    9be2:	4919      	ldr	r1, [pc, #100]	; (9c48 <z_impl_k_yield+0x78>)
    9be4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9be6:	7b43      	ldrb	r3, [r0, #13]
    9be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9bec:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9bee:	f004 fc8f 	bl	e510 <sys_dlist_remove>
	return list->head == list;
    9bf2:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    9bf4:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9bf6:	7b5a      	ldrb	r2, [r3, #13]
    9bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9bfc:	735a      	strb	r2, [r3, #13]
    9bfe:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
    9c02:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c04:	4282      	cmp	r2, r0
    9c06:	bf08      	it	eq
    9c08:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c0a:	b922      	cbnz	r2, 9c16 <z_impl_k_yield+0x46>
	node->prev = tail;
    9c0c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    9c10:	6023      	str	r3, [r4, #0]
	list->tail = node;
    9c12:	61cb      	str	r3, [r1, #28]
}
    9c14:	e00c      	b.n	9c30 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    9c16:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    9c1a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    9c1e:	42be      	cmp	r6, r7
    9c20:	d00e      	beq.n	9c40 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9c22:	42b7      	cmp	r7, r6
    9c24:	dd0c      	ble.n	9c40 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    9c26:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9c28:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    9c2c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    9c2e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    9c30:	2001      	movs	r0, #1
    9c32:	f7ff fe59 	bl	98e8 <update_cache>
    9c36:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    9c38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9c3c:	f7fa b822 	b.w	3c84 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9c40:	42a2      	cmp	r2, r4
    9c42:	d0e3      	beq.n	9c0c <z_impl_k_yield+0x3c>
    9c44:	6812      	ldr	r2, [r2, #0]
    9c46:	e7e0      	b.n	9c0a <z_impl_k_yield+0x3a>
    9c48:	20014448 	.word	0x20014448

00009c4c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    9c4c:	ea50 0301 	orrs.w	r3, r0, r1
{
    9c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c54:	4605      	mov	r5, r0
    9c56:	460e      	mov	r6, r1
	if (ticks == 0) {
    9c58:	d103      	bne.n	9c62 <z_tick_sleep+0x16>
	z_impl_k_yield();
    9c5a:	f7ff ffb9 	bl	9bd0 <z_impl_k_yield>
		k_yield();
		return 0;
    9c5e:	2000      	movs	r0, #0
    9c60:	e02a      	b.n	9cb8 <z_tick_sleep+0x6c>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    9c62:	1c83      	adds	r3, r0, #2
    9c64:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    9c68:	db28      	blt.n	9cbc <z_tick_sleep+0x70>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9c6a:	f004 fd7d 	bl	e768 <sys_clock_tick_get_32>
    9c6e:	182c      	adds	r4, r5, r0
    9c70:	f04f 0320 	mov.w	r3, #32
    9c74:	f3ef 8811 	mrs	r8, BASEPRI
    9c78:	f383 8812 	msr	BASEPRI_MAX, r3
    9c7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    9c80:	4f10      	ldr	r7, [pc, #64]	; (9cc4 <z_tick_sleep+0x78>)
    9c82:	68b8      	ldr	r0, [r7, #8]
    9c84:	f7ff fe48 	bl	9918 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9c88:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9c8a:	490f      	ldr	r1, [pc, #60]	; (9cc8 <z_tick_sleep+0x7c>)
    9c8c:	462a      	mov	r2, r5
    9c8e:	4633      	mov	r3, r6
    9c90:	3018      	adds	r0, #24
    9c92:	f000 f927 	bl	9ee4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9c96:	68ba      	ldr	r2, [r7, #8]
    9c98:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9c9a:	7b53      	ldrb	r3, [r2, #13]
    9c9c:	f043 0310 	orr.w	r3, r3, #16
    9ca0:	7353      	strb	r3, [r2, #13]
    9ca2:	f7f9 ffef 	bl	3c84 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9ca6:	f004 fd5f 	bl	e768 <sys_clock_tick_get_32>
    9caa:	1a20      	subs	r0, r4, r0
    9cac:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    9cb0:	2801      	cmp	r0, #1
    9cb2:	f173 0300 	sbcs.w	r3, r3, #0
    9cb6:	dbd2      	blt.n	9c5e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    9cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9cbc:	f06f 0401 	mvn.w	r4, #1
    9cc0:	1a24      	subs	r4, r4, r0
    9cc2:	e7d5      	b.n	9c70 <z_tick_sleep+0x24>
    9cc4:	20014448 	.word	0x20014448
    9cc8:	0000e60d 	.word	0x0000e60d

00009ccc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9ccc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9cd0:	bf08      	it	eq
    9cd2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    9cd6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9cd8:	d106      	bne.n	9ce8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    9cda:	4b08      	ldr	r3, [pc, #32]	; (9cfc <z_impl_k_sleep+0x30>)
    9cdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9cde:	f7ff ff0d 	bl	9afc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    9ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    9ce6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9ce8:	f7ff ffb0 	bl	9c4c <z_tick_sleep>
    9cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9cf0:	fb80 0303 	smull	r0, r3, r0, r3
    9cf4:	0bc0      	lsrs	r0, r0, #15
    9cf6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9cfa:	e7f4      	b.n	9ce6 <z_impl_k_sleep+0x1a>
    9cfc:	20014448 	.word	0x20014448

00009d00 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    9d00:	b538      	push	{r3, r4, r5, lr}
    9d02:	2100      	movs	r1, #0
    9d04:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9d08:	4c08      	ldr	r4, [pc, #32]	; (9d2c <z_impl_k_usleep+0x2c>)
    9d0a:	2300      	movs	r3, #0
    9d0c:	fbc0 4105 	smlal	r4, r1, r0, r5
    9d10:	4a07      	ldr	r2, [pc, #28]	; (9d30 <z_impl_k_usleep+0x30>)
    9d12:	4620      	mov	r0, r4
    9d14:	f7f6 fa1e 	bl	154 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    9d18:	17c1      	asrs	r1, r0, #31
    9d1a:	f7ff ff97 	bl	9c4c <z_tick_sleep>
    9d1e:	4b04      	ldr	r3, [pc, #16]	; (9d30 <z_impl_k_usleep+0x30>)
    9d20:	fb80 0303 	smull	r0, r3, r0, r3
    9d24:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    9d26:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9d2a:	bd38      	pop	{r3, r4, r5, pc}
    9d2c:	000f423f 	.word	0x000f423f
    9d30:	000f4240 	.word	0x000f4240

00009d34 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9d34:	4b01      	ldr	r3, [pc, #4]	; (9d3c <z_impl_z_current_get+0x8>)
    9d36:	6898      	ldr	r0, [r3, #8]
    9d38:	4770      	bx	lr
    9d3a:	bf00      	nop
    9d3c:	20014448 	.word	0x20014448

00009d40 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d44:	4604      	mov	r4, r0
    9d46:	f04f 0320 	mov.w	r3, #32
    9d4a:	f3ef 8611 	mrs	r6, BASEPRI
    9d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    9d52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    9d56:	7b03      	ldrb	r3, [r0, #12]
    9d58:	07d9      	lsls	r1, r3, #31
    9d5a:	d50b      	bpl.n	9d74 <z_thread_abort+0x34>
	__asm__ volatile(
    9d5c:	f386 8811 	msr	BASEPRI, r6
    9d60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    9d64:	4040      	eors	r0, r0
    9d66:	f380 8811 	msr	BASEPRI, r0
    9d6a:	f04f 0004 	mov.w	r0, #4
    9d6e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9d74:	7b43      	ldrb	r3, [r0, #13]
    9d76:	071a      	lsls	r2, r3, #28
    9d78:	d504      	bpl.n	9d84 <z_thread_abort+0x44>
    9d7a:	f386 8811 	msr	BASEPRI, r6
    9d7e:	f3bf 8f6f 	isb	sy
    9d82:	e7f5      	b.n	9d70 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9d84:	f023 0220 	bic.w	r2, r3, #32
    9d88:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    9d8c:	09d2      	lsrs	r2, r2, #7
    9d8e:	d120      	bne.n	9dd2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9d90:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    9d92:	68a3      	ldr	r3, [r4, #8]
    9d94:	b113      	cbz	r3, 9d9c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    9d96:	4620      	mov	r0, r4
    9d98:	f004 fbc2 	bl	e520 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    9d9c:	f104 0018 	add.w	r0, r4, #24
    9da0:	f004 fccc 	bl	e73c <z_abort_timeout>
    9da4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9da8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    9dac:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dae:	42bd      	cmp	r5, r7
    9db0:	d000      	beq.n	9db4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9db2:	b9b5      	cbnz	r5, 9de2 <z_thread_abort+0xa2>
		update_cache(1);
    9db4:	2001      	movs	r0, #1
    9db6:	f7ff fd97 	bl	98e8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9dba:	4b10      	ldr	r3, [pc, #64]	; (9dfc <z_thread_abort+0xbc>)
    9dbc:	689b      	ldr	r3, [r3, #8]
    9dbe:	42a3      	cmp	r3, r4
    9dc0:	d1db      	bne.n	9d7a <z_thread_abort+0x3a>
    9dc2:	f3ef 8305 	mrs	r3, IPSR
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	d1d7      	bne.n	9d7a <z_thread_abort+0x3a>
    9dca:	4630      	mov	r0, r6
    9dcc:	f7f9 ff5a 	bl	3c84 <arch_swap>
	return ret;
    9dd0:	e7d3      	b.n	9d7a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9dd2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9dd6:	f043 0308 	orr.w	r3, r3, #8
    9dda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9ddc:	f004 fb98 	bl	e510 <sys_dlist_remove>
}
    9de0:	e7d7      	b.n	9d92 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    9de2:	4628      	mov	r0, r5
    9de4:	f004 fb9c 	bl	e520 <unpend_thread_no_timeout>
    9de8:	f105 0018 	add.w	r0, r5, #24
    9dec:	f004 fca6 	bl	e73c <z_abort_timeout>
		ready_thread(thread);
    9df0:	4628      	mov	r0, r5
    9df2:	f8c5 8074 	str.w	r8, [r5, #116]	; 0x74
    9df6:	f7ff fdbf 	bl	9978 <ready_thread>
    9dfa:	e7d7      	b.n	9dac <z_thread_abort+0x6c>
    9dfc:	20014448 	.word	0x20014448

00009e00 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9e00:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9e02:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9e06:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9e08:	e9cd 6700 	strd	r6, r7, [sp]
    9e0c:	f7ff fde8 	bl	99e0 <z_pend_curr>

	if (data != NULL) {
    9e10:	b11c      	cbz	r4, 9e1a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    9e12:	4b03      	ldr	r3, [pc, #12]	; (9e20 <z_sched_wait+0x20>)
    9e14:	689b      	ldr	r3, [r3, #8]
    9e16:	695b      	ldr	r3, [r3, #20]
    9e18:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9e1a:	b002      	add	sp, #8
    9e1c:	bdd0      	pop	{r4, r6, r7, pc}
    9e1e:	bf00      	nop
    9e20:	20014448 	.word	0x20014448

00009e24 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9e24:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9e26:	4806      	ldr	r0, [pc, #24]	; (9e40 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9e28:	4a06      	ldr	r2, [pc, #24]	; (9e44 <z_data_copy+0x20>)
    9e2a:	4907      	ldr	r1, [pc, #28]	; (9e48 <z_data_copy+0x24>)
    9e2c:	1a12      	subs	r2, r2, r0
    9e2e:	f004 fa0a 	bl	e246 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9e32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9e36:	4a05      	ldr	r2, [pc, #20]	; (9e4c <z_data_copy+0x28>)
    9e38:	4905      	ldr	r1, [pc, #20]	; (9e50 <z_data_copy+0x2c>)
    9e3a:	4806      	ldr	r0, [pc, #24]	; (9e54 <z_data_copy+0x30>)
    9e3c:	f004 ba03 	b.w	e246 <z_early_memcpy>
    9e40:	20002000 	.word	0x20002000
    9e44:	20002490 	.word	0x20002490
    9e48:	0000f7a0 	.word	0x0000f7a0
    9e4c:	00000000 	.word	0x00000000
    9e50:	0000f7a0 	.word	0x0000f7a0
    9e54:	20002000 	.word	0x20002000

00009e58 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9e58:	4b03      	ldr	r3, [pc, #12]	; (9e68 <elapsed+0x10>)
    9e5a:	681b      	ldr	r3, [r3, #0]
    9e5c:	b90b      	cbnz	r3, 9e62 <elapsed+0xa>
    9e5e:	f7fc bab7 	b.w	63d0 <sys_clock_elapsed>
}
    9e62:	2000      	movs	r0, #0
    9e64:	4770      	bx	lr
    9e66:	bf00      	nop
    9e68:	20014470 	.word	0x20014470

00009e6c <next_timeout>:

static int32_t next_timeout(void)
{
    9e6c:	b510      	push	{r4, lr}
	return list->head == list;
    9e6e:	4b0e      	ldr	r3, [pc, #56]	; (9ea8 <next_timeout+0x3c>)
    9e70:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e72:	429c      	cmp	r4, r3
    9e74:	d104      	bne.n	9e80 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9e76:	f7ff ffef 	bl	9e58 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    9e7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    9e7e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9e80:	f7ff ffea 	bl	9e58 <elapsed>
	if ((to == NULL) ||
    9e84:	2c00      	cmp	r4, #0
    9e86:	d0f8      	beq.n	9e7a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9e88:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9e8c:	1a1b      	subs	r3, r3, r0
    9e8e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9e96:	f172 0100 	sbcs.w	r1, r2, #0
    9e9a:	daee      	bge.n	9e7a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9e9c:	2a00      	cmp	r2, #0
    9e9e:	bfac      	ite	ge
    9ea0:	4618      	movge	r0, r3
    9ea2:	2000      	movlt	r0, #0
	return ret;
    9ea4:	e7eb      	b.n	9e7e <next_timeout+0x12>
    9ea6:	bf00      	nop
    9ea8:	20002208 	.word	0x20002208

00009eac <remove_timeout>:
{
    9eac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9eae:	b170      	cbz	r0, 9ece <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    9eb0:	4b0b      	ldr	r3, [pc, #44]	; (9ee0 <remove_timeout+0x34>)
    9eb2:	685b      	ldr	r3, [r3, #4]
    9eb4:	4298      	cmp	r0, r3
    9eb6:	d00a      	beq.n	9ece <remove_timeout+0x22>
    9eb8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    9eba:	b143      	cbz	r3, 9ece <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9ebc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9ec0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9ec4:	1912      	adds	r2, r2, r4
    9ec6:	eb41 0105 	adc.w	r1, r1, r5
    9eca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    9ece:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    9ed2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9ed4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9ed6:	2300      	movs	r3, #0
	node->prev = NULL;
    9ed8:	e9c0 3300 	strd	r3, r3, [r0]
}
    9edc:	bd30      	pop	{r4, r5, pc}
    9ede:	bf00      	nop
    9ee0:	20002208 	.word	0x20002208

00009ee4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9ee8:	bf08      	it	eq
    9eea:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ef0:	4604      	mov	r4, r0
    9ef2:	461d      	mov	r5, r3
    9ef4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9ef6:	d05c      	beq.n	9fb2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9ef8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9efa:	f04f 0320 	mov.w	r3, #32
    9efe:	f3ef 8711 	mrs	r7, BASEPRI
    9f02:	f383 8812 	msr	BASEPRI_MAX, r3
    9f06:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9f0a:	3201      	adds	r2, #1
    9f0c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9f10:	da24      	bge.n	9f5c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9f12:	f06f 0301 	mvn.w	r3, #1
    9f16:	492c      	ldr	r1, [pc, #176]	; (9fc8 <z_add_timeout+0xe4>)
    9f18:	e9d1 2000 	ldrd	r2, r0, [r1]
    9f1c:	1a9b      	subs	r3, r3, r2
    9f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f22:	eb62 0000 	sbc.w	r0, r2, r0
    9f26:	1b9e      	subs	r6, r3, r6
    9f28:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    9f2c:	2e01      	cmp	r6, #1
    9f2e:	f170 0300 	sbcs.w	r3, r0, #0
    9f32:	da01      	bge.n	9f38 <z_add_timeout+0x54>
    9f34:	2601      	movs	r6, #1
    9f36:	2000      	movs	r0, #0
    9f38:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    9f3c:	4e23      	ldr	r6, [pc, #140]	; (9fcc <z_add_timeout+0xe8>)
    9f3e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    9f42:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f44:	45b4      	cmp	ip, r6
    9f46:	bf08      	it	eq
    9f48:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    9f4c:	f1bc 0f00 	cmp.w	ip, #0
    9f50:	d10d      	bne.n	9f6e <z_add_timeout+0x8a>
	node->prev = tail;
    9f52:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    9f56:	602c      	str	r4, [r5, #0]
	list->tail = node;
    9f58:	6074      	str	r4, [r6, #4]
}
    9f5a:	e01c      	b.n	9f96 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    9f5c:	f7ff ff7c 	bl	9e58 <elapsed>
    9f60:	3601      	adds	r6, #1
    9f62:	f145 0500 	adc.w	r5, r5, #0
    9f66:	1836      	adds	r6, r6, r0
    9f68:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9f6c:	e7e4      	b.n	9f38 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    9f6e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    9f72:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    9f76:	4293      	cmp	r3, r2
    9f78:	eb71 0e00 	sbcs.w	lr, r1, r0
    9f7c:	da1a      	bge.n	9fb4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    9f7e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    9f80:	f8dc 3004 	ldr.w	r3, [ip, #4]
    9f84:	eb60 0001 	sbc.w	r0, r0, r1
    9f88:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    9f8c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    9f90:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9f92:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    9f96:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f98:	42b3      	cmp	r3, r6
    9f9a:	d006      	beq.n	9faa <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9f9c:	429c      	cmp	r4, r3
    9f9e:	d104      	bne.n	9faa <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    9fa0:	f7ff ff64 	bl	9e6c <next_timeout>
    9fa4:	2100      	movs	r1, #0
    9fa6:	f7fc f9e1 	bl	636c <sys_clock_set_timeout>
	__asm__ volatile(
    9faa:	f387 8811 	msr	BASEPRI, r7
    9fae:	f3bf 8f6f 	isb	sy
		}
	}
}
    9fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    9fb4:	1a9b      	subs	r3, r3, r2
    9fb6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    9fba:	45ac      	cmp	ip, r5
    9fbc:	e9c4 3104 	strd	r3, r1, [r4, #16]
    9fc0:	d0c7      	beq.n	9f52 <z_add_timeout+0x6e>
    9fc2:	f8dc c000 	ldr.w	ip, [ip]
    9fc6:	e7c1      	b.n	9f4c <z_add_timeout+0x68>
    9fc8:	200026d0 	.word	0x200026d0
    9fcc:	20002208 	.word	0x20002208

00009fd0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    9fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    9fd4:	f04f 0320 	mov.w	r3, #32
    9fd8:	f3ef 8c11 	mrs	ip, BASEPRI
    9fdc:	f383 8812 	msr	BASEPRI_MAX, r3
    9fe0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9fe4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; a094 <sys_clock_announce+0xc4>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9fe8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; a098 <sys_clock_announce+0xc8>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    9fec:	2400      	movs	r4, #0
	announce_remaining = ticks;
    9fee:	f8c9 0000 	str.w	r0, [r9]
    9ff2:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    9ff6:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ff8:	4550      	cmp	r0, sl
    9ffa:	bf08      	it	eq
    9ffc:	2000      	moveq	r0, #0
		curr_tick += dt;
    9ffe:	4f27      	ldr	r7, [pc, #156]	; (a09c <sys_clock_announce+0xcc>)
    a000:	46e0      	mov	r8, ip
    a002:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    a006:	f8d9 3000 	ldr.w	r3, [r9]
    a00a:	b380      	cbz	r0, a06e <sys_clock_announce+0x9e>
    a00c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    a010:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    a014:	42b3      	cmp	r3, r6
    a016:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    a01a:	da05      	bge.n	a028 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    a01c:	1af6      	subs	r6, r6, r3
    a01e:	eb6c 040e 	sbc.w	r4, ip, lr
    a022:	e9c0 6404 	strd	r6, r4, [r0, #16]
    a026:	e022      	b.n	a06e <sys_clock_announce+0x9e>
		curr_tick += dt;
    a028:	18b2      	adds	r2, r6, r2
    a02a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    a02e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    a032:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    a036:	f7ff ff39 	bl	9eac <remove_timeout>
	__asm__ volatile(
    a03a:	f388 8811 	msr	BASEPRI, r8
    a03e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    a042:	6883      	ldr	r3, [r0, #8]
    a044:	4798      	blx	r3
	__asm__ volatile(
    a046:	f04f 0320 	mov.w	r3, #32
    a04a:	f3ef 8811 	mrs	r8, BASEPRI
    a04e:	f383 8812 	msr	BASEPRI_MAX, r3
    a052:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    a056:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    a05a:	f8da 0000 	ldr.w	r0, [sl]
    a05e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a060:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    a062:	46c4      	mov	ip, r8
    a064:	f8c9 3000 	str.w	r3, [r9]
    a068:	d1ca      	bne.n	a000 <sys_clock_announce+0x30>
		curr_tick += dt;
    a06a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    a06e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    a070:	189a      	adds	r2, r3, r2
    a072:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    a076:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    a07a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    a07e:	f7ff fef5 	bl	9e6c <next_timeout>
    a082:	4621      	mov	r1, r4
    a084:	f7fc f972 	bl	636c <sys_clock_set_timeout>
	__asm__ volatile(
    a088:	f388 8811 	msr	BASEPRI, r8
    a08c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    a090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a094:	20002208 	.word	0x20002208
    a098:	20014470 	.word	0x20014470
    a09c:	200026d0 	.word	0x200026d0

0000a0a0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a0a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    a0a2:	f04f 0320 	mov.w	r3, #32
    a0a6:	f3ef 8411 	mrs	r4, BASEPRI
    a0aa:	f383 8812 	msr	BASEPRI_MAX, r3
    a0ae:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    a0b2:	f7ff fed1 	bl	9e58 <elapsed>
    a0b6:	4603      	mov	r3, r0
    a0b8:	4a05      	ldr	r2, [pc, #20]	; (a0d0 <sys_clock_tick_get+0x30>)
    a0ba:	e9d2 0100 	ldrd	r0, r1, [r2]
    a0be:	1818      	adds	r0, r3, r0
    a0c0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    a0c4:	f384 8811 	msr	BASEPRI, r4
    a0c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    a0cc:	bd10      	pop	{r4, pc}
    a0ce:	bf00      	nop
    a0d0:	200026d0 	.word	0x200026d0

0000a0d4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0d6:	4604      	mov	r4, r0
	__asm__ volatile(
    a0d8:	f04f 0320 	mov.w	r3, #32
    a0dc:	f3ef 8711 	mrs	r7, BASEPRI
    a0e0:	f383 8812 	msr	BASEPRI_MAX, r3
    a0e4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    a0e8:	6802      	ldr	r2, [r0, #0]
    a0ea:	b122      	cbz	r2, a0f6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    a0ec:	f387 8811 	msr	BASEPRI, r7
    a0f0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a0f6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    a0fa:	1c58      	adds	r0, r3, #1
    a0fc:	f146 0100 	adc.w	r1, r6, #0
    a100:	2802      	cmp	r0, #2
    a102:	f171 0100 	sbcs.w	r1, r1, #0
    a106:	d327      	bcc.n	a158 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    a108:	2b01      	cmp	r3, #1
    a10a:	f176 0100 	sbcs.w	r1, r6, #0
    a10e:	bfbc      	itt	lt
    a110:	2301      	movlt	r3, #1
    a112:	4616      	movlt	r6, r2
    a114:	1e5d      	subs	r5, r3, #1
    a116:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    a11a:	f004 fb29 	bl	e770 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    a11e:	3001      	adds	r0, #1
    a120:	f141 0100 	adc.w	r1, r1, #0
    a124:	1940      	adds	r0, r0, r5
    a126:	eb46 0101 	adc.w	r1, r6, r1
    a12a:	2801      	cmp	r0, #1
    a12c:	f171 0100 	sbcs.w	r1, r1, #0
    a130:	db3a      	blt.n	a1a8 <z_timer_expiration_handler+0xd4>
    a132:	f004 fb1d 	bl	e770 <z_impl_k_uptime_ticks>
    a136:	3001      	adds	r0, #1
    a138:	f141 0100 	adc.w	r1, r1, #0
    a13c:	f06f 0201 	mvn.w	r2, #1
    a140:	1940      	adds	r0, r0, r5
    a142:	eb46 0301 	adc.w	r3, r6, r1
    a146:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a14a:	1a12      	subs	r2, r2, r0
    a14c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a150:	4620      	mov	r0, r4
    a152:	4918      	ldr	r1, [pc, #96]	; (a1b4 <z_timer_expiration_handler+0xe0>)
    a154:	f7ff fec6 	bl	9ee4 <z_add_timeout>
	timer->status += 1U;
    a158:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a15a:	3301      	adds	r3, #1
    a15c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    a15e:	6a23      	ldr	r3, [r4, #32]
    a160:	b173      	cbz	r3, a180 <z_timer_expiration_handler+0xac>
    a162:	f387 8811 	msr	BASEPRI, r7
    a166:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    a16a:	4620      	mov	r0, r4
    a16c:	6a23      	ldr	r3, [r4, #32]
    a16e:	4798      	blx	r3
	__asm__ volatile(
    a170:	f04f 0320 	mov.w	r3, #32
    a174:	f3ef 8711 	mrs	r7, BASEPRI
    a178:	f383 8812 	msr	BASEPRI_MAX, r3
    a17c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a180:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a184:	42a5      	cmp	r5, r4
    a186:	d0b1      	beq.n	a0ec <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    a188:	2d00      	cmp	r5, #0
    a18a:	d0af      	beq.n	a0ec <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    a18c:	4628      	mov	r0, r5
    a18e:	f004 fa09 	bl	e5a4 <z_unpend_thread_no_timeout>
    a192:	2300      	movs	r3, #0
    a194:	676b      	str	r3, [r5, #116]	; 0x74
	__asm__ volatile(
    a196:	f387 8811 	msr	BASEPRI, r7
    a19a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    a19e:	4628      	mov	r0, r5
}
    a1a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    a1a4:	f004 b9ee 	b.w	e584 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    a1a8:	f06f 0201 	mvn.w	r2, #1
    a1ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a1b0:	e7ce      	b.n	a150 <z_timer_expiration_handler+0x7c>
    a1b2:	bf00      	nop
    a1b4:	0000a0d5 	.word	0x0000a0d5

0000a1b8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a1bc:	bf08      	it	eq
    a1be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    a1c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1c6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a1ca:	4605      	mov	r5, r0
    a1cc:	461c      	mov	r4, r3
    a1ce:	4691      	mov	r9, r2
    a1d0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a1d2:	d01c      	beq.n	a20e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a1d4:	1c53      	adds	r3, r2, #1
    a1d6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    a1da:	db09      	blt.n	a1f0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a1dc:	2a01      	cmp	r2, #1
    a1de:	f174 0300 	sbcs.w	r3, r4, #0
    a1e2:	bfbc      	itt	lt
    a1e4:	2201      	movlt	r2, #1
    a1e6:	2400      	movlt	r4, #0
    a1e8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    a1ec:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    a1f0:	4628      	mov	r0, r5
    a1f2:	f004 faa3 	bl	e73c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    a1f6:	2300      	movs	r3, #0
	timer->period = period;
    a1f8:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    a1fc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a1fe:	464a      	mov	r2, r9
    a200:	4643      	mov	r3, r8
    a202:	4628      	mov	r0, r5
		     duration);
}
    a204:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a208:	4902      	ldr	r1, [pc, #8]	; (a214 <z_impl_k_timer_start+0x5c>)
    a20a:	f7ff be6b 	b.w	9ee4 <z_add_timeout>
}
    a20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a212:	bf00      	nop
    a214:	0000a0d5 	.word	0x0000a0d5

0000a218 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    a218:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a21a:	4606      	mov	r6, r0
    a21c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    a21e:	f004 f861 	bl	e2e4 <k_is_in_isr>
    a222:	b978      	cbnz	r0, a244 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    a224:	4b0b      	ldr	r3, [pc, #44]	; (a254 <z_thread_aligned_alloc+0x3c>)
    a226:	689b      	ldr	r3, [r3, #8]
    a228:	6edc      	ldr	r4, [r3, #108]	; 0x6c
	}

	if (heap != NULL) {
    a22a:	b17c      	cbz	r4, a24c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    a22c:	1d2a      	adds	r2, r5, #4
    a22e:	d209      	bcs.n	a244 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    a230:	2000      	movs	r0, #0
    a232:	2100      	movs	r1, #0
    a234:	e9cd 0100 	strd	r0, r1, [sp]
    a238:	4620      	mov	r0, r4
    a23a:	f046 0104 	orr.w	r1, r6, #4
    a23e:	f004 faec 	bl	e81a <k_heap_aligned_alloc>
	if (mem == NULL) {
    a242:	b908      	cbnz	r0, a248 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    a244:	2400      	movs	r4, #0
	}

	return ret;
    a246:	e001      	b.n	a24c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    a248:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    a24a:	1d04      	adds	r4, r0, #4
}
    a24c:	4620      	mov	r0, r4
    a24e:	b002      	add	sp, #8
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	bf00      	nop
    a254:	20014448 	.word	0x20014448

0000a258 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    a258:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a25a:	4c06      	ldr	r4, [pc, #24]	; (a274 <statics_init+0x1c>)
    a25c:	4d06      	ldr	r5, [pc, #24]	; (a278 <statics_init+0x20>)
    a25e:	42ac      	cmp	r4, r5
    a260:	d301      	bcc.n	a266 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    a262:	2000      	movs	r0, #0
    a264:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a266:	4620      	mov	r0, r4
    a268:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a26c:	f004 facd 	bl	e80a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a270:	3414      	adds	r4, #20
    a272:	e7f4      	b.n	a25e <statics_init+0x6>
    a274:	20002314 	.word	0x20002314
    a278:	20002314 	.word	0x20002314

0000a27c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    a27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    a27e:	2400      	movs	r4, #0
    a280:	4b08      	ldr	r3, [pc, #32]	; (a2a4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    a282:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    a286:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    a288:	ab02      	add	r3, sp, #8
    a28a:	9300      	str	r3, [sp, #0]
    a28c:	4906      	ldr	r1, [pc, #24]	; (a2a8 <k_sys_work_q_init+0x2c>)
    a28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a292:	4806      	ldr	r0, [pc, #24]	; (a2ac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    a294:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    a298:	f7ff fac4 	bl	9824 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    a29c:	4620      	mov	r0, r4
    a29e:	b004      	add	sp, #16
    a2a0:	bd10      	pop	{r4, pc}
    a2a2:	bf00      	nop
    a2a4:	0000f797 	.word	0x0000f797
    a2a8:	2005a1f8 	.word	0x2005a1f8
    a2ac:	200026d8 	.word	0x200026d8

0000a2b0 <nrf_cc3xx_platform_init_no_rng>:
    a2b0:	b510      	push	{r4, lr}
    a2b2:	4c0a      	ldr	r4, [pc, #40]	; (a2dc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a2b4:	6823      	ldr	r3, [r4, #0]
    a2b6:	b11b      	cbz	r3, a2c0 <nrf_cc3xx_platform_init_no_rng+0x10>
    a2b8:	2301      	movs	r3, #1
    a2ba:	6023      	str	r3, [r4, #0]
    a2bc:	2000      	movs	r0, #0
    a2be:	bd10      	pop	{r4, pc}
    a2c0:	f000 f8fe 	bl	a4c0 <CC_LibInitNoRng>
    a2c4:	2800      	cmp	r0, #0
    a2c6:	d0f7      	beq.n	a2b8 <nrf_cc3xx_platform_init_no_rng+0x8>
    a2c8:	3801      	subs	r0, #1
    a2ca:	2807      	cmp	r0, #7
    a2cc:	d803      	bhi.n	a2d6 <nrf_cc3xx_platform_init_no_rng+0x26>
    a2ce:	4b04      	ldr	r3, [pc, #16]	; (a2e0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a2d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a2d4:	bd10      	pop	{r4, pc}
    a2d6:	4803      	ldr	r0, [pc, #12]	; (a2e4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a2d8:	bd10      	pop	{r4, pc}
    a2da:	bf00      	nop
    a2dc:	20014474 	.word	0x20014474
    a2e0:	0000f26c 	.word	0x0000f26c
    a2e4:	ffff8ffe 	.word	0xffff8ffe

0000a2e8 <nrf_cc3xx_platform_abort>:
    a2e8:	f3bf 8f4f 	dsb	sy
    a2ec:	4905      	ldr	r1, [pc, #20]	; (a304 <nrf_cc3xx_platform_abort+0x1c>)
    a2ee:	4b06      	ldr	r3, [pc, #24]	; (a308 <nrf_cc3xx_platform_abort+0x20>)
    a2f0:	68ca      	ldr	r2, [r1, #12]
    a2f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a2f6:	4313      	orrs	r3, r2
    a2f8:	60cb      	str	r3, [r1, #12]
    a2fa:	f3bf 8f4f 	dsb	sy
    a2fe:	bf00      	nop
    a300:	e7fd      	b.n	a2fe <nrf_cc3xx_platform_abort+0x16>
    a302:	bf00      	nop
    a304:	e000ed00 	.word	0xe000ed00
    a308:	05fa0004 	.word	0x05fa0004

0000a30c <CC_PalAbort>:
    a30c:	b430      	push	{r4, r5}
    a30e:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a312:	2500      	movs	r5, #0
    a314:	4b0b      	ldr	r3, [pc, #44]	; (a344 <CC_PalAbort+0x38>)
    a316:	4c0c      	ldr	r4, [pc, #48]	; (a348 <CC_PalAbort+0x3c>)
    a318:	490c      	ldr	r1, [pc, #48]	; (a34c <CC_PalAbort+0x40>)
    a31a:	6849      	ldr	r1, [r1, #4]
    a31c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a320:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a324:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a328:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a32c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    a330:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    a334:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    a338:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    a33c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    a340:	bc30      	pop	{r4, r5}
    a342:	4708      	bx	r1
    a344:	50845000 	.word	0x50845000
    a348:	50844000 	.word	0x50844000
    a34c:	20002210 	.word	0x20002210

0000a350 <nrf_cc3xx_platform_set_abort>:
    a350:	4b02      	ldr	r3, [pc, #8]	; (a35c <nrf_cc3xx_platform_set_abort+0xc>)
    a352:	e9d0 1200 	ldrd	r1, r2, [r0]
    a356:	e9c3 1200 	strd	r1, r2, [r3]
    a35a:	4770      	bx	lr
    a35c:	20002210 	.word	0x20002210

0000a360 <mutex_free>:
    a360:	b510      	push	{r4, lr}
    a362:	4604      	mov	r4, r0
    a364:	b150      	cbz	r0, a37c <mutex_free+0x1c>
    a366:	6863      	ldr	r3, [r4, #4]
    a368:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a36c:	d005      	beq.n	a37a <mutex_free+0x1a>
    a36e:	4a06      	ldr	r2, [pc, #24]	; (a388 <mutex_free+0x28>)
    a370:	4293      	cmp	r3, r2
    a372:	d002      	beq.n	a37a <mutex_free+0x1a>
    a374:	2300      	movs	r3, #0
    a376:	6062      	str	r2, [r4, #4]
    a378:	6023      	str	r3, [r4, #0]
    a37a:	bd10      	pop	{r4, pc}
    a37c:	4b03      	ldr	r3, [pc, #12]	; (a38c <mutex_free+0x2c>)
    a37e:	4804      	ldr	r0, [pc, #16]	; (a390 <mutex_free+0x30>)
    a380:	685b      	ldr	r3, [r3, #4]
    a382:	4798      	blx	r3
    a384:	e7ef      	b.n	a366 <mutex_free+0x6>
    a386:	bf00      	nop
    a388:	a95c5f2c 	.word	0xa95c5f2c
    a38c:	20002210 	.word	0x20002210
    a390:	0000f28c 	.word	0x0000f28c

0000a394 <mutex_lock>:
    a394:	b1c8      	cbz	r0, a3ca <mutex_lock+0x36>
    a396:	6843      	ldr	r3, [r0, #4]
    a398:	4a0d      	ldr	r2, [pc, #52]	; (a3d0 <mutex_lock+0x3c>)
    a39a:	4293      	cmp	r3, r2
    a39c:	d013      	beq.n	a3c6 <mutex_lock+0x32>
    a39e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a3a2:	d00e      	beq.n	a3c2 <mutex_lock+0x2e>
    a3a4:	2301      	movs	r3, #1
    a3a6:	e850 2f00 	ldrex	r2, [r0]
    a3aa:	4619      	mov	r1, r3
    a3ac:	e840 1c00 	strex	ip, r1, [r0]
    a3b0:	f09c 0f00 	teq	ip, #0
    a3b4:	d1f7      	bne.n	a3a6 <mutex_lock+0x12>
    a3b6:	2a01      	cmp	r2, #1
    a3b8:	d0f5      	beq.n	a3a6 <mutex_lock+0x12>
    a3ba:	f3bf 8f5f 	dmb	sy
    a3be:	2000      	movs	r0, #0
    a3c0:	4770      	bx	lr
    a3c2:	4804      	ldr	r0, [pc, #16]	; (a3d4 <mutex_lock+0x40>)
    a3c4:	4770      	bx	lr
    a3c6:	4804      	ldr	r0, [pc, #16]	; (a3d8 <mutex_lock+0x44>)
    a3c8:	4770      	bx	lr
    a3ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a3ce:	4770      	bx	lr
    a3d0:	a95c5f2c 	.word	0xa95c5f2c
    a3d4:	ffff8fe9 	.word	0xffff8fe9
    a3d8:	ffff8fea 	.word	0xffff8fea

0000a3dc <mutex_unlock>:
    a3dc:	4603      	mov	r3, r0
    a3de:	b180      	cbz	r0, a402 <mutex_unlock+0x26>
    a3e0:	6842      	ldr	r2, [r0, #4]
    a3e2:	4909      	ldr	r1, [pc, #36]	; (a408 <mutex_unlock+0x2c>)
    a3e4:	428a      	cmp	r2, r1
    a3e6:	d00a      	beq.n	a3fe <mutex_unlock+0x22>
    a3e8:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a3ec:	d005      	beq.n	a3fa <mutex_unlock+0x1e>
    a3ee:	f3bf 8f5f 	dmb	sy
    a3f2:	2200      	movs	r2, #0
    a3f4:	4610      	mov	r0, r2
    a3f6:	601a      	str	r2, [r3, #0]
    a3f8:	4770      	bx	lr
    a3fa:	4804      	ldr	r0, [pc, #16]	; (a40c <mutex_unlock+0x30>)
    a3fc:	4770      	bx	lr
    a3fe:	4804      	ldr	r0, [pc, #16]	; (a410 <mutex_unlock+0x34>)
    a400:	4770      	bx	lr
    a402:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a406:	4770      	bx	lr
    a408:	a95c5f2c 	.word	0xa95c5f2c
    a40c:	ffff8fe9 	.word	0xffff8fe9
    a410:	ffff8fea 	.word	0xffff8fea

0000a414 <mutex_init>:
    a414:	b510      	push	{r4, lr}
    a416:	4604      	mov	r4, r0
    a418:	b120      	cbz	r0, a424 <mutex_init+0x10>
    a41a:	2300      	movs	r3, #0
    a41c:	4a03      	ldr	r2, [pc, #12]	; (a42c <mutex_init+0x18>)
    a41e:	6023      	str	r3, [r4, #0]
    a420:	6062      	str	r2, [r4, #4]
    a422:	bd10      	pop	{r4, pc}
    a424:	4802      	ldr	r0, [pc, #8]	; (a430 <mutex_init+0x1c>)
    a426:	f7ff ff71 	bl	a30c <CC_PalAbort>
    a42a:	e7f6      	b.n	a41a <mutex_init+0x6>
    a42c:	3a00003a 	.word	0x3a00003a
    a430:	0000f2b4 	.word	0x0000f2b4

0000a434 <nrf_cc3xx_platform_set_mutexes>:
    a434:	b570      	push	{r4, r5, r6, lr}
    a436:	4c19      	ldr	r4, [pc, #100]	; (a49c <nrf_cc3xx_platform_set_mutexes+0x68>)
    a438:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a43c:	6806      	ldr	r6, [r0, #0]
    a43e:	f8c4 c004 	str.w	ip, [r4, #4]
    a442:	f8d0 c008 	ldr.w	ip, [r0, #8]
    a446:	68c0      	ldr	r0, [r0, #12]
    a448:	f8c4 c008 	str.w	ip, [r4, #8]
    a44c:	60e0      	str	r0, [r4, #12]
    a44e:	6026      	str	r6, [r4, #0]
    a450:	6808      	ldr	r0, [r1, #0]
    a452:	4b13      	ldr	r3, [pc, #76]	; (a4a0 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    a454:	4d13      	ldr	r5, [pc, #76]	; (a4a4 <nrf_cc3xx_platform_set_mutexes+0x70>)
    a456:	6018      	str	r0, [r3, #0]
    a458:	6848      	ldr	r0, [r1, #4]
    a45a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    a45e:	6058      	str	r0, [r3, #4]
    a460:	6888      	ldr	r0, [r1, #8]
    a462:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a466:	6098      	str	r0, [r3, #8]
    a468:	68c8      	ldr	r0, [r1, #12]
    a46a:	6909      	ldr	r1, [r1, #16]
    a46c:	60d8      	str	r0, [r3, #12]
    a46e:	6119      	str	r1, [r3, #16]
    a470:	d012      	beq.n	a498 <nrf_cc3xx_platform_set_mutexes+0x64>
    a472:	2300      	movs	r3, #0
    a474:	4a0c      	ldr	r2, [pc, #48]	; (a4a8 <nrf_cc3xx_platform_set_mutexes+0x74>)
    a476:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a47a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    a47e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    a482:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    a486:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    a48a:	47b0      	blx	r6
    a48c:	6823      	ldr	r3, [r4, #0]
    a48e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a496:	4718      	bx	r3
    a498:	bd70      	pop	{r4, r5, r6, pc}
    a49a:	bf00      	nop
    a49c:	2000222c 	.word	0x2000222c
    a4a0:	20002218 	.word	0x20002218
    a4a4:	2001448c 	.word	0x2001448c
    a4a8:	a95c5f2c 	.word	0xa95c5f2c

0000a4ac <mbedtls_platform_zeroize>:
    a4ac:	b138      	cbz	r0, a4be <mbedtls_platform_zeroize+0x12>
    a4ae:	b131      	cbz	r1, a4be <mbedtls_platform_zeroize+0x12>
    a4b0:	2200      	movs	r2, #0
    a4b2:	4401      	add	r1, r0
    a4b4:	4603      	mov	r3, r0
    a4b6:	3001      	adds	r0, #1
    a4b8:	4288      	cmp	r0, r1
    a4ba:	701a      	strb	r2, [r3, #0]
    a4bc:	d1fa      	bne.n	a4b4 <mbedtls_platform_zeroize+0x8>
    a4be:	4770      	bx	lr

0000a4c0 <CC_LibInitNoRng>:
    a4c0:	b508      	push	{r3, lr}
    a4c2:	f000 f811 	bl	a4e8 <CC_HalInit>
    a4c6:	b930      	cbnz	r0, a4d6 <CC_LibInitNoRng+0x16>
    a4c8:	f000 f810 	bl	a4ec <CC_PalInit>
    a4cc:	b938      	cbnz	r0, a4de <CC_LibInitNoRng+0x1e>
    a4ce:	4a05      	ldr	r2, [pc, #20]	; (a4e4 <CC_LibInitNoRng+0x24>)
    a4d0:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    a4d4:	bd08      	pop	{r3, pc}
    a4d6:	f000 f837 	bl	a548 <CC_PalTerminate>
    a4da:	2003      	movs	r0, #3
    a4dc:	bd08      	pop	{r3, pc}
    a4de:	2004      	movs	r0, #4
    a4e0:	bd08      	pop	{r3, pc}
    a4e2:	bf00      	nop
    a4e4:	50845000 	.word	0x50845000

0000a4e8 <CC_HalInit>:
    a4e8:	2000      	movs	r0, #0
    a4ea:	4770      	bx	lr

0000a4ec <CC_PalInit>:
    a4ec:	b510      	push	{r4, lr}
    a4ee:	4811      	ldr	r0, [pc, #68]	; (a534 <CC_PalInit+0x48>)
    a4f0:	f000 f848 	bl	a584 <CC_PalMutexCreate>
    a4f4:	b100      	cbz	r0, a4f8 <CC_PalInit+0xc>
    a4f6:	bd10      	pop	{r4, pc}
    a4f8:	480f      	ldr	r0, [pc, #60]	; (a538 <CC_PalInit+0x4c>)
    a4fa:	f000 f843 	bl	a584 <CC_PalMutexCreate>
    a4fe:	2800      	cmp	r0, #0
    a500:	d1f9      	bne.n	a4f6 <CC_PalInit+0xa>
    a502:	4c0e      	ldr	r4, [pc, #56]	; (a53c <CC_PalInit+0x50>)
    a504:	4620      	mov	r0, r4
    a506:	f000 f83d 	bl	a584 <CC_PalMutexCreate>
    a50a:	2800      	cmp	r0, #0
    a50c:	d1f3      	bne.n	a4f6 <CC_PalInit+0xa>
    a50e:	4b0c      	ldr	r3, [pc, #48]	; (a540 <CC_PalInit+0x54>)
    a510:	480c      	ldr	r0, [pc, #48]	; (a544 <CC_PalInit+0x58>)
    a512:	601c      	str	r4, [r3, #0]
    a514:	f000 f836 	bl	a584 <CC_PalMutexCreate>
    a518:	4601      	mov	r1, r0
    a51a:	2800      	cmp	r0, #0
    a51c:	d1eb      	bne.n	a4f6 <CC_PalInit+0xa>
    a51e:	f000 f82d 	bl	a57c <CC_PalDmaInit>
    a522:	4604      	mov	r4, r0
    a524:	b108      	cbz	r0, a52a <CC_PalInit+0x3e>
    a526:	4620      	mov	r0, r4
    a528:	bd10      	pop	{r4, pc}
    a52a:	f000 f83f 	bl	a5ac <CC_PalPowerSaveModeInit>
    a52e:	4620      	mov	r0, r4
    a530:	e7fa      	b.n	a528 <CC_PalInit+0x3c>
    a532:	bf00      	nop
    a534:	2000226c 	.word	0x2000226c
    a538:	20002268 	.word	0x20002268
    a53c:	20002264 	.word	0x20002264
    a540:	2000225c 	.word	0x2000225c
    a544:	20002260 	.word	0x20002260

0000a548 <CC_PalTerminate>:
    a548:	b508      	push	{r3, lr}
    a54a:	4808      	ldr	r0, [pc, #32]	; (a56c <CC_PalTerminate+0x24>)
    a54c:	f000 f824 	bl	a598 <CC_PalMutexDestroy>
    a550:	4807      	ldr	r0, [pc, #28]	; (a570 <CC_PalTerminate+0x28>)
    a552:	f000 f821 	bl	a598 <CC_PalMutexDestroy>
    a556:	4807      	ldr	r0, [pc, #28]	; (a574 <CC_PalTerminate+0x2c>)
    a558:	f000 f81e 	bl	a598 <CC_PalMutexDestroy>
    a55c:	4806      	ldr	r0, [pc, #24]	; (a578 <CC_PalTerminate+0x30>)
    a55e:	f000 f81b 	bl	a598 <CC_PalMutexDestroy>
    a562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a566:	f000 b80b 	b.w	a580 <CC_PalDmaTerminate>
    a56a:	bf00      	nop
    a56c:	2000226c 	.word	0x2000226c
    a570:	20002268 	.word	0x20002268
    a574:	20002264 	.word	0x20002264
    a578:	20002260 	.word	0x20002260

0000a57c <CC_PalDmaInit>:
    a57c:	2000      	movs	r0, #0
    a57e:	4770      	bx	lr

0000a580 <CC_PalDmaTerminate>:
    a580:	4770      	bx	lr
    a582:	bf00      	nop

0000a584 <CC_PalMutexCreate>:
    a584:	b508      	push	{r3, lr}
    a586:	4b03      	ldr	r3, [pc, #12]	; (a594 <CC_PalMutexCreate+0x10>)
    a588:	6802      	ldr	r2, [r0, #0]
    a58a:	681b      	ldr	r3, [r3, #0]
    a58c:	6810      	ldr	r0, [r2, #0]
    a58e:	4798      	blx	r3
    a590:	2000      	movs	r0, #0
    a592:	bd08      	pop	{r3, pc}
    a594:	2000222c 	.word	0x2000222c

0000a598 <CC_PalMutexDestroy>:
    a598:	b508      	push	{r3, lr}
    a59a:	4b03      	ldr	r3, [pc, #12]	; (a5a8 <CC_PalMutexDestroy+0x10>)
    a59c:	6802      	ldr	r2, [r0, #0]
    a59e:	685b      	ldr	r3, [r3, #4]
    a5a0:	6810      	ldr	r0, [r2, #0]
    a5a2:	4798      	blx	r3
    a5a4:	2000      	movs	r0, #0
    a5a6:	bd08      	pop	{r3, pc}
    a5a8:	2000222c 	.word	0x2000222c

0000a5ac <CC_PalPowerSaveModeInit>:
    a5ac:	b570      	push	{r4, r5, r6, lr}
    a5ae:	4c09      	ldr	r4, [pc, #36]	; (a5d4 <CC_PalPowerSaveModeInit+0x28>)
    a5b0:	4d09      	ldr	r5, [pc, #36]	; (a5d8 <CC_PalPowerSaveModeInit+0x2c>)
    a5b2:	6920      	ldr	r0, [r4, #16]
    a5b4:	68ab      	ldr	r3, [r5, #8]
    a5b6:	4798      	blx	r3
    a5b8:	b118      	cbz	r0, a5c2 <CC_PalPowerSaveModeInit+0x16>
    a5ba:	4b08      	ldr	r3, [pc, #32]	; (a5dc <CC_PalPowerSaveModeInit+0x30>)
    a5bc:	4808      	ldr	r0, [pc, #32]	; (a5e0 <CC_PalPowerSaveModeInit+0x34>)
    a5be:	685b      	ldr	r3, [r3, #4]
    a5c0:	4798      	blx	r3
    a5c2:	2100      	movs	r1, #0
    a5c4:	4a07      	ldr	r2, [pc, #28]	; (a5e4 <CC_PalPowerSaveModeInit+0x38>)
    a5c6:	68eb      	ldr	r3, [r5, #12]
    a5c8:	6011      	str	r1, [r2, #0]
    a5ca:	6920      	ldr	r0, [r4, #16]
    a5cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5d0:	4718      	bx	r3
    a5d2:	bf00      	nop
    a5d4:	20002218 	.word	0x20002218
    a5d8:	2000222c 	.word	0x2000222c
    a5dc:	20002210 	.word	0x20002210
    a5e0:	0000f2d8 	.word	0x0000f2d8
    a5e4:	20014488 	.word	0x20014488

0000a5e8 <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    a5e8:	b908      	cbnz	r0, a5ee <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    a5ea:	6008      	str	r0, [r1, #0]
    return 0;
    a5ec:	4770      	bx	lr
        return -EINVAL;
    a5ee:	f06f 0015 	mvn.w	r0, #21
}
    a5f2:	4770      	bx	lr

0000a5f4 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    a5f4:	b121      	cbz	r1, a600 <flash_area_id_from_multi_image_slot+0xc>
    a5f6:	2901      	cmp	r1, #1
    a5f8:	d007      	beq.n	a60a <flash_area_id_from_multi_image_slot+0x16>
    a5fa:	f06f 0015 	mvn.w	r0, #21
    a5fe:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a600:	b148      	cbz	r0, a616 <flash_area_id_from_multi_image_slot+0x22>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a602:	2801      	cmp	r0, #1
    a604:	bf18      	it	ne
    a606:	20ff      	movne	r0, #255	; 0xff
    a608:	4770      	bx	lr
    a60a:	b130      	cbz	r0, a61a <flash_area_id_from_multi_image_slot+0x26>
    a60c:	2801      	cmp	r0, #1
    a60e:	bf14      	ite	ne
    a610:	20ff      	movne	r0, #255	; 0xff
    a612:	2008      	moveq	r0, #8
    a614:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a616:	2004      	movs	r0, #4
    a618:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a61a:	2002      	movs	r0, #2
}
    a61c:	4770      	bx	lr

0000a61e <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    a61e:	2000      	movs	r0, #0
    a620:	4770      	bx	lr

0000a622 <flash_area_get_sector>:
    return ERASED_VAL;
}

int flash_area_get_sector(const struct flash_area *fap, off_t off,
                          struct flash_sector *fsp)
{
    a622:	b530      	push	{r4, r5, lr}
    struct flash_pages_info fpi;
    int rc;

    if (off >= fap->fa_size) {
    a624:	6883      	ldr	r3, [r0, #8]
{
    a626:	4604      	mov	r4, r0
    if (off >= fap->fa_size) {
    a628:	428b      	cmp	r3, r1
{
    a62a:	4615      	mov	r5, r2
    a62c:	b085      	sub	sp, #20
    if (off >= fap->fa_size) {
    a62e:	d90e      	bls.n	a64e <flash_area_get_sector+0x2c>
        return -ERANGE;
    }

    rc = flash_get_page_info_by_offs(fap->fa_dev, fap->fa_off + off,
    a630:	6863      	ldr	r3, [r4, #4]
    a632:	68c0      	ldr	r0, [r0, #12]
    a634:	4419      	add	r1, r3
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    a636:	aa01      	add	r2, sp, #4
    a638:	f001 fb3d 	bl	bcb6 <z_impl_flash_get_page_info_by_offs>
            &fpi);

    if (rc == 0) {
    a63c:	b928      	cbnz	r0, a64a <flash_area_get_sector+0x28>
        fsp->fs_off = fpi.start_offset - fap->fa_off;
    a63e:	6862      	ldr	r2, [r4, #4]
    a640:	9b01      	ldr	r3, [sp, #4]
    a642:	1a9b      	subs	r3, r3, r2
    a644:	602b      	str	r3, [r5, #0]
        fsp->fs_size = fpi.size;
    a646:	9b02      	ldr	r3, [sp, #8]
    a648:	606b      	str	r3, [r5, #4]
    }

    return rc;
}
    a64a:	b005      	add	sp, #20
    a64c:	bd30      	pop	{r4, r5, pc}
        return -ERANGE;
    a64e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    a652:	e7fa      	b.n	a64a <flash_area_get_sector+0x28>

0000a654 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    a654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a658:	460e      	mov	r6, r1
    a65a:	4617      	mov	r7, r2
    a65c:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    a65e:	4604      	mov	r4, r0
    a660:	b928      	cbnz	r0, a66e <bootutil_tlv_iter_begin+0x1a>
        return -1;
    a662:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    a666:	4640      	mov	r0, r8
    a668:	b003      	add	sp, #12
    a66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    a66e:	2900      	cmp	r1, #0
    a670:	d0f7      	beq.n	a662 <bootutil_tlv_iter_begin+0xe>
    a672:	2a00      	cmp	r2, #0
    a674:	d0f5      	beq.n	a662 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    a676:	68cb      	ldr	r3, [r1, #12]
    a678:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a67a:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    a67c:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a67e:	2304      	movs	r3, #4
    a680:	4629      	mov	r1, r5
    a682:	eb0d 0203 	add.w	r2, sp, r3
    a686:	f000 fe46 	bl	b316 <flash_area_read>
    a68a:	4680      	mov	r8, r0
    a68c:	2800      	cmp	r0, #0
    a68e:	d1e8      	bne.n	a662 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a690:	f646 1208 	movw	r2, #26888	; 0x6908
    a694:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a698:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a69a:	4291      	cmp	r1, r2
    a69c:	d125      	bne.n	a6ea <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a69e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    a6a2:	4299      	cmp	r1, r3
    a6a4:	d1dd      	bne.n	a662 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    a6a6:	2304      	movs	r3, #4
    a6a8:	4638      	mov	r0, r7
    a6aa:	eb0d 0203 	add.w	r2, sp, r3
    a6ae:	4429      	add	r1, r5
    a6b0:	f000 fe31 	bl	b316 <flash_area_read>
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d1d4      	bne.n	a662 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    a6b8:	f646 1307 	movw	r3, #26887	; 0x6907
    a6bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a6c0:	429a      	cmp	r2, r3
    a6c2:	d1ce      	bne.n	a662 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    a6c4:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    a6c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    a6cc:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    a6d0:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a6d2:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a6d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a6d8:	442b      	add	r3, r5
    a6da:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a6dc:	8973      	ldrh	r3, [r6, #10]
    a6de:	4413      	add	r3, r2
    a6e0:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    a6e2:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a6e4:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    a6e6:	6125      	str	r5, [r4, #16]
    return 0;
    a6e8:	e7bd      	b.n	a666 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d0e4      	beq.n	a6b8 <bootutil_tlv_iter_begin+0x64>
    a6ee:	e7b8      	b.n	a662 <bootutil_tlv_iter_begin+0xe>

0000a6f0 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    a6f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a6f4:	460e      	mov	r6, r1
    a6f6:	4617      	mov	r7, r2
    a6f8:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a6fa:	4604      	mov	r4, r0
    a6fc:	b920      	cbnz	r0, a708 <bootutil_tlv_iter_next+0x18>
        return -1;
    a6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    a702:	b002      	add	sp, #8
    a704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a708:	6803      	ldr	r3, [r0, #0]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d0f7      	beq.n	a6fe <bootutil_tlv_iter_next+0xe>
    a70e:	6843      	ldr	r3, [r0, #4]
    a710:	2b00      	cmp	r3, #0
    a712:	d0f4      	beq.n	a6fe <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a714:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    a718:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a71c:	429a      	cmp	r2, r3
    a71e:	d216      	bcs.n	a74e <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    a720:	6823      	ldr	r3, [r4, #0]
    a722:	895b      	ldrh	r3, [r3, #10]
    a724:	b123      	cbz	r3, a730 <bootutil_tlv_iter_next+0x40>
    a726:	68e3      	ldr	r3, [r4, #12]
    a728:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    a72a:	bf04      	itt	eq
    a72c:	3304      	addeq	r3, #4
    a72e:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    a730:	2304      	movs	r3, #4
    a732:	6921      	ldr	r1, [r4, #16]
    a734:	6860      	ldr	r0, [r4, #4]
    a736:	eb0d 0203 	add.w	r2, sp, r3
    a73a:	f000 fdec 	bl	b316 <flash_area_read>
        if (rc) {
    a73e:	2800      	cmp	r0, #0
    a740:	d1dd      	bne.n	a6fe <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    a742:	7aa3      	ldrb	r3, [r4, #10]
    a744:	b12b      	cbz	r3, a752 <bootutil_tlv_iter_next+0x62>
    a746:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    a74a:	429a      	cmp	r2, r3
    a74c:	d301      	bcc.n	a752 <bootutil_tlv_iter_next+0x62>
            return 1;
    a74e:	2001      	movs	r0, #1
    a750:	e7d7      	b.n	a702 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a752:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a754:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a758:	4543      	cmp	r3, r8
    a75a:	f101 0204 	add.w	r2, r1, #4
    a75e:	d003      	beq.n	a768 <bootutil_tlv_iter_next+0x78>
    a760:	f8bd c004 	ldrh.w	ip, [sp, #4]
    a764:	459c      	cmp	ip, r3
    a766:	d10b      	bne.n	a780 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    a768:	b115      	cbz	r5, a770 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    a76a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a76e:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    a770:	6923      	ldr	r3, [r4, #16]
    a772:	3304      	adds	r3, #4
    a774:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    a776:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    a778:	6923      	ldr	r3, [r4, #16]
    a77a:	4413      	add	r3, r2
    a77c:	6123      	str	r3, [r4, #16]
            return 0;
    a77e:	e7c0      	b.n	a702 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a780:	6923      	ldr	r3, [r4, #16]
    a782:	4413      	add	r3, r2
    a784:	6123      	str	r3, [r4, #16]
    a786:	e7c7      	b.n	a718 <bootutil_tlv_iter_next+0x28>

0000a788 <boot_fih_memequal>:
 */
#ifdef MCUBOOT_FIH_PROFILE_OFF
inline
fih_ret boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
    return memcmp(s1, s2, n);
    a788:	f001 b86a 	b.w	b860 <memcmp>

0000a78c <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    a78c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a790:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    a792:	3030      	adds	r0, #48	; 0x30
    a794:	4770      	bx	lr

0000a796 <boot_status_off>:
    return -1;
}

uint32_t
boot_status_off(const struct flash_area *fap)
{
    a796:	b510      	push	{r4, lr}
    a798:	4604      	mov	r4, r0
    uint32_t off_from_end;
    uint32_t elem_sz;

    elem_sz = flash_area_align(fap);
    a79a:	f000 fdfa 	bl	b392 <flash_area_align>
    }
#endif

    assert(off_from_end <= flash_area_get_size(fap));
    return flash_area_get_size(fap) - off_from_end;
}
    a79e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    return flash_area_get_size(fap) - off_from_end;
    a7a2:	68a3      	ldr	r3, [r4, #8]
    a7a4:	3b30      	subs	r3, #48	; 0x30
}
    a7a6:	fb02 3010 	mls	r0, r2, r0, r3
    a7aa:	bd10      	pop	{r4, pc}

0000a7ac <bootutil_max_image_size>:
                   * this value to fail.
                   */
    }
    return flash_sector_get_off(&sector);
#elif defined(MCUBOOT_OVERWRITE_ONLY)
    return boot_swap_info_off(fap);
    a7ac:	f001 bc4f 	b.w	c04e <boot_swap_info_off>

0000a7b0 <boot_initialize_area>:
{
    a7b0:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a7b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
    a7b6:	b513      	push	{r0, r1, r4, lr}
    a7b8:	4608      	mov	r0, r1
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a7ba:	f893 10b8 	ldrb.w	r1, [r3, #184]	; 0xb8
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a7be:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a7c0:	b199      	cbz	r1, a7ea <boot_initialize_area+0x3a>
    a7c2:	2901      	cmp	r1, #1
    a7c4:	d003      	beq.n	a7ce <boot_initialize_area+0x1e>
    a7c6:	28ff      	cmp	r0, #255	; 0xff
    a7c8:	d011      	beq.n	a7ee <boot_initialize_area+0x3e>
        return BOOT_EFLASH;
    a7ca:	2001      	movs	r0, #1
    a7cc:	e01d      	b.n	a80a <boot_initialize_area+0x5a>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a7ce:	2801      	cmp	r0, #1
    a7d0:	d00d      	beq.n	a7ee <boot_initialize_area+0x3e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a7d2:	2208      	movs	r2, #8
    a7d4:	4282      	cmp	r2, r0
    a7d6:	d1f8      	bne.n	a7ca <boot_initialize_area+0x1a>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a7d8:	2458      	movs	r4, #88	; 0x58
    a7da:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a7de:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a7e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a7e4:	f103 0454 	add.w	r4, r3, #84	; 0x54
    a7e8:	e009      	b.n	a7fe <boot_initialize_area+0x4e>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a7ea:	2804      	cmp	r0, #4
    a7ec:	d10f      	bne.n	a80e <boot_initialize_area+0x5e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a7ee:	2458      	movs	r4, #88	; 0x58
    a7f0:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a7f4:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a7f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a7fa:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    a7fe:	a901      	add	r1, sp, #4
    a800:	f7f7 fa68 	bl	1cd4 <flash_area_get_sectors>
    if (rc != 0) {
    a804:	b908      	cbnz	r0, a80a <boot_initialize_area+0x5a>
    *out_num_sectors = num_sectors;
    a806:	9b01      	ldr	r3, [sp, #4]
    a808:	6023      	str	r3, [r4, #0]
}
    a80a:	b002      	add	sp, #8
    a80c:	bd10      	pop	{r4, pc}
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a80e:	2202      	movs	r2, #2
    a810:	e7e0      	b.n	a7d4 <boot_initialize_area+0x24>

0000a812 <boot_read_sectors>:
{
    a812:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    a814:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
{
    a818:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a81a:	b1e9      	cbz	r1, a858 <boot_read_sectors+0x46>
    a81c:	2901      	cmp	r1, #1
    a81e:	d006      	beq.n	a82e <boot_read_sectors+0x1c>
    a820:	21ff      	movs	r1, #255	; 0xff
    a822:	f7ff ffc5 	bl	a7b0 <boot_initialize_area>
    if (rc != 0) {
    a826:	b1f0      	cbz	r0, a866 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
    a828:	2501      	movs	r5, #1
}
    a82a:	4628      	mov	r0, r5
    a82c:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a82e:	f7ff ffbf 	bl	a7b0 <boot_initialize_area>
    if (rc != 0) {
    a832:	2800      	cmp	r0, #0
    a834:	d1f8      	bne.n	a828 <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a836:	2108      	movs	r1, #8
    a838:	4620      	mov	r0, r4
    a83a:	f7ff ffb9 	bl	a7b0 <boot_initialize_area>
    if (rc != 0) {
    a83e:	4605      	mov	r5, r0
    a840:	b998      	cbnz	r0, a86a <boot_read_sectors+0x58>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    a842:	2258      	movs	r2, #88	; 0x58
    a844:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a848:	fb02 4303 	mla	r3, r2, r3, r4
    a84c:	6a18      	ldr	r0, [r3, #32]
    a84e:	f000 fda0 	bl	b392 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    a852:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    return 0;
    a856:	e7e8      	b.n	a82a <boot_read_sectors+0x18>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a858:	2104      	movs	r1, #4
    a85a:	f7ff ffa9 	bl	a7b0 <boot_initialize_area>
    if (rc != 0) {
    a85e:	2800      	cmp	r0, #0
    a860:	d1e2      	bne.n	a828 <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a862:	2102      	movs	r1, #2
    a864:	e7e8      	b.n	a838 <boot_read_sectors+0x26>
    a866:	21ff      	movs	r1, #255	; 0xff
    a868:	e7e6      	b.n	a838 <boot_read_sectors+0x26>
        return BOOT_EFLASH_SEC;
    a86a:	2509      	movs	r5, #9
    a86c:	e7dd      	b.n	a82a <boot_read_sectors+0x18>

0000a86e <boot_read_image_headers>:
{
    a86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a872:	4604      	mov	r4, r0
    a874:	460d      	mov	r5, r1
    a876:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a878:	f04f 0900 	mov.w	r9, #0
    a87c:	f04f 082c 	mov.w	r8, #44	; 0x2c
    a880:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    a882:	fb08 fa09 	mul.w	sl, r8, r9
    a886:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    a88a:	4649      	mov	r1, r9
    a88c:	fb17 a200 	smlabb	r2, r7, r0, sl
    a890:	4422      	add	r2, r4
    a892:	f7fb fe6f 	bl	6574 <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    a896:	2801      	cmp	r0, #1
    a898:	d109      	bne.n	a8ae <boot_read_image_headers+0x40>
    a89a:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    a89e:	4633      	mov	r3, r6
    a8a0:	fb17 a202 	smlabb	r2, r7, r2, sl
    a8a4:	4649      	mov	r1, r9
    a8a6:	4620      	mov	r0, r4
    a8a8:	4422      	add	r2, r4
    a8aa:	f000 f825 	bl	a8f8 <boot_read_image_header>
        if (rc != 0) {
    a8ae:	b138      	cbz	r0, a8c0 <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    a8b0:	f1b9 0f00 	cmp.w	r9, #0
    a8b4:	d002      	beq.n	a8bc <boot_read_image_headers+0x4e>
                return 0;
    a8b6:	2d00      	cmp	r5, #0
    a8b8:	bf08      	it	eq
    a8ba:	2000      	moveq	r0, #0
}
    a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a8c0:	f1b9 0f00 	cmp.w	r9, #0
    a8c4:	d1fa      	bne.n	a8bc <boot_read_image_headers+0x4e>
    a8c6:	f04f 0901 	mov.w	r9, #1
    a8ca:	e7da      	b.n	a882 <boot_read_image_headers+0x14>

0000a8cc <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    a8cc:	2301      	movs	r3, #1
    a8ce:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    a8d0:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    a8d4:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    a8d6:	2300      	movs	r3, #0
    bs->source = 0;
    a8d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    a8dc:	4770      	bx	lr

0000a8de <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    a8de:	7943      	ldrb	r3, [r0, #5]
    a8e0:	2b01      	cmp	r3, #1
    a8e2:	d107      	bne.n	a8f4 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    a8e4:	6803      	ldr	r3, [r0, #0]
    a8e6:	2b01      	cmp	r3, #1
    a8e8:	d104      	bne.n	a8f4 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    a8ea:	7900      	ldrb	r0, [r0, #4]
    a8ec:	1e43      	subs	r3, r0, #1
    a8ee:	4258      	negs	r0, r3
    a8f0:	4158      	adcs	r0, r3
    a8f2:	4770      	bx	lr
    a8f4:	2000      	movs	r0, #0
}
    a8f6:	4770      	bx	lr

0000a8f8 <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    a8f8:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a8fa:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    a8fe:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a900:	f7ff fe78 	bl	a5f4 <flash_area_id_from_multi_image_slot>

    rc = flash_area_open(area_id, &fap);
    a904:	a901      	add	r1, sp, #4
    a906:	b2c0      	uxtb	r0, r0
    a908:	f7f7 f9bc 	bl	1c84 <flash_area_open>
    if (rc == 0) {
    a90c:	4601      	mov	r1, r0
    a90e:	b968      	cbnz	r0, a92c <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    a910:	4622      	mov	r2, r4
    a912:	2320      	movs	r3, #32
    a914:	9801      	ldr	r0, [sp, #4]
    a916:	f000 fcfe 	bl	b316 <flash_area_read>
    a91a:	4604      	mov	r4, r0
        flash_area_close(fap);
    a91c:	9801      	ldr	r0, [sp, #4]
    a91e:	f000 fcf9 	bl	b314 <flash_area_close>
    }

    if (rc != 0) {
    a922:	1e20      	subs	r0, r4, #0
    a924:	bf18      	it	ne
    a926:	2001      	movne	r0, #1
        rc = BOOT_EFLASH;
    }

    return rc;
}
    a928:	b002      	add	sp, #8
    a92a:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    a92c:	2001      	movs	r0, #1
    return rc;
    a92e:	e7fb      	b.n	a928 <boot_read_image_header+0x30>

0000a930 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    a930:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    a932:	b5f0      	push	{r4, r5, r6, r7, lr}
    a934:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a938:	fb02 0303 	mla	r3, r2, r3, r0
    a93c:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    a940:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
    a944:	d836      	bhi.n	a9b4 <boot_slots_compatible+0x84>
    a946:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    a948:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    a94c:	d832      	bhi.n	a9b4 <boot_slots_compatible+0x84>
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    a94e:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    a950:	4608      	mov	r0, r1
    i = sz0 = primary_slot_sz = 0;
    a952:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    a954:	460d      	mov	r5, r1
    i = sz0 = primary_slot_sz = 0;
    a956:	460c      	mov	r4, r1
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    a958:	4562      	cmp	r2, ip
    a95a:	d307      	bcc.n	a96c <boot_slots_compatible+0x3c>
    a95c:	42b0      	cmp	r0, r6
    a95e:	d305      	bcc.n	a96c <boot_slots_compatible+0x3c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    a960:	4562      	cmp	r2, ip
    a962:	d127      	bne.n	a9b4 <boot_slots_compatible+0x84>
    a964:	1b83      	subs	r3, r0, r6
    a966:	4258      	negs	r0, r3
    a968:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    a96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    a96c:	42ac      	cmp	r4, r5
    a96e:	d10c      	bne.n	a98a <boot_slots_compatible+0x5a>
	return fs->fs_size;
    a970:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    a972:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a976:	687f      	ldr	r7, [r7, #4]
            i++;
    a978:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a97a:	443c      	add	r4, r7
    a97c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    a97e:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a982:	687f      	ldr	r7, [r7, #4]
            j++;
    a984:	3001      	adds	r0, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a986:	443d      	add	r5, r7
            j++;
    a988:	e7e6      	b.n	a958 <boot_slots_compatible+0x28>
        } else if (sz0 < sz1) {
    a98a:	d209      	bcs.n	a9a0 <boot_slots_compatible+0x70>
    a98c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
            if (smaller == 2) {
    a98e:	2902      	cmp	r1, #2
    a990:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a994:	687f      	ldr	r7, [r7, #4]
    a996:	443c      	add	r4, r7
            if (smaller == 2) {
    a998:	d00c      	beq.n	a9b4 <boot_slots_compatible+0x84>
            smaller = 1;
    a99a:	2101      	movs	r1, #1
            i++;
    a99c:	3201      	adds	r2, #1
    a99e:	e7db      	b.n	a958 <boot_slots_compatible+0x28>
    a9a0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
            if (smaller == 1) {
    a9a2:	2901      	cmp	r1, #1
    a9a4:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a9a8:	687f      	ldr	r7, [r7, #4]
    a9aa:	443d      	add	r5, r7
            if (smaller == 1) {
    a9ac:	d002      	beq.n	a9b4 <boot_slots_compatible+0x84>
            smaller = 2;
    a9ae:	2102      	movs	r1, #2
            j++;
    a9b0:	3001      	adds	r0, #1
    a9b2:	e7d1      	b.n	a958 <boot_slots_compatible+0x28>
        return 0;
    a9b4:	2000      	movs	r0, #0
    a9b6:	e7d8      	b.n	a96a <boot_slots_compatible+0x3a>

0000a9b8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a9b8:	4604      	mov	r4, r0
    a9ba:	b508      	push	{r3, lr}
    a9bc:	4608      	mov	r0, r1
    a9be:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a9c0:	461a      	mov	r2, r3
    a9c2:	47a0      	blx	r4
	return z_impl_z_current_get();
    a9c4:	f7ff f9b6 	bl	9d34 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a9c8:	f7f9 fbca 	bl	4160 <z_impl_k_thread_abort>

0000a9cc <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a9cc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a9ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a9d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    a9d6:	bf2c      	ite	cs
    a9d8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    a9dc:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    a9e0:	4770      	bx	lr

0000a9e2 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    a9e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    a9e6:	6880      	ldr	r0, [r0, #8]
    a9e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    a9ec:	bf2c      	ite	cs
    a9ee:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    a9f2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    a9f6:	4770      	bx	lr

0000a9f8 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a9f8:	2201      	movs	r2, #1
{
    a9fa:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a9fc:	f7ff ffe6 	bl	a9cc <chunk_field>
}
    aa00:	40d0      	lsrs	r0, r2
    aa02:	bd08      	pop	{r3, pc}

0000aa04 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    aa04:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    aa06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    aa0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    aa0e:	d308      	bcc.n	aa22 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    aa10:	684b      	ldr	r3, [r1, #4]
		if (used) {
    aa12:	b11a      	cbz	r2, aa1c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    aa14:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    aa18:	604b      	str	r3, [r1, #4]
    aa1a:	4770      	bx	lr
    aa1c:	f023 0301 	bic.w	r3, r3, #1
    aa20:	e7fa      	b.n	aa18 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    aa22:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    aa24:	b11a      	cbz	r2, aa2e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    aa26:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    aa2a:	804b      	strh	r3, [r1, #2]
		}
	}
}
    aa2c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    aa2e:	f023 0301 	bic.w	r3, r3, #1
    aa32:	e7fa      	b.n	aa2a <set_chunk_used+0x26>

0000aa34 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    aa34:	0053      	lsls	r3, r2, #1
    aa36:	2201      	movs	r2, #1
    aa38:	f7ff bfd3 	b.w	a9e2 <chunk_set>

0000aa3c <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    aa3c:	6883      	ldr	r3, [r0, #8]
    aa3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    aa42:	bf34      	ite	cc
    aa44:	2304      	movcc	r3, #4
    aa46:	2308      	movcs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    aa48:	1ac9      	subs	r1, r1, r3
    aa4a:	1a08      	subs	r0, r1, r0
}
    aa4c:	08c0      	lsrs	r0, r0, #3
    aa4e:	4770      	bx	lr

0000aa50 <bucket_idx.isra.0>:
    aa50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    aa54:	bf34      	ite	cc
    aa56:	2304      	movcc	r3, #4
    aa58:	2308      	movcs	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    aa5a:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    aa5c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    aa5e:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
    aa62:	fab0 f080 	clz	r0, r0
}
    aa66:	f1c0 001f 	rsb	r0, r0, #31
    aa6a:	4770      	bx	lr

0000aa6c <free_list_remove_bidx>:
{
    aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa70:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    aa72:	2203      	movs	r2, #3
    aa74:	460e      	mov	r6, r1
    aa76:	4604      	mov	r4, r0
    aa78:	f7ff ffa8 	bl	a9cc <chunk_field>
	if (next_free_chunk(h, c) == c) {
    aa7c:	4286      	cmp	r6, r0
    aa7e:	4605      	mov	r5, r0
    aa80:	f107 0804 	add.w	r8, r7, #4
    aa84:	d10a      	bne.n	aa9c <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
    aa86:	2201      	movs	r2, #1
    aa88:	68e3      	ldr	r3, [r4, #12]
    aa8a:	40ba      	lsls	r2, r7
    aa8c:	ea23 0302 	bic.w	r3, r3, r2
    aa90:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    aa92:	2300      	movs	r3, #0
    aa94:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    aa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    aa9c:	4631      	mov	r1, r6
    aa9e:	2202      	movs	r2, #2
    aaa0:	4620      	mov	r0, r4
    aaa2:	f7ff ff93 	bl	a9cc <chunk_field>
    aaa6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    aaa8:	462b      	mov	r3, r5
    aaaa:	4601      	mov	r1, r0
    aaac:	2203      	movs	r2, #3
    aaae:	4620      	mov	r0, r4
		b->next = second;
    aab0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    aab4:	f7ff ff95 	bl	a9e2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    aab8:	4633      	mov	r3, r6
    aaba:	4629      	mov	r1, r5
    aabc:	4620      	mov	r0, r4
}
    aabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aac2:	2202      	movs	r2, #2
    aac4:	f7ff bf8d 	b.w	a9e2 <chunk_set>

0000aac8 <free_list_remove>:
{
    aac8:	b570      	push	{r4, r5, r6, lr}
    aaca:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    aacc:	6886      	ldr	r6, [r0, #8]
    aace:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    aad0:	f7ff ff92 	bl	a9f8 <chunk_size>
    aad4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    aad8:	4601      	mov	r1, r0
    aada:	d301      	bcc.n	aae0 <free_list_remove+0x18>
    aadc:	2801      	cmp	r0, #1
    aade:	d009      	beq.n	aaf4 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    aae0:	4630      	mov	r0, r6
    aae2:	f7ff ffb5 	bl	aa50 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
    aae6:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    aae8:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    aaea:	4620      	mov	r0, r4
}
    aaec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
    aaf0:	f7ff bfbc 	b.w	aa6c <free_list_remove_bidx>
}
    aaf4:	bd70      	pop	{r4, r5, r6, pc}

0000aaf6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    aaf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aafa:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
    aafc:	6880      	ldr	r0, [r0, #8]
    aafe:	f7ff ffa7 	bl	aa50 <bucket_idx.isra.0>
    ab02:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    ab06:	f8da 9010 	ldr.w	r9, [sl, #16]
{
    ab0a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    ab0c:	4606      	mov	r6, r0
	if (b->next) {
    ab0e:	f1b9 0f00 	cmp.w	r9, #0
    ab12:	d01b      	beq.n	ab4c <alloc_chunk+0x56>
    ab14:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    ab16:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    ab1a:	4628      	mov	r0, r5
    ab1c:	4621      	mov	r1, r4
    ab1e:	f7ff ff6b 	bl	a9f8 <chunk_size>
    ab22:	4540      	cmp	r0, r8
    ab24:	d307      	bcc.n	ab36 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
    ab26:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    ab28:	4621      	mov	r1, r4
    ab2a:	4628      	mov	r0, r5
    ab2c:	f7ff ff9e 	bl	aa6c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    ab30:	4620      	mov	r0, r4
    ab32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
    ab36:	2203      	movs	r2, #3
    ab38:	4621      	mov	r1, r4
    ab3a:	4628      	mov	r0, r5
    ab3c:	f7ff ff46 	bl	a9cc <chunk_field>
		} while (--i && b->next != first);
    ab40:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    ab42:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    ab46:	d001      	beq.n	ab4c <alloc_chunk+0x56>
    ab48:	4581      	cmp	r9, r0
    ab4a:	d1e4      	bne.n	ab16 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    ab4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ab50:	68eb      	ldr	r3, [r5, #12]
    ab52:	3601      	adds	r6, #1
    ab54:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
    ab56:	401c      	ands	r4, r3
    ab58:	d0ea      	beq.n	ab30 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
    ab5a:	fa94 f2a4 	rbit	r2, r4
    ab5e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    ab62:	1d13      	adds	r3, r2, #4
    ab64:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    ab68:	e7de      	b.n	ab28 <alloc_chunk+0x32>

0000ab6a <split_chunks>:
{
    ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab6e:	4614      	mov	r4, r2
    ab70:	460e      	mov	r6, r1
    ab72:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
    ab74:	f7ff ff40 	bl	a9f8 <chunk_size>
	chunksz_t lsz = rc - lc;
    ab78:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
    ab7c:	1b37      	subs	r7, r6, r4
    ab7e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    ab80:	4642      	mov	r2, r8
    ab82:	4631      	mov	r1, r6
    ab84:	4628      	mov	r0, r5
    ab86:	f7ff ff55 	bl	aa34 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    ab8a:	463a      	mov	r2, r7
    ab8c:	4621      	mov	r1, r4
    ab8e:	4628      	mov	r0, r5
    ab90:	f7ff ff50 	bl	aa34 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ab94:	4643      	mov	r3, r8
    ab96:	2200      	movs	r2, #0
    ab98:	4621      	mov	r1, r4
    ab9a:	4628      	mov	r0, r5
    ab9c:	f7ff ff21 	bl	a9e2 <chunk_set>
	return c + chunk_size(h, c);
    aba0:	4621      	mov	r1, r4
    aba2:	4628      	mov	r0, r5
    aba4:	f7ff ff28 	bl	a9f8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aba8:	463b      	mov	r3, r7
    abaa:	1821      	adds	r1, r4, r0
    abac:	2200      	movs	r2, #0
    abae:	4628      	mov	r0, r5
}
    abb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    abb4:	f7ff bf15 	b.w	a9e2 <chunk_set>

0000abb8 <merge_chunks>:
{
    abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abbc:	4616      	mov	r6, r2
    abbe:	4604      	mov	r4, r0
    abc0:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    abc2:	f7ff ff19 	bl	a9f8 <chunk_size>
    abc6:	4631      	mov	r1, r6
    abc8:	4605      	mov	r5, r0
    abca:	4620      	mov	r0, r4
    abcc:	f7ff ff14 	bl	a9f8 <chunk_size>
    abd0:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
    abd2:	462a      	mov	r2, r5
    abd4:	4639      	mov	r1, r7
    abd6:	4620      	mov	r0, r4
    abd8:	f7ff ff2c 	bl	aa34 <set_chunk_size>
	return c + chunk_size(h, c);
    abdc:	4631      	mov	r1, r6
    abde:	4620      	mov	r0, r4
    abe0:	f7ff ff0a 	bl	a9f8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    abe4:	462b      	mov	r3, r5
    abe6:	1831      	adds	r1, r6, r0
    abe8:	2200      	movs	r2, #0
    abea:	4620      	mov	r0, r4
}
    abec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    abf0:	f7ff bef7 	b.w	a9e2 <chunk_set>

0000abf4 <free_list_add>:
{
    abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abf8:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    abfa:	6886      	ldr	r6, [r0, #8]
    abfc:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    abfe:	f7ff fefb 	bl	a9f8 <chunk_size>
    ac02:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    ac06:	4601      	mov	r1, r0
    ac08:	d301      	bcc.n	ac0e <free_list_add+0x1a>
    ac0a:	2801      	cmp	r0, #1
    ac0c:	d032      	beq.n	ac74 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
    ac0e:	4630      	mov	r0, r6
    ac10:	f7ff ff1e 	bl	aa50 <bucket_idx.isra.0>
	if (b->next == 0U) {
    ac14:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    ac18:	690e      	ldr	r6, [r1, #16]
    ac1a:	b996      	cbnz	r6, ac42 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
    ac1c:	2201      	movs	r2, #1
    ac1e:	68e3      	ldr	r3, [r4, #12]
    ac20:	4082      	lsls	r2, r0
    ac22:	4313      	orrs	r3, r2
    ac24:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    ac26:	2202      	movs	r2, #2
		b->next = c;
    ac28:	610d      	str	r5, [r1, #16]
    ac2a:	462b      	mov	r3, r5
    ac2c:	4629      	mov	r1, r5
    ac2e:	4620      	mov	r0, r4
    ac30:	f7ff fed7 	bl	a9e2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    ac34:	2203      	movs	r2, #3
    ac36:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    ac38:	4620      	mov	r0, r4
}
    ac3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac3e:	f7ff bed0 	b.w	a9e2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    ac42:	2202      	movs	r2, #2
    ac44:	4631      	mov	r1, r6
    ac46:	4620      	mov	r0, r4
    ac48:	f7ff fec0 	bl	a9cc <chunk_field>
    ac4c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    ac4e:	4603      	mov	r3, r0
    ac50:	4629      	mov	r1, r5
    ac52:	4620      	mov	r0, r4
    ac54:	f7ff fec5 	bl	a9e2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    ac58:	2203      	movs	r2, #3
    ac5a:	4633      	mov	r3, r6
    ac5c:	4629      	mov	r1, r5
    ac5e:	4620      	mov	r0, r4
    ac60:	f7ff febf 	bl	a9e2 <chunk_set>
    ac64:	4639      	mov	r1, r7
    ac66:	462b      	mov	r3, r5
    ac68:	4620      	mov	r0, r4
    ac6a:	f7ff feba 	bl	a9e2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    ac6e:	2202      	movs	r2, #2
    ac70:	4631      	mov	r1, r6
    ac72:	e7e1      	b.n	ac38 <free_list_add+0x44>
    ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ac78 <free_chunk>:
{
    ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac7a:	460c      	mov	r4, r1
    ac7c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    ac7e:	f7ff febb 	bl	a9f8 <chunk_size>
    ac82:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ac84:	2201      	movs	r2, #1
    ac86:	4631      	mov	r1, r6
    ac88:	4628      	mov	r0, r5
    ac8a:	f7ff fe9f 	bl	a9cc <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    ac8e:	07c3      	lsls	r3, r0, #31
    ac90:	d40c      	bmi.n	acac <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    ac92:	4631      	mov	r1, r6
    ac94:	4628      	mov	r0, r5
    ac96:	f7ff ff17 	bl	aac8 <free_list_remove>
	return c + chunk_size(h, c);
    ac9a:	4621      	mov	r1, r4
    ac9c:	4628      	mov	r0, r5
    ac9e:	f7ff feab 	bl	a9f8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    aca2:	4621      	mov	r1, r4
    aca4:	1822      	adds	r2, r4, r0
    aca6:	4628      	mov	r0, r5
    aca8:	f7ff ff86 	bl	abb8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    acac:	2200      	movs	r2, #0
    acae:	4621      	mov	r1, r4
    acb0:	4628      	mov	r0, r5
    acb2:	f7ff fe8b 	bl	a9cc <chunk_field>
    acb6:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    acb8:	2201      	movs	r2, #1
    acba:	4639      	mov	r1, r7
    acbc:	4628      	mov	r0, r5
    acbe:	f7ff fe85 	bl	a9cc <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    acc2:	ea10 0602 	ands.w	r6, r0, r2
    acc6:	d113      	bne.n	acf0 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    acc8:	4639      	mov	r1, r7
    acca:	4628      	mov	r0, r5
    accc:	f7ff fefc 	bl	aac8 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    acd0:	4621      	mov	r1, r4
    acd2:	4632      	mov	r2, r6
    acd4:	4628      	mov	r0, r5
    acd6:	f7ff fe79 	bl	a9cc <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    acda:	4622      	mov	r2, r4
    acdc:	1a21      	subs	r1, r4, r0
    acde:	4628      	mov	r0, r5
    ace0:	f7ff ff6a 	bl	abb8 <merge_chunks>
    ace4:	4621      	mov	r1, r4
    ace6:	4632      	mov	r2, r6
    ace8:	4628      	mov	r0, r5
    acea:	f7ff fe6f 	bl	a9cc <chunk_field>
    acee:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    acf0:	4621      	mov	r1, r4
    acf2:	4628      	mov	r0, r5
}
    acf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    acf8:	f7ff bf7c 	b.w	abf4 <free_list_add>

0000acfc <sys_heap_free>:
{
    acfc:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
    acfe:	b171      	cbz	r1, ad1e <sys_heap_free+0x22>
    ad00:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
    ad02:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
    ad04:	4628      	mov	r0, r5
    ad06:	f7ff fe99 	bl	aa3c <mem_to_chunkid>
    ad0a:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
    ad0c:	4601      	mov	r1, r0
    ad0e:	4628      	mov	r0, r5
    ad10:	f7ff fe78 	bl	aa04 <set_chunk_used>
	free_chunk(h, c);
    ad14:	4621      	mov	r1, r4
}
    ad16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
    ad1a:	f7ff bfad 	b.w	ac78 <free_chunk>
}
    ad1e:	bd38      	pop	{r3, r4, r5, pc}

0000ad20 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    ad20:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    ad22:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    ad24:	b909      	cbnz	r1, ad2a <sys_heap_alloc+0xa>
		return NULL;
    ad26:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ad28:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    ad2a:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
    ad2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ad30:	d9f9      	bls.n	ad26 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
    ad32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ad36:	bf34      	ite	cc
    ad38:	2304      	movcc	r3, #4
    ad3a:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ad3c:	1dcc      	adds	r4, r1, #7
    ad3e:	441c      	add	r4, r3
    ad40:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    ad42:	4621      	mov	r1, r4
    ad44:	4630      	mov	r0, r6
    ad46:	f7ff fed6 	bl	aaf6 <alloc_chunk>
	if (c == 0U) {
    ad4a:	4605      	mov	r5, r0
    ad4c:	2800      	cmp	r0, #0
    ad4e:	d0ea      	beq.n	ad26 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    ad50:	4601      	mov	r1, r0
    ad52:	4630      	mov	r0, r6
    ad54:	f7ff fe50 	bl	a9f8 <chunk_size>
    ad58:	42a0      	cmp	r0, r4
    ad5a:	d909      	bls.n	ad70 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    ad5c:	442c      	add	r4, r5
    ad5e:	4629      	mov	r1, r5
    ad60:	4630      	mov	r0, r6
    ad62:	4622      	mov	r2, r4
    ad64:	f7ff ff01 	bl	ab6a <split_chunks>
		free_list_add(h, c + chunk_sz);
    ad68:	4621      	mov	r1, r4
    ad6a:	4630      	mov	r0, r6
    ad6c:	f7ff ff42 	bl	abf4 <free_list_add>
	set_chunk_used(h, c, true);
    ad70:	4630      	mov	r0, r6
    ad72:	2201      	movs	r2, #1
    ad74:	4629      	mov	r1, r5
    ad76:	f7ff fe45 	bl	aa04 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    ad7a:	68b3      	ldr	r3, [r6, #8]
    ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ad80:	bf34      	ite	cc
    ad82:	2304      	movcc	r3, #4
    ad84:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ad86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    ad8a:	4418      	add	r0, r3
	return mem;
    ad8c:	e7cc      	b.n	ad28 <sys_heap_alloc+0x8>

0000ad8e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ad8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
    ad92:	6806      	ldr	r6, [r0, #0]
{
    ad94:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
    ad96:	68b2      	ldr	r2, [r6, #8]
    ad98:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	return big_heap(h) ? 8 : 4;
    ad9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ada0:	bf34      	ite	cc
    ada2:	2304      	movcc	r3, #4
    ada4:	2308      	movcs	r3, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ada6:	ea19 0901 	ands.w	r9, r9, r1
{
    adaa:	460f      	mov	r7, r1
	if (align != rew) {
    adac:	d00b      	beq.n	adc6 <sys_heap_aligned_alloc+0x38>
	rew = align & -align;
    adae:	4249      	negs	r1, r1
    adb0:	4039      	ands	r1, r7
    adb2:	428b      	cmp	r3, r1
    adb4:	464f      	mov	r7, r9
    adb6:	bf28      	it	cs
    adb8:	460b      	movcs	r3, r1
    adba:	4689      	mov	r9, r1
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    adbc:	b954      	cbnz	r4, add4 <sys_heap_aligned_alloc+0x46>
		return NULL;
    adbe:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    adc0:	4628      	mov	r0, r5
    adc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    adc6:	4299      	cmp	r1, r3
    adc8:	d8f8      	bhi.n	adbc <sys_heap_aligned_alloc+0x2e>
			return sys_heap_alloc(heap, bytes);
    adca:	4621      	mov	r1, r4
}
    adcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    add0:	f7ff bfa6 	b.w	ad20 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    add4:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    add8:	d9f1      	bls.n	adbe <sys_heap_aligned_alloc+0x30>
    adda:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    adde:	bf34      	ite	cc
    ade0:	2204      	movcc	r2, #4
    ade2:	2208      	movcs	r2, #8
    ade4:	1de1      	adds	r1, r4, #7
    ade6:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ade8:	1ac9      	subs	r1, r1, r3
    adea:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    adec:	4630      	mov	r0, r6
    adee:	08c9      	lsrs	r1, r1, #3
    adf0:	f7ff fe81 	bl	aaf6 <alloc_chunk>
	if (c0 == 0) {
    adf4:	4680      	mov	r8, r0
    adf6:	2800      	cmp	r0, #0
    adf8:	d0e1      	beq.n	adbe <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
    adfa:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    adfc:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    ae00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ae04:	bf34      	ite	cc
    ae06:	2304      	movcc	r3, #4
    ae08:	2308      	movcs	r3, #8
    ae0a:	441d      	add	r5, r3
    ae0c:	4435      	add	r5, r6
    ae0e:	1e7b      	subs	r3, r7, #1
    ae10:	441d      	add	r5, r3
    ae12:	427f      	negs	r7, r7
    ae14:	403d      	ands	r5, r7
    ae16:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
    ae1a:	4629      	mov	r1, r5
    ae1c:	4630      	mov	r0, r6
    ae1e:	f7ff fe0d 	bl	aa3c <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ae22:	442c      	add	r4, r5
    ae24:	3407      	adds	r4, #7
    ae26:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ae2a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ae2c:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
    ae2e:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
    ae30:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ae34:	d208      	bcs.n	ae48 <sys_heap_aligned_alloc+0xba>
		split_chunks(h, c0, c);
    ae36:	4602      	mov	r2, r0
    ae38:	4641      	mov	r1, r8
    ae3a:	4630      	mov	r0, r6
    ae3c:	f7ff fe95 	bl	ab6a <split_chunks>
		free_list_add(h, c0);
    ae40:	4641      	mov	r1, r8
    ae42:	4630      	mov	r0, r6
    ae44:	f7ff fed6 	bl	abf4 <free_list_add>
	return c + chunk_size(h, c);
    ae48:	4639      	mov	r1, r7
    ae4a:	4630      	mov	r0, r6
    ae4c:	f7ff fdd4 	bl	a9f8 <chunk_size>
    ae50:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ae52:	4284      	cmp	r4, r0
    ae54:	d208      	bcs.n	ae68 <sys_heap_aligned_alloc+0xda>
		split_chunks(h, c, c_end);
    ae56:	4639      	mov	r1, r7
    ae58:	4630      	mov	r0, r6
    ae5a:	4622      	mov	r2, r4
    ae5c:	f7ff fe85 	bl	ab6a <split_chunks>
		free_list_add(h, c_end);
    ae60:	4621      	mov	r1, r4
    ae62:	4630      	mov	r0, r6
    ae64:	f7ff fec6 	bl	abf4 <free_list_add>
	set_chunk_used(h, c, true);
    ae68:	2201      	movs	r2, #1
    ae6a:	4639      	mov	r1, r7
    ae6c:	4630      	mov	r0, r6
    ae6e:	f7ff fdc9 	bl	aa04 <set_chunk_used>
	return mem;
    ae72:	e7a5      	b.n	adc0 <sys_heap_aligned_alloc+0x32>

0000ae74 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    ae74:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae7a:	bf2c      	ite	cs
    ae7c:	2308      	movcs	r3, #8
    ae7e:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ae80:	1dce      	adds	r6, r1, #7
    ae82:	f026 0607 	bic.w	r6, r6, #7
	bytes -= heap_footer_bytes(bytes);
    ae86:	1ad2      	subs	r2, r2, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ae88:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    ae8a:	4637      	mov	r7, r6
    ae8c:	2200      	movs	r2, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ae8e:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ae92:	1ba4      	subs	r4, r4, r6
    ae94:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    ae96:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ae98:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
    ae9a:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ae9c:	4620      	mov	r0, r4
	h->avail_buckets = 0;
    ae9e:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    aea2:	f7ff fdd5 	bl	aa50 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    aea6:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    aea8:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    aeaa:	351b      	adds	r5, #27
    aeac:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    aeae:	4298      	cmp	r0, r3
    aeb0:	da2e      	bge.n	af10 <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    aeb2:	462a      	mov	r2, r5
    aeb4:	4630      	mov	r0, r6
    aeb6:	2100      	movs	r1, #0
    aeb8:	f7ff fdbc 	bl	aa34 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aebc:	2300      	movs	r3, #0
    aebe:	4630      	mov	r0, r6
    aec0:	461a      	mov	r2, r3
    aec2:	4619      	mov	r1, r3
    aec4:	f7ff fd8d 	bl	a9e2 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    aec8:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    aeca:	4619      	mov	r1, r3
    aecc:	4630      	mov	r0, r6
    aece:	2201      	movs	r2, #1
    aed0:	f7ff fd98 	bl	aa04 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    aed4:	463a      	mov	r2, r7
    aed6:	4629      	mov	r1, r5
    aed8:	f7ff fdac 	bl	aa34 <set_chunk_size>
    aedc:	462b      	mov	r3, r5
    aede:	2200      	movs	r2, #0
    aee0:	4629      	mov	r1, r5
    aee2:	4630      	mov	r0, r6
    aee4:	f7ff fd7d 	bl	a9e2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    aee8:	4621      	mov	r1, r4
    aeea:	4630      	mov	r0, r6
    aeec:	f7ff fda2 	bl	aa34 <set_chunk_size>
    aef0:	463b      	mov	r3, r7
    aef2:	4621      	mov	r1, r4
    aef4:	4630      	mov	r0, r6
    aef6:	2200      	movs	r2, #0
    aef8:	f7ff fd73 	bl	a9e2 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    aefc:	4621      	mov	r1, r4
    aefe:	4630      	mov	r0, r6
    af00:	2201      	movs	r2, #1
    af02:	f7ff fd7f 	bl	aa04 <set_chunk_used>

	free_list_add(h, chunk0_size);
    af06:	4629      	mov	r1, r5
}
    af08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    af0c:	f7ff be72 	b.w	abf4 <free_list_add>
		h->buckets[i].next = 0;
    af10:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    af14:	3301      	adds	r3, #1
    af16:	e7ca      	b.n	aeae <sys_heap_init+0x3a>

0000af18 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af18:	2200      	movs	r2, #0
	return list->head;
    af1a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af1c:	b90b      	cbnz	r3, af22 <sys_slist_find_and_remove+0xa>
    af1e:	4618      	mov	r0, r3
    af20:	4770      	bx	lr
    af22:	428b      	cmp	r3, r1
    af24:	d110      	bne.n	af48 <sys_slist_find_and_remove+0x30>
	return node->next;
    af26:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    af28:	b942      	cbnz	r2, af3c <sys_slist_find_and_remove+0x24>
    af2a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    af2c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    af2e:	4291      	cmp	r1, r2
    af30:	d100      	bne.n	af34 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    af32:	6043      	str	r3, [r0, #4]
	parent->next = child;
    af34:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af36:	2001      	movs	r0, #1
	parent->next = child;
    af38:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    af3a:	4770      	bx	lr
	parent->next = child;
    af3c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    af3e:	6843      	ldr	r3, [r0, #4]
    af40:	4299      	cmp	r1, r3
	list->tail = node;
    af42:	bf08      	it	eq
    af44:	6042      	streq	r2, [r0, #4]
}
    af46:	e7f5      	b.n	af34 <sys_slist_find_and_remove+0x1c>
	return node->next;
    af48:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af4a:	681b      	ldr	r3, [r3, #0]
    af4c:	e7e6      	b.n	af1c <sys_slist_find_and_remove+0x4>

0000af4e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af4e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    af50:	f013 0307 	ands.w	r3, r3, #7
    af54:	d105      	bne.n	af62 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    af56:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    af58:	2b00      	cmp	r3, #0
    af5a:	bf0c      	ite	eq
    af5c:	2000      	moveq	r0, #0
    af5e:	2003      	movne	r0, #3
    af60:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    af62:	2b02      	cmp	r3, #2
    af64:	d105      	bne.n	af72 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    af66:	8b40      	ldrh	r0, [r0, #26]
    af68:	fab0 f080 	clz	r0, r0
    af6c:	0940      	lsrs	r0, r0, #5
    af6e:	0080      	lsls	r0, r0, #2
    af70:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    af72:	2b01      	cmp	r3, #1
    af74:	d105      	bne.n	af82 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    af76:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    af78:	2b00      	cmp	r3, #0
    af7a:	bf0c      	ite	eq
    af7c:	2000      	moveq	r0, #0
    af7e:	2005      	movne	r0, #5
    af80:	4770      	bx	lr
	int evt = EVT_NOP;
    af82:	2000      	movs	r0, #0
}
    af84:	4770      	bx	lr

0000af86 <validate_args>:
{
    af86:	b510      	push	{r4, lr}
    af88:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    af8a:	b100      	cbz	r0, af8e <validate_args+0x8>
    af8c:	b911      	cbnz	r1, af94 <validate_args+0xe>
		return -EINVAL;
    af8e:	f06f 0015 	mvn.w	r0, #21
}
    af92:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    af94:	1d08      	adds	r0, r1, #4
    af96:	f000 f8d6 	bl	b146 <sys_notify_validate>
	if ((rv == 0)
    af9a:	2800      	cmp	r0, #0
    af9c:	d1f9      	bne.n	af92 <validate_args+0xc>
	    && ((cli->notify.flags
    af9e:	68a3      	ldr	r3, [r4, #8]
    afa0:	2b03      	cmp	r3, #3
    afa2:	d9f6      	bls.n	af92 <validate_args+0xc>
    afa4:	e7f3      	b.n	af8e <validate_args+0x8>

0000afa6 <notify_one>:
{
    afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afaa:	460d      	mov	r5, r1
    afac:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    afae:	4619      	mov	r1, r3
    afb0:	1d28      	adds	r0, r5, #4
{
    afb2:	4690      	mov	r8, r2
    afb4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    afb6:	f000 f8d7 	bl	b168 <sys_notify_finalize>
	if (cb) {
    afba:	4604      	mov	r4, r0
    afbc:	b138      	cbz	r0, afce <notify_one+0x28>
		cb(mgr, cli, state, res);
    afbe:	4633      	mov	r3, r6
    afc0:	4642      	mov	r2, r8
    afc2:	4629      	mov	r1, r5
    afc4:	4638      	mov	r0, r7
    afc6:	46a4      	mov	ip, r4
}
    afc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    afcc:	4760      	bx	ip
}
    afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000afd2 <transition_complete>:
{
    afd2:	b410      	push	{r4}
	__asm__ volatile(
    afd4:	f04f 0420 	mov.w	r4, #32
    afd8:	f3ef 8211 	mrs	r2, BASEPRI
    afdc:	f384 8812 	msr	BASEPRI_MAX, r4
    afe0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    afe4:	6141      	str	r1, [r0, #20]
}
    afe6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    afe8:	2101      	movs	r1, #1
    afea:	f7f6 ba9f 	b.w	152c <process_event>

0000afee <onoff_manager_init>:
{
    afee:	b538      	push	{r3, r4, r5, lr}
    aff0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    aff2:	4605      	mov	r5, r0
    aff4:	b158      	cbz	r0, b00e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    aff6:	b151      	cbz	r1, b00e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    aff8:	680b      	ldr	r3, [r1, #0]
    affa:	b143      	cbz	r3, b00e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    affc:	684b      	ldr	r3, [r1, #4]
    affe:	b133      	cbz	r3, b00e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b000:	221c      	movs	r2, #28
    b002:	2100      	movs	r1, #0
    b004:	f000 fc5e 	bl	b8c4 <memset>
	return 0;
    b008:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b00a:	612c      	str	r4, [r5, #16]
}
    b00c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b00e:	f06f 0015 	mvn.w	r0, #21
    b012:	e7fb      	b.n	b00c <onoff_manager_init+0x1e>

0000b014 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    b014:	b570      	push	{r4, r5, r6, lr}
    b016:	4605      	mov	r5, r0
    b018:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    b01a:	f7ff ffb4 	bl	af86 <validate_args>

	if (rv < 0) {
    b01e:	1e04      	subs	r4, r0, #0
    b020:	db15      	blt.n	b04e <onoff_request+0x3a>
    b022:	f04f 0320 	mov.w	r3, #32
    b026:	f3ef 8211 	mrs	r2, BASEPRI
    b02a:	f383 8812 	msr	BASEPRI_MAX, r3
    b02e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    b032:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b036:	8b6b      	ldrh	r3, [r5, #26]
    b038:	8b2c      	ldrh	r4, [r5, #24]
    b03a:	428b      	cmp	r3, r1
    b03c:	f004 0407 	and.w	r4, r4, #7
    b040:	d107      	bne.n	b052 <onoff_request+0x3e>
	__asm__ volatile(
    b042:	f382 8811 	msr	BASEPRI, r2
    b046:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    b04a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    b04e:	4620      	mov	r0, r4
    b050:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    b052:	2c02      	cmp	r4, #2
    b054:	d10c      	bne.n	b070 <onoff_request+0x5c>
		mgr->refs += 1U;
    b056:	3301      	adds	r3, #1
    b058:	836b      	strh	r3, [r5, #26]
    b05a:	f382 8811 	msr	BASEPRI, r2
    b05e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    b062:	2300      	movs	r3, #0
    b064:	4622      	mov	r2, r4
    b066:	4631      	mov	r1, r6
    b068:	4628      	mov	r0, r5
    b06a:	f7ff ff9c 	bl	afa6 <notify_one>
    b06e:	e7ee      	b.n	b04e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    b070:	2c06      	cmp	r4, #6
    b072:	d814      	bhi.n	b09e <onoff_request+0x8a>
    b074:	e8df f004 	tbb	[pc, r4]
    b078:	13131304 	.word	0x13131304
    b07c:	1a04      	.short	0x1a04
    b07e:	04          	.byte	0x04
    b07f:	00          	.byte	0x00
	parent->next = child;
    b080:	2300      	movs	r3, #0
    b082:	6033      	str	r3, [r6, #0]
	return list->tail;
    b084:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    b086:	b93b      	cbnz	r3, b098 <onoff_request+0x84>
	list->head = node;
    b088:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    b08c:	b9ac      	cbnz	r4, b0ba <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    b08e:	2102      	movs	r1, #2
    b090:	4628      	mov	r0, r5
    b092:	f7f6 fa4b 	bl	152c <process_event>
    b096:	e7da      	b.n	b04e <onoff_request+0x3a>
	parent->next = child;
    b098:	601e      	str	r6, [r3, #0]
	list->tail = node;
    b09a:	606e      	str	r6, [r5, #4]
}
    b09c:	e7f6      	b.n	b08c <onoff_request+0x78>
    b09e:	f382 8811 	msr	BASEPRI, r2
    b0a2:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    b0a6:	f06f 0404 	mvn.w	r4, #4
    b0aa:	e7d0      	b.n	b04e <onoff_request+0x3a>
    b0ac:	f382 8811 	msr	BASEPRI, r2
    b0b0:	f3bf 8f6f 	isb	sy
    b0b4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b0b8:	e7c9      	b.n	b04e <onoff_request+0x3a>
    b0ba:	f382 8811 	msr	BASEPRI, r2
    b0be:	f3bf 8f6f 	isb	sy
		if (notify) {
    b0c2:	e7c4      	b.n	b04e <onoff_request+0x3a>

0000b0c4 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    b0c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    b0c6:	f04f 0320 	mov.w	r3, #32
    b0ca:	f3ef 8211 	mrs	r2, BASEPRI
    b0ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b0d2:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b0d6:	8b04      	ldrh	r4, [r0, #24]
    b0d8:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    b0dc:	2c02      	cmp	r4, #2
    b0de:	d00a      	beq.n	b0f6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    b0e0:	2c01      	cmp	r4, #1
    b0e2:	bf0c      	ite	eq
    b0e4:	f06f 0004 	mvneq.w	r0, #4
    b0e8:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    b0ec:	f382 8811 	msr	BASEPRI, r2
    b0f0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    b0f4:	e008      	b.n	b108 <onoff_release+0x44>
	mgr->refs -= 1U;
    b0f6:	8b43      	ldrh	r3, [r0, #26]
    b0f8:	3b01      	subs	r3, #1
    b0fa:	b29b      	uxth	r3, r3
    b0fc:	8343      	strh	r3, [r0, #26]
	if (stop) {
    b0fe:	b923      	cbnz	r3, b10a <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    b100:	4621      	mov	r1, r4
    b102:	f7f6 fa13 	bl	152c <process_event>
	int rv = state;
    b106:	4620      	mov	r0, r4
}
    b108:	bd10      	pop	{r4, pc}
	int rv = state;
    b10a:	4620      	mov	r0, r4
    b10c:	e7ee      	b.n	b0ec <onoff_release+0x28>

0000b10e <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    b10e:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    b110:	b1b0      	cbz	r0, b140 <onoff_cancel+0x32>
    b112:	b1a9      	cbz	r1, b140 <onoff_cancel+0x32>
	__asm__ volatile(
    b114:	f04f 0220 	mov.w	r2, #32
    b118:	f3ef 8511 	mrs	r5, BASEPRI
    b11c:	f382 8812 	msr	BASEPRI_MAX, r2
    b120:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b124:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    b126:	f7ff fef7 	bl	af18 <sys_slist_find_and_remove>
    b12a:	b130      	cbz	r0, b13a <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b12c:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    b130:	f385 8811 	msr	BASEPRI, r5
    b134:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b138:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    b13a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b13e:	e7f7      	b.n	b130 <onoff_cancel+0x22>
		return -EINVAL;
    b140:	f06f 0015 	mvn.w	r0, #21
    b144:	e7f8      	b.n	b138 <onoff_cancel+0x2a>

0000b146 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b146:	4603      	mov	r3, r0
    b148:	b158      	cbz	r0, b162 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b14a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b14c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b150:	2a01      	cmp	r2, #1
    b152:	d003      	beq.n	b15c <sys_notify_validate+0x16>
    b154:	2a03      	cmp	r2, #3
    b156:	d104      	bne.n	b162 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    b158:	6802      	ldr	r2, [r0, #0]
    b15a:	b112      	cbz	r2, b162 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    b15c:	2000      	movs	r0, #0
    b15e:	6098      	str	r0, [r3, #8]
    b160:	4770      	bx	lr
    b162:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    b166:	4770      	bx	lr

0000b168 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b168:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    b16a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    b16c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    b170:	2a03      	cmp	r2, #3
    b172:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    b176:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    b178:	bf14      	ite	ne
    b17a:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b17c:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b17e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b180:	4770      	bx	lr

0000b182 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    b182:	440a      	add	r2, r1
    b184:	428a      	cmp	r2, r1
    b186:	d100      	bne.n	b18a <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    b188:	4770      	bx	lr
		seed ^= *src++;
    b18a:	f811 3b01 	ldrb.w	r3, [r1], #1
    b18e:	ba40      	rev16	r0, r0
    b190:	b280      	uxth	r0, r0
    b192:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    b194:	f3c0 1303 	ubfx	r3, r0, #4, #4
    b198:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    b19a:	0318      	lsls	r0, r3, #12
    b19c:	b280      	uxth	r0, r0
    b19e:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    b1a0:	0158      	lsls	r0, r3, #5
    b1a2:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    b1a6:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    b1a8:	e7ec      	b.n	b184 <crc16_itu_t+0x2>

0000b1aa <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b1aa:	4694      	mov	ip, r2
    b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ae:	4604      	mov	r4, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
	if (unlikely(wrap_size >= buf->size)) {
    b1b0:	69c3      	ldr	r3, [r0, #28]
	base = buf->put_base;
    b1b2:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    b1b4:	6845      	ldr	r5, [r0, #4]
    b1b6:	6940      	ldr	r0, [r0, #20]
    b1b8:	1baf      	subs	r7, r5, r6
    b1ba:	1a28      	subs	r0, r5, r0
    b1bc:	1a1a      	subs	r2, r3, r0
	if (unlikely(wrap_size >= buf->size)) {
    b1be:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    b1c0:	bf9c      	itt	ls
    b1c2:	1aff      	subls	r7, r7, r3
		base += buf->size;
    b1c4:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    b1c6:	4562      	cmp	r2, ip
    b1c8:	bf28      	it	cs
    b1ca:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b1cc:	1bd8      	subs	r0, r3, r7
	size = MIN(size, wrap_size);
    b1ce:	4290      	cmp	r0, r2
    b1d0:	bf28      	it	cs
    b1d2:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    b1d4:	6823      	ldr	r3, [r4, #0]
    b1d6:	1bad      	subs	r5, r5, r6
    b1d8:	442b      	add	r3, r5
    b1da:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    b1dc:	6863      	ldr	r3, [r4, #4]
    b1de:	4403      	add	r3, r0
    b1e0:	6063      	str	r3, [r4, #4]

	return size;
}
    b1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b1e4 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    b1e4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b1e8:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b1ea:	428a      	cmp	r2, r1
    b1ec:	d30c      	bcc.n	b208 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    b1ee:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    b1f0:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    b1f2:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    b1f4:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    b1f8:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b1fa:	428a      	cmp	r2, r1
    b1fc:	d901      	bls.n	b202 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    b1fe:	2000      	movs	r0, #0
    b200:	4770      	bx	lr
		buf->put_base += buf->size;
    b202:	4413      	add	r3, r2
    b204:	60c3      	str	r3, [r0, #12]
    b206:	e7fa      	b.n	b1fe <ring_buf_put_finish+0x1a>
		return -EINVAL;
    b208:	f06f 0015 	mvn.w	r0, #21
}
    b20c:	4770      	bx	lr

0000b20e <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    b20e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b212:	4680      	mov	r8, r0
    b214:	460e      	mov	r6, r1
    b216:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b218:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    b21a:	462a      	mov	r2, r5
    b21c:	a901      	add	r1, sp, #4
    b21e:	4640      	mov	r0, r8
    b220:	f7ff ffc3 	bl	b1aa <ring_buf_put_claim>
    b224:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    b226:	4602      	mov	r2, r0
    b228:	4631      	mov	r1, r6
    b22a:	9801      	ldr	r0, [sp, #4]
    b22c:	f000 fb3f 	bl	b8ae <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    b230:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    b232:	4427      	add	r7, r4
		data += partial_size;
    b234:	4426      	add	r6, r4
	} while (size && partial_size);
    b236:	d001      	beq.n	b23c <ring_buf_put+0x2e>
    b238:	2c00      	cmp	r4, #0
    b23a:	d1ee      	bne.n	b21a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    b23c:	4639      	mov	r1, r7
    b23e:	4640      	mov	r0, r8
    b240:	f7ff ffd0 	bl	b1e4 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b244:	4638      	mov	r0, r7
    b246:	b002      	add	sp, #8
    b248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b24c <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b24e:	4604      	mov	r4, r0
    b250:	4694      	mov	ip, r2
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    b252:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    b254:	6905      	ldr	r5, [r0, #16]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    b256:	68a3      	ldr	r3, [r4, #8]
	if (unlikely(wrap_size >= buf->size)) {
    b258:	69c0      	ldr	r0, [r0, #28]
	wrap_size = buf->get_head - base;
    b25a:	1baf      	subs	r7, r5, r6
    b25c:	1b5a      	subs	r2, r3, r5
	if (unlikely(wrap_size >= buf->size)) {
    b25e:	42b8      	cmp	r0, r7
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    b260:	bf9c      	itt	ls
    b262:	1836      	addls	r6, r6, r0
		wrap_size -= buf->size;
    b264:	1a3f      	subls	r7, r7, r0
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    b266:	4562      	cmp	r2, ip
    b268:	bf28      	it	cs
    b26a:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b26c:	1bc0      	subs	r0, r0, r7
	size = MIN(size, wrap_size);
    b26e:	4290      	cmp	r0, r2
    b270:	bf28      	it	cs
    b272:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
    b274:	6823      	ldr	r3, [r4, #0]
    b276:	1bad      	subs	r5, r5, r6
    b278:	442b      	add	r3, r5
    b27a:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    b27c:	6923      	ldr	r3, [r4, #16]
    b27e:	4403      	add	r3, r0
    b280:	6123      	str	r3, [r4, #16]

	return size;
}
    b282:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b284 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    b284:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    b288:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b28a:	428a      	cmp	r2, r1
    b28c:	d30c      	bcc.n	b2a8 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    b28e:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;
    b290:	e9c0 1104 	strd	r1, r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    b294:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	wrap_size = buf->get_tail - buf->get_base;
    b298:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b29a:	428a      	cmp	r2, r1
    b29c:	d901      	bls.n	b2a2 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    b29e:	2000      	movs	r0, #0
    b2a0:	4770      	bx	lr
		buf->get_base += buf->size;
    b2a2:	4413      	add	r3, r2
    b2a4:	6183      	str	r3, [r0, #24]
    b2a6:	e7fa      	b.n	b29e <ring_buf_get_finish+0x1a>
		return -EINVAL;
    b2a8:	f06f 0015 	mvn.w	r0, #21
}
    b2ac:	4770      	bx	lr

0000b2ae <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    b2ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b2b2:	4680      	mov	r8, r0
    b2b4:	460d      	mov	r5, r1
    b2b6:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b2b8:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    b2ba:	4632      	mov	r2, r6
    b2bc:	4640      	mov	r0, r8
    b2be:	a901      	add	r1, sp, #4
    b2c0:	f7ff ffc4 	bl	b24c <ring_buf_get_claim>
    b2c4:	4604      	mov	r4, r0
		if (data) {
    b2c6:	b12d      	cbz	r5, b2d4 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    b2c8:	4602      	mov	r2, r0
    b2ca:	9901      	ldr	r1, [sp, #4]
    b2cc:	4628      	mov	r0, r5
    b2ce:	f000 faee 	bl	b8ae <memcpy>
			data += partial_size;
    b2d2:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    b2d4:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    b2d6:	4427      	add	r7, r4
	} while (size && partial_size);
    b2d8:	d001      	beq.n	b2de <ring_buf_get+0x30>
    b2da:	2c00      	cmp	r4, #0
    b2dc:	d1ed      	bne.n	b2ba <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    b2de:	4639      	mov	r1, r7
    b2e0:	4640      	mov	r0, r8
    b2e2:	f7ff ffcf 	bl	b284 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b2e6:	4638      	mov	r0, r7
    b2e8:	b002      	add	sp, #8
    b2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b2ee <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b2ee:	4604      	mov	r4, r0
    b2f0:	b508      	push	{r3, lr}
	__asm__ volatile(
    b2f2:	f04f 0220 	mov.w	r2, #32
    b2f6:	f3ef 8311 	mrs	r3, BASEPRI
    b2fa:	f382 8812 	msr	BASEPRI_MAX, r2
    b2fe:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    b302:	f7fb f86f 	bl	63e4 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    b306:	4620      	mov	r0, r4
    b308:	f7f8 fee0 	bl	40cc <sys_arch_reboot>
	arch_cpu_idle();
    b30c:	f7f8 fc2e 	bl	3b6c <arch_cpu_idle>
    b310:	e7fc      	b.n	b30c <sys_reboot+0x1e>

0000b312 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    b312:	4770      	bx	lr

0000b314 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    b314:	4770      	bx	lr

0000b316 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    b316:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    b318:	b430      	push	{r4, r5}
    b31a:	4604      	mov	r4, r0
    b31c:	4618      	mov	r0, r3
    b31e:	db0b      	blt.n	b338 <flash_area_read+0x22>
    b320:	68a5      	ldr	r5, [r4, #8]
    b322:	4408      	add	r0, r1
    b324:	42a8      	cmp	r0, r5
    b326:	d807      	bhi.n	b338 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    b328:	68e0      	ldr	r0, [r4, #12]
    b32a:	6864      	ldr	r4, [r4, #4]
    b32c:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    b32e:	6884      	ldr	r4, [r0, #8]
    b330:	6824      	ldr	r4, [r4, #0]
    b332:	46a4      	mov	ip, r4
}
    b334:	bc30      	pop	{r4, r5}
    b336:	4760      	bx	ip
    b338:	f06f 0015 	mvn.w	r0, #21
    b33c:	bc30      	pop	{r4, r5}
    b33e:	4770      	bx	lr

0000b340 <flash_area_write>:
    b340:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    b342:	b430      	push	{r4, r5}
    b344:	4604      	mov	r4, r0
    b346:	4618      	mov	r0, r3
    b348:	db0b      	blt.n	b362 <flash_area_write+0x22>
    b34a:	68a5      	ldr	r5, [r4, #8]
    b34c:	4408      	add	r0, r1
    b34e:	42a8      	cmp	r0, r5
    b350:	d807      	bhi.n	b362 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    b352:	68e0      	ldr	r0, [r4, #12]
    b354:	6864      	ldr	r4, [r4, #4]
    b356:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    b358:	6884      	ldr	r4, [r0, #8]
    b35a:	6864      	ldr	r4, [r4, #4]
    b35c:	46a4      	mov	ip, r4
}
    b35e:	bc30      	pop	{r4, r5}
    b360:	4760      	bx	ip
    b362:	f06f 0015 	mvn.w	r0, #21
    b366:	bc30      	pop	{r4, r5}
    b368:	4770      	bx	lr

0000b36a <flash_area_erase>:
    b36a:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    b36c:	4603      	mov	r3, r0
    b36e:	b410      	push	{r4}
    b370:	4610      	mov	r0, r2
    b372:	db0a      	blt.n	b38a <flash_area_erase+0x20>
    b374:	689c      	ldr	r4, [r3, #8]
    b376:	4408      	add	r0, r1
    b378:	42a0      	cmp	r0, r4
    b37a:	d806      	bhi.n	b38a <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    b37c:	68d8      	ldr	r0, [r3, #12]
    b37e:	685b      	ldr	r3, [r3, #4]
    b380:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    b382:	6883      	ldr	r3, [r0, #8]
}
    b384:	bc10      	pop	{r4}
    b386:	689b      	ldr	r3, [r3, #8]
    b388:	4718      	bx	r3
    b38a:	f06f 0015 	mvn.w	r0, #21
    b38e:	bc10      	pop	{r4}
    b390:	4770      	bx	lr

0000b392 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    b392:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    b394:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    b396:	6883      	ldr	r3, [r0, #8]
    b398:	68db      	ldr	r3, [r3, #12]
    b39a:	4798      	blx	r3
}
    b39c:	6800      	ldr	r0, [r0, #0]
    b39e:	bd08      	pop	{r3, pc}

0000b3a0 <flash_area_erased_val>:
	return fa->fa_label;
}
#endif

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    b3a0:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    b3a2:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b3a4:	6883      	ldr	r3, [r0, #8]
    b3a6:	68db      	ldr	r3, [r3, #12]
    b3a8:	4798      	blx	r3

	return param->erase_value;
}
    b3aa:	7900      	ldrb	r0, [r0, #4]
    b3ac:	bd08      	pop	{r3, pc}

0000b3ae <get_sectors_cb>:
{
    b3ae:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    b3b0:	684c      	ldr	r4, [r1, #4]
    b3b2:	6803      	ldr	r3, [r0, #0]
    b3b4:	42a3      	cmp	r3, r4
    b3b6:	d201      	bcs.n	b3bc <get_sectors_cb+0xe>
		*bail_value = true;
    b3b8:	2001      	movs	r0, #1
}
    b3ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    b3bc:	688a      	ldr	r2, [r1, #8]
    b3be:	4422      	add	r2, r4
    b3c0:	4293      	cmp	r3, r2
    b3c2:	d301      	bcc.n	b3c8 <get_sectors_cb+0x1a>
		*bail_value = false;
    b3c4:	2000      	movs	r0, #0
    b3c6:	e7f8      	b.n	b3ba <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    b3c8:	694e      	ldr	r6, [r1, #20]
    b3ca:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    b3ce:	42b5      	cmp	r5, r6
    b3d0:	d303      	bcc.n	b3da <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    b3d2:	f06f 030b 	mvn.w	r3, #11
    b3d6:	618b      	str	r3, [r1, #24]
		return true;
    b3d8:	e7f4      	b.n	b3c4 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    b3da:	1b1b      	subs	r3, r3, r4
    b3dc:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    b3e0:	6843      	ldr	r3, [r0, #4]
    b3e2:	6908      	ldr	r0, [r1, #16]
    b3e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    b3e8:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    b3ea:	690b      	ldr	r3, [r1, #16]
    b3ec:	3301      	adds	r3, #1
    b3ee:	610b      	str	r3, [r1, #16]
	return true;
    b3f0:	e7e2      	b.n	b3b8 <get_sectors_cb+0xa>

0000b3f2 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    b3f2:	f010 0f70 	tst.w	r0, #112	; 0x70
    b3f6:	d109      	bne.n	b40c <get_ep_bm_from_addr+0x1a>
	ep_idx = ep & (~USB_EP_DIR_IN);
    b3f8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    b3fc:	f010 0f80 	tst.w	r0, #128	; 0x80
    b400:	f04f 0001 	mov.w	r0, #1
		ep_bm = BIT(ep_idx + 16);
    b404:	bf18      	it	ne
    b406:	3310      	addne	r3, #16
		ep_bm = BIT(ep_idx);
    b408:	4098      	lsls	r0, r3
    b40a:	4770      	bx	lr
	uint32_t ep_bm = 0;
    b40c:	2000      	movs	r0, #0
}
    b40e:	4770      	bx	lr

0000b410 <usb_write>:
{
    b410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b414:	4606      	mov	r6, r0
    b416:	460f      	mov	r7, r1
    b418:	4690      	mov	r8, r2
    b41a:	4699      	mov	r9, r3
    b41c:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b41e:	464b      	mov	r3, r9
    b420:	4642      	mov	r2, r8
    b422:	4639      	mov	r1, r7
    b424:	4630      	mov	r0, r6
    b426:	f7f9 fce7 	bl	4df8 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    b42a:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b42e:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    b430:	d103      	bne.n	b43a <usb_write+0x2a>
	z_impl_k_yield();
    b432:	f7fe fbcd 	bl	9bd0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    b436:	3d01      	subs	r5, #1
    b438:	d1f1      	bne.n	b41e <usb_write+0xe>
}
    b43a:	4620      	mov	r0, r4
    b43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b440 <usb_get_dev_data_by_cfg>:
	return list->head;
    b440:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b442:	b138      	cbz	r0, b454 <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    b444:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b448:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
    b44a:	685b      	ldr	r3, [r3, #4]
    b44c:	428b      	cmp	r3, r1
    b44e:	d001      	beq.n	b454 <usb_get_dev_data_by_cfg+0x14>
	return node->next;
    b450:	6840      	ldr	r0, [r0, #4]
    b452:	e7f6      	b.n	b442 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    b454:	4770      	bx	lr

0000b456 <usb_get_dev_data_by_iface>:
	return list->head;
    b456:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b458:	b148      	cbz	r0, b46e <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b45a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b45e:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
    b460:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    b462:	685b      	ldr	r3, [r3, #4]
    b464:	789b      	ldrb	r3, [r3, #2]
    b466:	428b      	cmp	r3, r1
    b468:	d001      	beq.n	b46e <usb_get_dev_data_by_iface+0x18>
	return node->next;
    b46a:	6840      	ldr	r0, [r0, #4]
    b46c:	e7f4      	b.n	b458 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    b46e:	4770      	bx	lr

0000b470 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    b470:	b530      	push	{r4, r5, lr}
	return list->head;
    b472:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b474:	b188      	cbz	r0, b49a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b476:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b47a:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
    b47c:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    b47e:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b480:	7f1d      	ldrb	r5, [r3, #28]
    b482:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    b484:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b486:	b2dc      	uxtb	r4, r3
    b488:	42a5      	cmp	r5, r4
    b48a:	d801      	bhi.n	b490 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    b48c:	6840      	ldr	r0, [r0, #4]
    b48e:	e7f1      	b.n	b474 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    b490:	3301      	adds	r3, #1
    b492:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    b496:	428c      	cmp	r4, r1
    b498:	d1f5      	bne.n	b486 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    b49a:	bd30      	pop	{r4, r5, pc}

0000b49c <usb_transfer_is_busy>:
{
    b49c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    b49e:	f7f7 f9cf 	bl	2840 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    b4a2:	b128      	cbz	r0, b4b0 <usb_transfer_is_busy+0x14>
    b4a4:	6840      	ldr	r0, [r0, #4]
    b4a6:	f110 0f10 	cmn.w	r0, #16
    b4aa:	bf14      	ite	ne
    b4ac:	2000      	movne	r0, #0
    b4ae:	2001      	moveq	r0, #1
}
    b4b0:	bd08      	pop	{r3, pc}

0000b4b2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b4b2:	1c4b      	adds	r3, r1, #1
    b4b4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    b4b6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    b4b8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b4ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    b4be:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    b4c0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    b4c4:	4770      	bx	lr

0000b4c6 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    b4c6:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    b4ca:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    b4ce:	4718      	bx	r3

0000b4d0 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    b4d0:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b4d2:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    b4d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    b4d8:	4770      	bx	lr

0000b4da <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b4da:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    b4dc:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    b4e0:	b108      	cbz	r0, b4e6 <cdc_acm_irq_tx_ready+0xc>
    b4e2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b4e6:	4770      	bx	lr

0000b4e8 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    b4e8:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b4ea:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    b4ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    b4f0:	4770      	bx	lr

0000b4f2 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    b4f2:	6903      	ldr	r3, [r0, #16]
}
    b4f4:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    b4f8:	4770      	bx	lr

0000b4fa <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b4fa:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    b4fc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    b500:	b112      	cbz	r2, b508 <cdc_acm_irq_is_pending+0xe>
    b502:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    b506:	b92a      	cbnz	r2, b514 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    b508:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    b50c:	b118      	cbz	r0, b516 <cdc_acm_irq_is_pending+0x1c>
    b50e:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    b512:	4770      	bx	lr
		return 1;
    b514:	2001      	movs	r0, #1
}
    b516:	4770      	bx	lr

0000b518 <cdc_acm_irq_update>:
}
    b518:	2001      	movs	r0, #1
    b51a:	4770      	bx	lr

0000b51c <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b51c:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    b51e:	e9c3 1200 	strd	r1, r2, [r3]
}
    b522:	4770      	bx	lr

0000b524 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    b524:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b526:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b528:	d008      	beq.n	b53c <cdc_acm_line_ctrl_get+0x18>
    b52a:	2904      	cmp	r1, #4
    b52c:	d00b      	beq.n	b546 <cdc_acm_line_ctrl_get+0x22>
    b52e:	2901      	cmp	r1, #1
    b530:	d10e      	bne.n	b550 <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		return 0;
    b536:	2000      	movs	r0, #0
		*val = (dev_data->line_state &
    b538:	6013      	str	r3, [r2, #0]
    b53a:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    b53c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    b540:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    b544:	e7f7      	b.n	b536 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    b546:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    b54a:	f003 0301 	and.w	r3, r3, #1
		return 0;
    b54e:	e7f2      	b.n	b536 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    b550:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b554:	4770      	bx	lr

0000b556 <cdc_acm_configure>:
}
    b556:	2000      	movs	r0, #0
    b558:	4770      	bx	lr

0000b55a <cdc_acm_config_get>:
{
    b55a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b55c:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b55e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b562:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    b564:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    b568:	b16a      	cbz	r2, b586 <cdc_acm_config_get+0x2c>
    b56a:	2a01      	cmp	r2, #1
    b56c:	bf0c      	ite	eq
    b56e:	2202      	moveq	r2, #2
    b570:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    b572:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    b574:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    b578:	1e50      	subs	r0, r2, #1
    b57a:	2803      	cmp	r0, #3
    b57c:	d805      	bhi.n	b58a <cdc_acm_config_get+0x30>
    b57e:	e8df f000 	tbb	[pc, r0]
    b582:	0505      	.short	0x0505
    b584:	0505      	.short	0x0505
	switch (dev_data->line_coding.bCharFormat) {
    b586:	2201      	movs	r2, #1
    b588:	e7f3      	b.n	b572 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    b58a:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    b58c:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    b58e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    b592:	2b06      	cmp	r3, #6
    b594:	d009      	beq.n	b5aa <cdc_acm_config_get+0x50>
    b596:	2b07      	cmp	r3, #7
    b598:	d009      	beq.n	b5ae <cdc_acm_config_get+0x54>
    b59a:	2b05      	cmp	r3, #5
    b59c:	bf0c      	ite	eq
    b59e:	2300      	moveq	r3, #0
    b5a0:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b5a2:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    b5a4:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b5a6:	71c8      	strb	r0, [r1, #7]
}
    b5a8:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    b5aa:	2301      	movs	r3, #1
    b5ac:	e7f9      	b.n	b5a2 <cdc_acm_config_get+0x48>
    b5ae:	2302      	movs	r3, #2
    b5b0:	e7f7      	b.n	b5a2 <cdc_acm_config_get+0x48>

0000b5b2 <cdc_acm_line_ctrl_set>:
{
    b5b2:	b508      	push	{r3, lr}
	switch (ctrl) {
    b5b4:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b5b6:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b5b8:	d03f      	beq.n	b63a <cdc_acm_line_ctrl_set+0x88>
    b5ba:	d813      	bhi.n	b5e4 <cdc_acm_line_ctrl_set+0x32>
    b5bc:	2910      	cmp	r1, #16
    b5be:	d032      	beq.n	b626 <cdc_acm_line_ctrl_set+0x74>
    b5c0:	d806      	bhi.n	b5d0 <cdc_acm_line_ctrl_set+0x1e>
    b5c2:	2901      	cmp	r1, #1
    b5c4:	d01e      	beq.n	b604 <cdc_acm_line_ctrl_set+0x52>
    b5c6:	2908      	cmp	r1, #8
    b5c8:	d020      	beq.n	b60c <cdc_acm_line_ctrl_set+0x5a>
    b5ca:	f06f 0012 	mvn.w	r0, #18
}
    b5ce:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    b5d0:	2920      	cmp	r1, #32
    b5d2:	d1fa      	bne.n	b5ca <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    b5d4:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b5d8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    b5dc:	b352      	cbz	r2, b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    b5de:	f041 0104 	orr.w	r1, r1, #4
    b5e2:	e027      	b.n	b634 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    b5e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    b5e8:	d030      	beq.n	b64c <cdc_acm_line_ctrl_set+0x9a>
    b5ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    b5ee:	d036      	beq.n	b65e <cdc_acm_line_ctrl_set+0xac>
    b5f0:	2980      	cmp	r1, #128	; 0x80
    b5f2:	d1ea      	bne.n	b5ca <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    b5f4:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b5f8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    b5fc:	b1d2      	cbz	r2, b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    b5fe:	f041 0110 	orr.w	r1, r1, #16
    b602:	e017      	b.n	b634 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    b604:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    b608:	2000      	movs	r0, #0
    b60a:	e7e0      	b.n	b5ce <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b60c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b610:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    b614:	b10a      	cbz	r2, b61a <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    b616:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b61a:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    b61e:	2101      	movs	r1, #1
    b620:	f7f7 fbdc 	bl	2ddc <cdc_acm_send_notification.isra.0>
		return 0;
    b624:	e7f0      	b.n	b608 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    b626:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b62a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    b62e:	b10a      	cbz	r2, b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    b630:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b634:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    b638:	e7f2      	b.n	b620 <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    b63a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b63e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    b642:	2a00      	cmp	r2, #0
    b644:	d0f6      	beq.n	b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    b646:	f041 0108 	orr.w	r1, r1, #8
    b64a:	e7f3      	b.n	b634 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    b64c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b650:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    b654:	2a00      	cmp	r2, #0
    b656:	d0ed      	beq.n	b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    b658:	f041 0120 	orr.w	r1, r1, #32
    b65c:	e7ea      	b.n	b634 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b65e:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b662:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    b666:	2a00      	cmp	r2, #0
    b668:	d0e4      	beq.n	b634 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    b66a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b66e:	e7e1      	b.n	b634 <cdc_acm_line_ctrl_set+0x82>

0000b670 <cdc_acm_fifo_read>:
{
    b670:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b672:	6904      	ldr	r4, [r0, #16]
{
    b674:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b676:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b67a:	f7ff fe18 	bl	b2ae <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b67e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b682:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b684:	689a      	ldr	r2, [r3, #8]
    b686:	6919      	ldr	r1, [r3, #16]
    b688:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    b68a:	bf04      	itt	eq
    b68c:	2200      	moveq	r2, #0
    b68e:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    b692:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
    b696:	b19a      	cbz	r2, b6c0 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    b698:	685a      	ldr	r2, [r3, #4]
    b69a:	6959      	ldr	r1, [r3, #20]
    b69c:	69db      	ldr	r3, [r3, #28]
    b69e:	1a52      	subs	r2, r2, r1
    b6a0:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    b6a2:	2b3f      	cmp	r3, #63	; 0x3f
    b6a4:	d90c      	bls.n	b6c0 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    b6a6:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    b6aa:	b133      	cbz	r3, b6ba <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    b6ac:	686b      	ldr	r3, [r5, #4]
    b6ae:	4622      	mov	r2, r4
    b6b0:	6a1b      	ldr	r3, [r3, #32]
    b6b2:	2100      	movs	r1, #0
    b6b4:	7b18      	ldrb	r0, [r3, #12]
    b6b6:	f7f7 fbb3 	bl	2e20 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    b6ba:	2300      	movs	r3, #0
    b6bc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    b6c0:	4630      	mov	r0, r6
    b6c2:	bd70      	pop	{r4, r5, r6, pc}

0000b6c4 <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b6c4:	2201      	movs	r2, #1
{
    b6c6:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b6c8:	f7ff ffd2 	bl	b670 <cdc_acm_fifo_read>
}
    b6cc:	3801      	subs	r0, #1
    b6ce:	bf18      	it	ne
    b6d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b6d4:	bd08      	pop	{r3, pc}

0000b6d6 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    b6d6:	2000      	movs	r0, #0
{
    b6d8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b6da:	f7ff fe08 	bl	b2ee <sys_reboot>

0000b6de <console_write>:
{
    b6de:	b570      	push	{r4, r5, r6, lr}
    b6e0:	4606      	mov	r6, r0
    b6e2:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    b6e4:	2400      	movs	r4, #0
    b6e6:	42ac      	cmp	r4, r5
    b6e8:	db00      	blt.n	b6ec <console_write+0xe>
}
    b6ea:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    b6ec:	5d30      	ldrb	r0, [r6, r4]
    b6ee:	f7f7 fd79 	bl	31e4 <console_out>
    b6f2:	3001      	adds	r0, #1
    b6f4:	d0f9      	beq.n	b6ea <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    b6f6:	3401      	adds	r4, #1
    b6f8:	e7f5      	b.n	b6e6 <console_write+0x8>

0000b6fa <erase_range>:
{
    b6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (end >= flash_area_get_size(fap)) {
    b6fc:	6883      	ldr	r3, [r0, #8]
{
    b6fe:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    b700:	429a      	cmp	r2, r3
{
    b702:	4606      	mov	r6, r0
    b704:	4611      	mov	r1, r2
    if (end >= flash_area_get_size(fap)) {
    b706:	d304      	bcc.n	b712 <erase_range+0x18>
        return -EINVAL;
    b708:	f06f 0415 	mvn.w	r4, #21
}
    b70c:	4620      	mov	r0, r4
    b70e:	b002      	add	sp, #8
    b710:	bd70      	pop	{r4, r5, r6, pc}
    if (end < start) {
    b712:	42a2      	cmp	r2, r4
    b714:	dbfa      	blt.n	b70c <erase_range+0x12>
    if (flash_area_get_sector(fap, end, &sect)) {
    b716:	466a      	mov	r2, sp
    b718:	f7fe ff83 	bl	a622 <flash_area_get_sector>
    b71c:	2800      	cmp	r0, #0
    b71e:	d1f3      	bne.n	b708 <erase_range+0xe>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    b720:	e9dd 3500 	ldrd	r3, r5, [sp]
    b724:	441d      	add	r5, r3
    rc = flash_area_erase(fap, start, size);
    b726:	4621      	mov	r1, r4
    b728:	4630      	mov	r0, r6
    b72a:	1b2a      	subs	r2, r5, r4
    b72c:	f7ff fe1d 	bl	b36a <flash_area_erase>
    if (rc != 0) {
    b730:	2800      	cmp	r0, #0
    b732:	d1e9      	bne.n	b708 <erase_range+0xe>
    return start + size;
    b734:	462c      	mov	r4, r5
    b736:	e7e9      	b.n	b70c <erase_range+0x12>

0000b738 <zcbor_map_decode_bulk>:

#include "zcbor_bulk.h"

int zcbor_map_decode_bulk(zcbor_state_t *zsd, struct zcbor_map_decode_key_val *map,
                          size_t map_size, size_t *matched)
{
    b738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b73c:	4605      	mov	r5, r0
    b73e:	460e      	mov	r6, r1
    b740:	4690      	mov	r8, r2
    b742:	461f      	mov	r7, r3
    bool ok;
    struct zcbor_map_decode_key_val *dptr = map;

    if (!zcbor_map_start_decode(zsd)) {
    b744:	f002 fbd4 	bl	def0 <zcbor_map_start_decode>
    b748:	b920      	cbnz	r0, b754 <zcbor_map_decode_bulk+0x1c>
        return -EBADMSG;
    b74a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
            ok = zcbor_any_skip(zsd, NULL);
        }
    } while (ok);

    return zcbor_map_end_decode(zsd) ? 0 : -EBADMSG;
}
    b74e:	b003      	add	sp, #12
    b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (dptr >= (map + map_size)) {
    b754:	f04f 0914 	mov.w	r9, #20
    *matched = 0;
    b758:	2300      	movs	r3, #0
    struct zcbor_map_decode_key_val *dptr = map;
    b75a:	4634      	mov	r4, r6
                dptr->found = true;
    b75c:	f04f 0b01 	mov.w	fp, #1
            if (dptr >= (map + map_size)) {
    b760:	fb09 6908 	mla	r9, r9, r8, r6
    *matched = 0;
    b764:	603b      	str	r3, [r7, #0]
        ok = zcbor_tstr_decode(zsd, &key);
    b766:	4669      	mov	r1, sp
    b768:	4628      	mov	r0, r5
    b76a:	f002 fbbe 	bl	deea <zcbor_tstr_decode>
        while (ok && map_count < map_size) {
    b76e:	bb60      	cbnz	r0, b7ca <zcbor_map_decode_bulk+0x92>
    return zcbor_map_end_decode(zsd) ? 0 : -EBADMSG;
    b770:	4628      	mov	r0, r5
    b772:	f002 fbd3 	bl	df1c <zcbor_map_end_decode>
    b776:	2800      	cmp	r0, #0
    b778:	d0e7      	beq.n	b74a <zcbor_map_decode_bulk+0x12>
    b77a:	2000      	movs	r0, #0
    b77c:	e7e7      	b.n	b74e <zcbor_map_decode_bulk+0x16>
                dptr = map;
    b77e:	45a1      	cmp	r9, r4
    b780:	bf98      	it	ls
    b782:	4634      	movls	r4, r6
            if (key.len == dptr->key.len        &&
    b784:	9a01      	ldr	r2, [sp, #4]
    b786:	6863      	ldr	r3, [r4, #4]
    b788:	429a      	cmp	r2, r3
    b78a:	d112      	bne.n	b7b2 <zcbor_map_decode_bulk+0x7a>
                memcmp(key.value, dptr->key.value, key.len) == 0) {
    b78c:	6821      	ldr	r1, [r4, #0]
    b78e:	9800      	ldr	r0, [sp, #0]
    b790:	f000 f866 	bl	b860 <memcmp>
            if (key.len == dptr->key.len        &&
    b794:	b968      	cbnz	r0, b7b2 <zcbor_map_decode_bulk+0x7a>
                if (dptr->found) {
    b796:	7c23      	ldrb	r3, [r4, #16]
    b798:	b9d3      	cbnz	r3, b7d0 <zcbor_map_decode_bulk+0x98>
                if (!dptr->decoder(zsd, dptr->value_ptr)) {
    b79a:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    b79e:	4628      	mov	r0, r5
    b7a0:	4798      	blx	r3
    b7a2:	b1c0      	cbz	r0, b7d6 <zcbor_map_decode_bulk+0x9e>
                dptr->found = true;
    b7a4:	f884 b010 	strb.w	fp, [r4, #16]
                ++(*matched);
    b7a8:	683b      	ldr	r3, [r7, #0]
                ++dptr;
    b7aa:	3414      	adds	r4, #20
                ++(*matched);
    b7ac:	3301      	adds	r3, #1
    b7ae:	603b      	str	r3, [r7, #0]
    } while (ok);
    b7b0:	e7d9      	b.n	b766 <zcbor_map_decode_bulk+0x2e>
            ++dptr;
    b7b2:	3414      	adds	r4, #20
            ++map_count;
    b7b4:	f10a 0a01 	add.w	sl, sl, #1
        while (ok && map_count < map_size) {
    b7b8:	45c2      	cmp	sl, r8
    b7ba:	d1e0      	bne.n	b77e <zcbor_map_decode_bulk+0x46>
            ok = zcbor_any_skip(zsd, NULL);
    b7bc:	2100      	movs	r1, #0
    b7be:	4628      	mov	r0, r5
    b7c0:	f002 fbc2 	bl	df48 <zcbor_any_skip>
    } while (ok);
    b7c4:	2800      	cmp	r0, #0
    b7c6:	d1ce      	bne.n	b766 <zcbor_map_decode_bulk+0x2e>
    b7c8:	e7d2      	b.n	b770 <zcbor_map_decode_bulk+0x38>
        size_t map_count = 0;
    b7ca:	f04f 0a00 	mov.w	sl, #0
    b7ce:	e7f3      	b.n	b7b8 <zcbor_map_decode_bulk+0x80>
                    return -EADDRINUSE;
    b7d0:	f06f 006f 	mvn.w	r0, #111	; 0x6f
    b7d4:	e7bb      	b.n	b74e <zcbor_map_decode_bulk+0x16>
                    return -ENOMSG;
    b7d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b7da:	e7b8      	b.n	b74e <zcbor_map_decode_bulk+0x16>

0000b7dc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b7dc:	f002 bd16 	b.w	e20c <z_fatal_error>

0000b7e0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    b7e0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    b7e2:	6800      	ldr	r0, [r0, #0]
    b7e4:	f002 bd12 	b.w	e20c <z_fatal_error>

0000b7e8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b7e8:	2100      	movs	r1, #0
    b7ea:	2001      	movs	r0, #1
    b7ec:	f7ff bff6 	b.w	b7dc <z_arm_fatal_error>

0000b7f0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b7f0:	b508      	push	{r3, lr}
	handler();
    b7f2:	f7f8 fa27 	bl	3c44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b7fa:	f7f8 badd 	b.w	3db8 <z_arm_exc_exit>

0000b7fe <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b7fe:	6e03      	ldr	r3, [r0, #96]	; 0x60
    b800:	f383 880b 	msr	PSPLIM, r3
}
    b804:	4770      	bx	lr

0000b806 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    b806:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    b80a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    b80e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    b810:	bf08      	it	eq
    b812:	f06f 0015 	mvneq.w	r0, #21
    b816:	4770      	bx	lr

0000b818 <mpu_configure_region>:
{
    b818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    b81a:	890a      	ldrh	r2, [r1, #8]
    b81c:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    b81e:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    b820:	684d      	ldr	r5, [r1, #4]
    b822:	f002 021f 	and.w	r2, r2, #31
    b826:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    b82a:	9300      	str	r3, [sp, #0]
    b82c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    b830:	f023 031f 	bic.w	r3, r3, #31
    b834:	1e6a      	subs	r2, r5, #1
    b836:	4413      	add	r3, r2
    b838:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    b83c:	2807      	cmp	r0, #7
    b83e:	9303      	str	r3, [sp, #12]
    b840:	d804      	bhi.n	b84c <mpu_configure_region+0x34>
	region_init(index, region_conf);
    b842:	4669      	mov	r1, sp
    b844:	f7f8 fcbe 	bl	41c4 <region_init>
}
    b848:	b004      	add	sp, #16
    b84a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b84c:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    b850:	e7fa      	b.n	b848 <mpu_configure_region+0x30>

0000b852 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b852:	4603      	mov	r3, r0
	size_t n = 0;
    b854:	2000      	movs	r0, #0

	while (*s != '\0') {
    b856:	5c1a      	ldrb	r2, [r3, r0]
    b858:	b902      	cbnz	r2, b85c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    b85a:	4770      	bx	lr
		n++;
    b85c:	3001      	adds	r0, #1
    b85e:	e7fa      	b.n	b856 <strlen+0x4>

0000b860 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    b860:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    b862:	b15a      	cbz	r2, b87c <memcmp+0x1c>
    b864:	3901      	subs	r1, #1
    b866:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    b868:	f810 2b01 	ldrb.w	r2, [r0], #1
    b86c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    b870:	42a0      	cmp	r0, r4
    b872:	d001      	beq.n	b878 <memcmp+0x18>
    b874:	429a      	cmp	r2, r3
    b876:	d0f7      	beq.n	b868 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    b878:	1ad0      	subs	r0, r2, r3
}
    b87a:	bd10      	pop	{r4, pc}
		return 0;
    b87c:	4610      	mov	r0, r2
    b87e:	e7fc      	b.n	b87a <memcmp+0x1a>

0000b880 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    b880:	1a43      	subs	r3, r0, r1
    b882:	4293      	cmp	r3, r2
{
    b884:	b510      	push	{r4, lr}
    b886:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    b88a:	d308      	bcc.n	b89e <memmove+0x1e>
	char *dest = d;
    b88c:	4602      	mov	r2, r0
    b88e:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    b890:	429a      	cmp	r2, r3
    b892:	d00b      	beq.n	b8ac <memmove+0x2c>
			*dest = *src;
    b894:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b898:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    b89c:	e7f8      	b.n	b890 <memmove+0x10>
    b89e:	440a      	add	r2, r1
			dest[n] = src[n];
    b8a0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    b8a4:	428a      	cmp	r2, r1
			dest[n] = src[n];
    b8a6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    b8aa:	d1f9      	bne.n	b8a0 <memmove+0x20>
		}
	}

	return d;
}
    b8ac:	bd10      	pop	{r4, pc}

0000b8ae <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b8ae:	b510      	push	{r4, lr}
    b8b0:	1e43      	subs	r3, r0, #1
    b8b2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    b8b4:	4291      	cmp	r1, r2
    b8b6:	d100      	bne.n	b8ba <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    b8b8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    b8ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    b8be:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    b8c2:	e7f7      	b.n	b8b4 <memcpy+0x6>

0000b8c4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    b8c4:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    b8c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    b8c8:	4402      	add	r2, r0
    b8ca:	4293      	cmp	r3, r2
    b8cc:	d100      	bne.n	b8d0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    b8ce:	4770      	bx	lr
		*(d_byte++) = c_byte;
    b8d0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b8d4:	e7f9      	b.n	b8ca <memset+0x6>

0000b8d6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    b8d6:	684b      	ldr	r3, [r1, #4]
    b8d8:	2b01      	cmp	r3, #1
    b8da:	dd07      	ble.n	b8ec <sprintf_out+0x16>
		*(p->ptr) = c;
    b8dc:	680b      	ldr	r3, [r1, #0]
    b8de:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    b8e0:	680b      	ldr	r3, [r1, #0]
    b8e2:	3301      	adds	r3, #1
    b8e4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    b8e6:	684b      	ldr	r3, [r1, #4]
    b8e8:	3b01      	subs	r3, #1
    b8ea:	604b      	str	r3, [r1, #4]
}
    b8ec:	2000      	movs	r0, #0
    b8ee:	4770      	bx	lr

0000b8f0 <setup>:
	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
	}

	return 0;
}
    b8f0:	2000      	movs	r0, #0
    b8f2:	4770      	bx	lr

0000b8f4 <ep_ctx_reset>:
{
    b8f4:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    b8f6:	6903      	ldr	r3, [r0, #16]
{
    b8f8:	4604      	mov	r4, r0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    b8fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    b8fe:	2300      	movs	r3, #0
    b900:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    b902:	7f83      	ldrb	r3, [r0, #30]
    b904:	b113      	cbz	r3, b90c <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    b906:	7a40      	ldrb	r0, [r0, #9]
    b908:	f002 f95f 	bl	dbca <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    b90c:	2301      	movs	r3, #1
    b90e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    b910:	2300      	movs	r3, #0
    b912:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    b914:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    b916:	77a3      	strb	r3, [r4, #30]
}
    b918:	bd10      	pop	{r4, pc}

0000b91a <attached_evt_delay_handler>:
	submit_dc_power_event(USBD_ATTACHED);
    b91a:	2001      	movs	r0, #1
    b91c:	f7f8 be44 	b.w	45a8 <submit_dc_power_event>

0000b920 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b920:	f7fd bd5a 	b.w	93d8 <z_impl_k_mutex_lock>

0000b924 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b924:	f7fd bdd2 	b.w	94cc <z_impl_k_mutex_unlock>

0000b928 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b928:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b92a:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b92c:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b930:	b921      	cbnz	r1, b93c <usb_dc_ep_check_cap+0x14>
    b932:	3a00      	subs	r2, #0
    b934:	bf18      	it	ne
    b936:	2201      	movne	r2, #1
    b938:	4250      	negs	r0, r2
    b93a:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    b93c:	2a08      	cmp	r2, #8
    b93e:	d806      	bhi.n	b94e <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    b940:	2901      	cmp	r1, #1
    b942:	d107      	bne.n	b954 <usb_dc_ep_check_cap+0x2c>
    b944:	f083 0008 	eor.w	r0, r3, #8
    b948:	f340 00c0 	sbfx	r0, r0, #3, #1
    b94c:	4770      	bx	lr
		return -1;
    b94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b952:	4770      	bx	lr
	return 0;
    b954:	2000      	movs	r0, #0
}
    b956:	4770      	bx	lr

0000b958 <usb_dc_ep_disable>:
{
    b958:	b538      	push	{r3, r4, r5, lr}
    b95a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    b95c:	f7f8 fdbc 	bl	44d8 <endpoint_ctx>
	if (!ep_ctx) {
    b960:	4605      	mov	r5, r0
    b962:	b160      	cbz	r0, b97e <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    b964:	7a03      	ldrb	r3, [r0, #8]
    b966:	b16b      	cbz	r3, b984 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b968:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    b96a:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b96c:	f7fd fa06 	bl	8d7c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    b970:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    b972:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    b974:	f7ff ffbe 	bl	b8f4 <ep_ctx_reset>
	return 0;
    b978:	4620      	mov	r0, r4
	ep_ctx->cfg.en = false;
    b97a:	722c      	strb	r4, [r5, #8]
}
    b97c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b97e:	f06f 0015 	mvn.w	r0, #21
    b982:	e7fb      	b.n	b97c <usb_dc_ep_disable+0x24>
		return -EALREADY;
    b984:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b988:	e7f8      	b.n	b97c <usb_dc_ep_disable+0x24>

0000b98a <usb_dc_ep_read>:
{
    b98a:	b570      	push	{r4, r5, r6, lr}
    b98c:	4604      	mov	r4, r0
    b98e:	460e      	mov	r6, r1
    b990:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    b992:	f7f9 faad 	bl	4ef0 <usb_dc_ep_read_wait>
	if (ret) {
    b996:	b930      	cbnz	r0, b9a6 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    b998:	b906      	cbnz	r6, b99c <usb_dc_ep_read+0x12>
    b99a:	b125      	cbz	r5, b9a6 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    b99c:	4620      	mov	r0, r4
}
    b99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    b9a2:	f7f9 baed 	b.w	4f80 <usb_dc_ep_read_continue>
}
    b9a6:	bd70      	pop	{r4, r5, r6, pc}

0000b9a8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b9a8:	220c      	movs	r2, #12
    b9aa:	6903      	ldr	r3, [r0, #16]
    b9ac:	b2c9      	uxtb	r1, r1
    b9ae:	fb01 3302 	mla	r3, r1, r2, r3
    b9b2:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    b9b4:	f000 0007 	and.w	r0, r0, #7
    b9b8:	4770      	bx	lr

0000b9ba <set_on_state>:
    b9ba:	f04f 0320 	mov.w	r3, #32
    b9be:	f3ef 8211 	mrs	r2, BASEPRI
    b9c2:	f383 8812 	msr	BASEPRI_MAX, r3
    b9c6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b9ca:	6803      	ldr	r3, [r0, #0]
    b9cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b9d0:	f043 0302 	orr.w	r3, r3, #2
    b9d4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b9d6:	f382 8811 	msr	BASEPRI, r2
    b9da:	f3bf 8f6f 	isb	sy
}
    b9de:	4770      	bx	lr

0000b9e0 <stop>:
{
    b9e0:	b570      	push	{r4, r5, r6, lr}
    b9e2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    b9e4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    b9e6:	f04f 0420 	mov.w	r4, #32
    b9ea:	f3ef 8511 	mrs	r5, BASEPRI
    b9ee:	f384 8812 	msr	BASEPRI_MAX, r4
    b9f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b9f6:	260c      	movs	r6, #12
    b9f8:	fb06 3401 	mla	r4, r6, r1, r3
    b9fc:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b9fe:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    ba02:	d008      	beq.n	ba16 <stop+0x36>
    ba04:	42a2      	cmp	r2, r4
    ba06:	d006      	beq.n	ba16 <stop+0x36>
	__asm__ volatile(
    ba08:	f385 8811 	msr	BASEPRI, r5
    ba0c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    ba10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ba14:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ba16:	2201      	movs	r2, #1
    ba18:	fb06 3301 	mla	r3, r6, r1, r3
    ba1c:	679a      	str	r2, [r3, #120]	; 0x78
    ba1e:	f385 8811 	msr	BASEPRI, r5
    ba22:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    ba26:	6843      	ldr	r3, [r0, #4]
    ba28:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ba2c:	685b      	ldr	r3, [r3, #4]
    ba2e:	4798      	blx	r3
	return 0;
    ba30:	2000      	movs	r0, #0
    ba32:	e7ef      	b.n	ba14 <stop+0x34>

0000ba34 <api_stop>:
	return stop(dev, subsys, CTX_API);
    ba34:	2280      	movs	r2, #128	; 0x80
    ba36:	f7ff bfd3 	b.w	b9e0 <stop>

0000ba3a <async_start>:
{
    ba3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba3c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    ba3e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    ba40:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ba42:	f04f 0520 	mov.w	r5, #32
    ba46:	f3ef 8611 	mrs	r6, BASEPRI
    ba4a:	f385 8812 	msr	BASEPRI_MAX, r5
    ba4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ba52:	250c      	movs	r5, #12
    ba54:	fb05 4401 	mla	r4, r5, r1, r4
    ba58:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ba5a:	f005 0c07 	and.w	ip, r5, #7
    ba5e:	f1bc 0f01 	cmp.w	ip, #1
    ba62:	d10c      	bne.n	ba7e <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ba64:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    ba66:	f386 8811 	msr	BASEPRI, r6
    ba6a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    ba6e:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    ba72:	6843      	ldr	r3, [r0, #4]
    ba74:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    ba78:	4798      	blx	r3
	return 0;
    ba7a:	2000      	movs	r0, #0
}
    ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ba7e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ba82:	42af      	cmp	r7, r5
    ba84:	f386 8811 	msr	BASEPRI, r6
    ba88:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    ba8c:	bf0c      	ite	eq
    ba8e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    ba92:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ba96:	e7f1      	b.n	ba7c <async_start+0x42>

0000ba98 <api_start>:
{
    ba98:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ba9a:	2480      	movs	r4, #128	; 0x80
    ba9c:	9400      	str	r4, [sp, #0]
    ba9e:	f7ff ffcc 	bl	ba3a <async_start>
}
    baa2:	b002      	add	sp, #8
    baa4:	bd10      	pop	{r4, pc}

0000baa6 <onoff_started_callback>:
{
    baa6:	b410      	push	{r4}
	notify(mgr, 0);
    baa8:	241c      	movs	r4, #28
	return &data->mgr[type];
    baaa:	6900      	ldr	r0, [r0, #16]
    baac:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    baae:	fb03 0004 	mla	r0, r3, r4, r0
    bab2:	2100      	movs	r1, #0
}
    bab4:	bc10      	pop	{r4}
	notify(mgr, 0);
    bab6:	4710      	bx	r2

0000bab8 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    bab8:	2003      	movs	r0, #3
    baba:	f001 bf0d 	b.w	d8d8 <nrfx_clock_start>

0000babe <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    babe:	2002      	movs	r0, #2
    bac0:	f001 bf0a 	b.w	d8d8 <nrfx_clock_start>

0000bac4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    bac4:	2000      	movs	r0, #0
    bac6:	f001 bf07 	b.w	d8d8 <nrfx_clock_start>

0000baca <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    baca:	2003      	movs	r0, #3
    bacc:	f001 bf63 	b.w	d996 <nrfx_clock_stop>

0000bad0 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    bad0:	2002      	movs	r0, #2
    bad2:	f001 bf60 	b.w	d996 <nrfx_clock_stop>

0000bad6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bad6:	2000      	movs	r0, #0
    bad8:	f001 bf5d 	b.w	d996 <nrfx_clock_stop>

0000badc <blocking_start_callback>:
{
    badc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    bade:	f7fd bd65 	b.w	95ac <z_impl_k_sem_give>

0000bae2 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    bae2:	b918      	cbnz	r0, baec <qspi_handler+0xa>
    bae4:	f101 0020 	add.w	r0, r1, #32
    bae8:	f7fd bd60 	b.w	95ac <z_impl_k_sem_give>
}
    baec:	4770      	bx	lr

0000baee <qspi_lock.isra.0>:
static inline void qspi_lock(const struct device *dev)
    baee:	b510      	push	{r4, lr}
    baf0:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
    baf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    baf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bafa:	3010      	adds	r0, #16
    bafc:	f7fd fd7a 	bl	95f4 <z_impl_k_sem_take>
	if (!dev_data->xip_enabled) {
    bb00:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    bb04:	b923      	cbnz	r3, bb10 <qspi_lock.isra.0+0x22>
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    bb06:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    bb0a:	2201      	movs	r2, #1
    bb0c:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
}
    bb10:	bd10      	pop	{r4, pc}

0000bb12 <qspi_trans_lock.isra.0>:
    bb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bb16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb1a:	f7fd bd6b 	b.w	95f4 <z_impl_k_sem_take>

0000bb1e <qspi_unlock.isra.0>:
	if (!dev_data->xip_enabled) {
    bb1e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    bb22:	b923      	cbnz	r3, bb2e <qspi_unlock.isra.0+0x10>
    bb24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    bb28:	2202      	movs	r2, #2
    bb2a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	z_impl_k_sem_give(sem);
    bb2e:	3010      	adds	r0, #16
    bb30:	f7fd bd3c 	b.w	95ac <z_impl_k_sem_give>

0000bb34 <qspi_send_cmd>:
{
    bb34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cmd->tx_buf) {
    bb36:	684c      	ldr	r4, [r1, #4]
{
    bb38:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
    bb3a:	b364      	cbz	r4, bb96 <qspi_send_cmd+0x62>
		tx_buf = cmd->tx_buf->buf;
    bb3c:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    bb40:	6888      	ldr	r0, [r1, #8]
    bb42:	b350      	cbz	r0, bb9a <qspi_send_cmd+0x66>
		rx_len = cmd->rx_buf->len;
    bb44:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    bb48:	b340      	cbz	r0, bb9c <qspi_send_cmd+0x68>
    bb4a:	b33b      	cbz	r3, bb9c <qspi_send_cmd+0x68>
		if (rx_len != tx_len) {
    bb4c:	4298      	cmp	r0, r3
    bb4e:	d128      	bne.n	bba2 <qspi_send_cmd+0x6e>
		xfer_len += tx_len;
    bb50:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    bb52:	2b09      	cmp	r3, #9
    bb54:	d825      	bhi.n	bba2 <qspi_send_cmd+0x6e>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bb56:	f88d 3001 	strb.w	r3, [sp, #1]
    bb5a:	f240 1301 	movw	r3, #257	; 0x101
    bb5e:	f8ad 3002 	strh.w	r3, [sp, #2]
    bb62:	2300      	movs	r3, #0
    bb64:	7809      	ldrb	r1, [r1, #0]
	qspi_lock(dev);
    bb66:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bb68:	f88d 3004 	strb.w	r3, [sp, #4]
    bb6c:	f88d 1000 	strb.w	r1, [sp]
    bb70:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    bb74:	f7ff ffbb 	bl	baee <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    bb78:	4621      	mov	r1, r4
    bb7a:	4632      	mov	r2, r6
    bb7c:	4668      	mov	r0, sp
    bb7e:	f7fc f9bb 	bl	7ef8 <nrfx_qspi_cinstr_xfer>
    bb82:	4604      	mov	r4, r0
	qspi_unlock(dev);
    bb84:	6928      	ldr	r0, [r5, #16]
    bb86:	f7ff ffca 	bl	bb1e <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
    bb8a:	4620      	mov	r0, r4
}
    bb8c:	b002      	add	sp, #8
    bb8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    bb92:	f7f9 bbed 	b.w	5370 <qspi_get_zephyr_ret_code>
	size_t tx_len = 0;
    bb96:	4623      	mov	r3, r4
    bb98:	e7d2      	b.n	bb40 <qspi_send_cmd+0xc>
	void *rx_buf = NULL;
    bb9a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    bb9c:	3301      	adds	r3, #1
    bb9e:	4403      	add	r3, r0
    bba0:	e7d7      	b.n	bb52 <qspi_send_cmd+0x1e>
}
    bba2:	f06f 0015 	mvn.w	r0, #21
    bba6:	b002      	add	sp, #8
    bba8:	bd70      	pop	{r4, r5, r6, pc}

0000bbaa <qspi_nor_write_protection_set>:
{
    bbaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    bbac:	2200      	movs	r2, #0
    bbae:	4291      	cmp	r1, r2
    bbb0:	bf0c      	ite	eq
    bbb2:	2306      	moveq	r3, #6
    bbb4:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    bbb6:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    bbb8:	e9cd 2201 	strd	r2, r2, [sp, #4]
    bbbc:	9203      	str	r2, [sp, #12]
    bbbe:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    bbc2:	f7ff ffb7 	bl	bb34 <qspi_send_cmd>
		ret = -EIO;
    bbc6:	2800      	cmp	r0, #0
}
    bbc8:	bf18      	it	ne
    bbca:	f06f 0004 	mvnne.w	r0, #4
    bbce:	b005      	add	sp, #20
    bbd0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bbd4 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    bbd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    bbd6:	23ff      	movs	r3, #255	; 0xff
    bbd8:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    bbdc:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    bbe0:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    bbe2:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    bbe4:	2301      	movs	r3, #1
    bbe6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    bbea:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    bbec:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    bbee:	f88d 300c 	strb.w	r3, [sp, #12]
    bbf2:	ab01      	add	r3, sp, #4
    bbf4:	9204      	str	r2, [sp, #16]
    bbf6:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    bbf8:	f7ff ff9c 	bl	bb34 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    bbfc:	2800      	cmp	r0, #0
    bbfe:	bfa8      	it	ge
    bc00:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    bc04:	b007      	add	sp, #28
    bc06:	f85d fb04 	ldr.w	pc, [sp], #4

0000bc0a <is_regular_addr_valid>:
{
    bc0a:	b538      	push	{r3, r4, r5, lr}
    bc0c:	4605      	mov	r5, r0
    bc0e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    bc10:	f001 ff2e 	bl	da70 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    bc14:	2d00      	cmp	r5, #0
    bc16:	db07      	blt.n	bc28 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    bc18:	42a8      	cmp	r0, r5
    bc1a:	d905      	bls.n	bc28 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    bc1c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    bc1e:	4284      	cmp	r4, r0
    bc20:	bf8c      	ite	hi
    bc22:	2000      	movhi	r0, #0
    bc24:	2001      	movls	r0, #1
}
    bc26:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    bc28:	2000      	movs	r0, #0
    bc2a:	e7fc      	b.n	bc26 <is_regular_addr_valid+0x1c>

0000bc2c <flash_nrf_read>:
{
    bc2c:	b570      	push	{r4, r5, r6, lr}
    bc2e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    bc30:	4619      	mov	r1, r3
    bc32:	4628      	mov	r0, r5
{
    bc34:	4616      	mov	r6, r2
    bc36:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    bc38:	f7ff ffe7 	bl	bc0a <is_regular_addr_valid>
    bc3c:	b138      	cbz	r0, bc4e <flash_nrf_read+0x22>
	if (!len) {
    bc3e:	b124      	cbz	r4, bc4a <flash_nrf_read+0x1e>
    memcpy(dst, (void *)address, num_bytes);
    bc40:	4622      	mov	r2, r4
    bc42:	4629      	mov	r1, r5
    bc44:	4630      	mov	r0, r6
    bc46:	f7ff fe32 	bl	b8ae <memcpy>
		return 0;
    bc4a:	2000      	movs	r0, #0
}
    bc4c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    bc4e:	f06f 0015 	mvn.w	r0, #21
    bc52:	e7fb      	b.n	bc4c <flash_nrf_read+0x20>

0000bc54 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    bc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bc56:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    bc58:	2300      	movs	r3, #0
{
    bc5a:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
    bc5c:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    bc5e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    bc60:	60a3      	str	r3, [r4, #8]
{
    bc62:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    bc64:	6913      	ldr	r3, [r2, #16]
    bc66:	4669      	mov	r1, sp
    bc68:	aa01      	add	r2, sp, #4
    bc6a:	4798      	blx	r3

	while (layout_size--) {
    bc6c:	9b01      	ldr	r3, [sp, #4]
    bc6e:	1e5a      	subs	r2, r3, #1
    bc70:	9201      	str	r2, [sp, #4]
    bc72:	b91b      	cbnz	r3, bc7c <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    bc74:	f06f 0015 	mvn.w	r0, #21
}
    bc78:	b003      	add	sp, #12
    bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    bc7c:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    bc7e:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    bc80:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    bc82:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    bc84:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    bc86:	b985      	cbnz	r5, bcaa <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    bc88:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    bc8a:	f8d0 c000 	ldr.w	ip, [r0]
    bc8e:	4563      	cmp	r3, ip
    bc90:	bf28      	it	cs
    bc92:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
    bc94:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    bc98:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    bc9a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    bc9c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    bc9e:	6802      	ldr	r2, [r0, #0]
    bca0:	429a      	cmp	r2, r3
    bca2:	d806      	bhi.n	bcb2 <flash_get_page_info+0x5e>
		layout++;
    bca4:	3008      	adds	r0, #8
    bca6:	9000      	str	r0, [sp, #0]
    bca8:	e7e0      	b.n	bc6c <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    bcaa:	1a6b      	subs	r3, r5, r1
    bcac:	fbb3 f3f7 	udiv	r3, r3, r7
    bcb0:	e7eb      	b.n	bc8a <flash_get_page_info+0x36>
			return 0;
    bcb2:	2000      	movs	r0, #0
    bcb4:	e7e0      	b.n	bc78 <flash_get_page_info+0x24>

0000bcb6 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    bcb6:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    bcb8:	2200      	movs	r2, #0
    bcba:	f7ff bfcb 	b.w	bc54 <flash_get_page_info>

0000bcbe <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    bcbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    bcc2:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    bcc4:	6883      	ldr	r3, [r0, #8]
{
    bcc6:	b086      	sub	sp, #24
    bcc8:	4688      	mov	r8, r1
    bcca:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    bccc:	691b      	ldr	r3, [r3, #16]
    bcce:	aa02      	add	r2, sp, #8
    bcd0:	a901      	add	r1, sp, #4
    bcd2:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    bcd4:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    bcd6:	4625      	mov	r5, r4
    bcd8:	9b02      	ldr	r3, [sp, #8]
    bcda:	42ab      	cmp	r3, r5
    bcdc:	d802      	bhi.n	bce4 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    bcde:	b006      	add	sp, #24
    bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    bce4:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    bce6:	9f01      	ldr	r7, [sp, #4]
    bce8:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    bcec:	687b      	ldr	r3, [r7, #4]
    bcee:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    bcf0:	683a      	ldr	r2, [r7, #0]
    bcf2:	eb0a 0306 	add.w	r3, sl, r6
    bcf6:	42b2      	cmp	r2, r6
    bcf8:	d802      	bhi.n	bd00 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    bcfa:	469a      	mov	sl, r3
    bcfc:	3501      	adds	r5, #1
    bcfe:	e7eb      	b.n	bcd8 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    bd00:	4649      	mov	r1, r9
			page_info.start_offset = off;
    bd02:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    bd04:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    bd06:	a803      	add	r0, sp, #12
    bd08:	47c0      	blx	r8
    bd0a:	2800      	cmp	r0, #0
    bd0c:	d0e7      	beq.n	bcde <flash_page_foreach+0x20>
			off += page_info.size;
    bd0e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    bd10:	3601      	adds	r6, #1
			off += page_info.size;
    bd12:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    bd14:	e7ec      	b.n	bcf0 <flash_page_foreach+0x32>

0000bd16 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd16:	6843      	ldr	r3, [r0, #4]
}
    bd18:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd1a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    bd1c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    bd1e:	600b      	str	r3, [r1, #0]
}
    bd20:	4770      	bx	lr

0000bd22 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd22:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    bd24:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd28:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    bd2a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    bd2e:	6098      	str	r0, [r3, #8]
}
    bd30:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bd32:	60d9      	str	r1, [r3, #12]
    bd34:	4770      	bx	lr

0000bd36 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd36:	6843      	ldr	r3, [r0, #4]
}
    bd38:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd3a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    bd3c:	6099      	str	r1, [r3, #8]
}
    bd3e:	4770      	bx	lr

0000bd40 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd40:	6843      	ldr	r3, [r0, #4]
}
    bd42:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd44:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    bd46:	60d9      	str	r1, [r3, #12]
}
    bd48:	4770      	bx	lr

0000bd4a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd4a:	6843      	ldr	r3, [r0, #4]
    bd4c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bd4e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    bd50:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    bd54:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    bd56:	6090      	str	r0, [r2, #8]
}
    bd58:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bd5a:	60d3      	str	r3, [r2, #12]
    bd5c:	4770      	bx	lr

0000bd5e <gpio_nrfx_manage_callback>:
{
    bd5e:	b510      	push	{r4, lr}
	return port->data;
    bd60:	6903      	ldr	r3, [r0, #16]
	return list->head;
    bd62:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    bd64:	b1f8      	cbz	r0, bda6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bd66:	4288      	cmp	r0, r1
    bd68:	d119      	bne.n	bd9e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    bd6a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    bd6c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    bd6e:	42a1      	cmp	r1, r4
	list->head = node;
    bd70:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    bd72:	d100      	bne.n	bd76 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bd74:	6098      	str	r0, [r3, #8]
	parent->next = child;
    bd76:	2000      	movs	r0, #0
    bd78:	6008      	str	r0, [r1, #0]
	if (set) {
    bd7a:	b12a      	cbz	r2, bd88 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    bd7c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    bd7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    bd80:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    bd82:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    bd84:	b902      	cbnz	r2, bd88 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    bd86:	6099      	str	r1, [r3, #8]
	return 0;
    bd88:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    bd8a:	e010      	b.n	bdae <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bd8c:	4281      	cmp	r1, r0
    bd8e:	d106      	bne.n	bd9e <gpio_nrfx_manage_callback+0x40>
	return node->next;
    bd90:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    bd92:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    bd94:	6898      	ldr	r0, [r3, #8]
    bd96:	4281      	cmp	r1, r0
    bd98:	d1ed      	bne.n	bd76 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bd9a:	609c      	str	r4, [r3, #8]
}
    bd9c:	e7eb      	b.n	bd76 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    bd9e:	4604      	mov	r4, r0
    bda0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bda2:	2800      	cmp	r0, #0
    bda4:	d1f2      	bne.n	bd8c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    bda6:	2a00      	cmp	r2, #0
    bda8:	d1e8      	bne.n	bd7c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    bdaa:	f06f 0015 	mvn.w	r0, #21
}
    bdae:	bd10      	pop	{r4, pc}

0000bdb0 <z_impl_hwinfo_get_device_id>:
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    bdb0:	2908      	cmp	r1, #8
{
    bdb2:	b513      	push	{r0, r1, r4, lr}
	if (length > sizeof(dev_id.id)) {
    bdb4:	bf28      	it	cs
    bdb6:	2108      	movcs	r1, #8
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    bdb8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    bdbc:	460c      	mov	r4, r1
    bdbe:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
    bdc2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    bdc6:	ba1b      	rev	r3, r3
    bdc8:	ba12      	rev	r2, r2
    bdca:	9200      	str	r2, [sp, #0]
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    bdcc:	460a      	mov	r2, r1
    bdce:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    bdd0:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    bdd2:	f7ff fd6c 	bl	b8ae <memcpy>

	return length;
}
    bdd6:	4620      	mov	r0, r4
    bdd8:	b002      	add	sp, #8
    bdda:	bd10      	pop	{r4, pc}

0000bddc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bddc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    bdde:	6843      	ldr	r3, [r0, #4]
    bde0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    bde2:	7a05      	ldrb	r5, [r0, #8]
    bde4:	6844      	ldr	r4, [r0, #4]
    bde6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    bdea:	42a3      	cmp	r3, r4
    bdec:	d302      	bcc.n	bdf4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    bdee:	f06f 0001 	mvn.w	r0, #1
}
    bdf2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    bdf4:	795c      	ldrb	r4, [r3, #5]
    bdf6:	428c      	cmp	r4, r1
    bdf8:	d001      	beq.n	bdfe <pinctrl_lookup_state+0x22>
		(*state)++;
    bdfa:	3308      	adds	r3, #8
    bdfc:	e7f0      	b.n	bde0 <pinctrl_lookup_state+0x4>
			return 0;
    bdfe:	2000      	movs	r0, #0
    be00:	e7f7      	b.n	bdf2 <pinctrl_lookup_state+0x16>

0000be02 <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
    be02:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
    be04:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
    be06:	4620      	mov	r0, r4
    be08:	f002 fa8b 	bl	e322 <z_impl_k_mutex_init>

#ifdef CONFIG_REGULATOR_THREAD_SAFE_REFCNT
	(void)k_mutex_init(&data->lock);
#endif
	data->refcnt = 0;
    be0c:	2300      	movs	r3, #0
    be0e:	6163      	str	r3, [r4, #20]
}
    be10:	bd10      	pop	{r4, pc}

0000be12 <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
    be12:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
    be14:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
    be18:	691b      	ldr	r3, [r3, #16]
    be1a:	b13b      	cbz	r3, be2c <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
    be1c:	6877      	ldr	r7, [r6, #4]
    be1e:	428f      	cmp	r7, r1
    be20:	db08      	blt.n	be34 <regulator_set_voltage+0x22>
    be22:	6835      	ldr	r5, [r6, #0]
    be24:	4295      	cmp	r5, r2
    be26:	dc05      	bgt.n	be34 <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
    be28:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
    be2a:	4718      	bx	r3
		return -ENOSYS;
    be2c:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
    be30:	bcf0      	pop	{r4, r5, r6, r7}
    be32:	4770      	bx	lr
		return -EINVAL;
    be34:	f06f 0015 	mvn.w	r0, #21
    be38:	e7fa      	b.n	be30 <regulator_set_voltage+0x1e>

0000be3a <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
    be3a:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
    be3c:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
    be40:	6a15      	ldr	r5, [r2, #32]
{
    be42:	4603      	mov	r3, r0
    be44:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
    be46:	b19d      	cbz	r5, be70 <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
    be48:	7e32      	ldrb	r2, [r6, #24]
    be4a:	b912      	cbnz	r2, be52 <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
    be4c:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
    be4e:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
    be50:	4718      	bx	r3
    be52:	6970      	ldr	r0, [r6, #20]
    be54:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
    be56:	f810 1b01 	ldrb.w	r1, [r0], #1
    be5a:	42a1      	cmp	r1, r4
    be5c:	d102      	bne.n	be64 <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
    be5e:	4621      	mov	r1, r4
    be60:	4618      	mov	r0, r3
    be62:	e7f3      	b.n	be4c <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
    be64:	4290      	cmp	r0, r2
    be66:	d1f6      	bne.n	be56 <regulator_set_mode+0x1c>
	return -ENOTSUP;
    be68:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    be6c:	bc70      	pop	{r4, r5, r6}
    be6e:	4770      	bx	lr
		return -ENOSYS;
    be70:	f06f 0057 	mvn.w	r0, #87	; 0x57
    be74:	e7fa      	b.n	be6c <regulator_set_mode+0x32>

0000be76 <regulator_common_init>:
{
    be76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    be7a:	460e      	mov	r6, r1
	const struct regulator_common_config *config = dev->config;
    be7c:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    be80:	f898 1019 	ldrb.w	r1, [r8, #25]
{
    be84:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    be86:	29ff      	cmp	r1, #255	; 0xff
	struct regulator_common_data *data = dev->data;
    be88:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    be8a:	d123      	bne.n	bed4 <regulator_common_init+0x5e>
	if (config->init_uv > INT32_MIN) {
    be8c:	f8d8 2008 	ldr.w	r2, [r8, #8]
    be90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    be94:	d005      	beq.n	bea2 <regulator_common_init+0x2c>
		ret = regulator_set_voltage(dev, config->init_uv, config->init_uv);
    be96:	4611      	mov	r1, r2
    be98:	4620      	mov	r0, r4
    be9a:	f7ff ffba 	bl	be12 <regulator_set_voltage>
		if (ret < 0) {
    be9e:	2800      	cmp	r0, #0
    bea0:	db1c      	blt.n	bedc <regulator_common_init+0x66>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
    bea2:	f8d8 3000 	ldr.w	r3, [r8]
    bea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    beaa:	d01a      	beq.n	bee2 <regulator_common_init+0x6c>
					int32_t *volt_uv)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_voltage == NULL) {
    beac:	68a3      	ldr	r3, [r4, #8]
    beae:	695b      	ldr	r3, [r3, #20]
    beb0:	b38b      	cbz	r3, bf16 <regulator_common_init+0xa0>
		return -ENOSYS;
	}

	return api->get_voltage(dev, volt_uv);
    beb2:	4620      	mov	r0, r4
    beb4:	a901      	add	r1, sp, #4
    beb6:	4798      	blx	r3
		if (ret < 0) {
    beb8:	2800      	cmp	r0, #0
    beba:	db0f      	blt.n	bedc <regulator_common_init+0x66>
		if (current_uv < config->min_uv) {
    bebc:	f8d8 2000 	ldr.w	r2, [r8]
    bec0:	9b01      	ldr	r3, [sp, #4]
    bec2:	429a      	cmp	r2, r3
    bec4:	dd22      	ble.n	bf0c <regulator_common_init+0x96>
			ret = regulator_set_voltage(dev, config->max_uv, config->max_uv);
    bec6:	4611      	mov	r1, r2
    bec8:	4620      	mov	r0, r4
    beca:	f7ff ffa2 	bl	be12 <regulator_set_voltage>
			if (ret < 0) {
    bece:	2800      	cmp	r0, #0
    bed0:	da0d      	bge.n	beee <regulator_common_init+0x78>
    bed2:	e003      	b.n	bedc <regulator_common_init+0x66>
		ret = regulator_set_mode(dev, config->initial_mode);
    bed4:	f7ff ffb1 	bl	be3a <regulator_set_mode>
		if (ret < 0) {
    bed8:	2800      	cmp	r0, #0
    beda:	dad7      	bge.n	be8c <regulator_common_init+0x16>
}
    bedc:	b002      	add	sp, #8
    bede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
    bee2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bee6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    beea:	429a      	cmp	r2, r3
    beec:	d1de      	bne.n	beac <regulator_common_init+0x36>
	if (is_enabled) {
    beee:	b946      	cbnz	r6, bf02 <regulator_common_init+0x8c>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
    bef0:	f898 301a 	ldrb.w	r3, [r8, #26]
    bef4:	079b      	lsls	r3, r3, #30
    bef6:	d007      	beq.n	bf08 <regulator_common_init+0x92>
		ret = api->enable(dev);
    bef8:	4620      	mov	r0, r4
    befa:	683b      	ldr	r3, [r7, #0]
    befc:	4798      	blx	r3
		if (ret < 0) {
    befe:	2800      	cmp	r0, #0
    bf00:	dbec      	blt.n	bedc <regulator_common_init+0x66>
		data->refcnt++;
    bf02:	696b      	ldr	r3, [r5, #20]
    bf04:	3301      	adds	r3, #1
    bf06:	616b      	str	r3, [r5, #20]
	return 0;
    bf08:	2000      	movs	r0, #0
    bf0a:	e7e7      	b.n	bedc <regulator_common_init+0x66>
		} else if (current_uv > config->max_uv) {
    bf0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bf10:	4293      	cmp	r3, r2
    bf12:	ddec      	ble.n	beee <regulator_common_init+0x78>
    bf14:	e7d7      	b.n	bec6 <regulator_common_init+0x50>
		return -ENOSYS;
    bf16:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bf1a:	e7df      	b.n	bedc <regulator_common_init+0x66>

0000bf1c <gpio_pin_configure_dt>:
{
    bf1c:	4603      	mov	r3, r0
    bf1e:	460a      	mov	r2, r1
    bf20:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
    bf22:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    bf24:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    bf26:	6800      	ldr	r0, [r0, #0]
    bf28:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bf2a:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
    bf2c:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    bf2e:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bf30:	6834      	ldr	r4, [r6, #0]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    bf32:	bf48      	it	mi
    bf34:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bf38:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    bf3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    bf3e:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    bf40:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bf42:	bf4c      	ite	mi
    bf44:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bf46:	43ac      	bicpl	r4, r5
    bf48:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    bf4a:	683b      	ldr	r3, [r7, #0]
}
    bf4c:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    bf4e:	4718      	bx	r3

0000bf50 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bf50:	2301      	movs	r3, #1
    bf52:	fa03 f101 	lsl.w	r1, r3, r1
    bf56:	6903      	ldr	r3, [r0, #16]
    bf58:	681b      	ldr	r3, [r3, #0]
    bf5a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    bf5c:	bf18      	it	ne
    bf5e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    bf62:	b112      	cbz	r2, bf6a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    bf64:	6883      	ldr	r3, [r0, #8]
    bf66:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    bf68:	4718      	bx	r3
    bf6a:	6883      	ldr	r3, [r0, #8]
    bf6c:	691b      	ldr	r3, [r3, #16]
    bf6e:	e7fb      	b.n	bf68 <gpio_pin_set+0x18>

0000bf70 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
    bf70:	b570      	push	{r4, r5, r6, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    bf72:	6846      	ldr	r6, [r0, #4]
{
    bf74:	4604      	mov	r4, r0
	bool init_enabled;
	int ret;

	regulator_common_data_init(dev);
    bf76:	f7ff ff44 	bl	be02 <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
    bf7a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    bf7c:	f002 f92f 	bl	e1de <z_device_is_ready>
    bf80:	b1f0      	cbz	r0, bfc0 <regulator_fixed_init+0x50>
	return (config->flags & REGULATOR_INIT_ENABLED) != 0U;
    bf82:	6863      	ldr	r3, [r4, #4]
	}

	init_enabled = regulator_common_is_init_enabled(dev);

	if (init_enabled) {
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
    bf84:	f106 0024 	add.w	r0, r6, #36	; 0x24
    bf88:	7e99      	ldrb	r1, [r3, #26]
	if (init_enabled) {
    bf8a:	f011 0503 	ands.w	r5, r1, #3
    bf8e:	d010      	beq.n	bfb2 <regulator_fixed_init+0x42>
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
    bf90:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    bf94:	f7ff ffc2 	bl	bf1c <gpio_pin_configure_dt>
		if (ret < 0) {
    bf98:	2800      	cmp	r0, #0
    bf9a:	db10      	blt.n	bfbe <regulator_fixed_init+0x4e>
			return ret;
		}

		k_busy_wait(cfg->startup_delay_us);
    bf9c:	69f0      	ldr	r0, [r6, #28]
	z_impl_k_busy_wait(usec_to_wait);
    bf9e:	f002 fbe9 	bl	e774 <z_impl_k_busy_wait>
		if (ret < 0) {
			return ret;
		}
	}

	return regulator_common_init(dev, init_enabled);
    bfa2:	1e29      	subs	r1, r5, #0
    bfa4:	4620      	mov	r0, r4
}
    bfa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return regulator_common_init(dev, init_enabled);
    bfaa:	bf18      	it	ne
    bfac:	2101      	movne	r1, #1
    bfae:	f7ff bf62 	b.w	be76 <regulator_common_init>
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
    bfb2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    bfb6:	f7ff ffb1 	bl	bf1c <gpio_pin_configure_dt>
		if (ret < 0) {
    bfba:	2800      	cmp	r0, #0
    bfbc:	daf1      	bge.n	bfa2 <regulator_fixed_init+0x32>
}
    bfbe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    bfc0:	f06f 0012 	mvn.w	r0, #18
    bfc4:	e7fb      	b.n	bfbe <regulator_fixed_init+0x4e>

0000bfc6 <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
    bfc6:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
    bfc8:	2200      	movs	r2, #0
    bfca:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
    bfce:	6a58      	ldr	r0, [r3, #36]	; 0x24
    bfd0:	f7ff bfbe 	b.w	bf50 <gpio_pin_set>

0000bfd4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bfd4:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    bfd6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    bfda:	009b      	lsls	r3, r3, #2
    bfdc:	b29b      	uxth	r3, r3
    bfde:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    bfe2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bfe6:	601a      	str	r2, [r3, #0]
    bfe8:	681b      	ldr	r3, [r3, #0]
}
    bfea:	4770      	bx	lr

0000bfec <sys_clock_cycle_get_32>:
{
    bfec:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    bfee:	f7fa f859 	bl	60a4 <z_nrf_rtc_timer_read>
}
    bff2:	bd08      	pop	{r3, pc}

0000bff4 <boot_perform_update_hook>:
}
    bff4:	2001      	movs	r0, #1
    bff6:	4770      	bx	lr

0000bff8 <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    bff8:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    bffa:	bf01      	itttt	eq
    bffc:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    bffe:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    c000:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    c002:	700b      	strbeq	r3, [r1, #0]
		return 0;
    c004:	bf05      	ittet	eq
    c006:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    c008:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    c00a:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    c00c:	70cb      	strbeq	r3, [r1, #3]
}
    c00e:	4770      	bx	lr

0000c010 <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    c010:	2801      	cmp	r0, #1
    c012:	d101      	bne.n	c018 <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    c014:	f7fa bace 	b.w	65b4 <network_core_update>
	}

	return 0;
}
    c018:	2000      	movs	r0, #0
    c01a:	4770      	bx	lr

0000c01c <boot_serial_uploaded_hook>:

int boot_serial_uploaded_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    c01c:	2803      	cmp	r0, #3
		return network_core_update(false);
    c01e:	f04f 0000 	mov.w	r0, #0
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    c022:	d101      	bne.n	c028 <boot_serial_uploaded_hook+0xc>
		return network_core_update(false);
    c024:	f7fa bac6 	b.w	65b4 <network_core_update>
	}

	return 0;
}
    c028:	4770      	bx	lr

0000c02a <boot_reset_request_hook>:

int boot_reset_request_hook(bool force)
{
    c02a:	b508      	push	{r3, lr}
	ARG_UNUSED(force);

	if (pcd_fw_copy_status_get() == PCD_STATUS_COPY) {
    c02c:	f7fa fa10 	bl	6450 <pcd_fw_copy_status_get>
		return BOOT_RESET_REQUEST_HOOK_BUSY;
	}
	return 0;
}
    c030:	fab0 f080 	clz	r0, r0
    c034:	0940      	lsrs	r0, r0, #5
    c036:	bd08      	pop	{r3, pc}

0000c038 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    c038:	f7fe b93a 	b.w	a2b0 <nrf_cc3xx_platform_init_no_rng>

0000c03c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    c03c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    c03e:	f7f6 ff83 	bl	2f48 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    c042:	f7f7 f869 	bl	3118 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    c046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    c04a:	f7fe b931 	b.w	a2b0 <nrf_cc3xx_platform_init_no_rng>

0000c04e <boot_swap_info_off>:
    c04e:	6880      	ldr	r0, [r0, #8]
    c050:	3818      	subs	r0, #24
    c052:	f020 0007 	bic.w	r0, r0, #7
}
    c056:	3810      	subs	r0, #16
    c058:	4770      	bx	lr

0000c05a <boot_magic_compatible_check>:
    switch (tbl_val) {
    c05a:	2804      	cmp	r0, #4
    c05c:	d009      	beq.n	c072 <boot_magic_compatible_check+0x18>
    c05e:	2805      	cmp	r0, #5
    c060:	d103      	bne.n	c06a <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    c062:	1e48      	subs	r0, r1, #1
    c064:	bf18      	it	ne
    c066:	2001      	movne	r0, #1
    c068:	4770      	bx	lr
        return tbl_val == val;
    c06a:	1a43      	subs	r3, r0, r1
    c06c:	4258      	negs	r0, r3
    c06e:	4158      	adcs	r0, r3
    c070:	4770      	bx	lr
    switch (tbl_val) {
    c072:	2001      	movs	r0, #1
}
    c074:	4770      	bx	lr

0000c076 <bootutil_buffer_is_erased>:
{
    c076:	b538      	push	{r3, r4, r5, lr}
    c078:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    c07a:	460c      	mov	r4, r1
    c07c:	b161      	cbz	r1, c098 <bootutil_buffer_is_erased+0x22>
    c07e:	b15a      	cbz	r2, c098 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    c080:	f7ff f98e 	bl	b3a0 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    c084:	4621      	mov	r1, r4
    c086:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    c088:	f811 3b01 	ldrb.w	r3, [r1], #1
    c08c:	4283      	cmp	r3, r0
    c08e:	d103      	bne.n	c098 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    c090:	42a9      	cmp	r1, r5
    c092:	d1f9      	bne.n	c088 <bootutil_buffer_is_erased+0x12>
    return true;
    c094:	2001      	movs	r0, #1
}
    c096:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c098:	2000      	movs	r0, #0
    c09a:	e7fc      	b.n	c096 <bootutil_buffer_is_erased+0x20>

0000c09c <boot_read_flag>:
{
    c09c:	b538      	push	{r3, r4, r5, lr}
    c09e:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c0a0:	2301      	movs	r3, #1
{
    c0a2:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c0a4:	4622      	mov	r2, r4
{
    c0a6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c0a8:	f7ff f935 	bl	b316 <flash_area_read>
    if (rc < 0) {
    c0ac:	2800      	cmp	r0, #0
    c0ae:	db0f      	blt.n	c0d0 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    c0b0:	2201      	movs	r2, #1
    c0b2:	4621      	mov	r1, r4
    c0b4:	4628      	mov	r0, r5
    c0b6:	f7ff ffde 	bl	c076 <bootutil_buffer_is_erased>
    c0ba:	b938      	cbnz	r0, c0cc <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    c0bc:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    c0be:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    c0c0:	bf14      	ite	ne
    c0c2:	2302      	movne	r3, #2
    c0c4:	2301      	moveq	r3, #1
    c0c6:	2000      	movs	r0, #0
    c0c8:	7023      	strb	r3, [r4, #0]
}
    c0ca:	bd38      	pop	{r3, r4, r5, pc}
    c0cc:	2303      	movs	r3, #3
    c0ce:	e7fa      	b.n	c0c6 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    c0d0:	2001      	movs	r0, #1
    c0d2:	e7fa      	b.n	c0ca <boot_read_flag+0x2e>

0000c0d4 <boot_read_image_ok>:
    c0d4:	6882      	ldr	r2, [r0, #8]
    c0d6:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    c0d8:	f022 0207 	bic.w	r2, r2, #7
    c0dc:	f7ff bfde 	b.w	c09c <boot_read_flag>

0000c0e0 <boot_read_swap_state_by_id>:
{
    c0e0:	b513      	push	{r0, r1, r4, lr}
    c0e2:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    c0e4:	b2c0      	uxtb	r0, r0
    c0e6:	a901      	add	r1, sp, #4
    c0e8:	f7f5 fdcc 	bl	1c84 <flash_area_open>
    if (rc != 0) {
    c0ec:	b950      	cbnz	r0, c104 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    c0ee:	4621      	mov	r1, r4
    c0f0:	9801      	ldr	r0, [sp, #4]
    c0f2:	f7fa faa7 	bl	6644 <boot_read_swap_state>
    c0f6:	4604      	mov	r4, r0
    flash_area_close(fap);
    c0f8:	9801      	ldr	r0, [sp, #4]
    c0fa:	f7ff f90b 	bl	b314 <flash_area_close>
}
    c0fe:	4620      	mov	r0, r4
    c100:	b002      	add	sp, #8
    c102:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    c104:	2401      	movs	r4, #1
    c106:	e7fa      	b.n	c0fe <boot_read_swap_state_by_id+0x1e>

0000c108 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    c108:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    c10a:	6803      	ldr	r3, [r0, #0]
    c10c:	1acd      	subs	r5, r1, r3
    c10e:	2d00      	cmp	r5, #0
    c110:	dc02      	bgt.n	c118 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    c112:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    c116:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    c118:	f993 6000 	ldrsb.w	r6, [r3]
    c11c:	781c      	ldrb	r4, [r3, #0]
    c11e:	2e00      	cmp	r6, #0
    c120:	db0a      	blt.n	c138 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    c122:	1c5c      	adds	r4, r3, #1
    c124:	6004      	str	r4, [r0, #0]
    c126:	781b      	ldrb	r3, [r3, #0]
    c128:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    c12a:	6803      	ldr	r3, [r0, #0]
    c12c:	1ac9      	subs	r1, r1, r3
    c12e:	6813      	ldr	r3, [r2, #0]
    c130:	428b      	cmp	r3, r1
    c132:	d8ee      	bhi.n	c112 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    c134:	2000      	movs	r0, #0
    c136:	e7ee      	b.n	c116 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    c138:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    c13c:	3c01      	subs	r4, #1
    c13e:	2c03      	cmp	r4, #3
    c140:	d82b      	bhi.n	c19a <mbedtls_asn1_get_len+0x92>
    c142:	e8df f004 	tbb	[pc, r4]
    c146:	0a02      	.short	0x0a02
    c148:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    c14a:	2d01      	cmp	r5, #1
    c14c:	d0e1      	beq.n	c112 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    c14e:	785b      	ldrb	r3, [r3, #1]
    c150:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    c152:	6803      	ldr	r3, [r0, #0]
    c154:	3302      	adds	r3, #2
            (*p) += 5;
    c156:	6003      	str	r3, [r0, #0]
            break;
    c158:	e7e7      	b.n	c12a <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    c15a:	2d02      	cmp	r5, #2
    c15c:	ddd9      	ble.n	c112 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    c15e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    c162:	ba5b      	rev16	r3, r3
    c164:	b29b      	uxth	r3, r3
    c166:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    c168:	6803      	ldr	r3, [r0, #0]
    c16a:	3303      	adds	r3, #3
    c16c:	e7f3      	b.n	c156 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    c16e:	2d03      	cmp	r5, #3
    c170:	ddcf      	ble.n	c112 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c172:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    c174:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c176:	0224      	lsls	r4, r4, #8
    c178:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    c17a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c17e:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    c180:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    c182:	6803      	ldr	r3, [r0, #0]
    c184:	3304      	adds	r3, #4
    c186:	e7e6      	b.n	c156 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    c188:	2d04      	cmp	r5, #4
    c18a:	ddc2      	ble.n	c112 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    c18c:	f8d3 3001 	ldr.w	r3, [r3, #1]
    c190:	ba1b      	rev	r3, r3
    c192:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    c194:	6803      	ldr	r3, [r0, #0]
    c196:	3305      	adds	r3, #5
    c198:	e7dd      	b.n	c156 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    c19a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    c19e:	e7ba      	b.n	c116 <mbedtls_asn1_get_len+0xe>

0000c1a0 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    c1a0:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    c1a2:	6804      	ldr	r4, [r0, #0]
    c1a4:	1b0e      	subs	r6, r1, r4
    c1a6:	2e00      	cmp	r6, #0
    c1a8:	dd07      	ble.n	c1ba <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    c1aa:	7826      	ldrb	r6, [r4, #0]
    c1ac:	429e      	cmp	r6, r3
    c1ae:	d108      	bne.n	c1c2 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    c1b0:	3401      	adds	r4, #1
    c1b2:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    c1b4:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    c1b6:	f7ff bfa7 	b.w	c108 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    c1ba:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    c1be:	bc70      	pop	{r4, r5, r6}
    c1c0:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    c1c2:	f06f 0061 	mvn.w	r0, #97	; 0x61
    c1c6:	e7fa      	b.n	c1be <mbedtls_asn1_get_tag+0x1e>

0000c1c8 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    c1c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c1ca:	2302      	movs	r3, #2
{
    c1cc:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c1ce:	aa01      	add	r2, sp, #4
{
    c1d0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c1d2:	f7ff ffe5 	bl	c1a0 <mbedtls_asn1_get_tag>
    c1d6:	b940      	cbnz	r0, c1ea <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    c1d8:	9e01      	ldr	r6, [sp, #4]
    c1da:	4628      	mov	r0, r5
    c1dc:	4632      	mov	r2, r6
    c1de:	6821      	ldr	r1, [r4, #0]
    c1e0:	f000 f8ef 	bl	c3c2 <mbedtls_mpi_read_binary>

    *p += len;
    c1e4:	6823      	ldr	r3, [r4, #0]
    c1e6:	4433      	add	r3, r6
    c1e8:	6023      	str	r3, [r4, #0]

    return( ret );
}
    c1ea:	b002      	add	sp, #8
    c1ec:	bd70      	pop	{r4, r5, r6, pc}

0000c1ee <mpi_select>:
 *                      this must satisfy 0 <= idx < T_size.
 *
 * \return \c 0 on success, or a negative error code.
 */
static int mpi_select( mbedtls_mpi *R, const mbedtls_mpi *T, size_t T_size, size_t idx )
{
    c1ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c1f2:	4606      	mov	r6, r0
    c1f4:	460f      	mov	r7, r1
    c1f6:	4615      	mov	r5, r2
    c1f8:	4698      	mov	r8, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    for( size_t i = 0; i < T_size; i++ )
    c1fa:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    c1fc:	f04f 090c 	mov.w	r9, #12
    c200:	4641      	mov	r1, r8
    c202:	4620      	mov	r0, r4
    c204:	f001 f91b 	bl	d43e <mbedtls_ct_size_bool_eq>
    c208:	fb09 7104 	mla	r1, r9, r4, r7
    c20c:	b2c2      	uxtb	r2, r0
    c20e:	4630      	mov	r0, r6
    c210:	f001 f92d 	bl	d46e <mbedtls_mpi_safe_cond_assign>
    c214:	b910      	cbnz	r0, c21c <mpi_select+0x2e>
    for( size_t i = 0; i < T_size; i++ )
    c216:	3401      	adds	r4, #1
    c218:	42a5      	cmp	r5, r4
    c21a:	d1f1      	bne.n	c200 <mpi_select+0x12>
                        (unsigned char) mbedtls_ct_size_bool_eq( i, idx ) ) );
    }

cleanup:
    return( ret );
}
    c21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c220 <mpi_montmul.isra.0>:
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B,
    c220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi_core_montmul( A->p, A->p, B->p, B->n, N->p, N->n, mm, T->p );
    c222:	9c06      	ldr	r4, [sp, #24]
    c224:	e9cd 3402 	strd	r3, r4, [sp, #8]
    c228:	6853      	ldr	r3, [r2, #4]
    c22a:	9301      	str	r3, [sp, #4]
    c22c:	6893      	ldr	r3, [r2, #8]
    c22e:	9300      	str	r3, [sp, #0]
    c230:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    c234:	4601      	mov	r1, r0
    c236:	f001 f8a4 	bl	d382 <mbedtls_mpi_core_montmul>
}
    c23a:	b004      	add	sp, #16
    c23c:	bd10      	pop	{r4, pc}

0000c23e <mbedtls_mpi_init>:
    X->n = 0;
    c23e:	2300      	movs	r3, #0
    c240:	2201      	movs	r2, #1
    X->p = NULL;
    c242:	6083      	str	r3, [r0, #8]
    X->n = 0;
    c244:	e9c0 2300 	strd	r2, r3, [r0]
}
    c248:	4770      	bx	lr

0000c24a <mbedtls_mpi_free>:
{
    c24a:	b510      	push	{r4, lr}
    if( X == NULL )
    c24c:	4604      	mov	r4, r0
    c24e:	b168      	cbz	r0, c26c <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    c250:	6880      	ldr	r0, [r0, #8]
    c252:	b130      	cbz	r0, c262 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    c254:	6861      	ldr	r1, [r4, #4]
    c256:	0089      	lsls	r1, r1, #2
    c258:	f7fe f928 	bl	a4ac <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    c25c:	68a0      	ldr	r0, [r4, #8]
    c25e:	f7fa fab3 	bl	67c8 <mbedtls_free>
    X->n = 0;
    c262:	2300      	movs	r3, #0
    c264:	2201      	movs	r2, #1
    c266:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    c26a:	60a3      	str	r3, [r4, #8]
}
    c26c:	bd10      	pop	{r4, pc}

0000c26e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c26e:	f242 7310 	movw	r3, #10000	; 0x2710
    c272:	4299      	cmp	r1, r3
{
    c274:	b570      	push	{r4, r5, r6, lr}
    c276:	4604      	mov	r4, r0
    c278:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c27a:	d902      	bls.n	c282 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    c27c:	f06f 000f 	mvn.w	r0, #15
}
    c280:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    c282:	6843      	ldr	r3, [r0, #4]
    c284:	428b      	cmp	r3, r1
    c286:	d301      	bcc.n	c28c <mbedtls_mpi_grow+0x1e>
    return( 0 );
    c288:	2000      	movs	r0, #0
    c28a:	e7f9      	b.n	c280 <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    c28c:	2104      	movs	r1, #4
    c28e:	4628      	mov	r0, r5
    c290:	f7fa fa94 	bl	67bc <mbedtls_calloc>
    c294:	4606      	mov	r6, r0
    c296:	2800      	cmp	r0, #0
    c298:	d0f0      	beq.n	c27c <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    c29a:	68a1      	ldr	r1, [r4, #8]
    c29c:	b159      	cbz	r1, c2b6 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    c29e:	6862      	ldr	r2, [r4, #4]
    c2a0:	0092      	lsls	r2, r2, #2
    c2a2:	f7ff fb04 	bl	b8ae <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    c2a6:	6861      	ldr	r1, [r4, #4]
    c2a8:	68a0      	ldr	r0, [r4, #8]
    c2aa:	0089      	lsls	r1, r1, #2
    c2ac:	f7fe f8fe 	bl	a4ac <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    c2b0:	68a0      	ldr	r0, [r4, #8]
    c2b2:	f7fa fa89 	bl	67c8 <mbedtls_free>
        X->p = p;
    c2b6:	e9c4 5601 	strd	r5, r6, [r4, #4]
    c2ba:	e7e5      	b.n	c288 <mbedtls_mpi_grow+0x1a>

0000c2bc <mbedtls_mpi_resize_clear>:
{
    c2bc:	b538      	push	{r3, r4, r5, lr}
    c2be:	4604      	mov	r4, r0
    if( limbs == 0 )
    c2c0:	460d      	mov	r5, r1
    c2c2:	b919      	cbnz	r1, c2cc <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    c2c4:	f7ff ffc1 	bl	c24a <mbedtls_mpi_free>
}
    c2c8:	2000      	movs	r0, #0
    c2ca:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    c2cc:	6842      	ldr	r2, [r0, #4]
    c2ce:	428a      	cmp	r2, r1
    c2d0:	d107      	bne.n	c2e2 <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    c2d2:	2100      	movs	r1, #0
    c2d4:	6880      	ldr	r0, [r0, #8]
    c2d6:	0092      	lsls	r2, r2, #2
    c2d8:	f7ff faf4 	bl	b8c4 <memset>
        X->s = 1;
    c2dc:	2301      	movs	r3, #1
    c2de:	6023      	str	r3, [r4, #0]
        return( 0 );
    c2e0:	e7f2      	b.n	c2c8 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    c2e2:	f7ff ffb2 	bl	c24a <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    c2e6:	4629      	mov	r1, r5
    c2e8:	4620      	mov	r0, r4
}
    c2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    c2ee:	f7ff bfbe 	b.w	c26e <mbedtls_mpi_grow>

0000c2f2 <mbedtls_mpi_copy>:
    if( X == Y )
    c2f2:	4288      	cmp	r0, r1
{
    c2f4:	b570      	push	{r4, r5, r6, lr}
    c2f6:	4605      	mov	r5, r0
    c2f8:	460e      	mov	r6, r1
    if( X == Y )
    c2fa:	d009      	beq.n	c310 <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    c2fc:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    c2fe:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    c300:	b941      	cbnz	r1, c314 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    c302:	b12a      	cbz	r2, c310 <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    c304:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    c306:	0092      	lsls	r2, r2, #2
            X->s = 1;
    c308:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    c30a:	6880      	ldr	r0, [r0, #8]
    c30c:	f7ff fada 	bl	b8c4 <memset>
        return( 0 );
    c310:	2000      	movs	r0, #0
}
    c312:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    c314:	1e4c      	subs	r4, r1, #1
    c316:	b984      	cbnz	r4, c33a <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    c318:	6833      	ldr	r3, [r6, #0]
    i++;
    c31a:	3401      	adds	r4, #1
    if( X->n < i )
    c31c:	4294      	cmp	r4, r2
    X->s = Y->s;
    c31e:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    c320:	d912      	bls.n	c348 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    c322:	4621      	mov	r1, r4
    c324:	4628      	mov	r0, r5
    c326:	f7ff ffa2 	bl	c26e <mbedtls_mpi_grow>
    c32a:	2800      	cmp	r0, #0
    c32c:	d1f1      	bne.n	c312 <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    c32e:	68b1      	ldr	r1, [r6, #8]
    c330:	68a8      	ldr	r0, [r5, #8]
    c332:	00a2      	lsls	r2, r4, #2
    c334:	f7ff fabb 	bl	b8ae <memcpy>
    c338:	e7ea      	b.n	c310 <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    c33a:	68b3      	ldr	r3, [r6, #8]
    c33c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c340:	2b00      	cmp	r3, #0
    c342:	d1e9      	bne.n	c318 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    c344:	3c01      	subs	r4, #1
    c346:	e7e6      	b.n	c316 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    c348:	68a8      	ldr	r0, [r5, #8]
    c34a:	1b12      	subs	r2, r2, r4
    c34c:	2100      	movs	r1, #0
    c34e:	0092      	lsls	r2, r2, #2
    c350:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c354:	f7ff fab6 	bl	b8c4 <memset>
    c358:	e7e9      	b.n	c32e <mbedtls_mpi_copy+0x3c>

0000c35a <mbedtls_mpi_lset>:
{
    c35a:	b570      	push	{r4, r5, r6, lr}
    c35c:	460c      	mov	r4, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c35e:	2101      	movs	r1, #1
{
    c360:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c362:	f7ff ff84 	bl	c26e <mbedtls_mpi_grow>
    c366:	4606      	mov	r6, r0
    c368:	b978      	cbnz	r0, c38a <mbedtls_mpi_lset+0x30>
    memset( X->p, 0, X->n * ciL );
    c36a:	686a      	ldr	r2, [r5, #4]
    c36c:	4601      	mov	r1, r0
    c36e:	0092      	lsls	r2, r2, #2
    c370:	68a8      	ldr	r0, [r5, #8]
    c372:	f7ff faa7 	bl	b8c4 <memset>
    if( z >= 0 )
    c376:	2c00      	cmp	r4, #0
    X->s    = ( z < 0 ) ? -1 : 1;
    c378:	bfb4      	ite	lt
    c37a:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    c37e:	2201      	movge	r2, #1
    X->p[0] = mpi_sint_abs( z );
    c380:	68a9      	ldr	r1, [r5, #8]
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    c382:	bfb8      	it	lt
    c384:	4264      	neglt	r4, r4
    X->s    = ( z < 0 ) ? -1 : 1;
    c386:	600c      	str	r4, [r1, #0]
    c388:	602a      	str	r2, [r5, #0]
}
    c38a:	4630      	mov	r0, r6
    c38c:	bd70      	pop	{r4, r5, r6, pc}

0000c38e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    c38e:	6843      	ldr	r3, [r0, #4]
    c390:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    c394:	bf3f      	itttt	cc
    c396:	6883      	ldrcc	r3, [r0, #8]
    c398:	094a      	lsrcc	r2, r1, #5
    c39a:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    c39e:	f001 011f 	andcc.w	r1, r1, #31
    c3a2:	bf3a      	itte	cc
    c3a4:	40c8      	lsrcc	r0, r1
    c3a6:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    c3aa:	2000      	movcs	r0, #0
}
    c3ac:	4770      	bx	lr

0000c3ae <mbedtls_mpi_bitlen>:
    return( mbedtls_mpi_core_bitlen( X->p, X->n ) );
    c3ae:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    c3b2:	f000 be0b 	b.w	cfcc <mbedtls_mpi_core_bitlen>

0000c3b6 <mbedtls_mpi_size>:
{
    c3b6:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    c3b8:	f7ff fff9 	bl	c3ae <mbedtls_mpi_bitlen>
    c3bc:	3007      	adds	r0, #7
}
    c3be:	08c0      	lsrs	r0, r0, #3
    c3c0:	bd08      	pop	{r3, pc}

0000c3c2 <mbedtls_mpi_read_binary>:
{
    c3c2:	b570      	push	{r4, r5, r6, lr}
    c3c4:	460e      	mov	r6, r1
    const size_t limbs = CHARS_TO_LIMBS( buflen );
    c3c6:	f012 0103 	ands.w	r1, r2, #3
    c3ca:	bf18      	it	ne
    c3cc:	2101      	movne	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c3ce:	eb01 0192 	add.w	r1, r1, r2, lsr #2
{
    c3d2:	4605      	mov	r5, r0
    c3d4:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c3d6:	f7ff ff71 	bl	c2bc <mbedtls_mpi_resize_clear>
    c3da:	b938      	cbnz	r0, c3ec <mbedtls_mpi_read_binary+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    c3dc:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    c3e0:	4623      	mov	r3, r4
    c3e2:	4632      	mov	r2, r6
}
    c3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    c3e8:	f000 be3a 	b.w	d060 <mbedtls_mpi_core_read_be>
}
    c3ec:	bd70      	pop	{r4, r5, r6, pc}

0000c3ee <mbedtls_mpi_write_binary>:
{
    c3ee:	4613      	mov	r3, r2
    return( mbedtls_mpi_core_write_be( X->p, X->n, buf, buflen ) );
    c3f0:	460a      	mov	r2, r1
    c3f2:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    c3f6:	f000 be58 	b.w	d0aa <mbedtls_mpi_core_write_be>

0000c3fa <mbedtls_mpi_shift_l>:
{
    c3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3fc:	4605      	mov	r5, r0
    c3fe:	460e      	mov	r6, r1
    v0 = count / (biL    );
    c400:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    c402:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    c406:	f7ff ffd2 	bl	c3ae <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    c40a:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    c40c:	4430      	add	r0, r6
    if( X->n * biL < i )
    c40e:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    c412:	d805      	bhi.n	c420 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    c414:	2e1f      	cmp	r6, #31
    c416:	d80f      	bhi.n	c438 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    c418:	2f00      	cmp	r7, #0
    c41a:	d141      	bne.n	c4a0 <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    c41c:	2000      	movs	r0, #0
    c41e:	e00a      	b.n	c436 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    c420:	f010 011f 	ands.w	r1, r0, #31
    c424:	bf18      	it	ne
    c426:	2101      	movne	r1, #1
    c428:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    c42c:	4628      	mov	r0, r5
    c42e:	f7ff ff1e 	bl	c26e <mbedtls_mpi_grow>
    c432:	2800      	cmp	r0, #0
    c434:	d0ee      	beq.n	c414 <mbedtls_mpi_shift_l+0x1a>
}
    c436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    c438:	f06f 0003 	mvn.w	r0, #3
    c43c:	686b      	ldr	r3, [r5, #4]
    c43e:	4360      	muls	r0, r4
    c440:	4619      	mov	r1, r3
    c442:	009a      	lsls	r2, r3, #2
    c444:	42a1      	cmp	r1, r4
    c446:	f1a2 0204 	sub.w	r2, r2, #4
    c44a:	d80c      	bhi.n	c466 <mbedtls_mpi_shift_l+0x6c>
    c44c:	1ae2      	subs	r2, r4, r3
    c44e:	429c      	cmp	r4, r3
    c450:	bf88      	it	hi
    c452:	2200      	movhi	r2, #0
    c454:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    c456:	2200      	movs	r2, #0
    c458:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    c45a:	3b04      	subs	r3, #4
    c45c:	1d19      	adds	r1, r3, #4
    c45e:	d0db      	beq.n	c418 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    c460:	68a9      	ldr	r1, [r5, #8]
    c462:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    c464:	e7f9      	b.n	c45a <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    c466:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    c468:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    c46a:	eb06 0c02 	add.w	ip, r6, r2
    c46e:	f85c c000 	ldr.w	ip, [ip, r0]
    c472:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    c476:	e7e5      	b.n	c444 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    c478:	68ab      	ldr	r3, [r5, #8]
    c47a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    c47e:	fa01 f007 	lsl.w	r0, r1, r7
    c482:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    c486:	68a8      	ldr	r0, [r5, #8]
    c488:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    c48c:	4313      	orrs	r3, r2
    c48e:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    c492:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    c496:	3401      	adds	r4, #1
    c498:	686b      	ldr	r3, [r5, #4]
    c49a:	42a3      	cmp	r3, r4
    c49c:	d8ec      	bhi.n	c478 <mbedtls_mpi_shift_l+0x7e>
    c49e:	e7bd      	b.n	c41c <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    c4a0:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    c4a2:	f1c7 0620 	rsb	r6, r7, #32
    c4a6:	e7f7      	b.n	c498 <mbedtls_mpi_shift_l+0x9e>

0000c4a8 <mbedtls_mpi_shift_r>:
{
    c4a8:	b508      	push	{r3, lr}
    c4aa:	460a      	mov	r2, r1
    if( X->n != 0 )
    c4ac:	6841      	ldr	r1, [r0, #4]
    c4ae:	b111      	cbz	r1, c4b6 <mbedtls_mpi_shift_r+0xe>
        mbedtls_mpi_core_shift_r( X->p, X->n, count );
    c4b0:	6880      	ldr	r0, [r0, #8]
    c4b2:	f000 fe2c 	bl	d10e <mbedtls_mpi_core_shift_r>
}
    c4b6:	2000      	movs	r0, #0
    c4b8:	bd08      	pop	{r3, pc}

0000c4ba <mbedtls_mpi_cmp_abs>:
{
    c4ba:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    c4bc:	6842      	ldr	r2, [r0, #4]
    c4be:	b93a      	cbnz	r2, c4d0 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    c4c0:	684b      	ldr	r3, [r1, #4]
    c4c2:	b973      	cbnz	r3, c4e2 <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    c4c4:	b9b2      	cbnz	r2, c4f4 <mbedtls_mpi_cmp_abs+0x3a>
    c4c6:	1e18      	subs	r0, r3, #0
    c4c8:	bf18      	it	ne
    c4ca:	2001      	movne	r0, #1
    c4cc:	4240      	negs	r0, r0
}
    c4ce:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    c4d0:	6883      	ldr	r3, [r0, #8]
    c4d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c4d6:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d1f0      	bne.n	c4c0 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    c4de:	3a01      	subs	r2, #1
    c4e0:	e7ed      	b.n	c4be <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    c4e2:	688c      	ldr	r4, [r1, #8]
    c4e4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c4e8:	f854 4c04 	ldr.w	r4, [r4, #-4]
    c4ec:	2c00      	cmp	r4, #0
    c4ee:	d1e9      	bne.n	c4c4 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    c4f0:	3b01      	subs	r3, #1
    c4f2:	e7e6      	b.n	c4c2 <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    c4f4:	429a      	cmp	r2, r3
    c4f6:	d810      	bhi.n	c51a <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    c4f8:	d311      	bcc.n	c51e <mbedtls_mpi_cmp_abs+0x64>
    c4fa:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    c4fc:	6883      	ldr	r3, [r0, #8]
    c4fe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    c502:	688b      	ldr	r3, [r1, #8]
    c504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c508:	429c      	cmp	r4, r3
    c50a:	d806      	bhi.n	c51a <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    c50c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    c510:	d305      	bcc.n	c51e <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    c512:	1c53      	adds	r3, r2, #1
    c514:	d1f2      	bne.n	c4fc <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    c516:	2000      	movs	r0, #0
    c518:	e7d9      	b.n	c4ce <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    c51a:	2001      	movs	r0, #1
    c51c:	e7d7      	b.n	c4ce <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    c51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c522:	e7d4      	b.n	c4ce <mbedtls_mpi_cmp_abs+0x14>

0000c524 <mbedtls_mpi_cmp_mpi>:
{
    c524:	4602      	mov	r2, r0
    c526:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    c528:	6843      	ldr	r3, [r0, #4]
    c52a:	b923      	cbnz	r3, c536 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    c52c:	6848      	ldr	r0, [r1, #4]
    c52e:	b958      	cbnz	r0, c548 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    c530:	2b00      	cmp	r3, #0
    c532:	d136      	bne.n	c5a2 <mbedtls_mpi_cmp_mpi+0x7e>
    c534:	e02f      	b.n	c596 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    c536:	6890      	ldr	r0, [r2, #8]
    c538:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c53c:	f850 0c04 	ldr.w	r0, [r0, #-4]
    c540:	2800      	cmp	r0, #0
    c542:	d1f3      	bne.n	c52c <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    c544:	3b01      	subs	r3, #1
    c546:	e7f0      	b.n	c52a <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    c548:	688c      	ldr	r4, [r1, #8]
    c54a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    c54e:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c552:	bb15      	cbnz	r5, c59a <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    c554:	3801      	subs	r0, #1
    c556:	e7ea      	b.n	c52e <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c558:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    c55a:	d202      	bcs.n	c562 <mbedtls_mpi_cmp_mpi+0x3e>
    c55c:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c55e:	4240      	negs	r0, r0
    c560:	e020      	b.n	c5a4 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c562:	6810      	ldr	r0, [r2, #0]
    c564:	2800      	cmp	r0, #0
    c566:	dd03      	ble.n	c570 <mbedtls_mpi_cmp_mpi+0x4c>
    c568:	2d00      	cmp	r5, #0
    c56a:	da07      	bge.n	c57c <mbedtls_mpi_cmp_mpi+0x58>
    c56c:	2001      	movs	r0, #1
    c56e:	e019      	b.n	c5a4 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    c570:	2d00      	cmp	r5, #0
    c572:	dd03      	ble.n	c57c <mbedtls_mpi_cmp_mpi+0x58>
    c574:	b110      	cbz	r0, c57c <mbedtls_mpi_cmp_mpi+0x58>
    c576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c57a:	e013      	b.n	c5a4 <mbedtls_mpi_cmp_mpi+0x80>
    c57c:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    c57e:	6891      	ldr	r1, [r2, #8]
    c580:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    c584:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c588:	428d      	cmp	r5, r1
    c58a:	d80b      	bhi.n	c5a4 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c58c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c590:	d3e5      	bcc.n	c55e <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    c592:	1c59      	adds	r1, r3, #1
    c594:	d1f3      	bne.n	c57e <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    c596:	2000      	movs	r0, #0
    c598:	e004      	b.n	c5a4 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    c59a:	2b00      	cmp	r3, #0
    c59c:	d0de      	beq.n	c55c <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    c59e:	4283      	cmp	r3, r0
    c5a0:	d9da      	bls.n	c558 <mbedtls_mpi_cmp_mpi+0x34>
    c5a2:	6810      	ldr	r0, [r2, #0]
}
    c5a4:	bd30      	pop	{r4, r5, pc}

0000c5a6 <mbedtls_mpi_cmp_int>:
{
    c5a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( z >= 0 )
    c5a8:	2900      	cmp	r1, #0
    Y.s = ( z < 0 ) ? -1 : 1;
    c5aa:	bfb6      	itet	lt
    c5ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    c5b0:	2301      	movge	r3, #1
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    c5b2:	4249      	neglt	r1, r1
    Y.s = ( z < 0 ) ? -1 : 1;
    c5b4:	e9cd 1300 	strd	r1, r3, [sp]
    Y.n = 1;
    c5b8:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c5ba:	a901      	add	r1, sp, #4
    Y.n = 1;
    c5bc:	9302      	str	r3, [sp, #8]
    Y.p = p;
    c5be:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c5c2:	f7ff ffaf 	bl	c524 <mbedtls_mpi_cmp_mpi>
}
    c5c6:	b005      	add	sp, #20
    c5c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c5cc <mbedtls_mpi_add_abs>:
    if( X == B )
    c5cc:	4290      	cmp	r0, r2
{
    c5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5d2:	4605      	mov	r5, r0
    c5d4:	460f      	mov	r7, r1
    c5d6:	4614      	mov	r4, r2
    if( X == B )
    c5d8:	d002      	beq.n	c5e0 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    c5da:	4288      	cmp	r0, r1
    c5dc:	d106      	bne.n	c5ec <mbedtls_mpi_add_abs+0x20>
{
    c5de:	4627      	mov	r7, r4
    X->s = 1;
    c5e0:	2301      	movs	r3, #1
    c5e2:	602b      	str	r3, [r5, #0]
    for( j = B->n; j > 0; j-- )
    c5e4:	687c      	ldr	r4, [r7, #4]
    c5e6:	b93c      	cbnz	r4, c5f8 <mbedtls_mpi_add_abs+0x2c>
        return( 0 );
    c5e8:	2000      	movs	r0, #0
    c5ea:	e003      	b.n	c5f4 <mbedtls_mpi_add_abs+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c5ec:	f7ff fe81 	bl	c2f2 <mbedtls_mpi_copy>
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d0f4      	beq.n	c5de <mbedtls_mpi_add_abs+0x12>
}
    c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    c5f8:	68bb      	ldr	r3, [r7, #8]
    c5fa:	ea4f 0884 	mov.w	r8, r4, lsl #2
    c5fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c602:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c606:	b90b      	cbnz	r3, c60c <mbedtls_mpi_add_abs+0x40>
    for( j = B->n; j > 0; j-- )
    c608:	3c01      	subs	r4, #1
    c60a:	e7ec      	b.n	c5e6 <mbedtls_mpi_add_abs+0x1a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c60c:	4621      	mov	r1, r4
    c60e:	4628      	mov	r0, r5
    c610:	f7ff fe2d 	bl	c26e <mbedtls_mpi_grow>
    c614:	2800      	cmp	r0, #0
    c616:	d1ed      	bne.n	c5f4 <mbedtls_mpi_add_abs+0x28>
    mbedtls_mpi_uint *p = X->p;
    c618:	68ae      	ldr	r6, [r5, #8]
    mbedtls_mpi_uint c = mbedtls_mpi_core_add( p, p, B->p, j );
    c61a:	4623      	mov	r3, r4
    c61c:	68ba      	ldr	r2, [r7, #8]
    c61e:	4631      	mov	r1, r6
    c620:	4630      	mov	r0, r6
    c622:	f000 fdae 	bl	d182 <mbedtls_mpi_core_add>
    c626:	4607      	mov	r7, r0
    p += j;
    c628:	eb06 0308 	add.w	r3, r6, r8
    while( c != 0 )
    c62c:	2f00      	cmp	r7, #0
    c62e:	d0db      	beq.n	c5e8 <mbedtls_mpi_add_abs+0x1c>
        if( j >= X->n )
    c630:	686a      	ldr	r2, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    c632:	1c66      	adds	r6, r4, #1
        if( j >= X->n )
    c634:	42a2      	cmp	r2, r4
    c636:	d808      	bhi.n	c64a <mbedtls_mpi_add_abs+0x7e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    c638:	4631      	mov	r1, r6
    c63a:	4628      	mov	r0, r5
    c63c:	f7ff fe17 	bl	c26e <mbedtls_mpi_grow>
    c640:	2800      	cmp	r0, #0
    c642:	d1d7      	bne.n	c5f4 <mbedtls_mpi_add_abs+0x28>
            p = X->p + j;
    c644:	68ab      	ldr	r3, [r5, #8]
    c646:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        *p += c; c = ( *p < c ); j++; p++;
    c64a:	681a      	ldr	r2, [r3, #0]
    c64c:	4634      	mov	r4, r6
    c64e:	19d2      	adds	r2, r2, r7
    c650:	bf2c      	ite	cs
    c652:	2701      	movcs	r7, #1
    c654:	2700      	movcc	r7, #0
    c656:	f843 2b04 	str.w	r2, [r3], #4
    c65a:	e7e7      	b.n	c62c <mbedtls_mpi_add_abs+0x60>

0000c65c <mbedtls_mpi_sub_abs>:
{
    c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c660:	4605      	mov	r5, r0
    c662:	460e      	mov	r6, r1
    c664:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    c666:	6854      	ldr	r4, [r2, #4]
    c668:	b93c      	cbnz	r4, c67a <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    c66a:	6871      	ldr	r1, [r6, #4]
    c66c:	42a1      	cmp	r1, r4
    c66e:	d20e      	bcs.n	c68e <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    c670:	f06f 0709 	mvn.w	r7, #9
}
    c674:	4638      	mov	r0, r7
    c676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    c67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c67e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c682:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c686:	2b00      	cmp	r3, #0
    c688:	d1ef      	bne.n	c66a <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    c68a:	3c01      	subs	r4, #1
    c68c:	e7ec      	b.n	c668 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    c68e:	4628      	mov	r0, r5
    c690:	f7ff fded 	bl	c26e <mbedtls_mpi_grow>
    c694:	4607      	mov	r7, r0
    c696:	2800      	cmp	r0, #0
    c698:	d1ec      	bne.n	c674 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    c69a:	6872      	ldr	r2, [r6, #4]
    c69c:	4294      	cmp	r4, r2
    c69e:	d209      	bcs.n	c6b4 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    c6a0:	68b1      	ldr	r1, [r6, #8]
    c6a2:	68a8      	ldr	r0, [r5, #8]
    c6a4:	1b12      	subs	r2, r2, r4
    c6a6:	0092      	lsls	r2, r2, #2
    c6a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c6ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c6b0:	f7ff f8fd 	bl	b8ae <memcpy>
    if( X->n > A->n )
    c6b4:	686a      	ldr	r2, [r5, #4]
    c6b6:	6870      	ldr	r0, [r6, #4]
    c6b8:	4282      	cmp	r2, r0
    c6ba:	d907      	bls.n	c6cc <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    c6bc:	68ab      	ldr	r3, [r5, #8]
    c6be:	1a12      	subs	r2, r2, r0
    c6c0:	2100      	movs	r1, #0
    c6c2:	0092      	lsls	r2, r2, #2
    c6c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    c6c8:	f7ff f8fc 	bl	b8c4 <memset>
    carry = mbedtls_mpi_core_sub( X->p, A->p, B->p, n );
    c6cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c6d0:	4623      	mov	r3, r4
    c6d2:	68b1      	ldr	r1, [r6, #8]
    c6d4:	68a8      	ldr	r0, [r5, #8]
    c6d6:	f000 fd6a 	bl	d1ae <mbedtls_mpi_core_sub>
    if( carry != 0 )
    c6da:	4602      	mov	r2, r0
    c6dc:	b910      	cbnz	r0, c6e4 <mbedtls_mpi_sub_abs+0x88>
    X->s = 1;
    c6de:	2301      	movs	r3, #1
    c6e0:	602b      	str	r3, [r5, #0]
    c6e2:	e7c7      	b.n	c674 <mbedtls_mpi_sub_abs+0x18>
        carry = mbedtls_mpi_core_sub_int( X->p + n, X->p + n, carry, X->n - n );
    c6e4:	68a9      	ldr	r1, [r5, #8]
    c6e6:	686b      	ldr	r3, [r5, #4]
    c6e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c6ec:	4608      	mov	r0, r1
    c6ee:	1b1b      	subs	r3, r3, r4
    c6f0:	f000 fe90 	bl	d414 <mbedtls_mpi_core_sub_int>
        if( carry != 0 )
    c6f4:	2800      	cmp	r0, #0
    c6f6:	d0f2      	beq.n	c6de <mbedtls_mpi_sub_abs+0x82>
    c6f8:	e7ba      	b.n	c670 <mbedtls_mpi_sub_abs+0x14>

0000c6fa <add_sub_mpi>:
{
    c6fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( A->s * B->s * flip_B < 0 )
    c6fe:	6816      	ldr	r6, [r2, #0]
    s = A->s;
    c700:	680c      	ldr	r4, [r1, #0]
{
    c702:	4681      	mov	r9, r0
    if( A->s * B->s * flip_B < 0 )
    c704:	fb06 fc04 	mul.w	ip, r6, r4
    c708:	4666      	mov	r6, ip
    c70a:	4373      	muls	r3, r6
{
    c70c:	460d      	mov	r5, r1
    c70e:	4617      	mov	r7, r2
    if( A->s * B->s * flip_B < 0 )
    c710:	d51b      	bpl.n	c74a <add_sub_mpi+0x50>
        int cmp = mbedtls_mpi_cmp_abs( A, B );
    c712:	4611      	mov	r1, r2
    c714:	4628      	mov	r0, r5
    c716:	f7ff fed0 	bl	c4ba <mbedtls_mpi_cmp_abs>
        if( cmp >= 0 )
    c71a:	f1b0 0800 	subs.w	r8, r0, #0
    c71e:	db0d      	blt.n	c73c <add_sub_mpi+0x42>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c720:	463a      	mov	r2, r7
    c722:	4629      	mov	r1, r5
    c724:	4648      	mov	r0, r9
    c726:	f7ff ff99 	bl	c65c <mbedtls_mpi_sub_abs>
    c72a:	b990      	cbnz	r0, c752 <add_sub_mpi+0x58>
            X->s = cmp == 0 ? 1 : s;
    c72c:	f1b8 0f00 	cmp.w	r8, #0
    c730:	bf08      	it	eq
    c732:	2401      	moveq	r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c734:	2000      	movs	r0, #0
        X->s = s;
    c736:	f8c9 4000 	str.w	r4, [r9]
    return( ret );
    c73a:	e00a      	b.n	c752 <add_sub_mpi+0x58>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c73c:	462a      	mov	r2, r5
    c73e:	4648      	mov	r0, r9
    c740:	f7ff ff8c 	bl	c65c <mbedtls_mpi_sub_abs>
    c744:	b928      	cbnz	r0, c752 <add_sub_mpi+0x58>
            X->s = -s;
    c746:	4264      	negs	r4, r4
    c748:	e7f4      	b.n	c734 <add_sub_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c74a:	f7ff ff3f 	bl	c5cc <mbedtls_mpi_add_abs>
    c74e:	2800      	cmp	r0, #0
    c750:	d0f0      	beq.n	c734 <add_sub_mpi+0x3a>
}
    c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c756 <mbedtls_mpi_add_mpi>:
    return( add_sub_mpi( X, A, B, 1 ) );
    c756:	2301      	movs	r3, #1
    c758:	f7ff bfcf 	b.w	c6fa <add_sub_mpi>

0000c75c <mbedtls_mpi_sub_mpi>:
    return( add_sub_mpi( X, A, B, -1 ) );
    c75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c760:	f7ff bfcb 	b.w	c6fa <add_sub_mpi>

0000c764 <mbedtls_mpi_mul_int>:
{
    c764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c768:	4605      	mov	r5, r0
    c76a:	4688      	mov	r8, r1
    c76c:	4616      	mov	r6, r2
    size_t n = A->n;
    c76e:	684f      	ldr	r7, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    c770:	b13f      	cbz	r7, c782 <mbedtls_mpi_mul_int+0x1e>
    c772:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c776:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    c77a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c77e:	b13b      	cbz	r3, c790 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    c780:	b946      	cbnz	r6, c794 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    c782:	2100      	movs	r1, #0
    c784:	4628      	mov	r0, r5
}
    c786:	b002      	add	sp, #8
    c788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    c78c:	f7ff bde5 	b.w	c35a <mbedtls_mpi_lset>
        --n;
    c790:	3f01      	subs	r7, #1
    c792:	e7ed      	b.n	c770 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    c794:	4628      	mov	r0, r5
    c796:	1c79      	adds	r1, r7, #1
    c798:	f7ff fd69 	bl	c26e <mbedtls_mpi_grow>
    c79c:	4604      	mov	r4, r0
    c79e:	b970      	cbnz	r0, c7be <mbedtls_mpi_mul_int+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c7a0:	4641      	mov	r1, r8
    c7a2:	4628      	mov	r0, r5
    c7a4:	f7ff fda5 	bl	c2f2 <mbedtls_mpi_copy>
    c7a8:	4604      	mov	r4, r0
    c7aa:	b940      	cbnz	r0, c7be <mbedtls_mpi_mul_int+0x5a>
    mbedtls_mpi_core_mla( X->p, X->n, A->p, n, b - 1 );
    c7ac:	3e01      	subs	r6, #1
    c7ae:	9600      	str	r6, [sp, #0]
    c7b0:	463b      	mov	r3, r7
    c7b2:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    c7b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c7ba:	f000 fd15 	bl	d1e8 <mbedtls_mpi_core_mla>
}
    c7be:	4620      	mov	r0, r4
    c7c0:	b002      	add	sp, #8
    c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c7c6 <mbedtls_mpi_div_mpi>:
{
    c7c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ca:	4683      	mov	fp, r0
    c7cc:	b09d      	sub	sp, #116	; 0x74
    c7ce:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c7d0:	4618      	mov	r0, r3
    c7d2:	2100      	movs	r1, #0
{
    c7d4:	4616      	mov	r6, r2
    c7d6:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c7d8:	f7ff fee5 	bl	c5a6 <mbedtls_mpi_cmp_int>
    c7dc:	2800      	cmp	r0, #0
    c7de:	f000 8187 	beq.w	caf0 <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c7e2:	2303      	movs	r3, #3
    X->n = 0;
    c7e4:	2400      	movs	r4, #0
    c7e6:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c7e8:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c7ea:	4630      	mov	r0, r6
    T2.p = TP2;
    c7ec:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c7ee:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    c7f0:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    c7f4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    c7f8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    c7fc:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    c800:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    c804:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    c808:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    c80a:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c80c:	f7ff fe55 	bl	c4ba <mbedtls_mpi_cmp_abs>
    c810:	42a0      	cmp	r0, r4
    c812:	da28      	bge.n	c866 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c814:	f1bb 0f00 	cmp.w	fp, #0
    c818:	d105      	bne.n	c826 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c81a:	b9e7      	cbnz	r7, c856 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    c81c:	2400      	movs	r4, #0
}
    c81e:	4620      	mov	r0, r4
    c820:	b01d      	add	sp, #116	; 0x74
    c822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c826:	4621      	mov	r1, r4
    c828:	4658      	mov	r0, fp
    c82a:	f7ff fd96 	bl	c35a <mbedtls_mpi_lset>
    c82e:	4604      	mov	r4, r0
    c830:	2800      	cmp	r0, #0
    c832:	d0f2      	beq.n	c81a <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    c834:	a80a      	add	r0, sp, #40	; 0x28
    c836:	f7ff fd08 	bl	c24a <mbedtls_mpi_free>
    c83a:	a80d      	add	r0, sp, #52	; 0x34
    c83c:	f7ff fd05 	bl	c24a <mbedtls_mpi_free>
    c840:	a810      	add	r0, sp, #64	; 0x40
    c842:	f7ff fd02 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    c846:	a813      	add	r0, sp, #76	; 0x4c
    c848:	f7ff fcff 	bl	c24a <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    c84c:	210c      	movs	r1, #12
    c84e:	a819      	add	r0, sp, #100	; 0x64
    c850:	f7fd fe2c 	bl	a4ac <mbedtls_platform_zeroize>
    return( ret );
    c854:	e7e3      	b.n	c81e <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c856:	4631      	mov	r1, r6
    c858:	4638      	mov	r0, r7
    c85a:	f7ff fd4a 	bl	c2f2 <mbedtls_mpi_copy>
    c85e:	4604      	mov	r4, r0
    c860:	2800      	cmp	r0, #0
    c862:	d1e7      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    c864:	e7da      	b.n	c81c <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    c866:	4631      	mov	r1, r6
    c868:	a80a      	add	r0, sp, #40	; 0x28
    c86a:	f7ff fd42 	bl	c2f2 <mbedtls_mpi_copy>
    c86e:	4604      	mov	r4, r0
    c870:	2800      	cmp	r0, #0
    c872:	d1df      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    c874:	9903      	ldr	r1, [sp, #12]
    c876:	a80d      	add	r0, sp, #52	; 0x34
    c878:	f7ff fd3b 	bl	c2f2 <mbedtls_mpi_copy>
    c87c:	4604      	mov	r4, r0
    c87e:	2800      	cmp	r0, #0
    c880:	d1d8      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c882:	6871      	ldr	r1, [r6, #4]
    c884:	a810      	add	r0, sp, #64	; 0x40
    c886:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    c888:	950d      	str	r5, [sp, #52]	; 0x34
    c88a:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c88c:	f7ff fcef 	bl	c26e <mbedtls_mpi_grow>
    c890:	4604      	mov	r4, r0
    c892:	2800      	cmp	r0, #0
    c894:	d1ce      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    c896:	4601      	mov	r1, r0
    c898:	a810      	add	r0, sp, #64	; 0x40
    c89a:	f7ff fd5e 	bl	c35a <mbedtls_mpi_lset>
    c89e:	4604      	mov	r4, r0
    c8a0:	2800      	cmp	r0, #0
    c8a2:	d1c7      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    c8a4:	6871      	ldr	r1, [r6, #4]
    c8a6:	a813      	add	r0, sp, #76	; 0x4c
    c8a8:	3102      	adds	r1, #2
    c8aa:	f7ff fce0 	bl	c26e <mbedtls_mpi_grow>
    c8ae:	4604      	mov	r4, r0
    c8b0:	2800      	cmp	r0, #0
    c8b2:	d1bf      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    c8b4:	a80d      	add	r0, sp, #52	; 0x34
    c8b6:	f7ff fd7a 	bl	c3ae <mbedtls_mpi_bitlen>
    c8ba:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    c8be:	281f      	cmp	r0, #31
    c8c0:	d070      	beq.n	c9a4 <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    c8c2:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c8c6:	4619      	mov	r1, r3
    c8c8:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    c8ca:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c8cc:	f7ff fd95 	bl	c3fa <mbedtls_mpi_shift_l>
    c8d0:	4604      	mov	r4, r0
    c8d2:	2800      	cmp	r0, #0
    c8d4:	d1ae      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    c8d6:	9901      	ldr	r1, [sp, #4]
    c8d8:	a80d      	add	r0, sp, #52	; 0x34
    c8da:	f7ff fd8e 	bl	c3fa <mbedtls_mpi_shift_l>
    c8de:	4604      	mov	r4, r0
    c8e0:	2800      	cmp	r0, #0
    c8e2:	d1a7      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    c8e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    c8e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    c8ea:	a80d      	add	r0, sp, #52	; 0x34
    c8ec:	eba5 0a08 	sub.w	sl, r5, r8
    c8f0:	ea4f 194a 	mov.w	r9, sl, lsl #5
    c8f4:	4649      	mov	r1, r9
    c8f6:	f7ff fd80 	bl	c3fa <mbedtls_mpi_shift_l>
    c8fa:	4604      	mov	r4, r0
    c8fc:	2800      	cmp	r0, #0
    c8fe:	d199      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    c900:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    c904:	a90d      	add	r1, sp, #52	; 0x34
    c906:	a80a      	add	r0, sp, #40	; 0x28
    c908:	f7ff fe0c 	bl	c524 <mbedtls_mpi_cmp_mpi>
    c90c:	2800      	cmp	r0, #0
    c90e:	da4b      	bge.n	c9a8 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    c910:	4649      	mov	r1, r9
    c912:	a80d      	add	r0, sp, #52	; 0x34
    c914:	f7ff fdc8 	bl	c4a8 <mbedtls_mpi_shift_r>
    c918:	4604      	mov	r4, r0
    c91a:	2800      	cmp	r0, #0
    c91c:	d18a      	bne.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    c91e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c922:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    c924:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    c926:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
    c92a:	9306      	str	r3, [sp, #24]
    c92c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c930:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    c934:	3b02      	subs	r3, #2
    c936:	3d01      	subs	r5, #1
    c938:	009b      	lsls	r3, r3, #2
    c93a:	eba5 0508 	sub.w	r5, r5, r8
    c93e:	9308      	str	r3, [sp, #32]
    c940:	00ab      	lsls	r3, r5, #2
    c942:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    c944:	9b05      	ldr	r3, [sp, #20]
    c946:	459a      	cmp	sl, r3
    c948:	d83d      	bhi.n	c9c6 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    c94a:	f1bb 0f00 	cmp.w	fp, #0
    c94e:	d00c      	beq.n	c96a <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    c950:	4658      	mov	r0, fp
    c952:	a910      	add	r1, sp, #64	; 0x40
    c954:	f7ff fccd 	bl	c2f2 <mbedtls_mpi_copy>
    c958:	2800      	cmp	r0, #0
    c95a:	f040 80c5 	bne.w	cae8 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    c95e:	9a03      	ldr	r2, [sp, #12]
    c960:	6833      	ldr	r3, [r6, #0]
    c962:	6812      	ldr	r2, [r2, #0]
    c964:	4353      	muls	r3, r2
    c966:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    c96a:	2f00      	cmp	r7, #0
    c96c:	f43f af62 	beq.w	c834 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    c970:	9901      	ldr	r1, [sp, #4]
    c972:	a80a      	add	r0, sp, #40	; 0x28
    c974:	f7ff fd98 	bl	c4a8 <mbedtls_mpi_shift_r>
    c978:	2800      	cmp	r0, #0
    c97a:	f040 80b5 	bne.w	cae8 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    c97e:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c980:	a90a      	add	r1, sp, #40	; 0x28
    c982:	4638      	mov	r0, r7
        X.s = A->s;
    c984:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c986:	f7ff fcb4 	bl	c2f2 <mbedtls_mpi_copy>
    c98a:	4601      	mov	r1, r0
    c98c:	2800      	cmp	r0, #0
    c98e:	f040 80ad 	bne.w	caec <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    c992:	4638      	mov	r0, r7
    c994:	f7ff fe07 	bl	c5a6 <mbedtls_mpi_cmp_int>
    c998:	2800      	cmp	r0, #0
    c99a:	f47f af4b 	bne.w	c834 <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    c99e:	2301      	movs	r3, #1
    c9a0:	603b      	str	r3, [r7, #0]
    c9a2:	e747      	b.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    c9a4:	9401      	str	r4, [sp, #4]
    c9a6:	e79d      	b.n	c8e4 <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    c9a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c9aa:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    c9ac:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c9b0:	4608      	mov	r0, r1
        Z.p[n - t]++;
    c9b2:	3301      	adds	r3, #1
    c9b4:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c9b8:	aa0d      	add	r2, sp, #52	; 0x34
    c9ba:	f7ff fecf 	bl	c75c <mbedtls_mpi_sub_mpi>
    c9be:	4604      	mov	r4, r0
    c9c0:	2800      	cmp	r0, #0
    c9c2:	d09f      	beq.n	c904 <mbedtls_mpi_div_mpi+0x13e>
    c9c4:	e736      	b.n	c834 <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    c9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9c8:	9a06      	ldr	r2, [sp, #24]
    c9ca:	9304      	str	r3, [sp, #16]
    c9cc:	4413      	add	r3, r2
    c9ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    c9d2:	9307      	str	r3, [sp, #28]
    c9d4:	9b04      	ldr	r3, [sp, #16]
    c9d6:	ea4f 088a 	mov.w	r8, sl, lsl #2
    c9da:	589a      	ldr	r2, [r3, r2]
    c9dc:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c9e0:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    c9e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c9e6:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    c9e8:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    c9ea:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    c9ec:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    c9ee:	d276      	bcs.n	cade <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    c9f0:	f1a8 0004 	sub.w	r0, r8, #4
    c9f4:	2300      	movs	r3, #0
    c9f6:	f859 0000 	ldr.w	r0, [r9, r0]
    c9fa:	f7f3 fbab 	bl	154 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    c9fe:	2900      	cmp	r1, #0
    ca00:	bf14      	ite	ne
    ca02:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    ca06:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    ca08:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    ca0c:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    ca0e:	bf0e      	itee	eq
    ca10:	2300      	moveq	r3, #0
    ca12:	eb09 0308 	addne.w	r3, r9, r8
    ca16:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    ca1a:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    ca1c:	f1a8 0304 	sub.w	r3, r8, #4
    ca20:	f859 3003 	ldr.w	r3, [r9, r3]
    ca24:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    ca26:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    ca2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    ca2e:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    ca30:	682b      	ldr	r3, [r5, #0]
    ca32:	3301      	adds	r3, #1
    ca34:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    ca36:	9b08      	ldr	r3, [sp, #32]
    ca38:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    ca3a:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    ca3c:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    ca3e:	3b01      	subs	r3, #1
    ca40:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    ca42:	a813      	add	r0, sp, #76	; 0x4c
    ca44:	f7ff fc89 	bl	c35a <mbedtls_mpi_lset>
    ca48:	2800      	cmp	r0, #0
    ca4a:	d14d      	bne.n	cae8 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    ca4c:	9b05      	ldr	r3, [sp, #20]
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d048      	beq.n	cae4 <mbedtls_mpi_div_mpi+0x31e>
    ca52:	f8d8 2000 	ldr.w	r2, [r8]
    ca56:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    ca58:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    ca5a:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    ca5c:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    ca5e:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    ca60:	6812      	ldr	r2, [r2, #0]
    ca62:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    ca64:	682a      	ldr	r2, [r5, #0]
    ca66:	f7ff fe7d 	bl	c764 <mbedtls_mpi_mul_int>
    ca6a:	2800      	cmp	r0, #0
    ca6c:	d13c      	bne.n	cae8 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    ca6e:	a916      	add	r1, sp, #88	; 0x58
    ca70:	a813      	add	r0, sp, #76	; 0x4c
    ca72:	f7ff fd57 	bl	c524 <mbedtls_mpi_cmp_mpi>
    ca76:	2800      	cmp	r0, #0
    ca78:	dcdf      	bgt.n	ca3a <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    ca7a:	682a      	ldr	r2, [r5, #0]
    ca7c:	a90d      	add	r1, sp, #52	; 0x34
    ca7e:	a813      	add	r0, sp, #76	; 0x4c
    ca80:	f7ff fe70 	bl	c764 <mbedtls_mpi_mul_int>
    ca84:	bb80      	cbnz	r0, cae8 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    ca86:	9b02      	ldr	r3, [sp, #8]
    ca88:	a813      	add	r0, sp, #76	; 0x4c
    ca8a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    ca8e:	4641      	mov	r1, r8
    ca90:	f7ff fcb3 	bl	c3fa <mbedtls_mpi_shift_l>
    ca94:	bb40      	cbnz	r0, cae8 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    ca96:	a90a      	add	r1, sp, #40	; 0x28
    ca98:	4608      	mov	r0, r1
    ca9a:	aa13      	add	r2, sp, #76	; 0x4c
    ca9c:	f7ff fe5e 	bl	c75c <mbedtls_mpi_sub_mpi>
    caa0:	4601      	mov	r1, r0
    caa2:	bb18      	cbnz	r0, caec <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    caa4:	a80a      	add	r0, sp, #40	; 0x28
    caa6:	f7ff fd7e 	bl	c5a6 <mbedtls_mpi_cmp_int>
    caaa:	2800      	cmp	r0, #0
    caac:	da12      	bge.n	cad4 <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    caae:	a90d      	add	r1, sp, #52	; 0x34
    cab0:	a813      	add	r0, sp, #76	; 0x4c
    cab2:	f7ff fc1e 	bl	c2f2 <mbedtls_mpi_copy>
    cab6:	b9b8      	cbnz	r0, cae8 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    cab8:	4641      	mov	r1, r8
    caba:	a813      	add	r0, sp, #76	; 0x4c
    cabc:	f7ff fc9d 	bl	c3fa <mbedtls_mpi_shift_l>
    cac0:	b990      	cbnz	r0, cae8 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    cac2:	a90a      	add	r1, sp, #40	; 0x28
    cac4:	4608      	mov	r0, r1
    cac6:	aa13      	add	r2, sp, #76	; 0x4c
    cac8:	f7ff fe45 	bl	c756 <mbedtls_mpi_add_mpi>
    cacc:	b960      	cbnz	r0, cae8 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    cace:	682b      	ldr	r3, [r5, #0]
    cad0:	3b01      	subs	r3, #1
    cad2:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    cad4:	9b02      	ldr	r3, [sp, #8]
    cad6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    cada:	3b04      	subs	r3, #4
    cadc:	e731      	b.n	c942 <mbedtls_mpi_div_mpi+0x17c>
    cade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cae2:	e791      	b.n	ca08 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    cae4:	9a05      	ldr	r2, [sp, #20]
    cae6:	e7b6      	b.n	ca56 <mbedtls_mpi_div_mpi+0x290>
    cae8:	4604      	mov	r4, r0
    caea:	e6a3      	b.n	c834 <mbedtls_mpi_div_mpi+0x6e>
    caec:	460c      	mov	r4, r1
    caee:	e6a1      	b.n	c834 <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    caf0:	f06f 040b 	mvn.w	r4, #11
    caf4:	e693      	b.n	c81e <mbedtls_mpi_div_mpi+0x58>

0000caf6 <mbedtls_mpi_mod_mpi>:
{
    caf6:	b570      	push	{r4, r5, r6, lr}
    caf8:	4604      	mov	r4, r0
    cafa:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    cafc:	4610      	mov	r0, r2
    cafe:	2100      	movs	r1, #0
{
    cb00:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    cb02:	f7ff fd50 	bl	c5a6 <mbedtls_mpi_cmp_int>
    cb06:	2800      	cmp	r0, #0
    cb08:	db24      	blt.n	cb54 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    cb0a:	462a      	mov	r2, r5
    cb0c:	4633      	mov	r3, r6
    cb0e:	4621      	mov	r1, r4
    cb10:	2000      	movs	r0, #0
    cb12:	f7ff fe58 	bl	c7c6 <mbedtls_mpi_div_mpi>
    cb16:	4605      	mov	r5, r0
    cb18:	b138      	cbz	r0, cb2a <mbedtls_mpi_mod_mpi+0x34>
}
    cb1a:	4628      	mov	r0, r5
    cb1c:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    cb1e:	4632      	mov	r2, r6
    cb20:	4621      	mov	r1, r4
    cb22:	4620      	mov	r0, r4
    cb24:	f7ff fe17 	bl	c756 <mbedtls_mpi_add_mpi>
    cb28:	b990      	cbnz	r0, cb50 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    cb2a:	2100      	movs	r1, #0
    cb2c:	4620      	mov	r0, r4
    cb2e:	f7ff fd3a 	bl	c5a6 <mbedtls_mpi_cmp_int>
    cb32:	2800      	cmp	r0, #0
    cb34:	dbf3      	blt.n	cb1e <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    cb36:	4631      	mov	r1, r6
    cb38:	4620      	mov	r0, r4
    cb3a:	f7ff fcf3 	bl	c524 <mbedtls_mpi_cmp_mpi>
    cb3e:	2800      	cmp	r0, #0
    cb40:	dbeb      	blt.n	cb1a <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    cb42:	4632      	mov	r2, r6
    cb44:	4621      	mov	r1, r4
    cb46:	4620      	mov	r0, r4
    cb48:	f7ff fe08 	bl	c75c <mbedtls_mpi_sub_mpi>
    cb4c:	2800      	cmp	r0, #0
    cb4e:	d0f2      	beq.n	cb36 <mbedtls_mpi_mod_mpi+0x40>
    cb50:	4605      	mov	r5, r0
    cb52:	e7e2      	b.n	cb1a <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    cb54:	f06f 0509 	mvn.w	r5, #9
    cb58:	e7df      	b.n	cb1a <mbedtls_mpi_mod_mpi+0x24>

0000cb5a <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    cb5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb5e:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    cb62:	9009      	str	r0, [sp, #36]	; 0x24
    cb64:	460e      	mov	r6, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    cb66:	4618      	mov	r0, r3
    cb68:	2100      	movs	r1, #0
{
    cb6a:	461d      	mov	r5, r3
    cb6c:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    cb6e:	f7ff fd1a 	bl	c5a6 <mbedtls_mpi_cmp_int>
    cb72:	2800      	cmp	r0, #0
    cb74:	dc06      	bgt.n	cb84 <mbedtls_mpi_exp_mod+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    cb76:	f06f 0403 	mvn.w	r4, #3

    if( prec_RR == NULL || prec_RR->p == NULL )
        mbedtls_mpi_free( &RR );

    return( ret );
}
    cb7a:	4620      	mov	r0, r4
    cb7c:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    cb84:	68ab      	ldr	r3, [r5, #8]
    cb86:	681b      	ldr	r3, [r3, #0]
    cb88:	f013 0301 	ands.w	r3, r3, #1
    cb8c:	9308      	str	r3, [sp, #32]
    cb8e:	d0f2      	beq.n	cb76 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    cb90:	2100      	movs	r1, #0
    cb92:	9805      	ldr	r0, [sp, #20]
    cb94:	f7ff fd07 	bl	c5a6 <mbedtls_mpi_cmp_int>
    cb98:	2800      	cmp	r0, #0
    cb9a:	dbec      	blt.n	cb76 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    cb9c:	9805      	ldr	r0, [sp, #20]
    cb9e:	f7ff fc06 	bl	c3ae <mbedtls_mpi_bitlen>
    cba2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cba6:	d8e6      	bhi.n	cb76 <mbedtls_mpi_exp_mod+0x1c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    cba8:	4628      	mov	r0, r5
    cbaa:	f7ff fc00 	bl	c3ae <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    cbae:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cbb2:	d8e0      	bhi.n	cb76 <mbedtls_mpi_exp_mod+0x1c>
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    cbb4:	68a8      	ldr	r0, [r5, #8]
    cbb6:	f000 fbd3 	bl	d360 <mbedtls_mpi_core_montmul_init>
    X->n = 0;
    cbba:	2100      	movs	r1, #0
    cbbc:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
    cbbe:	f44f 7240 	mov.w	r2, #768	; 0x300
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    cbc2:	9003      	str	r0, [sp, #12]
    memset( W, 0, sizeof( W ) );
    cbc4:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    cbc6:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    cbca:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    cbce:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    cbd2:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    cbd6:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    cbda:	9116      	str	r1, [sp, #88]	; 0x58
    cbdc:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    cbde:	f7fe fe71 	bl	b8c4 <memset>
    i = mbedtls_mpi_bitlen( E );
    cbe2:	9805      	ldr	r0, [sp, #20]
    cbe4:	f7ff fbe3 	bl	c3ae <mbedtls_mpi_bitlen>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    cbe8:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    cbec:	f080 80da 	bcs.w	cda4 <mbedtls_mpi_exp_mod+0x24a>
    cbf0:	28ef      	cmp	r0, #239	; 0xef
    cbf2:	f200 80d9 	bhi.w	cda8 <mbedtls_mpi_exp_mod+0x24e>
    cbf6:	284f      	cmp	r0, #79	; 0x4f
    cbf8:	f200 80d8 	bhi.w	cdac <mbedtls_mpi_exp_mod+0x252>
    cbfc:	2818      	cmp	r0, #24
    cbfe:	9b08      	ldr	r3, [sp, #32]
    cc00:	bf28      	it	cs
    cc02:	2303      	movcs	r3, #3
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    cc04:	f04f 0801 	mov.w	r8, #1
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    cc08:	9304      	str	r3, [sp, #16]
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    cc0a:	9b04      	ldr	r3, [sp, #16]
    mbedtls_mpi_copy( &W[x_index], X );
    cc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    cc0e:	fa08 f703 	lsl.w	r7, r8, r3
    X->n = 0;
    cc12:	2300      	movs	r3, #0
    mbedtls_mpi_copy( &W[x_index], X );
    cc14:	a81a      	add	r0, sp, #104	; 0x68
    X->p = NULL;
    cc16:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
    X->s = 1;
    cc1a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    mbedtls_mpi_copy( &W[x_index], X );
    cc1e:	f7ff fb68 	bl	c2f2 <mbedtls_mpi_copy>
    j = N->n + 1;
    cc22:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    cc24:	a81a      	add	r0, sp, #104	; 0x68
    j = N->n + 1;
    cc26:	eb03 0908 	add.w	r9, r3, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    cc2a:	4649      	mov	r1, r9
    cc2c:	f7ff fb1f 	bl	c26e <mbedtls_mpi_grow>
    cc30:	4604      	mov	r4, r0
    cc32:	2800      	cmp	r0, #0
    cc34:	f040 8180 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    cc38:	4649      	mov	r1, r9
    cc3a:	a81d      	add	r0, sp, #116	; 0x74
    cc3c:	f7ff fb17 	bl	c26e <mbedtls_mpi_grow>
    cc40:	4604      	mov	r4, r0
    cc42:	2800      	cmp	r0, #0
    cc44:	f040 8178 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    cc48:	fa09 f108 	lsl.w	r1, r9, r8
    cc4c:	a80e      	add	r0, sp, #56	; 0x38
    cc4e:	f7ff fb0e 	bl	c26e <mbedtls_mpi_grow>
    cc52:	4604      	mov	r4, r0
    cc54:	2800      	cmp	r0, #0
    cc56:	f040 816f 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
    neg = ( A->s == -1 );
    cc5a:	6833      	ldr	r3, [r6, #0]
    cc5c:	9307      	str	r3, [sp, #28]
    if( neg )
    cc5e:	3301      	adds	r3, #1
    cc60:	d10a      	bne.n	cc78 <mbedtls_mpi_exp_mod+0x11e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    cc62:	4631      	mov	r1, r6
    cc64:	a814      	add	r0, sp, #80	; 0x50
    cc66:	f7ff fb44 	bl	c2f2 <mbedtls_mpi_copy>
    cc6a:	4604      	mov	r4, r0
    cc6c:	2800      	cmp	r0, #0
    cc6e:	f040 8163 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
        Apos.s = 1;
    cc72:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        A = &Apos;
    cc76:	ae14      	add	r6, sp, #80	; 0x50
    if( prec_RR == NULL || prec_RR->p == NULL )
    cc78:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cc7a:	b11b      	cbz	r3, cc84 <mbedtls_mpi_exp_mod+0x12a>
    cc7c:	689b      	ldr	r3, [r3, #8]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	f040 8096 	bne.w	cdb0 <mbedtls_mpi_exp_mod+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    cc84:	2101      	movs	r1, #1
    cc86:	a80b      	add	r0, sp, #44	; 0x2c
    cc88:	f7ff fb67 	bl	c35a <mbedtls_mpi_lset>
    cc8c:	4604      	mov	r4, r0
    cc8e:	2800      	cmp	r0, #0
    cc90:	f040 8152 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    cc94:	6869      	ldr	r1, [r5, #4]
    cc96:	a80b      	add	r0, sp, #44	; 0x2c
    cc98:	0189      	lsls	r1, r1, #6
    cc9a:	f7ff fbae 	bl	c3fa <mbedtls_mpi_shift_l>
    cc9e:	4604      	mov	r4, r0
    cca0:	2800      	cmp	r0, #0
    cca2:	f040 8149 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    cca6:	a90b      	add	r1, sp, #44	; 0x2c
    cca8:	462a      	mov	r2, r5
    ccaa:	4608      	mov	r0, r1
    ccac:	f7ff ff23 	bl	caf6 <mbedtls_mpi_mod_mpi>
    ccb0:	4604      	mov	r4, r0
    ccb2:	2800      	cmp	r0, #0
    ccb4:	f040 8140 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
        if( prec_RR != NULL )
    ccb8:	9be4      	ldr	r3, [sp, #912]	; 0x390
    ccba:	b123      	cbz	r3, ccc6 <mbedtls_mpi_exp_mod+0x16c>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    ccbc:	220c      	movs	r2, #12
    ccbe:	4618      	mov	r0, r3
    ccc0:	a90b      	add	r1, sp, #44	; 0x2c
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    ccc2:	f7fe fdf4 	bl	b8ae <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    ccc6:	4629      	mov	r1, r5
    ccc8:	4630      	mov	r0, r6
    ccca:	f7ff fc2b 	bl	c524 <mbedtls_mpi_cmp_mpi>
    ccce:	2800      	cmp	r0, #0
    ccd0:	db72      	blt.n	cdb8 <mbedtls_mpi_exp_mod+0x25e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    ccd2:	462a      	mov	r2, r5
    ccd4:	4631      	mov	r1, r6
    ccd6:	a81d      	add	r0, sp, #116	; 0x74
    ccd8:	f7ff ff0d 	bl	caf6 <mbedtls_mpi_mod_mpi>
    ccdc:	4604      	mov	r4, r0
    ccde:	2800      	cmp	r0, #0
    cce0:	f040 812a 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    cce4:	6869      	ldr	r1, [r5, #4]
    cce6:	a81d      	add	r0, sp, #116	; 0x74
    cce8:	3101      	adds	r1, #1
    ccea:	f7ff fac0 	bl	c26e <mbedtls_mpi_grow>
    ccee:	4604      	mov	r4, r0
    ccf0:	2800      	cmp	r0, #0
    ccf2:	f040 8121 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    ccf6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    ccfa:	462a      	mov	r2, r5
    ccfc:	9b03      	ldr	r3, [sp, #12]
    ccfe:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cd00:	a90b      	add	r1, sp, #44	; 0x2c
    cd02:	f8cd 8000 	str.w	r8, [sp]
    cd06:	f7ff fa8b 	bl	c220 <mpi_montmul.isra.0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[x_index], &RR ) );
    cd0a:	a90b      	add	r1, sp, #44	; 0x2c
    cd0c:	a81a      	add	r0, sp, #104	; 0x68
    cd0e:	f7ff faf0 	bl	c2f2 <mbedtls_mpi_copy>
    cd12:	4604      	mov	r4, r0
    cd14:	2800      	cmp	r0, #0
    cd16:	f040 810f 	bne.w	cf38 <mbedtls_mpi_exp_mod+0x3de>
    mbedtls_mpi_uint z = 1;
    cd1a:	2301      	movs	r3, #1
    cd1c:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    cd1e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cd22:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    cd24:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cd26:	9b03      	ldr	r3, [sp, #12]
    cd28:	462a      	mov	r2, r5
    cd2a:	981c      	ldr	r0, [sp, #112]	; 0x70
    cd2c:	f8cd 8000 	str.w	r8, [sp]
    cd30:	a917      	add	r1, sp, #92	; 0x5c
    cd32:	f7ff fa75 	bl	c220 <mpi_montmul.isra.0>
    if( window_bitsize > 1 )
    cd36:	9b04      	ldr	r3, [sp, #16]
    cd38:	2b01      	cmp	r3, #1
    cd3a:	d142      	bne.n	cdc2 <mbedtls_mpi_exp_mod+0x268>
    size_t exponent_bits_in_window = 0;
    cd3c:	2600      	movs	r6, #0
    state   = 0;
    cd3e:	46b3      	mov	fp, r6
    nbits   = 0;
    cd40:	46b1      	mov	r9, r6
    nblimbs = E->n;
    cd42:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    cd44:	9606      	str	r6, [sp, #24]
    nblimbs = E->n;
    cd46:	f8d3 a004 	ldr.w	sl, [r3, #4]
        if( bufsize == 0 )
    cd4a:	9b06      	ldr	r3, [sp, #24]
    cd4c:	b93b      	cbnz	r3, cd5e <mbedtls_mpi_exp_mod+0x204>
            if( nblimbs == 0 )
    cd4e:	f1ba 0f00 	cmp.w	sl, #0
    cd52:	f000 80da 	beq.w	cf0a <mbedtls_mpi_exp_mod+0x3b0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    cd56:	2320      	movs	r3, #32
            nblimbs--;
    cd58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    cd5c:	9306      	str	r3, [sp, #24]
        bufsize--;
    cd5e:	9b06      	ldr	r3, [sp, #24]
    cd60:	3b01      	subs	r3, #1
    cd62:	9306      	str	r3, [sp, #24]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    cd64:	9b05      	ldr	r3, [sp, #20]
    cd66:	9a06      	ldr	r2, [sp, #24]
    cd68:	689b      	ldr	r3, [r3, #8]
    cd6a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    cd6e:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    cd70:	f013 0301 	ands.w	r3, r3, #1
    cd74:	d16e      	bne.n	ce54 <mbedtls_mpi_exp_mod+0x2fa>
    cd76:	f1bb 0f00 	cmp.w	fp, #0
    cd7a:	d0e6      	beq.n	cd4a <mbedtls_mpi_exp_mod+0x1f0>
        if( ei == 0 && state == 1 )
    cd7c:	f1bb 0f01 	cmp.w	fp, #1
    cd80:	d168      	bne.n	ce54 <mbedtls_mpi_exp_mod+0x2fa>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    cd82:	463a      	mov	r2, r7
    cd84:	a91a      	add	r1, sp, #104	; 0x68
    cd86:	a811      	add	r0, sp, #68	; 0x44
    cd88:	f7ff fa31 	bl	c1ee <mpi_select>
    cd8c:	2800      	cmp	r0, #0
    cd8e:	f040 8102 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cd92:	462a      	mov	r2, r5
    cd94:	9b03      	ldr	r3, [sp, #12]
    cd96:	981c      	ldr	r0, [sp, #112]	; 0x70
    cd98:	f8cd 8000 	str.w	r8, [sp]
    cd9c:	a911      	add	r1, sp, #68	; 0x44
    cd9e:	f7ff fa3f 	bl	c220 <mpi_montmul.isra.0>
            continue;
    cda2:	e7d2      	b.n	cd4a <mbedtls_mpi_exp_mod+0x1f0>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    cda4:	2306      	movs	r3, #6
    cda6:	e72d      	b.n	cc04 <mbedtls_mpi_exp_mod+0xaa>
    cda8:	2305      	movs	r3, #5
    cdaa:	e72b      	b.n	cc04 <mbedtls_mpi_exp_mod+0xaa>
    cdac:	2304      	movs	r3, #4
    cdae:	e729      	b.n	cc04 <mbedtls_mpi_exp_mod+0xaa>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    cdb0:	220c      	movs	r2, #12
    cdb2:	99e4      	ldr	r1, [sp, #912]	; 0x390
    cdb4:	a80b      	add	r0, sp, #44	; 0x2c
    cdb6:	e784      	b.n	ccc2 <mbedtls_mpi_exp_mod+0x168>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    cdb8:	4631      	mov	r1, r6
    cdba:	a81d      	add	r0, sp, #116	; 0x74
    cdbc:	f7ff fa99 	bl	c2f2 <mbedtls_mpi_copy>
    cdc0:	e795      	b.n	ccee <mbedtls_mpi_exp_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    cdc2:	230c      	movs	r3, #12
        j = w_table_used_size / 2;
    cdc4:	ea4f 0957 	mov.w	r9, r7, lsr #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    cdc8:	aa1a      	add	r2, sp, #104	; 0x68
    cdca:	fb03 2609 	mla	r6, r3, r9, r2
    cdce:	6869      	ldr	r1, [r5, #4]
    cdd0:	4630      	mov	r0, r6
    cdd2:	3101      	adds	r1, #1
    cdd4:	f7ff fa4b 	bl	c26e <mbedtls_mpi_grow>
    cdd8:	2800      	cmp	r0, #0
    cdda:	f040 80dc 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    cdde:	4630      	mov	r0, r6
    cde0:	a91d      	add	r1, sp, #116	; 0x74
    cde2:	f7ff fa86 	bl	c2f2 <mbedtls_mpi_copy>
    cde6:	2800      	cmp	r0, #0
    cde8:	f040 80d5 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
        for( i = 0; i < window_bitsize - 1; i++ )
    cdec:	46a2      	mov	sl, r4
    cdee:	9b04      	ldr	r3, [sp, #16]
    cdf0:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    cdf4:	f8cd 8000 	str.w	r8, [sp]
    cdf8:	462a      	mov	r2, r5
    cdfa:	4631      	mov	r1, r6
    cdfc:	9b03      	ldr	r3, [sp, #12]
    cdfe:	68b0      	ldr	r0, [r6, #8]
        for( i = 0; i < window_bitsize - 1; i++ )
    ce00:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    ce04:	f7ff fa0c 	bl	c220 <mpi_montmul.isra.0>
        for( i = 0; i < window_bitsize - 1; i++ )
    ce08:	45da      	cmp	sl, fp
    ce0a:	d3f3      	bcc.n	cdf4 <mbedtls_mpi_exp_mod+0x29a>
        for( i = j + 1; i < w_table_used_size; i++ )
    ce0c:	f109 0901 	add.w	r9, r9, #1
    ce10:	45b9      	cmp	r9, r7
    ce12:	d293      	bcs.n	cd3c <mbedtls_mpi_exp_mod+0x1e2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    ce14:	6869      	ldr	r1, [r5, #4]
    ce16:	f106 0a0c 	add.w	sl, r6, #12
    ce1a:	4650      	mov	r0, sl
    ce1c:	3101      	adds	r1, #1
    ce1e:	f7ff fa26 	bl	c26e <mbedtls_mpi_grow>
    ce22:	2800      	cmp	r0, #0
    ce24:	f040 80b7 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    ce28:	4631      	mov	r1, r6
    ce2a:	4650      	mov	r0, sl
    ce2c:	f7ff fa61 	bl	c2f2 <mbedtls_mpi_copy>
    ce30:	2800      	cmp	r0, #0
    ce32:	f040 80b0 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    ce36:	f8cd 8000 	str.w	r8, [sp]
    ce3a:	6970      	ldr	r0, [r6, #20]
    ce3c:	462a      	mov	r2, r5
    ce3e:	9b03      	ldr	r3, [sp, #12]
    ce40:	a91d      	add	r1, sp, #116	; 0x74
    ce42:	f7ff f9ed 	bl	c220 <mpi_montmul.isra.0>
        for( i = j + 1; i < w_table_used_size; i++ )
    ce46:	4656      	mov	r6, sl
    ce48:	f109 0901 	add.w	r9, r9, #1
    ce4c:	e7e0      	b.n	ce10 <mbedtls_mpi_exp_mod+0x2b6>
        state = 2;
    ce4e:	f04f 0b02 	mov.w	fp, #2
    ce52:	e77a      	b.n	cd4a <mbedtls_mpi_exp_mod+0x1f0>
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    ce54:	9a04      	ldr	r2, [sp, #16]
        nbits++;
    ce56:	f109 0901 	add.w	r9, r9, #1
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    ce5a:	eba2 0209 	sub.w	r2, r2, r9
    ce5e:	4093      	lsls	r3, r2
    ce60:	431e      	orrs	r6, r3
        if( nbits == window_bitsize )
    ce62:	9b04      	ldr	r3, [sp, #16]
    ce64:	454b      	cmp	r3, r9
    ce66:	d1f2      	bne.n	ce4e <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < window_bitsize; i++ )
    ce68:	f04f 0b00 	mov.w	fp, #0
                MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    ce6c:	2300      	movs	r3, #0
    ce6e:	463a      	mov	r2, r7
    ce70:	a91a      	add	r1, sp, #104	; 0x68
    ce72:	a811      	add	r0, sp, #68	; 0x44
    ce74:	f7ff f9bb 	bl	c1ee <mpi_select>
    ce78:	2800      	cmp	r0, #0
    ce7a:	f040 808c 	bne.w	cf96 <mbedtls_mpi_exp_mod+0x43c>
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    ce7e:	462a      	mov	r2, r5
    ce80:	9b03      	ldr	r3, [sp, #12]
    ce82:	981c      	ldr	r0, [sp, #112]	; 0x70
    ce84:	f8cd 8000 	str.w	r8, [sp]
    ce88:	a911      	add	r1, sp, #68	; 0x44
            for( i = 0; i < window_bitsize; i++ )
    ce8a:	f10b 0b01 	add.w	fp, fp, #1
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    ce8e:	f7ff f9c7 	bl	c220 <mpi_montmul.isra.0>
            for( i = 0; i < window_bitsize; i++ )
    ce92:	45d9      	cmp	r9, fp
    ce94:	d8ea      	bhi.n	ce6c <mbedtls_mpi_exp_mod+0x312>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    ce96:	4633      	mov	r3, r6
    ce98:	463a      	mov	r2, r7
    ce9a:	a91a      	add	r1, sp, #104	; 0x68
    ce9c:	a811      	add	r0, sp, #68	; 0x44
    ce9e:	f7ff f9a6 	bl	c1ee <mpi_select>
    cea2:	4606      	mov	r6, r0
    cea4:	2800      	cmp	r0, #0
    cea6:	d178      	bne.n	cf9a <mbedtls_mpi_exp_mod+0x440>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cea8:	462a      	mov	r2, r5
    ceaa:	9b03      	ldr	r3, [sp, #12]
    ceac:	981c      	ldr	r0, [sp, #112]	; 0x70
    ceae:	f8cd 8000 	str.w	r8, [sp]
    ceb2:	a911      	add	r1, sp, #68	; 0x44
    ceb4:	f7ff f9b4 	bl	c220 <mpi_montmul.isra.0>
            nbits = 0;
    ceb8:	46b1      	mov	r9, r6
            state--;
    ceba:	f8dd b020 	ldr.w	fp, [sp, #32]
    cebe:	e744      	b.n	cd4a <mbedtls_mpi_exp_mod+0x1f0>
        MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    cec0:	2300      	movs	r3, #0
    cec2:	463a      	mov	r2, r7
    cec4:	a91a      	add	r1, sp, #104	; 0x68
    cec6:	a811      	add	r0, sp, #68	; 0x44
    cec8:	f7ff f991 	bl	c1ee <mpi_select>
    cecc:	2800      	cmp	r0, #0
    cece:	d162      	bne.n	cf96 <mbedtls_mpi_exp_mod+0x43c>
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    ced0:	462a      	mov	r2, r5
    ced2:	9b03      	ldr	r3, [sp, #12]
    ced4:	981c      	ldr	r0, [sp, #112]	; 0x70
    ced6:	f8cd 8000 	str.w	r8, [sp]
    ceda:	a911      	add	r1, sp, #68	; 0x44
        exponent_bits_in_window <<= 1;
    cedc:	0076      	lsls	r6, r6, #1
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cede:	f7ff f99f 	bl	c220 <mpi_montmul.isra.0>
        if( ( exponent_bits_in_window & ( (size_t) 1 << window_bitsize ) ) != 0 )
    cee2:	4237      	tst	r7, r6
    cee4:	d00f      	beq.n	cf06 <mbedtls_mpi_exp_mod+0x3ac>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    cee6:	2301      	movs	r3, #1
    cee8:	463a      	mov	r2, r7
    ceea:	a91a      	add	r1, sp, #104	; 0x68
    ceec:	a811      	add	r0, sp, #68	; 0x44
    ceee:	f7ff f97e 	bl	c1ee <mpi_select>
    cef2:	2800      	cmp	r0, #0
    cef4:	d14f      	bne.n	cf96 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cef6:	462a      	mov	r2, r5
    cef8:	9b03      	ldr	r3, [sp, #12]
    cefa:	981c      	ldr	r0, [sp, #112]	; 0x70
    cefc:	f8cd 8000 	str.w	r8, [sp]
    cf00:	a911      	add	r1, sp, #68	; 0x44
    cf02:	f7ff f98d 	bl	c220 <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    cf06:	f10a 0a01 	add.w	sl, sl, #1
    cf0a:	45ca      	cmp	sl, r9
    cf0c:	d1d8      	bne.n	cec0 <mbedtls_mpi_exp_mod+0x366>
    mbedtls_mpi_uint z = 1;
    cf0e:	2301      	movs	r3, #1
    cf10:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    cf12:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cf16:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    cf18:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cf1a:	9b03      	ldr	r3, [sp, #12]
    cf1c:	462a      	mov	r2, r5
    cf1e:	981c      	ldr	r0, [sp, #112]	; 0x70
    cf20:	f8cd 8000 	str.w	r8, [sp]
    cf24:	a917      	add	r1, sp, #92	; 0x5c
    cf26:	f7ff f97b 	bl	c220 <mpi_montmul.isra.0>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    cf2a:	9b07      	ldr	r3, [sp, #28]
    cf2c:	3301      	adds	r3, #1
    cf2e:	d020      	beq.n	cf72 <mbedtls_mpi_exp_mod+0x418>
    mbedtls_mpi_copy( X, &W[x_index] );
    cf30:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf32:	a91a      	add	r1, sp, #104	; 0x68
    cf34:	f7ff f9dd 	bl	c2f2 <mbedtls_mpi_copy>
        mbedtls_mpi_free( &W[i] );
    cf38:	260c      	movs	r6, #12
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    cf3a:	087d      	lsrs	r5, r7, #1
    cf3c:	42bd      	cmp	r5, r7
    cf3e:	d32e      	bcc.n	cf9e <mbedtls_mpi_exp_mod+0x444>
    mbedtls_mpi_free( &W[x_index] );
    cf40:	a81a      	add	r0, sp, #104	; 0x68
    cf42:	f7ff f982 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &W[1] );
    cf46:	a81d      	add	r0, sp, #116	; 0x74
    cf48:	f7ff f97f 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
    cf4c:	a80e      	add	r0, sp, #56	; 0x38
    cf4e:	f7ff f97c 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &Apos );
    cf52:	a814      	add	r0, sp, #80	; 0x50
    cf54:	f7ff f979 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    cf58:	a811      	add	r0, sp, #68	; 0x44
    cf5a:	f7ff f976 	bl	c24a <mbedtls_mpi_free>
    if( prec_RR == NULL || prec_RR->p == NULL )
    cf5e:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cf60:	b11b      	cbz	r3, cf6a <mbedtls_mpi_exp_mod+0x410>
    cf62:	689b      	ldr	r3, [r3, #8]
    cf64:	2b00      	cmp	r3, #0
    cf66:	f47f ae08 	bne.w	cb7a <mbedtls_mpi_exp_mod+0x20>
        mbedtls_mpi_free( &RR );
    cf6a:	a80b      	add	r0, sp, #44	; 0x2c
    cf6c:	f7ff f96d 	bl	c24a <mbedtls_mpi_free>
    cf70:	e603      	b.n	cb7a <mbedtls_mpi_exp_mod+0x20>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    cf72:	9b05      	ldr	r3, [sp, #20]
    cf74:	685b      	ldr	r3, [r3, #4]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d0da      	beq.n	cf30 <mbedtls_mpi_exp_mod+0x3d6>
    cf7a:	9b05      	ldr	r3, [sp, #20]
    cf7c:	689b      	ldr	r3, [r3, #8]
    cf7e:	681b      	ldr	r3, [r3, #0]
    cf80:	07db      	lsls	r3, r3, #31
    cf82:	d5d5      	bpl.n	cf30 <mbedtls_mpi_exp_mod+0x3d6>
        W[x_index].s = -1;
    cf84:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    cf86:	aa1a      	add	r2, sp, #104	; 0x68
    cf88:	4629      	mov	r1, r5
    cf8a:	4610      	mov	r0, r2
        W[x_index].s = -1;
    cf8c:	931a      	str	r3, [sp, #104]	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    cf8e:	f7ff fbe2 	bl	c756 <mbedtls_mpi_add_mpi>
    cf92:	2800      	cmp	r0, #0
    cf94:	d0cc      	beq.n	cf30 <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    cf96:	4604      	mov	r4, r0
    cf98:	e7ce      	b.n	cf38 <mbedtls_mpi_exp_mod+0x3de>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    cf9a:	4604      	mov	r4, r0
    cf9c:	e7cc      	b.n	cf38 <mbedtls_mpi_exp_mod+0x3de>
        mbedtls_mpi_free( &W[i] );
    cf9e:	ab1a      	add	r3, sp, #104	; 0x68
    cfa0:	fb06 3005 	mla	r0, r6, r5, r3
    cfa4:	f7ff f951 	bl	c24a <mbedtls_mpi_free>
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    cfa8:	3501      	adds	r5, #1
    cfaa:	e7c7      	b.n	cf3c <mbedtls_mpi_exp_mod+0x3e2>

0000cfac <mbedtls_mpi_core_clz>:
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
    {
        if( a & mask ) break;
    cfac:	1e03      	subs	r3, r0, #0
    cfae:	db0b      	blt.n	cfc8 <mbedtls_mpi_core_clz+0x1c>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    cfb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    cfb4:	2000      	movs	r0, #0
    cfb6:	3001      	adds	r0, #1
    cfb8:	2820      	cmp	r0, #32

        mask >>= 1;
    cfba:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    cfbe:	d100      	bne.n	cfc2 <mbedtls_mpi_core_clz+0x16>
    cfc0:	4770      	bx	lr
        if( a & mask ) break;
    cfc2:	4213      	tst	r3, r2
    cfc4:	d0f7      	beq.n	cfb6 <mbedtls_mpi_core_clz+0xa>
    }

    return( j );
}
    cfc6:	4770      	bx	lr
    for( j = 0; j < biL; j++ )
    cfc8:	2000      	movs	r0, #0
    return( j );
    cfca:	e7fc      	b.n	cfc6 <mbedtls_mpi_core_clz+0x1a>

0000cfcc <mbedtls_mpi_core_bitlen>:

size_t mbedtls_mpi_core_bitlen( const mbedtls_mpi_uint *A, size_t A_limbs )
{
    cfcc:	b508      	push	{r3, lr}
    cfce:	4603      	mov	r3, r0
    size_t i, j;

    if( A_limbs == 0 )
    cfd0:	4608      	mov	r0, r1
    cfd2:	b141      	cbz	r1, cfe6 <mbedtls_mpi_core_bitlen+0x1a>
        return( 0 );

    for( i = A_limbs - 1; i > 0; i-- )
    cfd4:	3901      	subs	r1, #1
    cfd6:	b939      	cbnz	r1, cfe8 <mbedtls_mpi_core_bitlen+0x1c>
        if( A[i] != 0 )
            break;

    j = biL - mbedtls_mpi_core_clz( A[i] );
    cfd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    cfdc:	f7ff ffe6 	bl	cfac <mbedtls_mpi_core_clz>

    return( ( i * biL ) + j );
    cfe0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    cfe4:	3020      	adds	r0, #32
}
    cfe6:	bd08      	pop	{r3, pc}
        if( A[i] != 0 )
    cfe8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    cfec:	2a00      	cmp	r2, #0
    cfee:	d1f3      	bne.n	cfd8 <mbedtls_mpi_core_bitlen+0xc>
    for( i = A_limbs - 1; i > 0; i-- )
    cff0:	3901      	subs	r1, #1
    cff2:	e7f0      	b.n	cfd6 <mbedtls_mpi_core_bitlen+0xa>

0000cff4 <mbedtls_mpi_core_bigendian_to_host>:
    return( mpi_bigendian_to_host_c( a ) );
}

void mbedtls_mpi_core_bigendian_to_host( mbedtls_mpi_uint *A,
                                         size_t A_limbs )
{
    cff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( A_limbs == 0 )
    cff6:	b131      	cbz	r1, d006 <mbedtls_mpi_core_bigendian_to_host+0x12>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = A, cur_limb_right = A + ( A_limbs - 1 );
    cff8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
    cffc:	3b01      	subs	r3, #1
    cffe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         cur_limb_left <= cur_limb_right;
    d002:	4283      	cmp	r3, r0
    d004:	d201      	bcs.n	d00a <mbedtls_mpi_core_bigendian_to_host+0x16>
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
        *cur_limb_right = tmp;
    }
}
    d006:	b002      	add	sp, #8
    d008:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_bigendian_to_host_c( a ) );
    d00a:	6802      	ldr	r2, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    d00c:	2400      	movs	r4, #0
    d00e:	9201      	str	r2, [sp, #4]
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
    d010:	2204      	movs	r2, #4
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d012:	eb0d 0502 	add.w	r5, sp, r2
    d016:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    d018:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d01c:	3a01      	subs	r2, #1
    d01e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    d022:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d026:	d1f7      	bne.n	d018 <mbedtls_mpi_core_bigendian_to_host+0x24>
    return( mpi_bigendian_to_host_c( a ) );
    d028:	681d      	ldr	r5, [r3, #0]
    d02a:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    d02c:	4615      	mov	r5, r2
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d02e:	3201      	adds	r2, #1
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    d030:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d034:	b2d2      	uxtb	r2, r2
    d036:	2a04      	cmp	r2, #4
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    d038:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    d03c:	d1f7      	bne.n	d02e <mbedtls_mpi_core_bigendian_to_host+0x3a>
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
    d03e:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    d042:	f843 4904 	str.w	r4, [r3], #-4
         cur_limb_left++, cur_limb_right-- )
    d046:	e7dc      	b.n	d002 <mbedtls_mpi_core_bigendian_to_host+0xe>

0000d048 <mbedtls_mpi_core_cond_assign>:

void mbedtls_mpi_core_cond_assign( mbedtls_mpi_uint *X,
                                   const mbedtls_mpi_uint *A,
                                   size_t limbs,
                                   unsigned char assign )
{
    d048:	b410      	push	{r4}
    d04a:	4604      	mov	r4, r0
    if( X == A )
    d04c:	428c      	cmp	r4, r1
{
    d04e:	4610      	mov	r0, r2
    if( X == A )
    d050:	d004      	beq.n	d05c <mbedtls_mpi_core_cond_assign+0x14>
        return;

    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    d052:	460a      	mov	r2, r1
    d054:	4621      	mov	r1, r4
}
    d056:	bc10      	pop	{r4}
    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    d058:	f000 b9f7 	b.w	d44a <mbedtls_ct_mpi_uint_cond_assign>
}
    d05c:	bc10      	pop	{r4}
    d05e:	4770      	bx	lr

0000d060 <mbedtls_mpi_core_read_be>:

int mbedtls_mpi_core_read_be( mbedtls_mpi_uint *X,
                              size_t X_limbs,
                              const unsigned char *input,
                              size_t input_length )
{
    d060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d064:	461c      	mov	r4, r3
    const size_t limbs = CHARS_TO_LIMBS( input_length );
    d066:	f013 0303 	ands.w	r3, r3, #3
    d06a:	bf18      	it	ne
    d06c:	2301      	movne	r3, #1
    d06e:	eb03 0394 	add.w	r3, r3, r4, lsr #2

    if( X_limbs < limbs )
    d072:	428b      	cmp	r3, r1
{
    d074:	4606      	mov	r6, r0
    d076:	460d      	mov	r5, r1
    d078:	4690      	mov	r8, r2
    if( X_limbs < limbs )
    d07a:	d813      	bhi.n	d0a4 <mbedtls_mpi_core_read_be+0x44>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    /* If X_limbs is 0, input_length must also be 0 (from previous test).
     * Nothing to do. */
    if( X_limbs == 0 )
    d07c:	b179      	cbz	r1, d09e <mbedtls_mpi_core_read_be+0x3e>
        return( 0 );

    memset( X, 0, X_limbs * ciL );
    d07e:	008f      	lsls	r7, r1, #2
    d080:	463a      	mov	r2, r7
    d082:	2100      	movs	r1, #0
    d084:	f7fe fc1e 	bl	b8c4 <memset>

    /* memcpy() with (NULL, 0) is undefined behaviour */
    if( input_length != 0 )
    d088:	b12c      	cbz	r4, d096 <mbedtls_mpi_core_read_be+0x36>
    {
        size_t overhead = ( X_limbs * ciL ) - input_length;
    d08a:	1b38      	subs	r0, r7, r4
        unsigned char *Xp = (unsigned char *) X;
        memcpy( Xp + overhead, input, input_length );
    d08c:	4622      	mov	r2, r4
    d08e:	4641      	mov	r1, r8
    d090:	4430      	add	r0, r6
    d092:	f7fe fc0c 	bl	b8ae <memcpy>
    }

    mbedtls_mpi_core_bigendian_to_host( X, X_limbs );
    d096:	4629      	mov	r1, r5
    d098:	4630      	mov	r0, r6
    d09a:	f7ff ffab 	bl	cff4 <mbedtls_mpi_core_bigendian_to_host>
        return( 0 );
    d09e:	2000      	movs	r0, #0

    return( 0 );
}
    d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    d0a4:	f06f 0007 	mvn.w	r0, #7
    d0a8:	e7fa      	b.n	d0a0 <mbedtls_mpi_core_read_be+0x40>

0000d0aa <mbedtls_mpi_core_write_be>:
    size_t bytes_to_copy;
    unsigned char *p;

    stored_bytes = X_limbs * ciL;

    if( stored_bytes < output_length )
    d0aa:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
{
    d0ae:	b570      	push	{r4, r5, r6, lr}
    d0b0:	4604      	mov	r4, r0
    stored_bytes = X_limbs * ciL;
    d0b2:	ea4f 0581 	mov.w	r5, r1, lsl #2
{
    d0b6:	4610      	mov	r0, r2
    if( stored_bytes < output_length )
    d0b8:	d919      	bls.n	d0ee <mbedtls_mpi_core_write_be+0x44>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = output + output_length - stored_bytes;
    d0ba:	1b5a      	subs	r2, r3, r5
    d0bc:	1886      	adds	r6, r0, r2
        memset( output, 0, output_length - stored_bytes );
    d0be:	2100      	movs	r1, #0
    d0c0:	f7fe fc00 	bl	b8c4 <memset>
        p = output + output_length - stored_bytes;
    d0c4:	4630      	mov	r0, r6
    d0c6:	462b      	mov	r3, r5
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( size_t i = 0; i < bytes_to_copy; i++ )
    d0c8:	2100      	movs	r1, #0
    d0ca:	18c2      	adds	r2, r0, r3
    d0cc:	428b      	cmp	r3, r1
    d0ce:	d110      	bne.n	d0f2 <mbedtls_mpi_core_write_be+0x48>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
    d0d0:	2000      	movs	r0, #0
}
    d0d2:	bd70      	pop	{r4, r5, r6, pc}
            if( GET_BYTE( X, i ) != 0 )
    d0d4:	f022 0103 	bic.w	r1, r2, #3
    d0d8:	5861      	ldr	r1, [r4, r1]
    d0da:	f002 0603 	and.w	r6, r2, #3
    d0de:	00f6      	lsls	r6, r6, #3
    d0e0:	40f1      	lsrs	r1, r6
    d0e2:	b2c9      	uxtb	r1, r1
    d0e4:	b981      	cbnz	r1, d108 <mbedtls_mpi_core_write_be+0x5e>
        for( size_t i = bytes_to_copy; i < stored_bytes; i++ )
    d0e6:	3201      	adds	r2, #1
    d0e8:	42aa      	cmp	r2, r5
    d0ea:	d1f3      	bne.n	d0d4 <mbedtls_mpi_core_write_be+0x2a>
    d0ec:	e7ec      	b.n	d0c8 <mbedtls_mpi_core_write_be+0x1e>
    d0ee:	461a      	mov	r2, r3
    d0f0:	e7fa      	b.n	d0e8 <mbedtls_mpi_core_write_be+0x3e>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    d0f2:	f021 0003 	bic.w	r0, r1, #3
    d0f6:	5820      	ldr	r0, [r4, r0]
    d0f8:	f001 0503 	and.w	r5, r1, #3
    d0fc:	00ed      	lsls	r5, r5, #3
    d0fe:	40e8      	lsrs	r0, r5
    d100:	f802 0d01 	strb.w	r0, [r2, #-1]!
    for( size_t i = 0; i < bytes_to_copy; i++ )
    d104:	3101      	adds	r1, #1
    d106:	e7e1      	b.n	d0cc <mbedtls_mpi_core_write_be+0x22>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    d108:	f06f 0007 	mvn.w	r0, #7
    d10c:	e7e1      	b.n	d0d2 <mbedtls_mpi_core_write_be+0x28>

0000d10e <mbedtls_mpi_core_shift_r>:
                               size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    d10e:	0953      	lsrs	r3, r2, #5
    v1 = count & (biL - 1);

    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    d110:	428b      	cmp	r3, r1
{
    d112:	b4f0      	push	{r4, r5, r6, r7}
    v1 = count & (biL - 1);
    d114:	f002 041f 	and.w	r4, r2, #31
    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    d118:	d801      	bhi.n	d11e <mbedtls_mpi_core_shift_r+0x10>
    d11a:	d109      	bne.n	d130 <mbedtls_mpi_core_shift_r+0x22>
    d11c:	b124      	cbz	r4, d128 <mbedtls_mpi_core_shift_r+0x1a>
            X[i - 1] >>= v1;
            X[i - 1] |= r0;
            r0 = r1;
        }
    }
}
    d11e:	bcf0      	pop	{r4, r5, r6, r7}
        memset( X, 0, limbs * ciL );
    d120:	008a      	lsls	r2, r1, #2
    d122:	2100      	movs	r1, #0
    d124:	f7fe bbce 	b.w	b8c4 <memset>
    if( v0 > 0 )
    d128:	2a1f      	cmp	r2, #31
    d12a:	d803      	bhi.n	d134 <mbedtls_mpi_core_shift_r+0x26>
}
    d12c:	bcf0      	pop	{r4, r5, r6, r7}
    d12e:	4770      	bx	lr
    if( v0 > 0 )
    d130:	2a1f      	cmp	r2, #31
    d132:	d90a      	bls.n	d14a <mbedtls_mpi_core_shift_r+0x3c>
    d134:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    d138:	1f05      	subs	r5, r0, #4
    d13a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
        for( i = 0; i < limbs - v0; i++ )
    d13e:	42b2      	cmp	r2, r6
    d140:	d116      	bne.n	d170 <mbedtls_mpi_core_shift_r+0x62>
            X[i] = 0;
    d142:	2200      	movs	r2, #0
        for( i = 0; i < limbs - v0; i++ )
    d144:	1acb      	subs	r3, r1, r3
        for( ; i < limbs; i++ )
    d146:	428b      	cmp	r3, r1
    d148:	d317      	bcc.n	d17a <mbedtls_mpi_core_shift_r+0x6c>
    if( v1 > 0 )
    d14a:	2c00      	cmp	r4, #0
    d14c:	d0ee      	beq.n	d12c <mbedtls_mpi_core_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    d14e:	2200      	movs	r2, #0
    d150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            r1 = X[i - 1] << (biL - v1);
    d154:	f1c4 0620 	rsb	r6, r4, #32
        for( i = limbs; i > 0; i-- )
    d158:	4281      	cmp	r1, r0
    d15a:	d0e7      	beq.n	d12c <mbedtls_mpi_core_shift_r+0x1e>
            r1 = X[i - 1] << (biL - v1);
    d15c:	f851 5c04 	ldr.w	r5, [r1, #-4]
            X[i - 1] >>= v1;
    d160:	fa25 f304 	lsr.w	r3, r5, r4
            X[i - 1] |= r0;
    d164:	4313      	orrs	r3, r2
    d166:	f841 3d04 	str.w	r3, [r1, #-4]!
            r0 = r1;
    d16a:	fa05 f206 	lsl.w	r2, r5, r6
    d16e:	e7f3      	b.n	d158 <mbedtls_mpi_core_shift_r+0x4a>
            X[i] = X[i + v0];
    d170:	f852 7b04 	ldr.w	r7, [r2], #4
    d174:	f845 7f04 	str.w	r7, [r5, #4]!
        for( i = 0; i < limbs - v0; i++ )
    d178:	e7e1      	b.n	d13e <mbedtls_mpi_core_shift_r+0x30>
            X[i] = 0;
    d17a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for( ; i < limbs; i++ )
    d17e:	3301      	adds	r3, #1
    d180:	e7e1      	b.n	d146 <mbedtls_mpi_core_shift_r+0x38>

0000d182 <mbedtls_mpi_core_add>:

mbedtls_mpi_uint mbedtls_mpi_core_add( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    d182:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    d184:	2400      	movs	r4, #0
{
    d186:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0;
    d188:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    d18a:	429c      	cmp	r4, r3
    d18c:	d100      	bne.n	d190 <mbedtls_mpi_core_add+0xe>
        c += ( t < B[i] );
        X[i] = t;
    }

    return( c );
}
    d18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint t = c + A[i];
    d190:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        c = ( t < A[i] );
    d194:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
    d198:	182e      	adds	r6, r5, r0
    d19a:	bf2c      	ite	cs
    d19c:	2501      	movcs	r5, #1
    d19e:	2500      	movcc	r5, #0
        c += ( t < B[i] );
    d1a0:	19bf      	adds	r7, r7, r6
        X[i] = t;
    d1a2:	f84c 7024 	str.w	r7, [ip, r4, lsl #2]
        c += ( t < B[i] );
    d1a6:	f145 0000 	adc.w	r0, r5, #0
    for( size_t i = 0; i < limbs; i++ )
    d1aa:	3401      	adds	r4, #1
    d1ac:	e7ed      	b.n	d18a <mbedtls_mpi_core_add+0x8>

0000d1ae <mbedtls_mpi_core_sub>:

mbedtls_mpi_uint mbedtls_mpi_core_sub( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    d1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    d1b0:	2400      	movs	r4, #0
{
    d1b2:	4606      	mov	r6, r0
    mbedtls_mpi_uint c = 0;
    d1b4:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    d1b6:	429c      	cmp	r4, r3
    d1b8:	d100      	bne.n	d1bc <mbedtls_mpi_core_sub+0xe>
        c = ( t < B[i] ) + z;
        X[i] = t - B[i];
    }

    return( c );
}
    d1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint z = ( A[i] < c );
    d1bc:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
        c = ( t < B[i] ) + z;
    d1c0:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
        mbedtls_mpi_uint t = A[i] - c;
    d1c4:	ebac 0500 	sub.w	r5, ip, r0
        c = ( t < B[i] ) + z;
    d1c8:	42af      	cmp	r7, r5
    d1ca:	bf94      	ite	ls
    d1cc:	f04f 0e00 	movls.w	lr, #0
    d1d0:	f04f 0e01 	movhi.w	lr, #1
        X[i] = t - B[i];
    d1d4:	1bed      	subs	r5, r5, r7
    d1d6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        c = ( t < B[i] ) + z;
    d1da:	4584      	cmp	ip, r0
    d1dc:	bf2c      	ite	cs
    d1de:	4670      	movcs	r0, lr
    d1e0:	f10e 0001 	addcc.w	r0, lr, #1
    for( size_t i = 0; i < limbs; i++ )
    d1e4:	3401      	adds	r4, #1
    d1e6:	e7e6      	b.n	d1b6 <mbedtls_mpi_core_sub+0x8>

0000d1e8 <mbedtls_mpi_core_mla>:
    /*
     * It is a documented precondition of this function that d_len >= s_len.
     * If that's not the case, we swap these round: this turns what would be
     * a buffer overflow into an incorrect result.
     */
    if( d_len < s_len )
    d1e8:	428b      	cmp	r3, r1
    d1ea:	bf28      	it	cs
    d1ec:	460b      	movcs	r3, r1
{
    d1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d1f2:	4696      	mov	lr, r2
        s_len = d_len;
    size_t excess_len = d_len - s_len;
    size_t steps_x8 = s_len / 8;
    d1f4:	08de      	lsrs	r6, r3, #3
{
    d1f6:	4604      	mov	r4, r0
    size_t excess_len = d_len - s_len;
    d1f8:	1ac9      	subs	r1, r1, r3
    size_t steps_x1 = s_len & 7;
    d1fa:	f003 0807 	and.w	r8, r3, #7

    while( steps_x8-- )
    d1fe:	4675      	mov	r5, lr
    d200:	4603      	mov	r3, r0
    size_t steps_x8 = s_len / 8;
    d202:	46b4      	mov	ip, r6
    mbedtls_mpi_uint c = 0; /* carry */
    d204:	2000      	movs	r0, #0
{
    d206:	9a08      	ldr	r2, [sp, #32]
    while( steps_x8-- )
    d208:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d20c:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    d210:	f103 0320 	add.w	r3, r3, #32
    d214:	f105 0520 	add.w	r5, r5, #32
    d218:	d111      	bne.n	d23e <mbedtls_mpi_core_mla+0x56>
    d21a:	eb04 1446 	add.w	r4, r4, r6, lsl #5
    d21e:	4625      	mov	r5, r4
    d220:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
    d224:	ea4f 0c88 	mov.w	ip, r8, lsl #2
    d228:	eb06 0e88 	add.w	lr, r6, r8, lsl #2
        MULADDC_X8_INIT
        MULADDC_X8_CORE
        MULADDC_X8_STOP
    }

    while( steps_x1-- )
    d22c:	4576      	cmp	r6, lr
    d22e:	f040 8081 	bne.w	d334 <mbedtls_mpi_core_mla+0x14c>
    d232:	4464      	add	r4, ip
        MULADDC_X1_INIT
        MULADDC_X1_CORE
        MULADDC_X1_STOP
    }

    while( excess_len-- )
    d234:	3901      	subs	r1, #1
    d236:	f080 808b 	bcs.w	d350 <mbedtls_mpi_core_mla+0x168>
        c = ( *d < c );
        d++;
    }

    return( c );
}
    d23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_X8_CORE
    d23e:	f855 7c20 	ldr.w	r7, [r5, #-32]
    d242:	fba2 9707 	umull	r9, r7, r2, r7
    d246:	eb10 0909 	adds.w	r9, r0, r9
    d24a:	f853 0c20 	ldr.w	r0, [r3, #-32]
    d24e:	f147 0700 	adc.w	r7, r7, #0
    d252:	eb10 0009 	adds.w	r0, r0, r9
    d256:	f843 0c20 	str.w	r0, [r3, #-32]
    d25a:	f855 0c1c 	ldr.w	r0, [r5, #-28]
    d25e:	f147 0700 	adc.w	r7, r7, #0
    d262:	fba2 0900 	umull	r0, r9, r2, r0
    d266:	183f      	adds	r7, r7, r0
    d268:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    d26c:	f149 0900 	adc.w	r9, r9, #0
    d270:	19c0      	adds	r0, r0, r7
    d272:	f843 0c1c 	str.w	r0, [r3, #-28]
    d276:	f855 0c18 	ldr.w	r0, [r5, #-24]
    d27a:	f149 0900 	adc.w	r9, r9, #0
    d27e:	fba2 0700 	umull	r0, r7, r2, r0
    d282:	eb19 0900 	adds.w	r9, r9, r0
    d286:	f853 0c18 	ldr.w	r0, [r3, #-24]
    d28a:	f147 0700 	adc.w	r7, r7, #0
    d28e:	eb10 0009 	adds.w	r0, r0, r9
    d292:	f843 0c18 	str.w	r0, [r3, #-24]
    d296:	f855 0c14 	ldr.w	r0, [r5, #-20]
    d29a:	f147 0700 	adc.w	r7, r7, #0
    d29e:	fba2 0900 	umull	r0, r9, r2, r0
    d2a2:	183f      	adds	r7, r7, r0
    d2a4:	f853 0c14 	ldr.w	r0, [r3, #-20]
    d2a8:	f149 0900 	adc.w	r9, r9, #0
    d2ac:	19c0      	adds	r0, r0, r7
    d2ae:	f843 0c14 	str.w	r0, [r3, #-20]
    d2b2:	f855 0c10 	ldr.w	r0, [r5, #-16]
    d2b6:	f149 0900 	adc.w	r9, r9, #0
    d2ba:	fba2 0700 	umull	r0, r7, r2, r0
    d2be:	eb19 0900 	adds.w	r9, r9, r0
    d2c2:	f853 0c10 	ldr.w	r0, [r3, #-16]
    d2c6:	f147 0700 	adc.w	r7, r7, #0
    d2ca:	eb10 0009 	adds.w	r0, r0, r9
    d2ce:	f843 0c10 	str.w	r0, [r3, #-16]
    d2d2:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    d2d6:	f147 0700 	adc.w	r7, r7, #0
    d2da:	fba2 0900 	umull	r0, r9, r2, r0
    d2de:	183f      	adds	r7, r7, r0
    d2e0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    d2e4:	f149 0900 	adc.w	r9, r9, #0
    d2e8:	19c0      	adds	r0, r0, r7
    d2ea:	f843 0c0c 	str.w	r0, [r3, #-12]
    d2ee:	f855 0c08 	ldr.w	r0, [r5, #-8]
    d2f2:	f149 0900 	adc.w	r9, r9, #0
    d2f6:	fba2 0700 	umull	r0, r7, r2, r0
    d2fa:	eb19 0900 	adds.w	r9, r9, r0
    d2fe:	f853 0c08 	ldr.w	r0, [r3, #-8]
    d302:	f147 0700 	adc.w	r7, r7, #0
    d306:	eb10 0009 	adds.w	r0, r0, r9
    d30a:	f843 0c08 	str.w	r0, [r3, #-8]
    d30e:	f855 0c04 	ldr.w	r0, [r5, #-4]
    d312:	f147 0700 	adc.w	r7, r7, #0
    d316:	fba2 0a00 	umull	r0, sl, r2, r0
    d31a:	eb17 0900 	adds.w	r9, r7, r0
    d31e:	f853 7c04 	ldr.w	r7, [r3, #-4]
    d322:	f14a 0000 	adc.w	r0, sl, #0
    d326:	eb17 0709 	adds.w	r7, r7, r9
    d32a:	f140 0000 	adc.w	r0, r0, #0
    d32e:	f843 7c04 	str.w	r7, [r3, #-4]
    d332:	e769      	b.n	d208 <mbedtls_mpi_core_mla+0x20>
        MULADDC_X1_CORE
    d334:	f856 3b04 	ldr.w	r3, [r6], #4
    d338:	fba2 3703 	umull	r3, r7, r2, r3
    d33c:	18c3      	adds	r3, r0, r3
    d33e:	6828      	ldr	r0, [r5, #0]
    d340:	f147 0700 	adc.w	r7, r7, #0
    d344:	18c3      	adds	r3, r0, r3
    d346:	f147 0000 	adc.w	r0, r7, #0
    d34a:	f845 3b04 	str.w	r3, [r5], #4
    d34e:	e76d      	b.n	d22c <mbedtls_mpi_core_mla+0x44>
        *d += c;
    d350:	6823      	ldr	r3, [r4, #0]
    d352:	181b      	adds	r3, r3, r0
        c = ( *d < c );
    d354:	bf2c      	ite	cs
    d356:	2001      	movcs	r0, #1
    d358:	2000      	movcc	r0, #0
        *d += c;
    d35a:	f844 3b04 	str.w	r3, [r4], #4
        d++;
    d35e:	e769      	b.n	d234 <mbedtls_mpi_core_mla+0x4c>

0000d360 <mbedtls_mpi_core_montmul_init>:
 */
mbedtls_mpi_uint mbedtls_mpi_core_montmul_init( const mbedtls_mpi_uint *N )
{
    mbedtls_mpi_uint x = N[0];

    x += ( ( N[0] + 2 ) & 4 ) << 1;
    d360:	2303      	movs	r3, #3
    mbedtls_mpi_uint x = N[0];
    d362:	6801      	ldr	r1, [r0, #0]
    x += ( ( N[0] + 2 ) & 4 ) << 1;
    d364:	1c88      	adds	r0, r1, #2
    d366:	0040      	lsls	r0, r0, #1
    d368:	f000 0008 	and.w	r0, r0, #8
    d36c:	4408      	add	r0, r1

    for( unsigned int i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( N[0] * x ) );
    d36e:	fb00 f201 	mul.w	r2, r0, r1
    for( unsigned int i = biL; i >= 8; i /= 2 )
    d372:	3b01      	subs	r3, #1
        x *= ( 2 - ( N[0] * x ) );
    d374:	f1c2 0202 	rsb	r2, r2, #2
    d378:	fb02 f000 	mul.w	r0, r2, r0
    for( unsigned int i = biL; i >= 8; i /= 2 )
    d37c:	d1f7      	bne.n	d36e <mbedtls_mpi_core_montmul_init+0xe>

    return( ~x + 1 );
}
    d37e:	4240      	negs	r0, r0
    d380:	4770      	bx	lr

0000d382 <mbedtls_mpi_core_montmul>:
                               size_t B_limbs,
                               const mbedtls_mpi_uint *N,
                               size_t AN_limbs,
                               mbedtls_mpi_uint mm,
                               mbedtls_mpi_uint *T )
{
    d382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d386:	b087      	sub	sp, #28
    d388:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );

    for( size_t i = 0; i < AN_limbs; i++ )
    d38a:	2400      	movs	r4, #0
    d38c:	462e      	mov	r6, r5
{
    d38e:	9304      	str	r3, [sp, #16]
    d390:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d392:	4691      	mov	r9, r2
    d394:	9302      	str	r3, [sp, #8]
    d396:	e9dd 8311 	ldrd	r8, r3, [sp, #68]	; 0x44
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d39a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
{
    d39e:	4683      	mov	fp, r0
    d3a0:	468a      	mov	sl, r1
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d3a2:	4628      	mov	r0, r5
    d3a4:	2100      	movs	r1, #0
    d3a6:	3204      	adds	r2, #4
{
    d3a8:	9305      	str	r3, [sp, #20]
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d3aa:	f7fe fa8b 	bl	b8c4 <memset>
    {
        /* T = (T + u0*B + u1*N) / 2^biL */
        mbedtls_mpi_uint u0 = A[i];
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;

        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d3ae:	f108 0302 	add.w	r3, r8, #2
    d3b2:	9303      	str	r3, [sp, #12]
    for( size_t i = 0; i < AN_limbs; i++ )
    d3b4:	4544      	cmp	r4, r8
    d3b6:	d113      	bne.n	d3e0 <mbedtls_mpi_core_montmul+0x5e>
    d3b8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
     * We also look to see if there was any carry in the final additions in the
     * loop above.
     */

    mbedtls_mpi_uint carry  = T[AN_limbs];
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    d3bc:	4623      	mov	r3, r4
    d3be:	9a02      	ldr	r2, [sp, #8]
    d3c0:	4658      	mov	r0, fp
    mbedtls_mpi_uint carry  = T[AN_limbs];
    d3c2:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    d3c6:	f7ff fef2 	bl	d1ae <mbedtls_mpi_core_sub>
     * and (carry, borrow) = (1, 0) can't happen.
     *
     * So the correct return value is already in X if (carry ^ borrow) = 0,
     * but is in (the lower AN_limbs limbs of) T if (carry ^ borrow) = 1.
     */
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    d3ca:	460a      	mov	r2, r1
    d3cc:	ea85 0300 	eor.w	r3, r5, r0
    d3d0:	4659      	mov	r1, fp
    d3d2:	4620      	mov	r0, r4
    d3d4:	b2db      	uxtb	r3, r3
}
    d3d6:	b007      	add	sp, #28
    d3d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    d3dc:	f000 b835 	b.w	d44a <mbedtls_ct_mpi_uint_cond_assign>
        mbedtls_mpi_uint u0 = A[i];
    d3e0:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d3e4:	f8d9 2000 	ldr.w	r2, [r9]
    d3e8:	6837      	ldr	r7, [r6, #0]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d3ea:	4630      	mov	r0, r6
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d3ec:	fb02 7703 	mla	r7, r2, r3, r7
    d3f0:	9a05      	ldr	r2, [sp, #20]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d3f2:	9903      	ldr	r1, [sp, #12]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d3f4:	4357      	muls	r7, r2
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d3f6:	9300      	str	r3, [sp, #0]
    d3f8:	464a      	mov	r2, r9
    d3fa:	9b04      	ldr	r3, [sp, #16]
    d3fc:	f7ff fef4 	bl	d1e8 <mbedtls_mpi_core_mla>
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, N, AN_limbs, u1 );
    d400:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    d404:	4630      	mov	r0, r6
    d406:	4643      	mov	r3, r8
    d408:	9700      	str	r7, [sp, #0]
    d40a:	f7ff feed 	bl	d1e8 <mbedtls_mpi_core_mla>
        T++;
    d40e:	3604      	adds	r6, #4
    for( size_t i = 0; i < AN_limbs; i++ )
    d410:	3401      	adds	r4, #1
    d412:	e7cf      	b.n	d3b4 <mbedtls_mpi_core_montmul+0x32>

0000d414 <mbedtls_mpi_core_sub_int>:

mbedtls_mpi_uint mbedtls_mpi_core_sub_int( mbedtls_mpi_uint *X,
                                           const mbedtls_mpi_uint *A,
                                           mbedtls_mpi_uint c, /* doubles as carry */
                                           size_t limbs )
{
    d414:	b530      	push	{r4, r5, lr}
    d416:	4605      	mov	r5, r0
    for( size_t i = 0; i < limbs; i++ )
    d418:	4610      	mov	r0, r2
    d41a:	2200      	movs	r2, #0
    d41c:	429a      	cmp	r2, r3
    d41e:	d100      	bne.n	d422 <mbedtls_mpi_core_sub_int+0xe>
        c = ( t > s );
        X[i] = t;
    }

    return( c );
}
    d420:	bd30      	pop	{r4, r5, pc}
        mbedtls_mpi_uint t = s - c;
    d422:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
        c = ( t > s );
    d426:	1a24      	subs	r4, r4, r0
        X[i] = t;
    d428:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        c = ( t > s );
    d42c:	bf34      	ite	cc
    d42e:	2001      	movcc	r0, #1
    d430:	2000      	movcs	r0, #0
    for( size_t i = 0; i < limbs; i++ )
    d432:	3201      	adds	r2, #1
    d434:	e7f2      	b.n	d41c <mbedtls_mpi_core_sub_int+0x8>

0000d436 <platform_calloc_uninit>:
}
    d436:	2000      	movs	r0, #0
    d438:	4770      	bx	lr

0000d43a <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    d43a:	4770      	bx	lr

0000d43c <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    d43c:	4770      	bx	lr

0000d43e <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    d43e:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    d440:	4248      	negs	r0, r1
    d442:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    d444:	43c0      	mvns	r0, r0
    d446:	0fc0      	lsrs	r0, r0, #31
    d448:	4770      	bx	lr

0000d44a <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    d44a:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    d44c:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    d44e:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    d450:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d452:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    d454:	4285      	cmp	r5, r0
    d456:	d100      	bne.n	d45a <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    d458:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d45a:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    d45e:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d462:	403e      	ands	r6, r7
    d464:	401c      	ands	r4, r3
    d466:	4334      	orrs	r4, r6
    d468:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    d46a:	3501      	adds	r5, #1
    d46c:	e7f2      	b.n	d454 <mbedtls_ct_mpi_uint_cond_assign+0xa>

0000d46e <mbedtls_mpi_safe_cond_assign>:
__declspec(noinline)
#endif
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    d46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d472:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    mbedtls_mpi_uint limb_mask = mbedtls_ct_mpi_uint_mask( assign );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d474:	6849      	ldr	r1, [r1, #4]
{
    d476:	4605      	mov	r5, r0
    d478:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d47a:	f7fe fef8 	bl	c26e <mbedtls_mpi_grow>
    d47e:	4680      	mov	r8, r0
    d480:	b9c8      	cbnz	r0, d4b6 <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    d482:	f1c9 0600 	rsb	r6, r9, #0
    d486:	ea46 0609 	orr.w	r6, r6, r9
    d48a:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );

    for( size_t i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    d48c:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    d48e:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    d490:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    d492:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    d494:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    d496:	405c      	eors	r4, r3
    d498:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    d49c:	405c      	eors	r4, r3
    d49e:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    d4a0:	602c      	str	r4, [r5, #0]
    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );
    d4a2:	464b      	mov	r3, r9
    d4a4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
    d4a8:	68a8      	ldr	r0, [r5, #8]
    d4aa:	f7ff fdcd 	bl	d048 <mbedtls_mpi_core_cond_assign>
    for( size_t i = Y->n; i < X->n; i++ )
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	686a      	ldr	r2, [r5, #4]
    d4b2:	429a      	cmp	r2, r3
    d4b4:	d802      	bhi.n	d4bc <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    d4b6:	4640      	mov	r0, r8
    d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    d4bc:	68a9      	ldr	r1, [r5, #8]
    d4be:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d4c2:	4032      	ands	r2, r6
    d4c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( size_t i = Y->n; i < X->n; i++ )
    d4c8:	3301      	adds	r3, #1
    d4ca:	e7f1      	b.n	d4b0 <mbedtls_mpi_safe_cond_assign+0x42>

0000d4cc <mbedtls_rsa_import>:
{
    d4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d4d0:	4604      	mov	r4, r0
    d4d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    d4d6:	4691      	mov	r9, r2
    d4d8:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d4da:	460d      	mov	r5, r1
    d4dc:	b951      	cbnz	r1, d4f4 <mbedtls_rsa_import+0x28>
    d4de:	f1b9 0f00 	cmp.w	r9, #0
    d4e2:	d110      	bne.n	d506 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d4e4:	f1b8 0f00 	cmp.w	r8, #0
    d4e8:	d115      	bne.n	d516 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d4ea:	b9e7      	cbnz	r7, d526 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d4ec:	bb1e      	cbnz	r6, d536 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    d4ee:	bb55      	cbnz	r5, d546 <mbedtls_rsa_import+0x7a>
    return( 0 );
    d4f0:	2000      	movs	r0, #0
    d4f2:	e006      	b.n	d502 <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d4f4:	3008      	adds	r0, #8
    d4f6:	f7fe fefc 	bl	c2f2 <mbedtls_mpi_copy>
    d4fa:	2800      	cmp	r0, #0
    d4fc:	d0ef      	beq.n	d4de <mbedtls_rsa_import+0x12>
    d4fe:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    d502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d506:	4649      	mov	r1, r9
    d508:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d50c:	f7fe fef1 	bl	c2f2 <mbedtls_mpi_copy>
    d510:	2800      	cmp	r0, #0
    d512:	d0e7      	beq.n	d4e4 <mbedtls_rsa_import+0x18>
    d514:	e7f3      	b.n	d4fe <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d516:	4641      	mov	r1, r8
    d518:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d51c:	f7fe fee9 	bl	c2f2 <mbedtls_mpi_copy>
    d520:	2800      	cmp	r0, #0
    d522:	d0e2      	beq.n	d4ea <mbedtls_rsa_import+0x1e>
    d524:	e7eb      	b.n	d4fe <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d526:	4639      	mov	r1, r7
    d528:	f104 0020 	add.w	r0, r4, #32
    d52c:	f7fe fee1 	bl	c2f2 <mbedtls_mpi_copy>
    d530:	2800      	cmp	r0, #0
    d532:	d0db      	beq.n	d4ec <mbedtls_rsa_import+0x20>
    d534:	e7e3      	b.n	d4fe <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    d536:	4631      	mov	r1, r6
    d538:	f104 0014 	add.w	r0, r4, #20
    d53c:	f7fe fed9 	bl	c2f2 <mbedtls_mpi_copy>
    d540:	2800      	cmp	r0, #0
    d542:	d0d4      	beq.n	d4ee <mbedtls_rsa_import+0x22>
    d544:	e7db      	b.n	d4fe <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    d546:	f104 0008 	add.w	r0, r4, #8
    d54a:	f7fe ff34 	bl	c3b6 <mbedtls_mpi_size>
    d54e:	6060      	str	r0, [r4, #4]
    d550:	e7ce      	b.n	d4f0 <mbedtls_rsa_import+0x24>

0000d552 <mbedtls_rsa_init>:
{
    d552:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d554:	22ac      	movs	r2, #172	; 0xac
    d556:	2100      	movs	r1, #0
{
    d558:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d55a:	f7fe f9b3 	bl	b8c4 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    d55e:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    d560:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    d564:	bd10      	pop	{r4, pc}

0000d566 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    d566:	b510      	push	{r4, lr}
    if( ctx == NULL )
    d568:	4604      	mov	r4, r0
    d56a:	b3a0      	cbz	r0, d5d6 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    d56c:	308c      	adds	r0, #140	; 0x8c
    d56e:	f7fe fe6c 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    d572:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d576:	f7fe fe68 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    d57a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d57e:	f7fe fe64 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    d582:	f104 0020 	add.w	r0, r4, #32
    d586:	f7fe fe60 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    d58a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d58e:	f7fe fe5c 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    d592:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d596:	f7fe fe58 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    d59a:	f104 0014 	add.w	r0, r4, #20
    d59e:	f7fe fe54 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    d5a2:	f104 0008 	add.w	r0, r4, #8
    d5a6:	f7fe fe50 	bl	c24a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    d5aa:	f104 0080 	add.w	r0, r4, #128	; 0x80
    d5ae:	f7fe fe4c 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    d5b2:	f104 0074 	add.w	r0, r4, #116	; 0x74
    d5b6:	f7fe fe48 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    d5ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d5be:	f7fe fe44 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    d5c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d5c6:	f7fe fe40 	bl	c24a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    d5ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    d5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    d5d2:	f7fe be3a 	b.w	c24a <mbedtls_mpi_free>
}
    d5d6:	bd10      	pop	{r4, pc}

0000d5d8 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    d5d8:	226c      	movs	r2, #108	; 0x6c
    d5da:	2100      	movs	r1, #0
    d5dc:	f7fe b972 	b.w	b8c4 <memset>

0000d5e0 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5e4:	4605      	mov	r5, r0
    d5e6:	460e      	mov	r6, r1
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    d5e8:	4614      	mov	r4, r2
    d5ea:	b3a2      	cbz	r2, d656 <mbedtls_sha256_update+0x76>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    d5ec:	6803      	ldr	r3, [r0, #0]
    d5ee:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = SHA256_BLOCK_SIZE - left;

    ctx->total[0] += (uint32_t) ilen;
    d5f2:	189b      	adds	r3, r3, r2
    d5f4:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    d5f6:	bf22      	ittt	cs
    d5f8:	6843      	ldrcs	r3, [r0, #4]
    d5fa:	3301      	addcs	r3, #1
    d5fc:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    d5fe:	b387      	cbz	r7, d662 <mbedtls_sha256_update+0x82>
    fill = SHA256_BLOCK_SIZE - left;
    d600:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    d604:	454a      	cmp	r2, r9
    d606:	d31f      	bcc.n	d648 <mbedtls_sha256_update+0x68>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    d608:	f100 0828 	add.w	r8, r0, #40	; 0x28
    d60c:	464a      	mov	r2, r9
    d60e:	eb08 0007 	add.w	r0, r8, r7
    d612:	f7fe f94c 	bl	b8ae <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d616:	4641      	mov	r1, r8
    d618:	4628      	mov	r0, r5
    d61a:	f7f9 fba3 	bl	6d64 <mbedtls_internal_sha256_process>
    d61e:	b9d8      	cbnz	r0, d658 <mbedtls_sha256_update+0x78>
            return( ret );

        input += fill;
    d620:	4427      	add	r7, r4
        ilen  -= fill;
    d622:	f1a7 0440 	sub.w	r4, r7, #64	; 0x40
        left = 0;
    }

    while( ilen >= SHA256_BLOCK_SIZE )
    d626:	2c3f      	cmp	r4, #63	; 0x3f
        input += fill;
    d628:	444e      	add	r6, r9
    while( ilen >= SHA256_BLOCK_SIZE )
    d62a:	d90b      	bls.n	d644 <mbedtls_sha256_update+0x64>
    size_t processed = 0;
    d62c:	2700      	movs	r7, #0
        if( mbedtls_internal_sha256_process_c( ctx, data ) != 0 )
    d62e:	4628      	mov	r0, r5
    d630:	19f1      	adds	r1, r6, r7
    d632:	f7f9 fb97 	bl	6d64 <mbedtls_internal_sha256_process>
    d636:	b988      	cbnz	r0, d65c <mbedtls_sha256_update+0x7c>
        processed += SHA256_BLOCK_SIZE;
    d638:	3740      	adds	r7, #64	; 0x40
    while( len >= SHA256_BLOCK_SIZE )
    d63a:	1be3      	subs	r3, r4, r7
    d63c:	2b3f      	cmp	r3, #63	; 0x3f
    d63e:	d8f6      	bhi.n	d62e <mbedtls_sha256_update+0x4e>
        size_t processed =
                    mbedtls_internal_sha256_process_many( ctx, input, ilen );
        if( processed < SHA256_BLOCK_SIZE )
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );

        input += processed;
    d640:	461c      	mov	r4, r3
    d642:	443e      	add	r6, r7
        ilen  -= processed;
    }

    if( ilen > 0 )
    d644:	b13c      	cbz	r4, d656 <mbedtls_sha256_update+0x76>
    d646:	2700      	movs	r7, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    d648:	f105 0028 	add.w	r0, r5, #40	; 0x28
    d64c:	4622      	mov	r2, r4
    d64e:	4631      	mov	r1, r6
    d650:	4438      	add	r0, r7
    d652:	f7fe f92c 	bl	b8ae <memcpy>
        return( 0 );
    d656:	2000      	movs	r0, #0

    return( 0 );
}
    d658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );
    d65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d660:	e7fa      	b.n	d658 <mbedtls_sha256_update+0x78>
    while( ilen >= SHA256_BLOCK_SIZE )
    d662:	2a3f      	cmp	r2, #63	; 0x3f
    d664:	d8e2      	bhi.n	d62c <mbedtls_sha256_update+0x4c>
    d666:	e7ef      	b.n	d648 <mbedtls_sha256_update+0x68>

0000d668 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    d668:	b570      	push	{r4, r5, r6, lr}
    d66a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    d66c:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    d66e:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    d670:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    d674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    d678:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    d67a:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    d67c:	4403      	add	r3, r0
{
    d67e:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    d680:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    d684:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    d688:	d861      	bhi.n	d74e <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    d68a:	2100      	movs	r1, #0
    d68c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    d690:	f7fe f918 	bl	b8c4 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    d694:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    d698:	0f5a      	lsrs	r2, r3, #29
    d69a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    d69e:	00db      	lsls	r3, r3, #3
    d6a0:	ba12      	rev	r2, r2
    d6a2:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d6a4:	4631      	mov	r1, r6
    d6a6:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    d6a8:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    d6aa:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d6ac:	f7f9 fb5a 	bl	6d64 <mbedtls_internal_sha256_process>
    d6b0:	2800      	cmp	r0, #0
    d6b2:	d14b      	bne.n	d74c <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    d6b4:	7ae3      	ldrb	r3, [r4, #11]
    d6b6:	702b      	strb	r3, [r5, #0]
    d6b8:	8963      	ldrh	r3, [r4, #10]
    d6ba:	706b      	strb	r3, [r5, #1]
    d6bc:	68a3      	ldr	r3, [r4, #8]
    d6be:	0a1b      	lsrs	r3, r3, #8
    d6c0:	70ab      	strb	r3, [r5, #2]
    d6c2:	68a3      	ldr	r3, [r4, #8]
    d6c4:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    d6c6:	7be3      	ldrb	r3, [r4, #15]
    d6c8:	712b      	strb	r3, [r5, #4]
    d6ca:	89e3      	ldrh	r3, [r4, #14]
    d6cc:	716b      	strb	r3, [r5, #5]
    d6ce:	68e3      	ldr	r3, [r4, #12]
    d6d0:	0a1b      	lsrs	r3, r3, #8
    d6d2:	71ab      	strb	r3, [r5, #6]
    d6d4:	68e3      	ldr	r3, [r4, #12]
    d6d6:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    d6d8:	7ce3      	ldrb	r3, [r4, #19]
    d6da:	722b      	strb	r3, [r5, #8]
    d6dc:	8a63      	ldrh	r3, [r4, #18]
    d6de:	726b      	strb	r3, [r5, #9]
    d6e0:	6923      	ldr	r3, [r4, #16]
    d6e2:	0a1b      	lsrs	r3, r3, #8
    d6e4:	72ab      	strb	r3, [r5, #10]
    d6e6:	6923      	ldr	r3, [r4, #16]
    d6e8:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    d6ea:	7de3      	ldrb	r3, [r4, #23]
    d6ec:	732b      	strb	r3, [r5, #12]
    d6ee:	8ae3      	ldrh	r3, [r4, #22]
    d6f0:	736b      	strb	r3, [r5, #13]
    d6f2:	6963      	ldr	r3, [r4, #20]
    d6f4:	0a1b      	lsrs	r3, r3, #8
    d6f6:	73ab      	strb	r3, [r5, #14]
    d6f8:	6963      	ldr	r3, [r4, #20]
    d6fa:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    d6fc:	7ee3      	ldrb	r3, [r4, #27]
    d6fe:	742b      	strb	r3, [r5, #16]
    d700:	8b63      	ldrh	r3, [r4, #26]
    d702:	746b      	strb	r3, [r5, #17]
    d704:	69a3      	ldr	r3, [r4, #24]
    d706:	0a1b      	lsrs	r3, r3, #8
    d708:	74ab      	strb	r3, [r5, #18]
    d70a:	69a3      	ldr	r3, [r4, #24]
    d70c:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    d70e:	7fe3      	ldrb	r3, [r4, #31]
    d710:	752b      	strb	r3, [r5, #20]
    d712:	8be3      	ldrh	r3, [r4, #30]
    d714:	756b      	strb	r3, [r5, #21]
    d716:	69e3      	ldr	r3, [r4, #28]
    d718:	0a1b      	lsrs	r3, r3, #8
    d71a:	75ab      	strb	r3, [r5, #22]
    d71c:	69e3      	ldr	r3, [r4, #28]
    d71e:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    d720:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    d724:	762b      	strb	r3, [r5, #24]
    d726:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d728:	766b      	strb	r3, [r5, #25]
    d72a:	6a23      	ldr	r3, [r4, #32]
    d72c:	0a1b      	lsrs	r3, r3, #8
    d72e:	76ab      	strb	r3, [r5, #26]
    d730:	6a23      	ldr	r3, [r4, #32]
    d732:	76eb      	strb	r3, [r5, #27]

    int truncated = 0;
#if defined(MBEDTLS_SHA224_C)
    truncated = ctx->is224;
#endif
    if( !truncated )
    d734:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d736:	b94b      	cbnz	r3, d74c <mbedtls_sha256_finish+0xe4>
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    d738:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d73c:	772b      	strb	r3, [r5, #28]
    d73e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d740:	776b      	strb	r3, [r5, #29]
    d742:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d744:	0a1b      	lsrs	r3, r3, #8
    d746:	77ab      	strb	r3, [r5, #30]
    d748:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d74a:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    d74c:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );
    d74e:	2100      	movs	r1, #0
    d750:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    d754:	f7fe f8b6 	bl	b8c4 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d758:	4631      	mov	r1, r6
    d75a:	4620      	mov	r0, r4
    d75c:	f7f9 fb02 	bl	6d64 <mbedtls_internal_sha256_process>
    d760:	2800      	cmp	r0, #0
    d762:	d1f3      	bne.n	d74c <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    d764:	4601      	mov	r1, r0
    d766:	2238      	movs	r2, #56	; 0x38
    d768:	4630      	mov	r0, r6
    d76a:	e791      	b.n	d690 <mbedtls_sha256_finish+0x28>

0000d76c <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    d76c:	2000      	movs	r0, #0
    d76e:	4770      	bx	lr

0000d770 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d770:	4700      	bx	r0

0000d772 <nrfx_busy_wait>:
    d772:	f000 bfff 	b.w	e774 <z_impl_k_busy_wait>

0000d776 <clock_stop>:
{
    d776:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    d778:	2803      	cmp	r0, #3
    d77a:	d85d      	bhi.n	d838 <clock_stop+0xc2>
    d77c:	e8df f000 	tbb	[pc, r0]
    d780:	34261802 	.word	0x34261802
    p_reg->INTENCLR = mask;
    d784:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d788:	2202      	movs	r2, #2
    d78a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d78e:	2200      	movs	r2, #0
    d790:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d794:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d798:	2201      	movs	r2, #1
    d79a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d79c:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d79e:	2301      	movs	r3, #1
    d7a0:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    d7a4:	2803      	cmp	r0, #3
    d7a6:	d847      	bhi.n	d838 <clock_stop+0xc2>
    d7a8:	e8df f000 	tbb	[pc, r0]
    d7ac:	8265482c 	.word	0x8265482c
    p_reg->INTENCLR = mask;
    d7b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d7b4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7b6:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    d7b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7bc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d7c0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d7c4:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7c8:	605a      	str	r2, [r3, #4]
    d7ca:	e7e8      	b.n	d79e <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    d7cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    d7d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7d8:	2200      	movs	r2, #0
    d7da:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d7de:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7e2:	2201      	movs	r2, #1
    d7e4:	625a      	str	r2, [r3, #36]	; 0x24
    d7e6:	e7d9      	b.n	d79c <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    d7e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d7ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    d7f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7f4:	2200      	movs	r2, #0
    d7f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d7fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7fe:	2201      	movs	r2, #1
    d800:	61da      	str	r2, [r3, #28]
    d802:	e7cb      	b.n	d79c <clock_stop+0x26>
    switch (domain)
    d804:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    d808:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d80c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    d814:	b934      	cbnz	r4, d824 <clock_stop+0xae>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d816:	b17b      	cbz	r3, d838 <clock_stop+0xc2>
    d818:	2001      	movs	r0, #1
    d81a:	f7ff ffaa 	bl	d772 <nrfx_busy_wait>
    d81e:	3d01      	subs	r5, #1
    d820:	d1f4      	bne.n	d80c <clock_stop+0x96>
    d822:	e009      	b.n	d838 <clock_stop+0xc2>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    d824:	f8d6 2418 	ldr.w	r2, [r6, #1048]	; 0x418
    d828:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    d82c:	7022      	strb	r2, [r4, #0]
    d82e:	b11b      	cbz	r3, d838 <clock_stop+0xc2>
    d830:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d834:	2801      	cmp	r0, #1
    d836:	d0f0      	beq.n	d81a <clock_stop+0xa4>
}
    d838:	b002      	add	sp, #8
    d83a:	bd70      	pop	{r4, r5, r6, pc}
    switch (domain)
    d83c:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    d840:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d844:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    d84c:	b93c      	cbnz	r4, d85e <clock_stop+0xe8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d84e:	2b00      	cmp	r3, #0
    d850:	d0f2      	beq.n	d838 <clock_stop+0xc2>
    d852:	2001      	movs	r0, #1
    d854:	f7ff ff8d 	bl	d772 <nrfx_busy_wait>
    d858:	3d01      	subs	r5, #1
    d85a:	d1f3      	bne.n	d844 <clock_stop+0xce>
    d85c:	e7ec      	b.n	d838 <clock_stop+0xc2>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    d85e:	f8d6 240c 	ldr.w	r2, [r6, #1036]	; 0x40c
    d862:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d866:	7022      	strb	r2, [r4, #0]
    d868:	2b00      	cmp	r3, #0
    d86a:	d0e5      	beq.n	d838 <clock_stop+0xc2>
    d86c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d870:	2801      	cmp	r0, #1
    d872:	d0ef      	beq.n	d854 <clock_stop+0xde>
    d874:	e7e0      	b.n	d838 <clock_stop+0xc2>
    switch (domain)
    d876:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk;
    d87a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d87e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    d886:	b93c      	cbnz	r4, d898 <clock_stop+0x122>
    d888:	2b00      	cmp	r3, #0
    d88a:	d0d5      	beq.n	d838 <clock_stop+0xc2>
    d88c:	2001      	movs	r0, #1
    d88e:	f7ff ff70 	bl	d772 <nrfx_busy_wait>
    d892:	3d01      	subs	r5, #1
    d894:	d1f3      	bne.n	d87e <clock_stop+0x108>
    d896:	e7cf      	b.n	d838 <clock_stop+0xc2>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    d898:	f8d6 245c 	ldr.w	r2, [r6, #1116]	; 0x45c
    d89c:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d8a0:	7022      	strb	r2, [r4, #0]
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d0c8      	beq.n	d838 <clock_stop+0xc2>
    d8a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d8aa:	2801      	cmp	r0, #1
    d8ac:	d0ef      	beq.n	d88e <clock_stop+0x118>
    d8ae:	e7c3      	b.n	d838 <clock_stop+0xc2>
    switch (domain)
    d8b0:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
    d8b4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d8b8:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    d8bc:	03db      	lsls	r3, r3, #15
    d8be:	d5bb      	bpl.n	d838 <clock_stop+0xc2>
    d8c0:	b92c      	cbnz	r4, d8ce <clock_stop+0x158>
    d8c2:	2001      	movs	r0, #1
    d8c4:	f7ff ff55 	bl	d772 <nrfx_busy_wait>
    d8c8:	3d01      	subs	r5, #1
    d8ca:	d1f5      	bne.n	d8b8 <clock_stop+0x142>
    d8cc:	e7b4      	b.n	d838 <clock_stop+0xc2>
    d8ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d8d2:	2801      	cmp	r0, #1
    d8d4:	d0f6      	beq.n	d8c4 <clock_stop+0x14e>
    d8d6:	e7af      	b.n	d838 <clock_stop+0xc2>

0000d8d8 <nrfx_clock_start>:
{
    d8d8:	b508      	push	{r3, lr}
    switch (domain)
    d8da:	2803      	cmp	r0, #3
    d8dc:	d832      	bhi.n	d944 <nrfx_clock_start+0x6c>
    d8de:	e8df f000 	tbb	[pc, r0]
    d8e2:	3202      	.short	0x3202
    d8e4:	4c3e      	.short	0x4c3e
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    d8e6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d8ea:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    d8ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
    d8f2:	03c9      	lsls	r1, r1, #15
    d8f4:	d518      	bpl.n	d928 <nrfx_clock_start+0x50>
    d8f6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d8fa:	2b02      	cmp	r3, #2
    d8fc:	d005      	beq.n	d90a <nrfx_clock_start+0x32>
    d8fe:	2b01      	cmp	r3, #1
    d900:	d002      	beq.n	d908 <nrfx_clock_start+0x30>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d902:	2000      	movs	r0, #0
    d904:	f7ff ff37 	bl	d776 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    d908:	2301      	movs	r3, #1
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    d90a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d90e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d912:	2300      	movs	r3, #0
    d914:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d918:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    d91c:	2302      	movs	r3, #2
    d91e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d922:	2301      	movs	r3, #1
    d924:	6093      	str	r3, [r2, #8]
}
    d926:	e00d      	b.n	d944 <nrfx_clock_start+0x6c>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
    d928:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d92c:	07db      	lsls	r3, r3, #31
    d92e:	d5eb      	bpl.n	d908 <nrfx_clock_start+0x30>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d930:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    d934:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d938:	3b01      	subs	r3, #1
    d93a:	2b01      	cmp	r3, #1
    d93c:	d8e1      	bhi.n	d902 <nrfx_clock_start+0x2a>
    p_reg->INTENSET = mask;
    d93e:	2302      	movs	r3, #2
    d940:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d944:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d946:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d94a:	2200      	movs	r2, #0
    d94c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d950:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d954:	2201      	movs	r2, #1
    d956:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d95a:	601a      	str	r2, [r3, #0]
}
    d95c:	e7f2      	b.n	d944 <nrfx_clock_start+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d95e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d962:	2200      	movs	r2, #0
    d964:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d968:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    d96c:	f44f 7200 	mov.w	r2, #512	; 0x200
    d970:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d974:	2201      	movs	r2, #1
    d976:	621a      	str	r2, [r3, #32]
}
    d978:	e7e4      	b.n	d944 <nrfx_clock_start+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d97a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d97e:	2200      	movs	r2, #0
    d980:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d984:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    d988:	f44f 7280 	mov.w	r2, #256	; 0x100
    d98c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d990:	2201      	movs	r2, #1
    d992:	619a      	str	r2, [r3, #24]
    d994:	e7d6      	b.n	d944 <nrfx_clock_start+0x6c>

0000d996 <nrfx_clock_stop>:
    clock_stop(domain);
    d996:	f7ff beee 	b.w	d776 <clock_stop>

0000d99a <nrf_gpio_reconfigure>:
{
    d99a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d99c:	4616      	mov	r6, r2
    d99e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    d9a2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d9a4:	a801      	add	r0, sp, #4
{
    d9a6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d9a8:	f7f9 fc2e 	bl	7208 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d9ac:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    d9ae:	f1b6 0c00 	subs.w	ip, r6, #0
    d9b2:	bf18      	it	ne
    d9b4:	f04f 0c01 	movne.w	ip, #1
    d9b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d9bc:	1e0b      	subs	r3, r1, #0
    d9be:	bf18      	it	ne
    d9c0:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d9c2:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d9c4:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d9c8:	bf14      	ite	ne
    d9ca:	f04f 0c0c 	movne.w	ip, #12
    d9ce:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    d9d2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    d9d4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    d9d8:	bf14      	ite	ne
    d9da:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    d9de:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    d9e2:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d9e4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    d9e8:	bf14      	ite	ne
    d9ea:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    d9ee:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d9f2:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d9f6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    d9fa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    d9fe:	b101      	cbz	r1, da02 <nrf_gpio_reconfigure+0x68>
    da00:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
    da02:	b10e      	cbz	r6, da08 <nrf_gpio_reconfigure+0x6e>
    da04:	7836      	ldrb	r6, [r6, #0]
    da06:	0076      	lsls	r6, r6, #1
    da08:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
    da0a:	b10d      	cbz	r5, da10 <nrf_gpio_reconfigure+0x76>
    da0c:	782d      	ldrb	r5, [r5, #0]
    da0e:	00ad      	lsls	r5, r5, #2
    da10:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
    da12:	b10c      	cbz	r4, da18 <nrf_gpio_reconfigure+0x7e>
    da14:	7824      	ldrb	r4, [r4, #0]
    da16:	0224      	lsls	r4, r4, #8
    da18:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    da1a:	b10f      	cbz	r7, da20 <nrf_gpio_reconfigure+0x86>
    da1c:	783f      	ldrb	r7, [r7, #0]
    da1e:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    da20:	430c      	orrs	r4, r1
    da22:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    da24:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    da28:	b003      	add	sp, #12
    da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000da2c <nrf_gpio_cfg_sense_set>:
{
    da2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    da2e:	f10d 030f 	add.w	r3, sp, #15
    da32:	9301      	str	r3, [sp, #4]
    da34:	2300      	movs	r3, #0
{
    da36:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    da3a:	461a      	mov	r2, r3
    da3c:	4619      	mov	r1, r3
    da3e:	9300      	str	r3, [sp, #0]
    da40:	f7ff ffab 	bl	d99a <nrf_gpio_reconfigure>
}
    da44:	b005      	add	sp, #20
    da46:	f85d fb04 	ldr.w	pc, [sp], #4

0000da4a <partial_word_create>:
    value32 = 0xFFFFFFFF;
    da4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    da4e:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
    da50:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    da52:	f000 0003 	and.w	r0, r0, #3
    da56:	ab01      	add	r3, sp, #4
    da58:	4403      	add	r3, r0
    da5a:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
    da5c:	4291      	cmp	r1, r2
    da5e:	d102      	bne.n	da66 <partial_word_create+0x1c>
}
    da60:	9801      	ldr	r0, [sp, #4]
    da62:	b002      	add	sp, #8
    da64:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    da66:	f811 0b01 	ldrb.w	r0, [r1], #1
    da6a:	f803 0b01 	strb.w	r0, [r3], #1
    for (uint32_t i = 0; i < bytes_count; i++)
    da6e:	e7f5      	b.n	da5c <partial_word_create+0x12>

0000da70 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    da70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    da74:	4770      	bx	lr

0000da76 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    da76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    da7a:	4770      	bx	lr

0000da7c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    da7c:	f44f 7080 	mov.w	r0, #256	; 0x100
    da80:	4770      	bx	lr

0000da82 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    da82:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    da84:	f7f9 ffe6 	bl	7a54 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    da88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    da8c:	f7f9 bb64 	b.w	7158 <nrfx_clock_irq_handler>

0000da90 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    da90:	2100      	movs	r1, #0
    da92:	f7fa b8bf 	b.w	7c14 <nrf_gpio_cfg.constprop.0>

0000da96 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    da96:	2302      	movs	r3, #2
    da98:	f7fa b814 	b.w	7ac4 <qspi_xfer>

0000da9c <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    da9c:	2303      	movs	r3, #3
    da9e:	f7fa b811 	b.w	7ac4 <qspi_xfer>

0000daa2 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    daa2:	2100      	movs	r1, #0
    daa4:	2002      	movs	r0, #2
    daa6:	f7fa bae3 	b.w	8070 <nrfx_qspi_erase>

0000daaa <nrfx_usbd_consumer>:
{
    daaa:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    daac:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    daae:	429c      	cmp	r4, r3
    dab0:	d209      	bcs.n	dac6 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    dab2:	2500      	movs	r5, #0
    dab4:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dab6:	6809      	ldr	r1, [r1, #0]
    dab8:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    daba:	429a      	cmp	r2, r3
    dabc:	d10c      	bne.n	dad8 <nrfx_usbd_consumer+0x2e>
    dabe:	1e20      	subs	r0, r4, #0
    dac0:	bf18      	it	ne
    dac2:	2001      	movne	r0, #1
}
    dac4:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    dac6:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dac8:	680d      	ldr	r5, [r1, #0]
        size -= data_size;
    daca:	1ae4      	subs	r4, r4, r3
        p_next->p_data = p_transfer->p_data;
    dacc:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    dace:	6808      	ldr	r0, [r1, #0]
        p_transfer->size = size;
    dad0:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    dad2:	4418      	add	r0, r3
    dad4:	6008      	str	r0, [r1, #0]
    dad6:	e7f0      	b.n	daba <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    dad8:	2000      	movs	r0, #0
    dada:	e7f3      	b.n	dac4 <nrfx_usbd_consumer+0x1a>

0000dadc <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    dadc:	684b      	ldr	r3, [r1, #4]
    dade:	429a      	cmp	r2, r3
    dae0:	bf28      	it	cs
    dae2:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    dae4:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    dae6:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    daea:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    daec:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    daee:	1a80      	subs	r0, r0, r2
    daf0:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    daf2:	4413      	add	r3, r2
}
    daf4:	3800      	subs	r0, #0
    daf6:	bf18      	it	ne
    daf8:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    dafa:	600b      	str	r3, [r1, #0]
}
    dafc:	4770      	bx	lr

0000dafe <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    dafe:	684b      	ldr	r3, [r1, #4]
    db00:	429a      	cmp	r2, r3
    db02:	bf28      	it	cs
    db04:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    db06:	b16a      	cbz	r2, db24 <nrfx_usbd_feeder_ram_zlp+0x26>
    db08:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    db0a:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    db0e:	684b      	ldr	r3, [r1, #4]
}
    db10:	1e10      	subs	r0, r2, #0
    p_transfer->size -= tx_size;
    db12:	eba3 0302 	sub.w	r3, r3, r2
    db16:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    db18:	680b      	ldr	r3, [r1, #0]
}
    db1a:	bf18      	it	ne
    db1c:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    db1e:	4413      	add	r3, r2
    db20:	600b      	str	r3, [r1, #0]
}
    db22:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    db24:	4613      	mov	r3, r2
    db26:	e7f0      	b.n	db0a <nrfx_usbd_feeder_ram_zlp+0xc>

0000db28 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    db28:	43c3      	mvns	r3, r0
    db2a:	f000 000f 	and.w	r0, r0, #15
    db2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
}
    db32:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    db36:	4770      	bx	lr

0000db38 <ev_started_handler>:
}
    db38:	4770      	bx	lr

0000db3a <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    db3a:	2087      	movs	r0, #135	; 0x87
    db3c:	f7fa bbc6 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db40 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    db40:	2086      	movs	r0, #134	; 0x86
    db42:	f7fa bbc3 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db46 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    db46:	2085      	movs	r0, #133	; 0x85
    db48:	f7fa bbc0 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db4c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    db4c:	2084      	movs	r0, #132	; 0x84
    db4e:	f7fa bbbd 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db52 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    db52:	2083      	movs	r0, #131	; 0x83
    db54:	f7fa bbba 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db58 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    db58:	2082      	movs	r0, #130	; 0x82
    db5a:	f7fa bbb7 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db5e <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    db5e:	2081      	movs	r0, #129	; 0x81
    db60:	f7fa bbb4 	b.w	82cc <nrf_usbd_epin_dma_handler>

0000db64 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    db64:	f7fa bbce 	b.w	8304 <nrf_usbd_ep0in_dma_handler>

0000db68 <nrfx_usbd_ep_max_packet_size_set>:
{
    db68:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    db6a:	f7fa fae7 	bl	813c <ep_state_access>
    p_state->max_packet_size = size;
    db6e:	8181      	strh	r1, [r0, #12]
}
    db70:	bd08      	pop	{r3, pc}

0000db72 <nrfx_usbd_ep_status_get>:
{
    db72:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    db74:	f7fa fae2 	bl	813c <ep_state_access>
	__asm__ volatile(
    db78:	f04f 0220 	mov.w	r2, #32
    db7c:	f3ef 8311 	mrs	r3, BASEPRI
    db80:	f382 8812 	msr	BASEPRI_MAX, r2
    db84:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    db88:	6882      	ldr	r2, [r0, #8]
    db8a:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    db8c:	6802      	ldr	r2, [r0, #0]
    db8e:	b92a      	cbnz	r2, db9c <nrfx_usbd_ep_status_get+0x2a>
    db90:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    db92:	f383 8811 	msr	BASEPRI, r3
    db96:	f3bf 8f6f 	isb	sy
}
    db9a:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    db9c:	2004      	movs	r0, #4
    db9e:	e7f8      	b.n	db92 <nrfx_usbd_ep_status_get+0x20>

0000dba0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    dba0:	2007      	movs	r0, #7
    dba2:	f7fa bea9 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dba6 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    dba6:	2006      	movs	r0, #6
    dba8:	f7fa bea6 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbac <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    dbac:	2005      	movs	r0, #5
    dbae:	f7fa bea3 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbb2 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    dbb2:	2004      	movs	r0, #4
    dbb4:	f7fa bea0 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbb8 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    dbb8:	2003      	movs	r0, #3
    dbba:	f7fa be9d 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbbe <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    dbbe:	2002      	movs	r0, #2
    dbc0:	f7fa be9a 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbc4 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    dbc4:	2001      	movs	r0, #1
    dbc6:	f7fa be97 	b.w	88f8 <nrf_usbd_epout_dma_handler>

0000dbca <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    dbca:	f7fa bf91 	b.w	8af0 <usbd_ep_abort>

0000dbce <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, size_t new_elem_count)
{
    dbce:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    dbd0:	6943      	ldr	r3, [r0, #20]
{
    dbd2:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    dbd4:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    dbd8:	4291      	cmp	r1, r2
{
    dbda:	4604      	mov	r4, r0
    dbdc:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    dbe0:	d302      	bcc.n	dbe8 <zcbor_new_backup+0x1a>
    dbe2:	2201      	movs	r2, #1
    dbe4:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    dbe6:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    dbe8:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    dbea:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    dbec:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    dbee:	3201      	adds	r2, #1
    dbf0:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    dbf2:	2218      	movs	r2, #24
	size_t i = (state->constant_state->current_backup) - 1;
    dbf4:	6963      	ldr	r3, [r4, #20]
    dbf6:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    dbf8:	681b      	ldr	r3, [r3, #0]
	size_t i = (state->constant_state->current_backup) - 1;
    dbfa:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    dbfc:	fb02 3000 	mla	r0, r2, r0, r3
    dc00:	f7fd fe55 	bl	b8ae <memcpy>
	return true;
    dc04:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    dc06:	60a5      	str	r5, [r4, #8]
	return true;
    dc08:	e7ed      	b.n	dbe6 <zcbor_new_backup+0x18>

0000dc0a <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		size_t max_elem_count)
{
    dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc0e:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const size_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    dc10:	6942      	ldr	r2, [r0, #20]
{
    dc12:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    dc14:	6853      	ldr	r3, [r2, #4]
{
    dc16:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    dc18:	6807      	ldr	r7, [r0, #0]
	const size_t elem_count = state->elem_count;
    dc1a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    dc1e:	b923      	cbnz	r3, dc2a <zcbor_process_backup+0x20>
    dc20:	2302      	movs	r3, #2
    dc22:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    dc24:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    dc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    dc2a:	07e9      	lsls	r1, r5, #31
    dc2c:	d50d      	bpl.n	dc4a <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    dc2e:	6811      	ldr	r1, [r2, #0]
    dc30:	2218      	movs	r2, #24
		size_t i = state->constant_state->current_backup - 1;
    dc32:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    dc34:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    dc36:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    dc3a:	d402      	bmi.n	dc42 <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    dc3c:	7c4b      	ldrb	r3, [r1, #17]
    dc3e:	2b00      	cmp	r3, #0
    dc40:	d1f0      	bne.n	dc24 <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    dc42:	2218      	movs	r2, #24
    dc44:	4620      	mov	r0, r4
    dc46:	f7fd fe32 	bl	b8ae <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    dc4a:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    dc4c:	bf41      	itttt	mi
    dc4e:	6962      	ldrmi	r2, [r4, #20]
    dc50:	6853      	ldrmi	r3, [r2, #4]
    dc52:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    dc56:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    dc58:	45b0      	cmp	r8, r6
    dc5a:	d905      	bls.n	dc68 <zcbor_process_backup+0x5e>
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    dc5c:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    dc5e:	2b00      	cmp	r3, #0
    dc60:	d0e0      	beq.n	dc24 <zcbor_process_backup+0x1a>
			state->constant_state->error = err;
    dc62:	2204      	movs	r2, #4
    dc64:	60da      	str	r2, [r3, #12]
    dc66:	e7dd      	b.n	dc24 <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    dc68:	076b      	lsls	r3, r5, #29
    dc6a:	d401      	bmi.n	dc70 <zcbor_process_backup+0x66>
	return true;
    dc6c:	2001      	movs	r0, #1
    dc6e:	e7da      	b.n	dc26 <zcbor_process_backup+0x1c>
		state->payload = payload;
    dc70:	6027      	str	r7, [r4, #0]
    dc72:	e7fb      	b.n	dc6c <zcbor_process_backup+0x62>

0000dc74 <zcbor_new_state>:
	return true;
}

void zcbor_new_state(zcbor_state_t *state_array, size_t n_states,
		const uint8_t *payload, size_t payload_len, size_t elem_count)
{
    dc74:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    dc76:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    dc78:	441a      	add	r2, r3
    dc7a:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
	state_array[0].indefinite_length_array = false;
    dc7c:	2200      	movs	r2, #0
	state_array[0].elem_count = elem_count;
    dc7e:	9b02      	ldr	r3, [sp, #8]
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    dc80:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
    dc82:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    dc84:	8202      	strh	r2, [r0, #16]
	if(n_states < 2) {
    dc86:	d801      	bhi.n	dc8c <zcbor_new_state+0x18>
	state_array[0].constant_state = NULL;
    dc88:	6142      	str	r2, [r0, #20]
	state_array[0].constant_state->stop_on_error = false;
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
}
    dc8a:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    dc8c:	2318      	movs	r3, #24
    dc8e:	434b      	muls	r3, r1
    dc90:	3b18      	subs	r3, #24
    dc92:	18c4      	adds	r4, r0, r3
    dc94:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
    dc96:	50c2      	str	r2, [r0, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    dc98:	6943      	ldr	r3, [r0, #20]
    dc9a:	1e8c      	subs	r4, r1, #2
    dc9c:	609c      	str	r4, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    dc9e:	6943      	ldr	r3, [r0, #20]
	if (n_states > 2) {
    dca0:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    dca2:	605a      	str	r2, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    dca4:	6943      	ldr	r3, [r0, #20]
    dca6:	60da      	str	r2, [r3, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
    dca8:	bf1e      	ittt	ne
    dcaa:	6943      	ldrne	r3, [r0, #20]
    dcac:	3018      	addne	r0, #24
    dcae:	6018      	strne	r0, [r3, #0]
    dcb0:	e7eb      	b.n	dc8a <zcbor_new_state+0x16>

0000dcb2 <zcbor_array_at_end>:


bool zcbor_array_at_end(zcbor_state_t *state)
{
	return ((!state->indefinite_length_array && (state->elem_count == 0))
		|| (state->indefinite_length_array
    dcb2:	7c03      	ldrb	r3, [r0, #16]
    dcb4:	b923      	cbnz	r3, dcc0 <zcbor_array_at_end+0xe>
	return ((!state->indefinite_length_array && (state->elem_count == 0))
    dcb6:	6880      	ldr	r0, [r0, #8]
    dcb8:	fab0 f080 	clz	r0, r0
    dcbc:	0940      	lsrs	r0, r0, #5
    dcbe:	4770      	bx	lr
			&& (state->payload < state->payload_end)
    dcc0:	6803      	ldr	r3, [r0, #0]
    dcc2:	68c2      	ldr	r2, [r0, #12]
    dcc4:	4293      	cmp	r3, r2
    dcc6:	d205      	bcs.n	dcd4 <zcbor_array_at_end+0x22>
			&& (*state->payload == 0xFF)));
    dcc8:	7818      	ldrb	r0, [r3, #0]
    dcca:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
    dcce:	4258      	negs	r0, r3
    dcd0:	4158      	adcs	r0, r3
    dcd2:	4770      	bx	lr
		|| (state->indefinite_length_array
    dcd4:	2000      	movs	r0, #0
}
    dcd6:	4770      	bx	lr

0000dcd8 <zcbor_error.isra.0>:
		if (state->constant_state) {
    dcd8:	b100      	cbz	r0, dcdc <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
    dcda:	60c1      	str	r1, [r0, #12]
		}
	}
}
    dcdc:	4770      	bx	lr

0000dcde <err_restore>:
	} \
} while(0)

static void err_restore(zcbor_state_t *state, int err)
{
	state->payload = state->payload_bak;
    dcde:	6843      	ldr	r3, [r0, #4]
    dce0:	6003      	str	r3, [r0, #0]
	state->elem_count++;
    dce2:	6883      	ldr	r3, [r0, #8]
    dce4:	3301      	adds	r3, #1
    dce6:	6083      	str	r3, [r0, #8]
	zcbor_error(state, err);
    dce8:	6940      	ldr	r0, [r0, #20]
    dcea:	f7ff bff5 	b.w	dcd8 <zcbor_error.isra.0>

0000dcee <initial_checks>:
{
    dcee:	b508      	push	{r3, lr}
	ZCBOR_CHECK_PAYLOAD();
    dcf0:	6802      	ldr	r2, [r0, #0]
    dcf2:	68c3      	ldr	r3, [r0, #12]
    dcf4:	429a      	cmp	r2, r3
    dcf6:	d305      	bcc.n	dd04 <initial_checks+0x16>
    dcf8:	6940      	ldr	r0, [r0, #20]
    dcfa:	2108      	movs	r1, #8
    dcfc:	f7ff ffec 	bl	dcd8 <zcbor_error.isra.0>
    dd00:	2000      	movs	r0, #0
}
    dd02:	bd08      	pop	{r3, pc}
	return true;
    dd04:	2001      	movs	r0, #1
    dd06:	e7fc      	b.n	dd02 <initial_checks+0x14>

0000dd08 <type_check>:
{
    dd08:	b538      	push	{r3, r4, r5, lr}
    dd0a:	4604      	mov	r4, r0
    dd0c:	460d      	mov	r5, r1
	if (!initial_checks(state)) {
    dd0e:	f7ff ffee 	bl	dcee <initial_checks>
    dd12:	b140      	cbz	r0, dd26 <type_check+0x1e>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    dd14:	6823      	ldr	r3, [r4, #0]
    dd16:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    dd18:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
    dd1c:	d004      	beq.n	dd28 <type_check+0x20>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    dd1e:	210a      	movs	r1, #10
    dd20:	6960      	ldr	r0, [r4, #20]
    dd22:	f7ff ffd9 	bl	dcd8 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    dd26:	2000      	movs	r0, #0
}
    dd28:	bd38      	pop	{r3, r4, r5, pc}

0000dd2a <array_end_expect>:
	return ret;
}


static bool array_end_expect(zcbor_state_t *state)
{
    dd2a:	b510      	push	{r4, lr}
    dd2c:	4604      	mov	r4, r0
	INITIAL_CHECKS();
    dd2e:	f7ff ffde 	bl	dcee <initial_checks>
    dd32:	b138      	cbz	r0, dd44 <array_end_expect+0x1a>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    dd34:	6823      	ldr	r3, [r4, #0]
    dd36:	781a      	ldrb	r2, [r3, #0]
    dd38:	2aff      	cmp	r2, #255	; 0xff
    dd3a:	d005      	beq.n	dd48 <array_end_expect+0x1e>
    dd3c:	210a      	movs	r1, #10
    dd3e:	6960      	ldr	r0, [r4, #20]
    dd40:	f7ff ffca 	bl	dcd8 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    dd44:	2000      	movs	r0, #0

	state->payload++;
	return true;
}
    dd46:	bd10      	pop	{r4, pc}
	state->payload++;
    dd48:	3301      	adds	r3, #1
    dd4a:	6023      	str	r3, [r4, #0]
	return true;
    dd4c:	e7fb      	b.n	dd46 <array_end_expect+0x1c>

0000dd4e <list_map_end_decode>:


static bool list_map_end_decode(zcbor_state_t *state)
{
    dd4e:	b510      	push	{r4, lr}
	size_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    dd50:	7c02      	ldrb	r2, [r0, #16]
{
    dd52:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    dd54:	b132      	cbz	r2, dd64 <list_map_end_decode+0x16>
		if (!array_end_expect(state)) {
    dd56:	f7ff ffe8 	bl	dd2a <array_end_expect>
    dd5a:	b148      	cbz	r0, dd70 <list_map_end_decode+0x22>
			ZCBOR_FAIL();
		}
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
		state->indefinite_length_array = false;
    dd5c:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    dd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state->indefinite_length_array = false;
    dd62:	7423      	strb	r3, [r4, #16]
	}
	if (!zcbor_process_backup(state,
    dd64:	4620      	mov	r0, r4
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    dd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    dd6a:	2107      	movs	r1, #7
    dd6c:	f7ff bf4d 	b.w	dc0a <zcbor_process_backup>
}
    dd70:	bd10      	pop	{r4, pc}

0000dd72 <value_extract>:
{
    dd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd76:	4604      	mov	r4, r0
    dd78:	460d      	mov	r5, r1
    dd7a:	4617      	mov	r7, r2
	INITIAL_CHECKS();
    dd7c:	f7ff ffb7 	bl	dcee <initial_checks>
    dd80:	4680      	mov	r8, r0
    dd82:	b128      	cbz	r0, dd90 <value_extract+0x1e>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    dd84:	68a3      	ldr	r3, [r4, #8]
    dd86:	b943      	cbnz	r3, dd9a <value_extract+0x28>
    dd88:	2103      	movs	r1, #3
    dd8a:	6960      	ldr	r0, [r4, #20]
    dd8c:	f7ff ffa4 	bl	dcd8 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    dd90:	f04f 0800 	mov.w	r8, #0
}
    dd94:	4640      	mov	r0, r8
    dd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    dd9a:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    dd9c:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    dd9e:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    dda0:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    dda2:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    dda4:	2100      	movs	r1, #0
    dda6:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    dda8:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    ddac:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    ddae:	f7fd fd89 	bl	b8c4 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    ddb2:	2e17      	cmp	r6, #23
    ddb4:	d804      	bhi.n	ddc0 <value_extract+0x4e>
		u8_result[0] = additional;
    ddb6:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    ddb8:	68a3      	ldr	r3, [r4, #8]
    ddba:	3b01      	subs	r3, #1
    ddbc:	60a3      	str	r3, [r4, #8]
	return true;
    ddbe:	e7e9      	b.n	dd94 <value_extract+0x22>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    ddc0:	3e18      	subs	r6, #24
    ddc2:	b2f2      	uxtb	r2, r6
    ddc4:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    ddc6:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    ddc8:	d807      	bhi.n	ddda <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    ddca:	2101      	movs	r1, #1
    ddcc:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    ddce:	428f      	cmp	r7, r1
    ddd0:	d207      	bcs.n	dde2 <value_extract+0x70>
    ddd2:	3b01      	subs	r3, #1
    ddd4:	2105      	movs	r1, #5
    ddd6:	6023      	str	r3, [r4, #0]
    ddd8:	e7d7      	b.n	dd8a <value_extract+0x18>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    ddda:	3b01      	subs	r3, #1
    dddc:	2107      	movs	r1, #7
    ddde:	6023      	str	r3, [r4, #0]
    dde0:	e7d3      	b.n	dd8a <value_extract+0x18>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    dde2:	68e0      	ldr	r0, [r4, #12]
    dde4:	185a      	adds	r2, r3, r1
    dde6:	4290      	cmp	r0, r2
    dde8:	d203      	bcs.n	ddf2 <value_extract+0x80>
    ddea:	3b01      	subs	r3, #1
    ddec:	2108      	movs	r1, #8
    ddee:	6023      	str	r3, [r4, #0]
    ddf0:	e7cb      	b.n	dd8a <value_extract+0x18>
    ddf2:	1e4b      	subs	r3, r1, #1
    ddf4:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    ddf6:	6822      	ldr	r2, [r4, #0]
    ddf8:	5cd2      	ldrb	r2, [r2, r3]
		for (size_t i = 0; i < len; i++) {
    ddfa:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    ddfc:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (size_t i = 0; i < len; i++) {
    de00:	d2f9      	bcs.n	ddf6 <value_extract+0x84>
		(state->payload) += len;
    de02:	6823      	ldr	r3, [r4, #0]
    de04:	440b      	add	r3, r1
    de06:	6023      	str	r3, [r4, #0]
    de08:	e7d6      	b.n	ddb8 <value_extract+0x46>

0000de0a <str_start_decode_with_overflow_check>:
{
    de0a:	b538      	push	{r3, r4, r5, lr}
    de0c:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    de0e:	4611      	mov	r1, r2
{
    de10:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    de12:	f7ff ff79 	bl	dd08 <type_check>
    de16:	b180      	cbz	r0, de3a <str_start_decode_with_overflow_check+0x30>
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    de18:	2204      	movs	r2, #4
    de1a:	4620      	mov	r0, r4
    de1c:	18a9      	adds	r1, r5, r2
    de1e:	f7ff ffa8 	bl	dd72 <value_extract>
    de22:	b150      	cbz	r0, de3a <str_start_decode_with_overflow_check+0x30>
	result->value = state->payload;
    de24:	6822      	ldr	r2, [r4, #0]
    de26:	602a      	str	r2, [r5, #0]
	if (result->len > (size_t)(state->payload_end - state->payload)) {
    de28:	68e3      	ldr	r3, [r4, #12]
    de2a:	1a9b      	subs	r3, r3, r2
    de2c:	686a      	ldr	r2, [r5, #4]
    de2e:	429a      	cmp	r2, r3
    de30:	d904      	bls.n	de3c <str_start_decode_with_overflow_check+0x32>
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    de32:	2108      	movs	r1, #8
    de34:	4620      	mov	r0, r4
    de36:	f7ff ff52 	bl	dcde <err_restore>
		ZCBOR_FAIL();
    de3a:	2000      	movs	r0, #0
}
    de3c:	bd38      	pop	{r3, r4, r5, pc}

0000de3e <str_decode>:
{
    de3e:	b538      	push	{r3, r4, r5, lr}
    de40:	4604      	mov	r4, r0
    de42:	460d      	mov	r5, r1
	if (!str_start_decode_with_overflow_check(state, result, exp_major_type)) {
    de44:	f7ff ffe1 	bl	de0a <str_start_decode_with_overflow_check>
    de48:	b118      	cbz	r0, de52 <str_decode+0x14>
	state->payload += result->len;
    de4a:	6823      	ldr	r3, [r4, #0]
    de4c:	686a      	ldr	r2, [r5, #4]
    de4e:	4413      	add	r3, r2
    de50:	6023      	str	r3, [r4, #0]
}
    de52:	bd38      	pop	{r3, r4, r5, pc}

0000de54 <list_map_start_decode>:
{
    de54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    de56:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    de58:	f7ff ff56 	bl	dd08 <type_check>
    de5c:	4605      	mov	r5, r0
    de5e:	b170      	cbz	r0, de7e <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    de60:	6822      	ldr	r2, [r4, #0]
    de62:	7813      	ldrb	r3, [r2, #0]
    de64:	f003 031f 	and.w	r3, r3, #31
    de68:	2b1f      	cmp	r3, #31
    de6a:	d11a      	bne.n	dea2 <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    de6c:	f06f 0310 	mvn.w	r3, #16
    de70:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    de72:	68a3      	ldr	r3, [r4, #8]
    de74:	b933      	cbnz	r3, de84 <list_map_start_decode+0x30>
    de76:	2103      	movs	r1, #3
    de78:	6960      	ldr	r0, [r4, #20]
    de7a:	f7ff ff2d 	bl	dcd8 <zcbor_error.isra.0>
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    de7e:	2000      	movs	r0, #0
}
    de80:	b003      	add	sp, #12
    de82:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    de84:	3201      	adds	r2, #1
		state->elem_count--;
    de86:	3b01      	subs	r3, #1
		state->payload++;
    de88:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    de8a:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    de8c:	4620      	mov	r0, r4
    de8e:	9901      	ldr	r1, [sp, #4]
    de90:	f7ff fe9d 	bl	dbce <zcbor_new_backup>
    de94:	b978      	cbnz	r0, deb6 <list_map_start_decode+0x62>
		FAIL_RESTORE();
    de96:	6863      	ldr	r3, [r4, #4]
    de98:	6023      	str	r3, [r4, #0]
    de9a:	68a3      	ldr	r3, [r4, #8]
    de9c:	3301      	adds	r3, #1
    de9e:	60a3      	str	r3, [r4, #8]
    dea0:	e7ed      	b.n	de7e <list_map_start_decode+0x2a>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    dea2:	2204      	movs	r2, #4
    dea4:	4620      	mov	r0, r4
    dea6:	eb0d 0102 	add.w	r1, sp, r2
    deaa:	f7ff ff62 	bl	dd72 <value_extract>
    deae:	2800      	cmp	r0, #0
    deb0:	d0e5      	beq.n	de7e <list_map_start_decode+0x2a>
	bool indefinite_length_array = false;
    deb2:	2500      	movs	r5, #0
    deb4:	e7ea      	b.n	de8c <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
    deb6:	7425      	strb	r5, [r4, #16]
	return true;
    deb8:	e7e2      	b.n	de80 <list_map_start_decode+0x2c>

0000deba <zcbor_uint_decode>:
{
    deba:	b570      	push	{r4, r5, r6, lr}
    debc:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PINT);
    debe:	2100      	movs	r1, #0
{
    dec0:	4604      	mov	r4, r0
    dec2:	4616      	mov	r6, r2
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PINT);
    dec4:	f7ff ff20 	bl	dd08 <type_check>
    dec8:	b130      	cbz	r0, ded8 <zcbor_uint_decode+0x1e>
	if (!value_extract(state, result_uint, uint_size)) {
    deca:	4632      	mov	r2, r6
    decc:	4629      	mov	r1, r5
    dece:	4620      	mov	r0, r4
}
    ded0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (!value_extract(state, result_uint, uint_size)) {
    ded4:	f7ff bf4d 	b.w	dd72 <value_extract>
}
    ded8:	bd70      	pop	{r4, r5, r6, pc}

0000deda <zcbor_uint32_decode>:
	return zcbor_uint_decode(state, result, sizeof(*result));
    deda:	2204      	movs	r2, #4
    dedc:	f7ff bfed 	b.w	deba <zcbor_uint_decode>

0000dee0 <zcbor_size_decode>:
bool zcbor_size_decode(zcbor_state_t *state, size_t *result)
    dee0:	f7ff bffb 	b.w	deda <zcbor_uint32_decode>

0000dee4 <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    dee4:	2202      	movs	r2, #2
    dee6:	f7ff bfaa 	b.w	de3e <str_decode>

0000deea <zcbor_tstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    deea:	2203      	movs	r2, #3
    deec:	f7ff bfa7 	b.w	de3e <str_decode>

0000def0 <zcbor_map_start_decode>:
{
    def0:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    def2:	2105      	movs	r1, #5
{
    def4:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    def6:	f7ff ffad 	bl	de54 <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    defa:	b150      	cbz	r0, df12 <zcbor_map_start_decode+0x22>
    defc:	7c23      	ldrb	r3, [r4, #16]
    defe:	b94b      	cbnz	r3, df14 <zcbor_map_start_decode+0x24>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    df00:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    df04:	68a3      	ldr	r3, [r4, #8]
    df06:	4293      	cmp	r3, r2
    df08:	d305      	bcc.n	df16 <zcbor_map_start_decode+0x26>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    df0a:	2105      	movs	r1, #5
    df0c:	4620      	mov	r0, r4
    df0e:	f7ff fee6 	bl	dcde <err_restore>
    df12:	2000      	movs	r0, #0
}
    df14:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    df16:	005b      	lsls	r3, r3, #1
    df18:	60a3      	str	r3, [r4, #8]
    df1a:	e7fb      	b.n	df14 <zcbor_map_start_decode+0x24>

0000df1c <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    df1c:	f7ff bf17 	b.w	dd4e <list_map_end_decode>

0000df20 <zcbor_tag_decode>:
	return true;
}


bool zcbor_tag_decode(zcbor_state_t *state, uint32_t *result)
{
    df20:	b538      	push	{r3, r4, r5, lr}
    df22:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_TAG);
    df24:	2106      	movs	r1, #6
{
    df26:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_TAG);
    df28:	f7ff feee 	bl	dd08 <type_check>
    df2c:	b908      	cbnz	r0, df32 <zcbor_tag_decode+0x12>
    df2e:	2000      	movs	r0, #0
	if (!value_extract(state, result, sizeof(*result))) {
		ZCBOR_FAIL();
	}
	state->elem_count++;
	return true;
}
    df30:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, result, sizeof(*result))) {
    df32:	2204      	movs	r2, #4
    df34:	4629      	mov	r1, r5
    df36:	4620      	mov	r0, r4
    df38:	f7ff ff1b 	bl	dd72 <value_extract>
    df3c:	2800      	cmp	r0, #0
    df3e:	d0f6      	beq.n	df2e <zcbor_tag_decode+0xe>
	state->elem_count++;
    df40:	68a3      	ldr	r3, [r4, #8]
    df42:	3301      	adds	r3, #1
    df44:	60a3      	str	r3, [r4, #8]
	return true;
    df46:	e7f3      	b.n	df30 <zcbor_tag_decode+0x10>

0000df48 <zcbor_any_skip>:
{
    df48:	b5f0      	push	{r4, r5, r6, r7, lr}
    df4a:	b08b      	sub	sp, #44	; 0x2c
    df4c:	4604      	mov	r4, r0
	INITIAL_CHECKS();
    df4e:	f7ff fece 	bl	dcee <initial_checks>
    df52:	4607      	mov	r7, r0
    df54:	2800      	cmp	r0, #0
    df56:	d04d      	beq.n	dff4 <zcbor_any_skip+0xac>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    df58:	6823      	ldr	r3, [r4, #0]
	uint64_t value = 0; /* In case of indefinite_length_array. */
    df5a:	2200      	movs	r2, #0
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    df5c:	781e      	ldrb	r6, [r3, #0]
	uint64_t value = 0; /* In case of indefinite_length_array. */
    df5e:	2300      	movs	r3, #0
	memcpy(&state_copy, state, sizeof(zcbor_state_t));
    df60:	4621      	mov	r1, r4
	uint64_t value = 0; /* In case of indefinite_length_array. */
    df62:	e9cd 2302 	strd	r2, r3, [sp, #8]
	memcpy(&state_copy, state, sizeof(zcbor_state_t));
    df66:	a804      	add	r0, sp, #16
    df68:	2218      	movs	r2, #24
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    df6a:	0975      	lsrs	r5, r6, #5
	uint8_t additional = ADDITIONAL(*state->payload);
    df6c:	f006 061f 	and.w	r6, r6, #31
	memcpy(&state_copy, state, sizeof(zcbor_state_t));
    df70:	f7fd fc9d 	bl	b8ae <memcpy>
	while (major_type == ZCBOR_MAJOR_TYPE_TAG) {
    df74:	2d06      	cmp	r5, #6
    df76:	d022      	beq.n	dfbe <zcbor_any_skip+0x76>
		&& ((major_type == ZCBOR_MAJOR_TYPE_LIST) || (major_type == ZCBOR_MAJOR_TYPE_MAP)));
    df78:	2e1f      	cmp	r6, #31
    df7a:	d133      	bne.n	dfe4 <zcbor_any_skip+0x9c>
    df7c:	1f2b      	subs	r3, r5, #4
    df7e:	2b01      	cmp	r3, #1
    df80:	d965      	bls.n	e04e <zcbor_any_skip+0x106>
	if (!indefinite_length_array && !value_extract(&state_copy, &value, sizeof(value))) {
    df82:	2208      	movs	r2, #8
    df84:	a804      	add	r0, sp, #16
    df86:	eb0d 0102 	add.w	r1, sp, r2
    df8a:	f7ff fef2 	bl	dd72 <value_extract>
    df8e:	2800      	cmp	r0, #0
    df90:	d030      	beq.n	dff4 <zcbor_any_skip+0xac>
	switch (major_type) {
    df92:	2d04      	cmp	r5, #4
    df94:	d80d      	bhi.n	dfb2 <zcbor_any_skip+0x6a>
    df96:	3d02      	subs	r5, #2
    df98:	2d01      	cmp	r5, #1
    df9a:	d80a      	bhi.n	dfb2 <zcbor_any_skip+0x6a>
			ZCBOR_ERR_IF(
    df9c:	9b04      	ldr	r3, [sp, #16]
    df9e:	9a07      	ldr	r2, [sp, #28]
    dfa0:	9902      	ldr	r1, [sp, #8]
    dfa2:	1ad2      	subs	r2, r2, r3
    dfa4:	17d0      	asrs	r0, r2, #31
    dfa6:	428a      	cmp	r2, r1
    dfa8:	9a03      	ldr	r2, [sp, #12]
    dfaa:	4190      	sbcs	r0, r2
    dfac:	d310      	bcc.n	dfd0 <zcbor_any_skip+0x88>
			(state_copy.payload) += value;
    dfae:	440b      	add	r3, r1
    dfb0:	9304      	str	r3, [sp, #16]
	state->payload = state_copy.payload;
    dfb2:	9b04      	ldr	r3, [sp, #16]
    dfb4:	6023      	str	r3, [r4, #0]
	state->elem_count--;
    dfb6:	68a3      	ldr	r3, [r4, #8]
    dfb8:	3b01      	subs	r3, #1
    dfba:	60a3      	str	r3, [r4, #8]
	return true;
    dfbc:	e01b      	b.n	dff6 <zcbor_any_skip+0xae>
		if (!zcbor_tag_decode(&state_copy, &tag_dummy)) {
    dfbe:	a901      	add	r1, sp, #4
    dfc0:	a804      	add	r0, sp, #16
    dfc2:	f7ff ffad 	bl	df20 <zcbor_tag_decode>
    dfc6:	b1a8      	cbz	r0, dff4 <zcbor_any_skip+0xac>
		ZCBOR_ERR_IF(state_copy.payload >= state_copy.payload_end, ZCBOR_ERR_NO_PAYLOAD);
    dfc8:	9b04      	ldr	r3, [sp, #16]
    dfca:	9a07      	ldr	r2, [sp, #28]
    dfcc:	4293      	cmp	r3, r2
    dfce:	d304      	bcc.n	dfda <zcbor_any_skip+0x92>
			ZCBOR_ERR_IF(
    dfd0:	2108      	movs	r1, #8
			ZCBOR_ERR_IF(value > (SIZE_MAX / 2), ZCBOR_ERR_INT_SIZE);
    dfd2:	6960      	ldr	r0, [r4, #20]
    dfd4:	f7ff fe80 	bl	dcd8 <zcbor_error.isra.0>
    dfd8:	e00c      	b.n	dff4 <zcbor_any_skip+0xac>
		major_type = MAJOR_TYPE(*state_copy.payload);
    dfda:	781e      	ldrb	r6, [r3, #0]
    dfdc:	0975      	lsrs	r5, r6, #5
		additional = ADDITIONAL(*state_copy.payload);
    dfde:	f006 061f 	and.w	r6, r6, #31
    dfe2:	e7c7      	b.n	df74 <zcbor_any_skip+0x2c>
	if (!indefinite_length_array && !value_extract(&state_copy, &value, sizeof(value))) {
    dfe4:	2208      	movs	r2, #8
    dfe6:	a804      	add	r0, sp, #16
    dfe8:	eb0d 0102 	add.w	r1, sp, r2
    dfec:	f7ff fec1 	bl	dd72 <value_extract>
    dff0:	2800      	cmp	r0, #0
    dff2:	d131      	bne.n	e058 <zcbor_any_skip+0x110>
	INITIAL_CHECKS();
    dff4:	2700      	movs	r7, #0
}
    dff6:	4638      	mov	r0, r7
    dff8:	b00b      	add	sp, #44	; 0x2c
    dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			value *= 2;
    dffc:	18db      	adds	r3, r3, r3
    dffe:	4149      	adcs	r1, r1
    e000:	e9cd 3102 	strd	r3, r1, [sp, #8]
			if (indefinite_length_array) {
    e004:	b985      	cbnz	r5, e028 <zcbor_any_skip+0xe0>
			state_copy.elem_count = (size_t)value;
    e006:	9b02      	ldr	r3, [sp, #8]
			state_copy.indefinite_length_array = indefinite_length_array;
    e008:	f88d 2020 	strb.w	r2, [sp, #32]
			state_copy.elem_count = (size_t)value;
    e00c:	9306      	str	r3, [sp, #24]
			while (!zcbor_array_at_end(&state_copy)) {
    e00e:	a804      	add	r0, sp, #16
    e010:	f7ff fe4f 	bl	dcb2 <zcbor_array_at_end>
    e014:	4601      	mov	r1, r0
    e016:	b1a0      	cbz	r0, e042 <zcbor_any_skip+0xfa>
			if (indefinite_length_array && !array_end_expect(&state_copy)) {
    e018:	2d00      	cmp	r5, #0
    e01a:	d0ca      	beq.n	dfb2 <zcbor_any_skip+0x6a>
    e01c:	a804      	add	r0, sp, #16
    e01e:	f7ff fe84 	bl	dd2a <array_end_expect>
    e022:	2800      	cmp	r0, #0
    e024:	d1c5      	bne.n	dfb2 <zcbor_any_skip+0x6a>
    e026:	e7e5      	b.n	dff4 <zcbor_any_skip+0xac>
				value = ZCBOR_LARGE_ELEM_COUNT;
    e028:	f06f 0010 	mvn.w	r0, #16
    e02c:	2100      	movs	r1, #0
				state_copy.payload++;
    e02e:	9b04      	ldr	r3, [sp, #16]
				value = ZCBOR_LARGE_ELEM_COUNT;
    e030:	2501      	movs	r5, #1
				state_copy.payload++;
    e032:	3301      	adds	r3, #1
				value = ZCBOR_LARGE_ELEM_COUNT;
    e034:	e9cd 0102 	strd	r0, r1, [sp, #8]
				state_copy.payload++;
    e038:	9304      	str	r3, [sp, #16]
				value = ZCBOR_LARGE_ELEM_COUNT;
    e03a:	e7e4      	b.n	e006 <zcbor_any_skip+0xbe>
	switch (major_type) {
    e03c:	2200      	movs	r2, #0
    e03e:	4615      	mov	r5, r2
    e040:	e7e1      	b.n	e006 <zcbor_any_skip+0xbe>
				if (!zcbor_any_skip(&state_copy, NULL)) {
    e042:	a804      	add	r0, sp, #16
    e044:	f7ff ff80 	bl	df48 <zcbor_any_skip>
    e048:	2800      	cmp	r0, #0
    e04a:	d1e0      	bne.n	e00e <zcbor_any_skip+0xc6>
    e04c:	e7d2      	b.n	dff4 <zcbor_any_skip+0xac>
	switch (major_type) {
    e04e:	2d04      	cmp	r5, #4
    e050:	463a      	mov	r2, r7
    e052:	d0e9      	beq.n	e028 <zcbor_any_skip+0xe0>
    e054:	2501      	movs	r5, #1
    e056:	e006      	b.n	e066 <zcbor_any_skip+0x11e>
    e058:	2d04      	cmp	r5, #4
    e05a:	d0ef      	beq.n	e03c <zcbor_any_skip+0xf4>
    e05c:	d99b      	bls.n	df96 <zcbor_any_skip+0x4e>
    e05e:	2d05      	cmp	r5, #5
    e060:	d1a7      	bne.n	dfb2 <zcbor_any_skip+0x6a>
    e062:	2200      	movs	r2, #0
    e064:	4615      	mov	r5, r2
			ZCBOR_ERR_IF(value > (SIZE_MAX / 2), ZCBOR_ERR_INT_SIZE);
    e066:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    e06a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e06e:	f171 0000 	sbcs.w	r0, r1, #0
    e072:	d3c3      	bcc.n	dffc <zcbor_any_skip+0xb4>
    e074:	2105      	movs	r1, #5
    e076:	e7ac      	b.n	dfd2 <zcbor_any_skip+0x8a>

0000e078 <encode_header_byte>:
{
    e078:	b510      	push	{r4, lr}
	ZCBOR_CHECK_PAYLOAD();
    e07a:	6803      	ldr	r3, [r0, #0]
    e07c:	68c4      	ldr	r4, [r0, #12]
    e07e:	42a3      	cmp	r3, r4
    e080:	d305      	bcc.n	e08e <encode_header_byte+0x16>
    e082:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    e084:	b10b      	cbz	r3, e08a <encode_header_byte+0x12>
			state->constant_state->error = err;
    e086:	2208      	movs	r2, #8
    e088:	60da      	str	r2, [r3, #12]
    e08a:	2000      	movs	r0, #0
}
    e08c:	bd10      	pop	{r4, pc}
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    e08e:	f002 021f 	and.w	r2, r2, #31
    e092:	1c5c      	adds	r4, r3, #1
    e094:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
    e098:	6004      	str	r4, [r0, #0]
	return true;
    e09a:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    e09c:	7019      	strb	r1, [r3, #0]
	return true;
    e09e:	e7f5      	b.n	e08c <encode_header_byte+0x14>

0000e0a0 <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, size_t max_result_len)
{
    e0a0:	b570      	push	{r4, r5, r6, lr}
    e0a2:	4605      	mov	r5, r0
    e0a4:	460e      	mov	r6, r1
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	size_t result_len = get_result_len(input, max_result_len);
    e0a6:	4610      	mov	r0, r2
    e0a8:	4619      	mov	r1, r3
{
    e0aa:	4614      	mov	r4, r2
	size_t result_len = get_result_len(input, max_result_len);
    e0ac:	f7fa ff52 	bl	8f54 <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
    e0b0:	4622      	mov	r2, r4
	size_t result_len = get_result_len(input, max_result_len);
    e0b2:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
    e0b4:	4631      	mov	r1, r6
    e0b6:	4628      	mov	r0, r5
}
    e0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
    e0bc:	f7fa bf60 	b.w	8f80 <value_encode_len>

0000e0c0 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    e0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ZCBOR_CHECK_PAYLOAD(); /* To make the size_t cast below safe. */
    e0c4:	6806      	ldr	r6, [r0, #0]
    e0c6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
{
    e0ca:	4604      	mov	r4, r0
	ZCBOR_CHECK_PAYLOAD(); /* To make the size_t cast below safe. */
    e0cc:	4556      	cmp	r6, sl
{
    e0ce:	460d      	mov	r5, r1
    e0d0:	4691      	mov	r9, r2
	ZCBOR_CHECK_PAYLOAD(); /* To make the size_t cast below safe. */
    e0d2:	d307      	bcc.n	e0e4 <str_encode+0x24>
	if (input->len > (size_t)(state->payload_end - state->payload)) {
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    e0d4:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    e0d6:	b10b      	cbz	r3, e0dc <str_encode+0x1c>
			state->constant_state->error = err;
    e0d8:	2208      	movs	r2, #8
    e0da:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD(); /* To make the size_t cast below safe. */
    e0dc:	2600      	movs	r6, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    e0de:	4630      	mov	r0, r6
    e0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->len > (size_t)(state->payload_end - state->payload)) {
    e0e4:	f8d1 8004 	ldr.w	r8, [r1, #4]
    e0e8:	ebaa 0306 	sub.w	r3, sl, r6
    e0ec:	4598      	cmp	r8, r3
    e0ee:	d8f1      	bhi.n	e0d4 <str_encode+0x14>
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    e0f0:	460f      	mov	r7, r1
    e0f2:	f857 3b04 	ldr.w	r3, [r7], #4
    e0f6:	b14b      	cbz	r3, e10c <str_encode+0x4c>
    e0f8:	2104      	movs	r1, #4
    e0fa:	4638      	mov	r0, r7
    e0fc:	f7fa ff2a 	bl	8f54 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    e100:	f108 0801 	add.w	r8, r8, #1
    e104:	4446      	add	r6, r8
    e106:	4406      	add	r6, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    e108:	45b2      	cmp	sl, r6
    e10a:	d3e3      	bcc.n	e0d4 <str_encode+0x14>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    e10c:	2304      	movs	r3, #4
    e10e:	463a      	mov	r2, r7
    e110:	4649      	mov	r1, r9
    e112:	4620      	mov	r0, r4
    e114:	f7ff ffc4 	bl	e0a0 <value_encode>
    e118:	4606      	mov	r6, r0
    e11a:	2800      	cmp	r0, #0
    e11c:	d0de      	beq.n	e0dc <str_encode+0x1c>
	if (state->payload_mut != input->value) {
    e11e:	6820      	ldr	r0, [r4, #0]
    e120:	6829      	ldr	r1, [r5, #0]
    e122:	4288      	cmp	r0, r1
    e124:	d002      	beq.n	e12c <str_encode+0x6c>
		memmove(state->payload_mut, input->value, input->len);
    e126:	686a      	ldr	r2, [r5, #4]
    e128:	f7fd fbaa 	bl	b880 <memmove>
	state->payload += input->len;
    e12c:	6823      	ldr	r3, [r4, #0]
    e12e:	686a      	ldr	r2, [r5, #4]
    e130:	4413      	add	r3, r2
    e132:	6023      	str	r3, [r4, #0]
	return true;
    e134:	e7d3      	b.n	e0de <str_encode+0x1e>

0000e136 <zcbor_int_encode>:
	if (int_size > sizeof(int64_t)) {
    e136:	2a08      	cmp	r2, #8
{
    e138:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e13a:	4613      	mov	r3, r2
    e13c:	460c      	mov	r4, r1
	if (int_size > sizeof(int64_t)) {
    e13e:	d907      	bls.n	e150 <zcbor_int_encode+0x1a>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
    e140:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    e142:	b913      	cbnz	r3, e14a <zcbor_int_encode+0x14>
    e144:	2000      	movs	r0, #0
}
    e146:	b002      	add	sp, #8
    e148:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    e14a:	2205      	movs	r2, #5
    e14c:	60da      	str	r2, [r3, #12]
    e14e:	e7f9      	b.n	e144 <zcbor_int_encode+0xe>
	if (input_int8[int_size - 1] < 0) {
    e150:	188e      	adds	r6, r1, r2
    e152:	f916 2c01 	ldrsb.w	r2, [r6, #-1]
    e156:	2a00      	cmp	r2, #0
    e158:	da0f      	bge.n	e17a <zcbor_int_encode+0x44>
    e15a:	460a      	mov	r2, r1
    e15c:	4669      	mov	r1, sp
    e15e:	460c      	mov	r4, r1
		for (unsigned int i = 0; i < int_size; i++) {
    e160:	42b2      	cmp	r2, r6
    e162:	d104      	bne.n	e16e <zcbor_int_encode+0x38>
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    e164:	2101      	movs	r1, #1
	if (!value_encode(state, major_type, input, int_size)) {
    e166:	4622      	mov	r2, r4
    e168:	f7ff ff9a 	bl	e0a0 <value_encode>
    e16c:	e7eb      	b.n	e146 <zcbor_int_encode+0x10>
			input_buf[i] = (uint8_t)~input_uint8[i];
    e16e:	f812 5b01 	ldrb.w	r5, [r2], #1
    e172:	43ed      	mvns	r5, r5
    e174:	f801 5b01 	strb.w	r5, [r1], #1
		for (unsigned int i = 0; i < int_size; i++) {
    e178:	e7f2      	b.n	e160 <zcbor_int_encode+0x2a>
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    e17a:	2100      	movs	r1, #0
    e17c:	e7f3      	b.n	e166 <zcbor_int_encode+0x30>

0000e17e <zcbor_uint_encode>:
{
    e17e:	4613      	mov	r3, r2
	if (!value_encode(state, ZCBOR_MAJOR_TYPE_PINT, input_uint, uint_size)) {
    e180:	460a      	mov	r2, r1
    e182:	2100      	movs	r1, #0
    e184:	f7ff bf8c 	b.w	e0a0 <value_encode>

0000e188 <zcbor_int32_put>:
{
    e188:	b507      	push	{r0, r1, r2, lr}
	return zcbor_int_encode(state, &input, sizeof(input));
    e18a:	2204      	movs	r2, #4
{
    e18c:	9101      	str	r1, [sp, #4]
	return zcbor_int_encode(state, &input, sizeof(input));
    e18e:	eb0d 0102 	add.w	r1, sp, r2
    e192:	f7ff ffd0 	bl	e136 <zcbor_int_encode>
}
    e196:	b003      	add	sp, #12
    e198:	f85d fb04 	ldr.w	pc, [sp], #4

0000e19c <zcbor_uint32_put>:
{
    e19c:	b507      	push	{r0, r1, r2, lr}
	return zcbor_uint_encode(state, &input, sizeof(input));
    e19e:	2204      	movs	r2, #4
{
    e1a0:	9101      	str	r1, [sp, #4]
	return zcbor_uint_encode(state, &input, sizeof(input));
    e1a2:	eb0d 0102 	add.w	r1, sp, r2
    e1a6:	f7ff ffea 	bl	e17e <zcbor_uint_encode>
}
    e1aa:	b003      	add	sp, #12
    e1ac:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1b0 <zcbor_bstr_encode>:


bool zcbor_bstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_BSTR);
    e1b0:	2202      	movs	r2, #2
    e1b2:	f7ff bf85 	b.w	e0c0 <str_encode>

0000e1b6 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    e1b6:	2203      	movs	r2, #3
    e1b8:	f7ff bf82 	b.w	e0c0 <str_encode>

0000e1bc <zcbor_list_start_encode>:
	}
	state->elem_count--; /* Because of dummy header. */
#else
	(void)max_num;

	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    e1bc:	221f      	movs	r2, #31
    e1be:	2104      	movs	r1, #4
    e1c0:	f7ff bf5a 	b.w	e078 <encode_header_byte>

0000e1c4 <zcbor_map_start_encode>:
    e1c4:	221f      	movs	r2, #31
    e1c6:	2105      	movs	r1, #5
    e1c8:	f7ff bf56 	b.w	e078 <encode_header_byte>

0000e1cc <zcbor_list_end_encode>:
		state->payload = payload;
	}
#else
	(void)max_num;
	(void)major_type;
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_SIMPLE, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    e1cc:	221f      	movs	r2, #31
    e1ce:	2107      	movs	r1, #7
    e1d0:	f7ff bf52 	b.w	e078 <encode_header_byte>

0000e1d4 <zcbor_map_end_encode>:
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}


bool zcbor_map_end_encode(zcbor_state_t *state, size_t max_num)
    e1d4:	f7ff bffa 	b.w	e1cc <zcbor_list_end_encode>

0000e1d8 <zcbor_new_encode_state>:


void zcbor_new_encode_state(zcbor_state_t *state_array, size_t n_states,
		uint8_t *payload, size_t payload_len, size_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    e1d8:	f7ff bd4c 	b.w	dc74 <zcbor_new_state>

0000e1dc <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
    e1dc:	4770      	bx	lr

0000e1de <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    e1de:	b140      	cbz	r0, e1f2 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    e1e0:	68c3      	ldr	r3, [r0, #12]
    e1e2:	7858      	ldrb	r0, [r3, #1]
    e1e4:	f010 0001 	ands.w	r0, r0, #1
    e1e8:	bf1e      	ittt	ne
    e1ea:	7818      	ldrbne	r0, [r3, #0]
    e1ec:	fab0 f080 	clzne	r0, r0
    e1f0:	0940      	lsrne	r0, r0, #5
}
    e1f2:	4770      	bx	lr

0000e1f4 <arch_system_halt>:
	__asm__ volatile(
    e1f4:	f04f 0220 	mov.w	r2, #32
    e1f8:	f3ef 8311 	mrs	r3, BASEPRI
    e1fc:	f382 8812 	msr	BASEPRI_MAX, r2
    e200:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    e204:	e7fe      	b.n	e204 <arch_system_halt+0x10>

0000e206 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    e206:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    e208:	f7ff fff4 	bl	e1f4 <arch_system_halt>

0000e20c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e20e:	4605      	mov	r5, r0
    e210:	460e      	mov	r6, r1
    e212:	f04f 0320 	mov.w	r3, #32
    e216:	f3ef 8711 	mrs	r7, BASEPRI
    e21a:	f383 8812 	msr	BASEPRI_MAX, r3
    e21e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    e222:	f7fb fd87 	bl	9d34 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    e226:	4631      	mov	r1, r6
    e228:	4604      	mov	r4, r0
    e22a:	4628      	mov	r0, r5
    e22c:	f7ff ffeb 	bl	e206 <k_sys_fatal_error_handler>
	__asm__ volatile(
    e230:	f387 8811 	msr	BASEPRI, r7
    e234:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    e238:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    e23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e23e:	f7f5 bf8f 	b.w	4160 <z_impl_k_thread_abort>

0000e242 <z_early_memset>:
	(void) memset(dst, c, n);
    e242:	f7fd bb3f 	b.w	b8c4 <memset>

0000e246 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    e246:	f7fd bb32 	b.w	b8ae <memcpy>

0000e24a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e24a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    e24e:	4313      	orrs	r3, r2
    e250:	f013 0303 	ands.w	r3, r3, #3
    e254:	d10c      	bne.n	e270 <create_free_list+0x26>
	slab->free_list = NULL;
    e256:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e258:	6881      	ldr	r1, [r0, #8]
    e25a:	4299      	cmp	r1, r3
    e25c:	d801      	bhi.n	e262 <create_free_list+0x18>
	return 0;
    e25e:	2000      	movs	r0, #0
    e260:	4770      	bx	lr
		*(char **)p = slab->free_list;
    e262:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e264:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    e266:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    e268:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    e26a:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    e26c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    e26e:	e7f3      	b.n	e258 <create_free_list+0xe>
		return -EINVAL;
    e270:	f06f 0015 	mvn.w	r0, #21
}
    e274:	4770      	bx	lr

0000e276 <k_mem_slab_init>:
{
    e276:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    e278:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    e27c:	2300      	movs	r3, #0
	slab->buffer = buffer;
    e27e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    e280:	6183      	str	r3, [r0, #24]
{
    e282:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    e284:	f7ff ffe1 	bl	e24a <create_free_list>
	if (rc < 0) {
    e288:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    e28a:	bfa8      	it	ge
    e28c:	e9c4 4400 	strdge	r4, r4, [r4]
}
    e290:	bd10      	pop	{r4, pc}

0000e292 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e294:	4604      	mov	r4, r0
    e296:	460d      	mov	r5, r1
	__asm__ volatile(
    e298:	f04f 0320 	mov.w	r3, #32
    e29c:	f3ef 8611 	mrs	r6, BASEPRI
    e2a0:	f383 8812 	msr	BASEPRI_MAX, r3
    e2a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e2a8:	6947      	ldr	r7, [r0, #20]
    e2aa:	b977      	cbnz	r7, e2ca <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e2ac:	f000 f9c9 	bl	e642 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    e2b0:	b158      	cbz	r0, e2ca <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e2b2:	682a      	ldr	r2, [r5, #0]
    e2b4:	6747      	str	r7, [r0, #116]	; 0x74
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e2b6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    e2b8:	f000 f964 	bl	e584 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e2bc:	4631      	mov	r1, r6
    e2be:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e2c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    e2c6:	f7fb bbe9 	b.w	9a9c <z_reschedule>
	**(char ***) mem = slab->free_list;
    e2ca:	682b      	ldr	r3, [r5, #0]
    e2cc:	6962      	ldr	r2, [r4, #20]
    e2ce:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e2d0:	682b      	ldr	r3, [r5, #0]
    e2d2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e2d4:	69a3      	ldr	r3, [r4, #24]
    e2d6:	3b01      	subs	r3, #1
    e2d8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e2da:	f386 8811 	msr	BASEPRI, r6
    e2de:	f3bf 8f6f 	isb	sy
}
    e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e2e4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e2e4:	f3ef 8005 	mrs	r0, IPSR
}
    e2e8:	3800      	subs	r0, #0
    e2ea:	bf18      	it	ne
    e2ec:	2001      	movne	r0, #1
    e2ee:	4770      	bx	lr

0000e2f0 <z_impl_k_thread_name_set>:
}
    e2f0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    e2f4:	4770      	bx	lr

0000e2f6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    e2f6:	f7fb bbe3 	b.w	9ac0 <z_sched_start>

0000e2fa <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
    e2fa:	b508      	push	{r3, lr}
	__asm__ volatile(
    e2fc:	f04f 0220 	mov.w	r2, #32
    e300:	f3ef 8311 	mrs	r3, BASEPRI
    e304:	f382 8812 	msr	BASEPRI_MAX, r2
    e308:	f3bf 8f6f 	isb	sy
    e30c:	f7f5 fc2e 	bl	3b6c <arch_cpu_idle>
    e310:	e7f4      	b.n	e2fc <idle+0x2>

0000e312 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    e312:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e316:	428b      	cmp	r3, r1
    e318:	d001      	beq.n	e31e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    e31a:	f7fb bb79 	b.w	9a10 <z_set_prio>
}
    e31e:	2000      	movs	r0, #0
    e320:	4770      	bx	lr

0000e322 <z_impl_k_mutex_init>:
{
    e322:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e324:	2000      	movs	r0, #0
    e326:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    e32a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    e32e:	4770      	bx	lr

0000e330 <queue_insert>:
{
    e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e334:	4699      	mov	r9, r3
    e336:	4604      	mov	r4, r0
    e338:	460d      	mov	r5, r1
    e33a:	4690      	mov	r8, r2
    e33c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e340:	f100 0608 	add.w	r6, r0, #8
    e344:	f04f 0220 	mov.w	r2, #32
    e348:	f3ef 8711 	mrs	r7, BASEPRI
    e34c:	f382 8812 	msr	BASEPRI_MAX, r2
    e350:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e354:	b103      	cbz	r3, e358 <queue_insert+0x28>
	return list->tail;
    e356:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e358:	4630      	mov	r0, r6
    e35a:	f000 f972 	bl	e642 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e35e:	b158      	cbz	r0, e378 <queue_insert+0x48>
    e360:	2300      	movs	r3, #0
    e362:	f8c0 8014 	str.w	r8, [r0, #20]
    e366:	6743      	str	r3, [r0, #116]	; 0x74
	z_ready_thread(thread);
    e368:	f000 f90c 	bl	e584 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    e36c:	4630      	mov	r0, r6
    e36e:	4639      	mov	r1, r7
    e370:	f7fb fb94 	bl	9a9c <z_reschedule>
		return 0;
    e374:	2000      	movs	r0, #0
    e376:	e00c      	b.n	e392 <queue_insert+0x62>
	if (alloc) {
    e378:	f1b9 0f00 	cmp.w	r9, #0
    e37c:	d01c      	beq.n	e3b8 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    e37e:	2108      	movs	r1, #8
    e380:	f7fb ff4a 	bl	a218 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e384:	b938      	cbnz	r0, e396 <queue_insert+0x66>
	__asm__ volatile(
    e386:	f387 8811 	msr	BASEPRI, r7
    e38a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e38e:	f06f 000b 	mvn.w	r0, #11
}
    e392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e396:	2201      	movs	r2, #1
		anode->data = data;
    e398:	f8c0 8004 	str.w	r8, [r0, #4]
    e39c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e39e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3a0:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    e3a4:	b965      	cbnz	r5, e3c0 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3a6:	6822      	ldr	r2, [r4, #0]
    e3a8:	430a      	orrs	r2, r1
    e3aa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e3ac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e3ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e3b0:	2a00      	cmp	r2, #0
    e3b2:	d1db      	bne.n	e36c <queue_insert+0x3c>
	list->tail = node;
    e3b4:	6060      	str	r0, [r4, #4]
}
    e3b6:	e7d9      	b.n	e36c <queue_insert+0x3c>
}
    e3b8:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    e3ba:	f8c8 9000 	str.w	r9, [r8]
}
    e3be:	e7ee      	b.n	e39e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e3c0:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e3c2:	2a03      	cmp	r2, #3
    e3c4:	d80b      	bhi.n	e3de <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3c6:	6001      	str	r1, [r0, #0]
	return list->tail;
    e3c8:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e3ca:	b911      	cbnz	r1, e3d2 <queue_insert+0xa2>
	list->head = node;
    e3cc:	e9c4 0000 	strd	r0, r0, [r4]
}
    e3d0:	e7cc      	b.n	e36c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e3d2:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3d4:	f002 0203 	and.w	r2, r2, #3
    e3d8:	4302      	orrs	r2, r0
    e3da:	600a      	str	r2, [r1, #0]
    e3dc:	e7ea      	b.n	e3b4 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e3de:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3e2:	430a      	orrs	r2, r1
    e3e4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e3e6:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e3e8:	f002 0203 	and.w	r2, r2, #3
    e3ec:	ea40 0302 	orr.w	r3, r0, r2
    e3f0:	602b      	str	r3, [r5, #0]
}
    e3f2:	e7bb      	b.n	e36c <queue_insert+0x3c>

0000e3f4 <z_queue_node_peek>:
{
    e3f4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e3f6:	4604      	mov	r4, r0
    e3f8:	b130      	cbz	r0, e408 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e3fa:	6802      	ldr	r2, [r0, #0]
    e3fc:	0793      	lsls	r3, r2, #30
    e3fe:	d003      	beq.n	e408 <z_queue_node_peek+0x14>
		ret = anode->data;
    e400:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e402:	b109      	cbz	r1, e408 <z_queue_node_peek+0x14>
			k_free(anode);
    e404:	f000 f9f9 	bl	e7fa <k_free>
}
    e408:	4620      	mov	r0, r4
    e40a:	bd10      	pop	{r4, pc}

0000e40c <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    e40c:	2301      	movs	r3, #1
{
    e40e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e410:	9300      	str	r3, [sp, #0]
    e412:	2300      	movs	r3, #0
{
    e414:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e416:	4619      	mov	r1, r3
    e418:	f7ff ff8a 	bl	e330 <queue_insert>
}
    e41c:	b003      	add	sp, #12
    e41e:	f85d fb04 	ldr.w	pc, [sp], #4

0000e422 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e422:	b13a      	cbz	r2, e434 <z_impl_k_sem_init+0x12>
    e424:	428a      	cmp	r2, r1
    e426:	d305      	bcc.n	e434 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    e428:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e42c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    e430:	2000      	movs	r0, #0
    e432:	4770      	bx	lr
		return -EINVAL;
    e434:	f06f 0015 	mvn.w	r0, #21
}
    e438:	4770      	bx	lr

0000e43a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    e43a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    e43c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e43e:	408b      	lsls	r3, r1
    e440:	ea22 0303 	bic.w	r3, r2, r3
    e444:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e446:	fa22 f001 	lsr.w	r0, r2, r1
}
    e44a:	f000 0001 	and.w	r0, r0, #1
    e44e:	4770      	bx	lr

0000e450 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e450:	b120      	cbz	r0, e45c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e452:	2200      	movs	r2, #0
    e454:	3080      	adds	r0, #128	; 0x80
    e456:	4611      	mov	r1, r2
    e458:	f000 b94d 	b.w	e6f6 <z_sched_wake>
}
    e45c:	4770      	bx	lr

0000e45e <work_timeout>:
{
    e45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e460:	4604      	mov	r4, r0
	__asm__ volatile(
    e462:	f04f 0320 	mov.w	r3, #32
    e466:	f3ef 8511 	mrs	r5, BASEPRI
    e46a:	f383 8812 	msr	BASEPRI_MAX, r3
    e46e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    e472:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e474:	f1a0 0610 	sub.w	r6, r0, #16
    e478:	2103      	movs	r1, #3
    e47a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    e47c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e47e:	f7ff ffdc 	bl	e43a <flag_test_and_clear>
    e482:	b128      	cbz	r0, e490 <work_timeout+0x32>
		queue = dw->queue;
    e484:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
    e486:	4630      	mov	r0, r6
    e488:	a901      	add	r1, sp, #4
		queue = dw->queue;
    e48a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    e48c:	f7fb f972 	bl	9774 <submit_to_queue_locked>
	__asm__ volatile(
    e490:	f385 8811 	msr	BASEPRI, r5
    e494:	f3bf 8f6f 	isb	sy
}
    e498:	b002      	add	sp, #8
    e49a:	bd70      	pop	{r4, r5, r6, pc}

0000e49c <k_work_init>:
{
    e49c:	b538      	push	{r3, r4, r5, lr}
    e49e:	4604      	mov	r4, r0
    e4a0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e4a2:	2210      	movs	r2, #16
    e4a4:	2100      	movs	r1, #0
    e4a6:	f7fd fa0d 	bl	b8c4 <memset>
    e4aa:	6065      	str	r5, [r4, #4]
}
    e4ac:	bd38      	pop	{r3, r4, r5, pc}

0000e4ae <z_work_submit_to_queue>:
{
    e4ae:	b513      	push	{r0, r1, r4, lr}
    e4b0:	9001      	str	r0, [sp, #4]
    e4b2:	4608      	mov	r0, r1
	__asm__ volatile(
    e4b4:	f04f 0320 	mov.w	r3, #32
    e4b8:	f3ef 8411 	mrs	r4, BASEPRI
    e4bc:	f383 8812 	msr	BASEPRI_MAX, r3
    e4c0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e4c4:	a901      	add	r1, sp, #4
    e4c6:	f7fb f955 	bl	9774 <submit_to_queue_locked>
	__asm__ volatile(
    e4ca:	f384 8811 	msr	BASEPRI, r4
    e4ce:	f3bf 8f6f 	isb	sy
}
    e4d2:	b002      	add	sp, #8
    e4d4:	bd10      	pop	{r4, pc}

0000e4d6 <k_work_submit_to_queue>:
{
    e4d6:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e4d8:	f7ff ffe9 	bl	e4ae <z_work_submit_to_queue>
	if (ret > 0) {
    e4dc:	1e04      	subs	r4, r0, #0
    e4de:	dd09      	ble.n	e4f4 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e4e0:	f04f 0320 	mov.w	r3, #32
    e4e4:	f3ef 8011 	mrs	r0, BASEPRI
    e4e8:	f383 8812 	msr	BASEPRI_MAX, r3
    e4ec:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e4f0:	f000 f8db 	bl	e6aa <z_reschedule_irqlock>
}
    e4f4:	4620      	mov	r0, r4
    e4f6:	bd10      	pop	{r4, pc}

0000e4f8 <k_work_init_delayable>:
{
    e4f8:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    e4fa:	2230      	movs	r2, #48	; 0x30
{
    e4fc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    e4fe:	2100      	movs	r1, #0
{
    e500:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
    e502:	f7fd f9df 	bl	b8c4 <memset>
    e506:	f44f 7380 	mov.w	r3, #256	; 0x100
    e50a:	6065      	str	r5, [r4, #4]
    e50c:	60e3      	str	r3, [r4, #12]
}
    e50e:	bd38      	pop	{r3, r4, r5, pc}

0000e510 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e510:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e514:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e516:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e518:	2300      	movs	r3, #0
	node->prev = NULL;
    e51a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    e51e:	4770      	bx	lr

0000e520 <unpend_thread_no_timeout>:
{
    e520:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e522:	f7ff fff5 	bl	e510 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e526:	7b43      	ldrb	r3, [r0, #13]
    e528:	f023 0302 	bic.w	r3, r3, #2
    e52c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e52e:	2300      	movs	r3, #0
    e530:	6083      	str	r3, [r0, #8]
}
    e532:	bd08      	pop	{r3, pc}

0000e534 <add_to_waitq_locked>:
{
    e534:	b538      	push	{r3, r4, r5, lr}
    e536:	4604      	mov	r4, r0
    e538:	460d      	mov	r5, r1
	unready_thread(thread);
    e53a:	f7fb f9ed 	bl	9918 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e53e:	7b63      	ldrb	r3, [r4, #13]
    e540:	f043 0302 	orr.w	r3, r3, #2
    e544:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e546:	b1e5      	cbz	r5, e582 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e548:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e54a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e54c:	429d      	cmp	r5, r3
    e54e:	d109      	bne.n	e564 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e550:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e552:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e556:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e558:	606c      	str	r4, [r5, #4]
}
    e55a:	e012      	b.n	e582 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e55c:	686a      	ldr	r2, [r5, #4]
    e55e:	429a      	cmp	r2, r3
    e560:	d0f6      	beq.n	e550 <add_to_waitq_locked+0x1c>
    e562:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e564:	2b00      	cmp	r3, #0
    e566:	d0f3      	beq.n	e550 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e568:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e56c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e570:	428a      	cmp	r2, r1
    e572:	d0f3      	beq.n	e55c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e574:	4291      	cmp	r1, r2
    e576:	ddf1      	ble.n	e55c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e578:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e57a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e57e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e580:	605c      	str	r4, [r3, #4]
}
    e582:	bd38      	pop	{r3, r4, r5, pc}

0000e584 <z_ready_thread>:
{
    e584:	b510      	push	{r4, lr}
    e586:	f04f 0320 	mov.w	r3, #32
    e58a:	f3ef 8411 	mrs	r4, BASEPRI
    e58e:	f383 8812 	msr	BASEPRI_MAX, r3
    e592:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e596:	f7fb f9ef 	bl	9978 <ready_thread>
	__asm__ volatile(
    e59a:	f384 8811 	msr	BASEPRI, r4
    e59e:	f3bf 8f6f 	isb	sy
}
    e5a2:	bd10      	pop	{r4, pc}

0000e5a4 <z_unpend_thread_no_timeout>:
{
    e5a4:	b508      	push	{r3, lr}
	__asm__ volatile(
    e5a6:	f04f 0220 	mov.w	r2, #32
    e5aa:	f3ef 8111 	mrs	r1, BASEPRI
    e5ae:	f382 8812 	msr	BASEPRI_MAX, r2
    e5b2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e5b6:	6883      	ldr	r3, [r0, #8]
    e5b8:	b10b      	cbz	r3, e5be <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    e5ba:	f7ff ffb1 	bl	e520 <unpend_thread_no_timeout>
	__asm__ volatile(
    e5be:	f381 8811 	msr	BASEPRI, r1
    e5c2:	f3bf 8f6f 	isb	sy
}
    e5c6:	bd08      	pop	{r3, pc}

0000e5c8 <z_sched_wake_thread>:
{
    e5c8:	b538      	push	{r3, r4, r5, lr}
    e5ca:	4604      	mov	r4, r0
	__asm__ volatile(
    e5cc:	f04f 0320 	mov.w	r3, #32
    e5d0:	f3ef 8511 	mrs	r5, BASEPRI
    e5d4:	f383 8812 	msr	BASEPRI_MAX, r3
    e5d8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e5dc:	7b43      	ldrb	r3, [r0, #13]
    e5de:	f013 0f28 	tst.w	r3, #40	; 0x28
    e5e2:	d10b      	bne.n	e5fc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    e5e4:	6883      	ldr	r3, [r0, #8]
    e5e6:	b10b      	cbz	r3, e5ec <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    e5e8:	f7ff ff9a 	bl	e520 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e5ec:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    e5ee:	b951      	cbnz	r1, e606 <z_sched_wake_thread+0x3e>
    e5f0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    e5f4:	4620      	mov	r0, r4
    e5f6:	7363      	strb	r3, [r4, #13]
    e5f8:	f7fb f9be 	bl	9978 <ready_thread>
	__asm__ volatile(
    e5fc:	f385 8811 	msr	BASEPRI, r5
    e600:	f3bf 8f6f 	isb	sy
}
    e604:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e606:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    e60a:	e7f3      	b.n	e5f4 <z_sched_wake_thread+0x2c>

0000e60c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    e60c:	2101      	movs	r1, #1
    e60e:	3818      	subs	r0, #24
    e610:	f7ff bfda 	b.w	e5c8 <z_sched_wake_thread>

0000e614 <z_unpend1_no_timeout>:
{
    e614:	b508      	push	{r3, lr}
    e616:	4603      	mov	r3, r0
	__asm__ volatile(
    e618:	f04f 0220 	mov.w	r2, #32
    e61c:	f3ef 8111 	mrs	r1, BASEPRI
    e620:	f382 8812 	msr	BASEPRI_MAX, r2
    e624:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e628:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e62a:	4283      	cmp	r3, r0
    e62c:	d007      	beq.n	e63e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e62e:	b108      	cbz	r0, e634 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e630:	f7ff ff76 	bl	e520 <unpend_thread_no_timeout>
	__asm__ volatile(
    e634:	f381 8811 	msr	BASEPRI, r1
    e638:	f3bf 8f6f 	isb	sy
}
    e63c:	bd08      	pop	{r3, pc}
    e63e:	2000      	movs	r0, #0
    e640:	e7f8      	b.n	e634 <z_unpend1_no_timeout+0x20>

0000e642 <z_unpend_first_thread>:
{
    e642:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e644:	f04f 0320 	mov.w	r3, #32
    e648:	f3ef 8511 	mrs	r5, BASEPRI
    e64c:	f383 8812 	msr	BASEPRI_MAX, r3
    e650:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e654:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e656:	42a0      	cmp	r0, r4
    e658:	d00d      	beq.n	e676 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e65a:	b134      	cbz	r4, e66a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e65c:	4620      	mov	r0, r4
    e65e:	f7ff ff5f 	bl	e520 <unpend_thread_no_timeout>
    e662:	f104 0018 	add.w	r0, r4, #24
    e666:	f000 f869 	bl	e73c <z_abort_timeout>
	__asm__ volatile(
    e66a:	f385 8811 	msr	BASEPRI, r5
    e66e:	f3bf 8f6f 	isb	sy
}
    e672:	4620      	mov	r0, r4
    e674:	bd38      	pop	{r3, r4, r5, pc}
    e676:	2400      	movs	r4, #0
    e678:	e7f7      	b.n	e66a <z_unpend_first_thread+0x28>

0000e67a <z_unpend_thread>:
{
    e67a:	4601      	mov	r1, r0
    e67c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e67e:	f04f 0320 	mov.w	r3, #32
    e682:	f3ef 8411 	mrs	r4, BASEPRI
    e686:	f383 8812 	msr	BASEPRI_MAX, r3
    e68a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e68e:	6883      	ldr	r3, [r0, #8]
    e690:	b10b      	cbz	r3, e696 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    e692:	f7ff ff45 	bl	e520 <unpend_thread_no_timeout>
	__asm__ volatile(
    e696:	f384 8811 	msr	BASEPRI, r4
    e69a:	f3bf 8f6f 	isb	sy
}
    e69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6a2:	f101 0018 	add.w	r0, r1, #24
    e6a6:	f000 b849 	b.w	e73c <z_abort_timeout>

0000e6aa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e6aa:	4603      	mov	r3, r0
    e6ac:	b920      	cbnz	r0, e6b8 <z_reschedule_irqlock+0xe>
    e6ae:	f3ef 8205 	mrs	r2, IPSR
    e6b2:	b90a      	cbnz	r2, e6b8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e6b4:	f7f5 bae6 	b.w	3c84 <arch_swap>
    e6b8:	f383 8811 	msr	BASEPRI, r3
    e6bc:	f3bf 8f6f 	isb	sy
}
    e6c0:	4770      	bx	lr

0000e6c2 <z_reschedule_unlocked>:
	__asm__ volatile(
    e6c2:	f04f 0320 	mov.w	r3, #32
    e6c6:	f3ef 8011 	mrs	r0, BASEPRI
    e6ca:	f383 8812 	msr	BASEPRI_MAX, r3
    e6ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e6d2:	f7ff bfea 	b.w	e6aa <z_reschedule_irqlock>

0000e6d6 <z_unpend_all>:
{
    e6d6:	b538      	push	{r3, r4, r5, lr}
    e6d8:	4605      	mov	r5, r0
	int need_sched = 0;
    e6da:	2000      	movs	r0, #0
	return list->head == list;
    e6dc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e6de:	42a5      	cmp	r5, r4
    e6e0:	d000      	beq.n	e6e4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e6e2:	b904      	cbnz	r4, e6e6 <z_unpend_all+0x10>
}
    e6e4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e6e6:	4620      	mov	r0, r4
    e6e8:	f7ff ffc7 	bl	e67a <z_unpend_thread>
		z_ready_thread(thread);
    e6ec:	4620      	mov	r0, r4
    e6ee:	f7ff ff49 	bl	e584 <z_ready_thread>
		need_sched = 1;
    e6f2:	2001      	movs	r0, #1
    e6f4:	e7f2      	b.n	e6dc <z_unpend_all+0x6>

0000e6f6 <z_sched_wake>:
{
    e6f6:	b538      	push	{r3, r4, r5, lr}
    e6f8:	f04f 0320 	mov.w	r3, #32
    e6fc:	f3ef 8511 	mrs	r5, BASEPRI
    e700:	f383 8812 	msr	BASEPRI_MAX, r3
    e704:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e708:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e70a:	42a0      	cmp	r0, r4
    e70c:	d012      	beq.n	e734 <z_sched_wake+0x3e>
		if (thread != NULL) {
    e70e:	b19c      	cbz	r4, e738 <z_sched_wake+0x42>
    e710:	6761      	str	r1, [r4, #116]	; 0x74
	thread->base.swap_data = data;
    e712:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e714:	4620      	mov	r0, r4
    e716:	f7ff ff03 	bl	e520 <unpend_thread_no_timeout>
    e71a:	f104 0018 	add.w	r0, r4, #24
    e71e:	f000 f80d 	bl	e73c <z_abort_timeout>
			ready_thread(thread);
    e722:	4620      	mov	r0, r4
    e724:	f7fb f928 	bl	9978 <ready_thread>
			ret = true;
    e728:	2001      	movs	r0, #1
	__asm__ volatile(
    e72a:	f385 8811 	msr	BASEPRI, r5
    e72e:	f3bf 8f6f 	isb	sy
}
    e732:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e734:	2000      	movs	r0, #0
    e736:	e7f8      	b.n	e72a <z_sched_wake+0x34>
    e738:	4620      	mov	r0, r4
    e73a:	e7f6      	b.n	e72a <z_sched_wake+0x34>

0000e73c <z_abort_timeout>:
{
    e73c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e73e:	f04f 0220 	mov.w	r2, #32
    e742:	f3ef 8411 	mrs	r4, BASEPRI
    e746:	f382 8812 	msr	BASEPRI_MAX, r2
    e74a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e74e:	6803      	ldr	r3, [r0, #0]
    e750:	b13b      	cbz	r3, e762 <z_abort_timeout+0x26>
			remove_timeout(to);
    e752:	f7fb fbab 	bl	9eac <remove_timeout>
			ret = 0;
    e756:	2000      	movs	r0, #0
	__asm__ volatile(
    e758:	f384 8811 	msr	BASEPRI, r4
    e75c:	f3bf 8f6f 	isb	sy
}
    e760:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e762:	f06f 0015 	mvn.w	r0, #21
    e766:	e7f7      	b.n	e758 <z_abort_timeout+0x1c>

0000e768 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e768:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e76a:	f7fb fc99 	bl	a0a0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e76e:	bd08      	pop	{r3, pc}

0000e770 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e770:	f7fb bc96 	b.w	a0a0 <sys_clock_tick_get>

0000e774 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e774:	b108      	cbz	r0, e77a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e776:	f7f3 ba71 	b.w	1c5c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e77a:	4770      	bx	lr

0000e77c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e77c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e780:	bf08      	it	eq
    e782:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e786:	b538      	push	{r3, r4, r5, lr}
    e788:	460c      	mov	r4, r1
    e78a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e78c:	d014      	beq.n	e7b8 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e78e:	4308      	orrs	r0, r1
    e790:	d103      	bne.n	e79a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e796:	f7fb bc83 	b.w	a0a0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e79a:	f06f 0001 	mvn.w	r0, #1
    e79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7a2:	1b40      	subs	r0, r0, r5
    e7a4:	eb63 0101 	sbc.w	r1, r3, r1
    e7a8:	2900      	cmp	r1, #0
    e7aa:	da04      	bge.n	e7b6 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e7ac:	f7fb fc78 	bl	a0a0 <sys_clock_tick_get>
    e7b0:	1940      	adds	r0, r0, r5
    e7b2:	eb41 0104 	adc.w	r1, r1, r4
}
    e7b6:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e7bc:	4601      	mov	r1, r0
    e7be:	e7fa      	b.n	e7b6 <sys_clock_timeout_end_calc+0x3a>

0000e7c0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e7c0:	b510      	push	{r4, lr}
    e7c2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e7c4:	f7ff ffba 	bl	e73c <z_abort_timeout>

	if (inactive) {
    e7c8:	b9b0      	cbnz	r0, e7f8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e7ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e7cc:	b10b      	cbz	r3, e7d2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e7ce:	4620      	mov	r0, r4
    e7d0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e7d2:	f104 0018 	add.w	r0, r4, #24
    e7d6:	f7ff ff1d 	bl	e614 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e7da:	b168      	cbz	r0, e7f8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e7dc:	f7ff fed2 	bl	e584 <z_ready_thread>
	__asm__ volatile(
    e7e0:	f04f 0320 	mov.w	r3, #32
    e7e4:	f3ef 8011 	mrs	r0, BASEPRI
    e7e8:	f383 8812 	msr	BASEPRI_MAX, r3
    e7ec:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f4:	f7ff bf59 	b.w	e6aa <z_reschedule_irqlock>
    e7f8:	bd10      	pop	{r4, pc}

0000e7fa <k_free>:
	if (ptr != NULL) {
    e7fa:	b120      	cbz	r0, e806 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e7fc:	1f01      	subs	r1, r0, #4
    e7fe:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e802:	f000 b857 	b.w	e8b4 <k_heap_free>
}
    e806:	4770      	bx	lr

0000e808 <boot_banner>:
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
    e808:	4770      	bx	lr

0000e80a <k_heap_init>:
{
    e80a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    e80c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e810:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e814:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e816:	f7fc bb2d 	b.w	ae74 <sys_heap_init>

0000e81a <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e81a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e81e:	b085      	sub	sp, #20
    e820:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e824:	4607      	mov	r7, r0
    e826:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e828:	4650      	mov	r0, sl
    e82a:	4621      	mov	r1, r4
{
    e82c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e82e:	f7ff ffa5 	bl	e77c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e832:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e836:	bf08      	it	eq
    e838:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e83c:	4605      	mov	r5, r0
    e83e:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e840:	bf04      	itt	eq
    e842:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    e846:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e84a:	f107 0a14 	add.w	sl, r7, #20
    e84e:	f04f 0320 	mov.w	r3, #32
    e852:	f3ef 8411 	mrs	r4, BASEPRI
    e856:	f383 8812 	msr	BASEPRI_MAX, r3
    e85a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e85e:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e862:	464a      	mov	r2, r9
    e864:	4641      	mov	r1, r8
    e866:	4638      	mov	r0, r7
    e868:	f7fc fa91 	bl	ad8e <sys_heap_aligned_alloc>
    e86c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e86e:	f7fb fc17 	bl	a0a0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e872:	9b03      	ldr	r3, [sp, #12]
    e874:	b13b      	cbz	r3, e886 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e876:	f384 8811 	msr	BASEPRI, r4
    e87a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e87e:	4618      	mov	r0, r3
    e880:	b005      	add	sp, #20
    e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e886:	1a28      	subs	r0, r5, r0
    e888:	eb66 0101 	sbc.w	r1, r6, r1
    e88c:	2801      	cmp	r0, #1
    e88e:	f171 0200 	sbcs.w	r2, r1, #0
    e892:	dbf0      	blt.n	e876 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e894:	e9cd 0100 	strd	r0, r1, [sp]
    e898:	465a      	mov	r2, fp
    e89a:	4621      	mov	r1, r4
    e89c:	4650      	mov	r0, sl
    e89e:	f7fb f89f 	bl	99e0 <z_pend_curr>
	__asm__ volatile(
    e8a2:	f04f 0320 	mov.w	r3, #32
    e8a6:	f3ef 8411 	mrs	r4, BASEPRI
    e8aa:	f383 8812 	msr	BASEPRI_MAX, r3
    e8ae:	f3bf 8f6f 	isb	sy
	return k;
    e8b2:	e7d6      	b.n	e862 <k_heap_aligned_alloc+0x48>

0000e8b4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e8b4:	b538      	push	{r3, r4, r5, lr}
    e8b6:	4604      	mov	r4, r0
    e8b8:	f04f 0320 	mov.w	r3, #32
    e8bc:	f3ef 8511 	mrs	r5, BASEPRI
    e8c0:	f383 8812 	msr	BASEPRI_MAX, r3
    e8c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e8c8:	f7fc fa18 	bl	acfc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e8cc:	f104 000c 	add.w	r0, r4, #12
    e8d0:	f7ff ff01 	bl	e6d6 <z_unpend_all>
    e8d4:	b130      	cbz	r0, e8e4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e8d6:	4629      	mov	r1, r5
    e8d8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e8e0:	f7fb b8dc 	b.w	9a9c <z_reschedule>
	__asm__ volatile(
    e8e4:	f385 8811 	msr	BASEPRI, r5
    e8e8:	f3bf 8f6f 	isb	sy
}
    e8ec:	bd38      	pop	{r3, r4, r5, pc}

0000e8ee <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e8ee:	4770      	bx	lr
